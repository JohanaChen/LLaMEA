{"id": "979df86f-d831-4269-ac82-cda9987798de", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 0, "fitness": 0.09144843562834938, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "9f011908-6c13-47c9-85a0-227750619ce7", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "ef219d45-0377-41a3-8d1d-c0b9ef6d198c", "solution": "import numpy as np\n\nclass RefinedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        def refine_solution(solution, best_solution, f=0.5, cr=0.9):\n            mutated_solution = solution + f * (best_solution - solution)\n            crossover = np.random.rand(self.dim) < cr\n            trial_solution = np.where(crossover, mutated_solution, solution)\n            return trial_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            best_idx = np.argmin(fitness)\n            best_solution = harmony_memory[best_idx]\n\n            for i in range(len(harmony_memory)):\n                harmony_memory[i] = refine_solution(harmony_memory[i], best_solution)\n\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "RefinedHarmonySearch", "description": "Refinement of Harmony Search Algorithm by introducing a differential evolution strategy for improved exploration-exploitation trade-off.", "configspace": "", "generation": 2, "fitness": 0.09144843562834938, "feedback": "The algorithm RefinedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "adc62bf1-6408-41ed-93ae-b6fa32a78f15", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "efc8ceda-4f2b-4826-888e-cc19385d11b7", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.social_weight = 0.5\n        self.cognitive_weight = 0.5\n        self.population_size = 20\n        self.velocity_max = 0.2 * (self.upper_bound - self.lower_bound)\n        self.position = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocity = np.zeros((self.population_size, self.dim))\n        self.personal_best_position = self.position.copy()\n        self.personal_best_fitness = np.array([float('inf')] * self.population_size)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_fitness = float('inf')\n\n    def dynamic_inertia_weight(self, iter_num, max_iter):\n        return self.inertia_weight_max - (iter_num / max_iter) * (self.inertia_weight_max - self.inertia_weight_min)\n\n    def update_velocity(self):\n        inertia_weight = self.dynamic_inertia_weight(iter_num, self.budget)\n        cognitive_component = self.cognitive_weight * np.random.rand() * (self.personal_best_position - self.position)\n        social_component = self.social_weight * np.random.rand() * (self.global_best_position - self.position)\n        self.velocity = inertia_weight * self.velocity + cognitive_component + social_component\n        self.velocity = np.clip(self.velocity, -self.velocity_max, self.velocity_max)\n\n    def __call__(self, func):\n        for iter_num in range(self.budget):\n            fitness = np.array([func(x) for x in self.position])\n\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best_position[i] = self.position[i]\n                \n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best_position = self.position[i]\n\n            self.update_velocity()\n            self.position += self.velocity\n            self.position = np.clip(self.position, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "DynamicPSO", "description": "Utilizing a Particle Swarm Optimization (PSO) algorithm with dynamic inertia weight and adaptive social and cognitive parameters for black box optimization.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'iter_num' is not defined\").", "error": "NameError(\"name 'iter_num' is not defined\")", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {}, "mutation_prompt": null}
{"id": "3648bd2c-69d2-48a7-8d7a-29e2409fe4cb", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "4a015f54-7486-40c4-acc4-3832cde504f9", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "7134154d-e044-4826-8752-cc305f4078f2", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0b326eb6-4b94-4724-882a-205f2eaf1a9d", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "feb9554e-f51e-45bf-841d-d51f2ceea27e", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e1bf5cee-c410-4dff-b584-8e4f735c4a55", "solution": "import numpy as np\n\nclass RefinedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            if np.random.rand() < 0.4:  # Probability-based refinement\n                harmony_memory = update_harmony_memory(harmony_memory, fitness)\n                fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "RefinedHarmonySearch", "description": "An improvement of Harmony Search algorithm using a probability-based strategy for refining solutions in black box optimization problems.", "configspace": "", "generation": 10, "fitness": 0.09144843562834938, "feedback": "The algorithm RefinedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "63c508c6-092c-4fbf-8753-29dcf4c722d1", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c05ec27f-e3ca-44a3-9303-a00a763b3ded", "solution": "import numpy as np\n\nclass RefinedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "RefinedHarmonySearch", "description": "Enhanced Harmony Search Algorithm with Line Refinement for Improved Performance", "configspace": "", "generation": 12, "fitness": 0.09144843562834938, "feedback": "The algorithm RefinedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "ca25426b-1cc0-4ae1-9239-b0bd3802b974", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "984c56af-eaca-454c-add1-290c975646e8", "solution": "import numpy as np\n\nclass DifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.p_crossover = 0.5\n        self.p_mutation = 0.1\n        self.f_scale = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            new_harmony_memory = np.copy(harmony_memory)\n            for i in range(self.budget):\n                r = np.random.rand()\n                if r < self.p_crossover:\n                    idxs = np.random.choice(self.budget, 3, replace=False)\n                    differential_vector = new_harmony_memory[idxs[0]] + self.f_scale * (new_harmony_memory[idxs[1]] - new_harmony_memory[idxs[2]])\n                    crossover_mask = np.random.rand(self.dim) < 0.5\n                    new_harmony_memory[i] = np.where(crossover_mask, differential_vector, new_harmony_memory[i])\n                r = np.random.rand()\n                if r < self.p_mutation:\n                    new_harmony_memory[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            return new_harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "DifferentialHarmonySearch", "description": "Introducing Differential Harmony Search algorithm for black box optimization, blending Differential Evolution with Harmony Search to enhance exploration-exploitation trade-off.", "configspace": "", "generation": 14, "fitness": 0.09144843562834938, "feedback": "The algorithm DifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "64af3b41-890a-4adf-9a66-b11b4f3b45c6", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            mutation_prob = 0.4\n            if np.random.rand() < mutation_prob:\n                bandwidth = np.random.uniform(0.001, 0.5)  # Variable Bandwidth Mutation\n                new_solution = np.clip(harmony_memory[worst_idx] + np.random.normal(0, bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                harmony_memory[worst_idx] = new_solution\n            else:\n                new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search with Variable Bandwidth Mutation to explore the search space more effectively.", "configspace": "", "generation": 15, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c67eeb81-2a30-479d-8fad-28b3f5842fcc", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f5f36421-91c8-4589-a89d-68b21402526c", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "139c038d-3079-47f5-9864-4f6452226ca5", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        def differential_evolution(harmony_memory, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = harmony_memory[best_idx]\n            F = 0.5  # Differential weight\n            CR = 0.5  # Crossover rate\n\n            for i in range(self.budget // 10):\n                base_idx = np.random.choice(self.budget)\n                target_idx = np.random.choice(self.budget)\n                while target_idx == base_idx:\n                    target_idx = np.random.choice(self.budget)\n\n                base = harmony_memory[base_idx]\n                target = harmony_memory[target_idx]\n                mutant = base + F * (best_solution - target)\n\n                crossover_mask = np.random.rand(self.dim) < CR\n                trial = np.where(crossover_mask, mutant, harmony_memory[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    harmony_memory[i] = trial\n                    fitness[i] = trial_fitness\n\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        harmony_memory = differential_evolution(harmony_memory, fitness)\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search algorithm by incorporating a differential evolution mutation strategy to improve exploration and exploitation trade-off.", "configspace": "", "generation": 18, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e9c0f481-3083-4aa7-a1e5-e5018fec6012", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b2a4cbf2-a9c5-4873-ba65-7d0bdfeb5237", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "872f3992-9e76-47eb-ad1c-0dd55b29479e", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "23aeb596-29e8-4613-999b-7f5725ae5004", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "656571d1-01ff-4d40-a850-590c369664cd", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "64852b97-8ece-4d7a-9651-5c8db40dba26", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "38269a36-5f5d-47e8-9ef7-5f3b11e94e3f", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8c8733ba-9658-4325-9bbc-88abcee58642", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "aab8d44a-b467-4233-9058-952c325679c8", "solution": "import numpy as np\n\nclass RandomRestartHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "RandomRestartHarmonySearch", "description": "Introducing a Random Restart Harmony Search algorithm with adaptive memory consideration to improve exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": 0.09144843562834938, "feedback": "The algorithm RandomRestartHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "436cce05-c3c2-4dbc-9074-cdd1d3a7a5d9", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c71bc176-7c96-4375-acc7-5ce9511ac157", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "48acd0c8-ee62-4c99-b5ba-ce58d7eff487", "solution": "import numpy as np\n\nclass EvolutionaryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            elite_idx = np.argsort(fitness)[:min(3, len(fitness))]\n            for idx in elite_idx:\n                new_solution = np.clip(harmony_memory[idx] + np.random.normal(0, 1, self.dim), self.lower_bound, self.upper_bound)\n                if func(new_solution) < func(harmony_memory[idx]):\n                    harmony_memory[idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "EvolutionaryHarmonySearch", "description": "Introducing Evolutionary Harmony Search Algorithm combining Harmony Search with Evolution Strategy to improve exploration and exploitation balance.", "configspace": "", "generation": 31, "fitness": 0.09144843562834938, "feedback": "The algorithm EvolutionaryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "db98b928-ce50-41c1-bee6-57e279d09e97", "solution": "import numpy as np\n\nclass DifferentialHarmonySearch:\n    def __init__(self, budget, dim, memory_consideration=0.9, pitch_adjustment=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.memory_consideration = memory_consideration\n        self.pitch_adjustment = pitch_adjustment\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            idx_sorted = np.argsort(fitness)\n            best_idx = idx_sorted[0]\n            better_idx = idx_sorted[1]\n            worst_idx = idx_sorted[-1]\n            new_solution = harmony_memory[best_idx] + self.pitch_adjustment * (harmony_memory[better_idx] - harmony_memory[worst_idx])\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "DifferentialHarmonySearch", "description": "Introducing Differential Harmony Search Algorithm to balance exploration and exploitation through differential variation and harmony memory update.", "configspace": "", "generation": 32, "fitness": 0.09144843562834938, "feedback": "The algorithm DifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "a6cc7368-3e8c-4766-a235-a9ff18e50581", "solution": "# import numpy as np\n\nclass DiverseHarmonySearch(HarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def update_harmony_memory(self, harmony_memory, fitness):\n        best_idx = np.argmin(fitness)\n        new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        harmony_memory[best_idx] = new_solution\n        return harmony_memory", "name": "DiverseHarmonySearch", "description": "Enhancing Harmony Search with a diverse memory update strategy for improved exploration and exploitation balance.", "configspace": "", "generation": 33, "fitness": 0.09144843562834938, "feedback": "The algorithm DiverseHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "a97bf2d7-1be8-4413-b7b8-43732c6377df", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d815ce7a-7c56-4cb4-9880-d5b5dd07f35a", "solution": "import numpy as np\n\nclass QuantumHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        def apply_quantum_inspired_operators(harmony_memory):\n            for i in range(len(harmony_memory)):\n                for j in range(len(harmony_memory[i])):\n                    if np.random.rand() < 0.4:\n                        harmony_memory[i][j] = np.random.uniform(self.lower_bound, self.upper_bound)\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            harmony_memory = apply_quantum_inspired_operators(harmony_memory)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "QuantumHarmonySearch", "description": "A novel metaheuristic algorithm called Quantum Harmony Search Algorithm that combines Harmony Search with quantum-inspired strategies to optimize black-box functions efficiently.", "configspace": "", "generation": 35, "fitness": 0.09144843562834938, "feedback": "The algorithm QuantumHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "4e10ec5e-4e80-4b98-bd3c-3418119a25aa", "solution": "import numpy as np\n\nclass HybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        def apply_differential_evolution(harmony_memory, fitness):\n            crossover_rate = 0.9\n            scale_factor = 0.5\n            for i in range(self.budget // 10):\n                idxs = np.random.choice(self.budget, 3, replace=False)\n                mutant = harmony_memory[idxs[0]] + scale_factor * (harmony_memory[idxs[1]] - harmony_memory[idxs[2]])\n                trial = np.where(np.random.rand(self.dim) < crossover_rate, mutant, harmony_memory[i])\n                if func(trial) < fitness[i]:\n                    harmony_memory[i] = trial\n                    fitness[i] = func(trial)\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        harmony_memory = apply_differential_evolution(harmony_memory, fitness)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HybridHarmonySearch", "description": "Enhancing Harmony Search algorithm through a hybridization of Differential Evolution strategy to improve solution quality and convergence speed.", "configspace": "", "generation": 36, "fitness": 0.09144843562834938, "feedback": "The algorithm HybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f4052b17-5da1-4e4c-9c58-144106ae3f4a", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            if np.random.rand() < 0.4:\n                harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search Algorithm with Random Restart - Improving the Harmony Search algorithm by incorporating random restarts to diversify the search process and escape local optima.", "configspace": "", "generation": 37, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b6794b0a-8213-4f38-a8a1-fca3d8b36d5a", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "1b88de58-df1d-4493-965c-eb9725b9c8ef", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "a64dbdc0-07ed-4d43-b229-6a4a12fa7823", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "5d7939e8-b10f-4daf-8856-135c68975c95", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b40a582d-cfa8-4007-b76a-8a8d1ffe0eea", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.cr = 0.5\n        self.f = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(population):\n            return np.array([func(solution) for solution in population])\n\n        def differential_evolution(population, fitness):\n            for i in range(self.budget):\n                target = population[i]\n                indices = list(range(self.budget))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.f * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, target)\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = get_fitness(population)\n        \n        for _ in range(self.budget // 10):\n            population, fitness = differential_evolution(population, fitness)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDE", "description": "Utilizing a Hybrid Differential Evolution algorithm with a local search strategy to enhance solution quality in a black box optimization scenario.", "configspace": "", "generation": 42, "fitness": 0.09144843562834938, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "cedc9606-22ff-48eb-b973-c3ad604fcb13", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "bfa51fef-f577-49f7-aacf-58038b3caf7a", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0a762413-6521-4916-8f77-8ef6002b020d", "solution": "import numpy as np\n\nclass FlockingAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            new_population = np.copy(population)\n            for i in range(self.budget):\n                neighbors_idx = np.random.choice(np.delete(np.arange(self.budget), i), 3, replace=False)\n                average_neighbor = np.mean(population[neighbors_idx], axis=0)\n                new_solution = population[i] + np.random.uniform(-1, 1) * (average_neighbor - population[i])\n                new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                new_fitness = func(new_solution)\n                if new_fitness < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = new_fitness\n            return population\n\n        population = initialize_population()\n        fitness = get_fitness(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population = update_population(population, fitness)\n            fitness = get_fitness(population)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "FlockingAlgorithm", "description": "A novel metaheuristic algorithm inspired by the behavior of flocking birds, where each solution moves towards the average position of its neighbors to find optimal solutions.", "configspace": "", "generation": 45, "fitness": 0.09144843562834938, "feedback": "The algorithm FlockingAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "7f9d7e78-7b1d-484a-842f-6a1c756b11a6", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6dcf988f-c693-4149-afaa-c3f75c098de9", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            for i in range(len(harmony_memory)):\n                if np.random.rand() < 0.4:\n                    new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    harmony_memory[i] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "DynamicHarmonySearch", "description": "Introducing Dynamic Harmony Search with Adaptive Memory Updating for Enhanced Global Optimization", "configspace": "", "generation": 47, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "74d2d03b-78d4-491e-a8d2-281474500eec", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hm_accept_rate = 0.7\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            harmony_accept = np.random.binomial(1, self.hm_accept_rate, self.dim)\n            new_solution = harmony_memory[worst_idx] + harmony_accept * np.random.normal(0, 1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "DynamicHarmonySearch", "description": "Introducing Dynamic Harmony Search algorithm with adaptive pitch adjustment and memory consideration for enhanced exploration and exploitation in optimization tasks.", "configspace": "", "generation": 48, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6a8ba98b-bcde-424f-a76c-7cb415568b66", "solution": "import numpy as np\n\nclass QuantumHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            new_harmony_memory = np.zeros_like(harmony_memory)\n            for i in range(self.budget):\n                selected_indices = np.random.choice(self.budget, 2, replace=False)\n                selected_solutions = harmony_memory[selected_indices]\n                updated_solution = np.mean(selected_solutions, axis=0)\n                mutation_factor = np.random.uniform(0.01, 0.1)\n                mutation_mask = np.random.choice([0, 1], size=self.dim, p=[0.6, 0.4])\n                mutation = np.random.uniform(-1, 1, self.dim) * mutation_factor * mutation_mask\n                new_harmony = np.clip(updated_solution + mutation, self.lower_bound, self.upper_bound)\n                new_harmony_memory[i] = new_harmony\n            return new_harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "QuantumHarmonySearch", "description": "A novel algorithm named Quantum Harmony Search Algorithm (QHSA) that incorporates quantum-inspired concepts to enhance solution exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 49, "fitness": 0.09144843562834938, "feedback": "The algorithm QuantumHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e3a37b16-940e-4150-8c4a-8c07e1e13488", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6a32f604-1a00-441f-8cf4-9f7564cf1e22", "solution": "import numpy as np\n\nclass ImprovedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        def differential_evolution(harmony_memory, fitness, f=0.5, cr=0.9):\n            best_idx = np.argmin(fitness)\n            best_solution = harmony_memory[best_idx]\n            for i in range(self.budget // 10):\n                idxs = np.random.choice(len(harmony_memory), 3, replace=False)\n                a, b, c = harmony_memory[idxs]\n                mutant = np.clip(a + f * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, harmony_memory[i])\n                if func(trial) < func(harmony_memory[i]):\n                    harmony_memory[i] = trial\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n            harmony_memory = differential_evolution(harmony_memory, fitness)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "ImprovedHarmonySearch", "description": "Enhancing Harmony Search Algorithm with Differential Evolution strategy for improved search and convergence.", "configspace": "", "generation": 51, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "526cbac4-0c11-431f-821a-1acc8e714dee", "solution": "import numpy as np\n\nclass EvoHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            population_size = len(harmony_memory)\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            for idx in range(population_size):\n                if np.random.rand() < 0.4:  # Probability to change individual lines\n                    harmony_memory[idx] += np.random.normal(0, 0.1, self.dim)  # Introducing mutation\n                    harmony_memory[idx] = np.clip(harmony_memory[idx], self.lower_bound, self.upper_bound)\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "EvoHarmonySearch", "description": "Introducing Evolutionary Harmony Search (EvoHarmony) combining harmony search with evolution strategies to enhance population diversity and exploration.", "configspace": "", "generation": 52, "fitness": 0.09144843562834938, "feedback": "The algorithm EvoHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "7b8f92b0-92c4-4a6b-b43d-b5bfec6fdf61", "solution": "import numpy as np\n\nclass EvolutionaryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        def evolutionary_step(harmony_memory, fitness):\n            best_idx = np.argmin(fitness)\n            population_mean = np.mean(harmony_memory, axis=0)\n            offspring = np.random.normal(population_mean, np.std(harmony_memory), (self.budget, self.dim))\n            offspring_fitness = get_fitness(offspring)\n\n            replace_idx = np.argmax(offspring_fitness)\n            harmony_memory[replace_idx] = offspring[replace_idx]\n\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n            harmony_memory = evolutionary_step(harmony_memory, fitness)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "EvolutionaryHarmonySearch", "description": "A novel optimization algorithm named Evolutionary Harmony Search, combining evolutionary strategies with harmony search to improve solution quality.", "configspace": "", "generation": 53, "fitness": 0.09144843562834938, "feedback": "The algorithm EvolutionaryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b39fcb91-81c0-4855-8308-86b620c56db3", "solution": "import numpy as np\n\nclass HybridFireflyHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            new_population = np.copy(population)\n            for i in range(self.budget):\n                for j in range(self.dim):\n                    if np.random.rand() < 0.4:\n                        new_population[i][j] = (population[i][j] + np.mean(population[:, j])) / 2\n            return new_population\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population = update_population(population, fitness)\n            fitness = evaluate_population(population)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridFireflyHarmonySearch", "description": "Utilizing a Hybrid Firefly Algorithm with Harmony Search for enhanced exploration and exploitation in optimization tasks.", "configspace": "", "generation": 54, "fitness": 0.09144843562834938, "feedback": "The algorithm HybridFireflyHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c7f86fcc-e8c1-4c67-8d5b-59665d74a8e6", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def get_fitness(harmony_memory):\n            return np.array([func(solution) for solution in harmony_memory])\n\n        def update_harmony_memory(harmony_memory, fitness):\n            worst_idx = np.argmax(fitness)\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            harmony_memory[worst_idx] = new_solution\n            return harmony_memory\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = get_fitness(harmony_memory)\n\n        for _ in range(self.budget - self.budget // 10):\n            harmony_memory = update_harmony_memory(harmony_memory, fitness)\n            fitness = get_fitness(harmony_memory)\n\n        best_idx = np.argmin(fitness)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by musicians' improvisation process to search for optimal solutions by harmonizing different components of solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "5907b283-1c7d-4275-93ef-7c31235cf56a", "solution": "import numpy as np\n\nclass BeeSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_bees = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_bees, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_bees):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.uniform(-1, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "BeeSwarmOptimization", "description": "A novel algorithm inspired by the concept of bee swarm intelligence, where individuals communicate through dances to find optimal solutions collectively.", "configspace": "", "generation": 56, "fitness": 0.1424988775106314, "feedback": "The algorithm BeeSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "979df86f-d831-4269-ac82-cda9987798de", "metadata": {"aucs": [0.30435602349164326, 0.28317542316657585, 0.20070115986908832, 0.41175132948463, 0.19579884894600896, 0.10902929998486688, 0.24293127465079722, 0.1603429997551944, 0.12480500076989776, 9.999999999998899e-05, 0.03188394362830749, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11109543110030229, 9.999999999998899e-05, 9.999999999998899e-05, 0.14130245576401645, 0.13749838638123257, 0.12505123889831515, 0.18121615260221724, 0.1321291851488331, 0.02786194472152126, 0.16686765124443614, 0.11731042174161321, 0.11630140538867528, 0.10363441605451462, 0.13264453983666213, 0.0816558728018828, 0.11608964544868627, 0.09690264962423056, 0.1310094292034122, 0.10352030907653809, 0.07659055585404295, 0.03623270143399093, 0.256685747487731, 0.15332674145740222, 0.16841551082478035, 0.14619736076144163, 0.23812964155283367, 0.09831646604143174, 0.3868381426750298, 0.16380720075696753, 0.10665314099412537, 0.10117099003392871, 0.024192380842487315, 0.10262976438310523, 0.05661708372759133, 0.07897138746183996, 0.035541816432300255, 0.15809778810924324, 0.13669465919298396, 9.999999999998899e-05, 0.2707528515922881, 0.30608788472828885, 0.14869172239369433, 0.13518045206272977, 0.09897640914093586, 0.17586373325896298, 0.09075832958944285, 0.19766059974311168, 0.1783501469707207, 0.1498839425496823, 9.999999999998899e-05, 0.16777106797439478, 0.14151261658413294, 0.1570322767544703, 9.999999999998899e-05, 0.18503759786676588, 0.08738593692808094, 0.21436131620807297, 0.13558496435932998, 0.055697323976667046, 0.11195234352604455, 0.12193129355440158, 0.11231415154029367, 0.13085930651875333, 0.06899991226161872, 0.04827482892741042, 0.1178593886423922, 0.0001420547782278181, 9.999999999998899e-05, 9.999999999998899e-05, 0.04250804270224762, 9.999999999998899e-05, 0.09784592935553138, 9.999999999998899e-05, 9.999999999998899e-05, 0.03594776792679, 0.05413948085035103, 0.04195158485067929, 0.08920947487044939, 0.0758364505468111, 0.022746931085273703, 0.06940275091652204, 0.07680239811775702, 0.19978694428620214, 0.09262364997722539, 9.999999999998899e-05, 0.07383820698995791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07549659925583962, 0.057526776588739614, 0.038650462403207575, 9.999999999998899e-05, 0.07963807349045526, 0.1919873291904618, 0.0022645189718152325, 9.999999999998899e-05, 0.06873175447346491, 0.37367236974749163, 0.25600552642615637, 0.3578193844811436, 0.252719330285896, 0.22049005751426698, 0.1763581276149423, 0.2733606757997783, 0.2915235516496345, 0.28139189919763175, 0.1188224302857932, 0.09437751098235347, 0.07115291174795513, 0.1280874012902916, 0.1196471402730016, 0.10092736972980709, 0.08214908646368402, 0.08643082121591905, 0.13049726967603814, 0.15455623964858356, 0.1640993151010134, 0.23435475938333095, 0.19920782517449853, 0.15598663182364159, 0.19018859987802283, 0.18214660661175153, 0.13939843273080732, 0.22565056536789085, 0.15077319668133027, 0.2084865716231027, 0.1966354488139479, 0.21133699507385095, 0.20887893597755114, 0.4825241316644385, 0.17239060732866784, 0.19316244708274166, 0.1700785389009798, 0.12619023472434476, 0.15790116751358296, 0.2745348682519865, 0.15383919546544222, 0.21489594737515738, 0.25467000751317326, 0.16095296028862371, 0.1634454845860499, 0.14382230911416805, 0.23234240758107894, 0.21950199349469013, 0.20746870405663154, 0.2242296838095914, 0.22508323574537736, 0.2496192843493148, 0.21063306358853784, 0.22613029414774222, 0.22821835255332257, 0.20434038844409863, 0.2349805460712745, 0.21206416160695418, 0.17355899219091298, 0.22257355297083692, 0.18572679526570401, 0.337952829748171, 0.21472764716477022, 0.19087452533711913, 0.17559883258297437, 0.19191539440874628, 0.15851100758246084, 0.1716815234280652, 0.19686310054334222, 0.37674654252253603, 0.16393159047200534, 0.17912998180920803, 0.16653666403645262, 0.5572812650389856, 0.19789633328175138, 0.1580792268787392, 0.20032361086339523, 0.20916087381822335, 0.19772468765675888, 0.10414740152678403, 0.23470639480106414, 0.22041322652311168, 0.19298256058282637, 0.18574733597730808, 0.1852820061609013, 0.18661351085208366, 0.18644810034945203, 0.18903380162220484, 0.18153391927234486, 0.1806456065711296, 0.1817809695640492, 0.09220456246332409, 0.07084741434490238, 0.0736688589557174, 0.07774622200970993, 0.12344280060013624, 0.1266713915586768, 0.09618407183174427, 0.09416148244006617, 0.078214825070551]}, "mutation_prompt": null}
{"id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 57, "fitness": 0.2897854536777337, "feedback": "The algorithm WolfPackOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "5907b283-1c7d-4275-93ef-7c31235cf56a", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "7fb86556-454e-41da-97f7-f45c53b1b08d", "solution": "import numpy as np\n\nclass SocialSpiderOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_spiders = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_spiders, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_spiders):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "SocialSpiderOptimization", "description": "A novel algorithm inspired by the concept of social spider optimization, where individuals mimic the cooperative web-building behavior of social spiders to optimize solutions collectively.", "configspace": "", "generation": 58, "fitness": 0.2897854536777337, "feedback": "The algorithm SocialSpiderOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "9bf78347-7849-4779-a375-ec91e75785d3", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "d61d646d-727d-4052-a6a3-3b591c3787b3", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "e34ec1c2-1b34-4edf-9308-cc64a11619db", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "0c392323-663e-4f4f-83f4-eeae551ed132", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "70b66367-1844-43c6-9d21-2cd892b3970d", "solution": "import numpy as np\n\nclass DynamicWolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    step_size = 1 / (1 + np.exp(-np.log(self.budget) + 5))  # Dynamic step size adaptation\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * step_size * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicWolfPackOptimization", "description": "Modified WolfPackOptimization with enhanced search strategy through a dynamic adaptation of step size and population diversity.", "configspace": "", "generation": 63, "fitness": 0.27642216357819993, "feedback": "The algorithm DynamicWolfPackOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.906210902742065, 0.9193658173602247, 0.9052498190751087, 0.9172433317442966, 0.9077850801958869, 0.9069825071395278, 0.9250654939604832, 0.919023680782613, 0.9117307304408817, 9.999999999998899e-05, 0.8785098208388125, 0.8329422765058812, 0.7078141080080089, 9.999999999998899e-05, 0.8589801352316532, 0.8635508610687039, 0.8622776639360094, 0.8441681386409787, 0.1417009711330911, 0.12300691641634653, 0.13302152059141448, 0.18692182539807423, 0.13904844922018456, 0.17857418204486197, 0.12455603052656783, 0.1510595518814165, 0.8183330702649358, 0.11726587984213144, 0.11823660290705318, 0.1263172778435775, 0.15368363974637855, 0.10051378345288431, 0.08263453552739686, 0.1330620186897835, 0.10990223110373276, 0.11111114987295767, 0.9762725273104774, 0.9851960559134144, 0.974435892698075, 0.9680409624163837, 0.9835702038747034, 0.9799533811351282, 0.9600554360443624, 0.9783354529642099, 0.9706196731767506, 0.5685493767980737, 0.482498832032373, 0.4354409286589893, 0.3461026550274314, 0.4865090898946828, 0.5496753984846617, 0.5756037241951555, 0.08742340176889063, 0.3980651657012785, 0.21685385432354343, 0.1957425892073722, 0.13520355047463906, 0.25695106378487054, 0.19281244986644996, 0.18866076565117595, 0.547876737988868, 0.15253855716832787, 0.1947034957965612, 0.19103701810062534, 0.13337949396502702, 0.1802124147359795, 0.15361802661469814, 0.15860541009020312, 0.24618375706303508, 0.1694152140355647, 0.5416432563216954, 0.16543017076283673, 0.20352451902872903, 0.07695942069388018, 0.1669449391745309, 0.1296134642023793, 0.18480195580160597, 0.17944144887249658, 0.19634923175262953, 9.999999999998899e-05, 0.20872525373049844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004995634775433633, 0.008786970621530443, 9.999999999998899e-05, 0.061147336005004216, 0.04388305033707707, 0.04686457889928919, 0.05327096729884284, 0.07264558341241789, 0.046119920718623475, 0.08499427403305015, 0.0312777700715533, 0.0419621937321788, 0.0769826625066613, 0.05193232701645156, 0.03800059006565648, 0.10674883359965237, 0.0836774756970402, 0.1138593196530614, 0.18995427252126196, 0.07555806854956737, 0.09544301829783419, 0.07677215782899982, 0.15543059518859814, 0.08553353434408928, 0.15765971580556293, 0.03843466484390756, 0.04664644099183368, 0.04597638401288617, 0.08257493170932106, 0.14755951553815705, 0.12734114890566983, 0.45697793686658383, 0.4866528814312747, 0.4787037329835936, 0.5223937674791252, 0.554447982572043, 0.20887814908714797, 0.5566771743306653, 0.47281973164325386, 0.5744250389210606, 0.1178977129559664, 0.1126682369325126, 0.08604585621316052, 0.12792055769339372, 0.05969871325443743, 0.13661951131683958, 0.11572931328794034, 0.11886773811566564, 0.09218629857631822, 0.13964411699343127, 0.16615032174423217, 0.16519274514265636, 0.1513225929919092, 0.20587028795299833, 0.16426238414267225, 0.17641540146873136, 0.22267217685452534, 0.17840943606783655, 0.3635200065202554, 0.30784630214350506, 0.3734050339667081, 0.33381353923221735, 0.19933426850560032, 0.36114833694822346, 0.479562868185209, 0.37055130179064133, 0.3576949152629594, 0.29726018459787196, 0.20029777876590515, 0.2263528724588365, 0.3037498284427711, 0.2683986023715409, 0.25999792766401364, 0.20242489141772246, 0.16443110915488945, 0.23828882135003482, 0.21909529030489494, 0.19084145301310773, 0.207347627680884, 0.19390781631470888, 0.19366228748427727, 0.17945728894461466, 0.20343150156985923, 0.21044958848730266, 0.19882748721577614, 0.22508539463100818, 0.20551428232289048, 0.2537403032105022, 0.2236341203933795, 0.22290616319829826, 0.19618290059632282, 0.24708953690081148, 0.5406916375818644, 0.23267806270310754, 0.1888892359229014, 0.17141741616351014, 0.20148688557483707, 0.23285204277032767, 0.19989683258593016, 0.16518765707494953, 0.2093259509733678, 0.1653406203722716, 0.18733745025232662, 0.3427297977687396, 0.1190133456492094, 0.16903381917997817, 0.2119869803146085, 0.1476214529302291, 0.21274063766776574, 0.22559007712086998, 0.15955440382525554, 0.16318109890316568, 0.1881038061402428, 0.178293991976484, 0.17525172069125206, 0.2050888420732605, 0.19372961381529585, 0.20608242598481852, 0.17426629679015826, 0.19852185520320897, 0.18428286129243, 0.08794628368854085, 0.08799662719993107, 0.08039113037271728, 0.07134408502833034, 0.080837705963541, 0.08847905724707783, 0.0744556692882048, 0.09232021786418265, 0.08207815045037548]}, "mutation_prompt": null}
{"id": "d167bdab-d8ac-4ced-82a5-e2835d7a1f2c", "solution": "import numpy as np\n\nclass GWOPSOHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n        self.num_particles = 20\n        self.wolf_alpha = 2.0\n        self.wolf_beta = 2.0\n        self.particle_c1 = 2.0\n        self.particle_c2 = 2.0\n\n    def __call__(self, func):\n        def initialize_population():\n            wolves = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n            particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n            return wolves, particles\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_wolves(wolves, wolf_fitness, particles, particle_fitness):\n            best_idx = np.argmin(wolf_fitness)\n            best_solution = wolves[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = wolves[i] + np.random.normal(0, 1, self.dim) * (best_solution - wolves[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < wolf_fitness[i]:\n                        wolves[i] = new_solution\n                        wolf_fitness[i] = func(new_solution)\n\n            return wolves, wolf_fitness\n\n        def update_particles(wolves, wolf_fitness, particles, particle_fitness):\n            for i in range(self.num_particles):\n                new_velocity = particles[i] + self.particle_c1 * np.random.random() * (particles[i] - particles[i])\n                new_position = particles[i] + self.particle_c2 * np.random.random() * (wolves[i % self.num_wolves] - particles[i])\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                if func(new_position) < particle_fitness[i]:\n                    particles[i] = new_position\n                    particle_fitness[i] = func(new_position)\n\n            return particles, particle_fitness\n\n        wolves, particles = initialize_population()\n        wolf_fitness = evaluate_population(wolves)\n        particle_fitness = evaluate_population(particles)\n\n        for _ in range(self.budget - self.budget // 10):\n            wolves, wolf_fitness = update_wolves(wolves, wolf_fitness, particles, particle_fitness)\n            particles, particle_fitness = update_particles(wolves, wolf_fitness, particles, particle_fitness)\n\n        best_idx = np.argmin(wolf_fitness)\n        return wolves[best_idx]", "name": "GWOPSOHybridOptimization", "description": "Introducing GWO-PSO Hybrid Optimization, a novel metaheuristic algorithm combining Grey Wolf Optimization and Particle Swarm Optimization for enhanced exploration and exploitation in solving black box optimization problems efficiently.", "configspace": "", "generation": 64, "fitness": 0.22970644214029612, "feedback": "The algorithm GWOPSOHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.734751772435827, 0.7033482366055922, 0.655143855677355, 0.714074508473557, 0.688903894966564, 0.7136863824279961, 0.7233863496484607, 0.7197532318319569, 0.6621331505048358, 0.5283198679751255, 0.5601624121596269, 0.49544150363059203, 0.5062060319050022, 0.5230308572876581, 0.4370293781933495, 0.5087652976535824, 0.556687876160878, 0.4926694053623165, 0.12387182850923328, 0.11403388555098137, 0.15344216428544477, 0.13529643675174863, 0.24344936860565136, 0.1317556442272254, 0.11461029540792333, 0.10970276979146765, 0.14415520417007288, 0.11163315323496958, 0.10484073161536067, 0.0801981268989368, 0.09999862763455891, 0.09504274439435834, 0.08816341559633312, 0.1312652217746807, 0.07832330255435405, 0.10570838729128207, 0.9238279504665022, 0.9766810361916496, 0.9180361288109418, 0.9119962648432681, 0.9469869221940413, 0.9502275325766353, 0.8873251707391705, 0.9268321419039764, 0.9324845658841667, 0.15930975213166187, 0.3302519009095852, 0.24767654153162644, 0.1461300163370628, 0.2606594079217963, 0.17846103364044252, 0.28554064165561843, 0.20045936302942513, 0.19803109578848144, 0.20295941387395788, 0.15541156012153456, 0.19233376300949012, 0.15466517393571355, 0.15084435426398268, 0.30144572043444184, 0.19568046964970875, 0.13586811957387457, 0.21532988236359174, 0.23621624900710347, 0.13369192603696134, 0.21588979450366563, 0.24255974824294757, 0.1325211586551024, 0.13985417043488269, 0.11635420995727486, 0.12837449779153542, 0.14871846820211776, 0.15557418842549575, 0.10715299981620607, 0.12074818365868811, 0.13476768248593596, 0.1419172087816476, 0.14935309452081125, 0.12241425919874349, 0.10786594575335062, 0.12598398751695472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05005171369667838, 0.0601510962762859, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05985361232567232, 0.03988110189668026, 0.09475806462142222, 0.06656039764557298, 0.016653402322470368, 0.05204202755867826, 0.10105977468124105, 0.0785279324619621, 0.06631592170697609, 0.03652686785192216, 9.999999999998899e-05, 0.13266394531978598, 0.08982732561633144, 0.10458756420978732, 0.14556888454701367, 0.06119021669766567, 0.09414099110919905, 0.07282783711897156, 0.043256080801297836, 0.1625316199959489, 0.1553034511929945, 0.12123555122232155, 0.07370707684915201, 0.03351162470355795, 0.069814126399672, 0.1196728983189278, 0.14440714453831427, 0.4334521821571813, 0.4436991448949832, 0.3444332848166376, 0.3967958398694139, 0.4356016629662116, 0.4195437290935816, 0.4251517236262006, 0.390234335370633, 0.3882713892571191, 0.10696219091926618, 0.0877781121339265, 0.07324430195075893, 0.09984818295744768, 0.067327155297765, 0.1468008320780747, 0.08650443203563696, 0.07804974981597568, 0.08112784857273525, 0.14952261529607935, 0.15287884007577468, 0.15941348845393077, 0.22459544999939185, 0.18262452456321598, 0.17241597182018154, 0.19382833419428847, 0.149971291424005, 0.14840829142972356, 0.18150552890317573, 0.31719672820723865, 0.26854522077251763, 0.21660629792282804, 0.20589886154273507, 0.2592453084234183, 0.18159014298439857, 0.344283852064161, 0.3106905541838795, 0.1605089379314939, 0.24858653396609964, 0.24195498816837857, 0.17938679266258428, 0.14614305964236374, 0.19576715649846654, 0.15393867518990123, 0.24586667499918113, 0.13305813223191676, 0.19330874474941762, 0.2177088427915973, 0.19667563642759067, 0.2353694213996279, 0.2072944776048654, 0.18067044914395392, 0.22830552873284582, 0.17933337589268172, 0.1972242828495291, 0.1971077413117417, 0.19537414896067196, 0.18432004316212236, 0.19917149242399834, 0.2011541030999936, 0.2211921941075491, 0.21228376273212757, 0.1843211328555513, 0.19786535632994473, 0.16136939032209086, 0.18187815661641993, 0.19058222632717758, 0.1936322718808533, 0.17450495250068798, 0.14569199597715865, 0.16136763671492171, 0.14929412588877, 0.15695293387749043, 0.40777180274303915, 0.16654902794979776, 0.18385164277314991, 0.14144928632026388, 0.19558700150019304, 0.15222432211414705, 0.11780964700861074, 0.20966402403352458, 0.2021763339469519, 0.2102401173695786, 0.19799826805881182, 0.1962029472919078, 0.18540638500796514, 0.1854589292586486, 0.20095652885300364, 0.1918859400999826, 0.1782765707815197, 0.20467133860846531, 0.08027539613740697, 0.08451168321204972, 0.07138211448584386, 0.07762447963444119, 0.07607276449071376, 0.11531483259737996, 0.08110978538061187, 0.07385604222568942, 0.07322424472087674]}, "mutation_prompt": null}
{"id": "2299f223-6983-4b9f-ab29-0e7539f0bf18", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "f1c9eb62-d0b6-4d30-9d25-570e708df479", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_fireflies = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_fireflies, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_fireflies):\n                attractiveness = np.zeros(self.num_fireflies)\n                for j in range(self.num_fireflies):\n                    if fitness[j] < fitness[i]:\n                        attractiveness[j] = 1 / (1 + np.linalg.norm(population[i] - population[j]))\n\n                new_solution = population[i] + np.random.normal(0, 1, self.dim) * np.sum(attractiveness * (best_solution - population[i]))\n                new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                if func(new_solution) < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "FireflyOptimization", "description": "A novel algorithm inspired by the concept of firefly optimization, where fireflies attract each other based on their brightness to optimize solutions collaboratively.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,) (5,) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,) (5,) ')", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {}, "mutation_prompt": null}
{"id": "540be754-ca36-4cba-a14e-0b72de555d70", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "a330f940-4307-4745-b9b2-b62165923c3e", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "09652a3e-3977-4d01-ae94-114c8b949a08", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "15878df0-d4cf-4c59-a016-96c6413707c2", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "8729deb6-423b-4abc-9e8c-8c352e705d46", "solution": "import numpy as np\n\nclass SocialSpiderOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_spiders = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_spiders, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_spiders):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "SocialSpiderOptimization", "description": "A novel algorithm inspired by the concept of social spider optimization, where individuals mimic the collaborative behavior of social spiders in nature to optimize solutions collectively.", "configspace": "", "generation": 71, "fitness": 0.2897854536777337, "feedback": "The algorithm SocialSpiderOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "330b855c-a6f9-4570-bc9e-79ad12b2dfc3", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "d48eddab-e6bc-4039-ba03-c078f39df283", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "cd369e16-1522-429b-bf4b-e33ada760ccd", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "b3003b05-ee27-4234-b139-07739832c80a", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "5c06c240-7fdc-40f7-874b-7ec45434ad42", "solution": "import numpy as np\n\nclass SocialLearningOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_individuals = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_individuals, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_individuals):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "SocialLearningOptimization", "description": "A novel algorithm inspired by the concept of social learning optimization, where individuals learn from both personal and social experiences to improve solutions.", "configspace": "", "generation": 76, "fitness": 0.2897854536777337, "feedback": "The algorithm SocialLearningOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "e599c4f1-3bdd-4cea-9379-61f0882e5b4b", "solution": "import numpy as np\n\nclass SocialSpiderOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_spiders = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_spiders, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_spiders):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "SocialSpiderOptimization", "description": "A novel algorithm inspired by the concept of social spider optimization, where individuals mimic the collaborative foraging behavior of social spiders to optimize solutions in a dynamic environment.", "configspace": "", "generation": 77, "fitness": 0.2897854536777337, "feedback": "The algorithm SocialSpiderOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "fe878d60-886b-45a7-87a1-7b10ab1dbec9", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "3e064769-e8e4-41cc-83af-b501b61256a0", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "a31a597a-4d8f-4a01-89bc-102c2c42d44b", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "829f1964-c8b9-4431-b330-8346fef49397", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_fireflies = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_fireflies, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_fireflies):\n                for j in range(self.num_fireflies):\n                    if fitness[i] > fitness[j]:\n                        attractiveness = 1 / (1 + np.linalg.norm(population[i] - population[j]))\n                        population[i] += attractiveness * (population[j] - population[i])\n\n                population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                fitness[i] = func(population[i])\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "FireflyOptimization", "description": "An innovative algorithm inspired by the behavior of fireflies to optimize solutions by attracting and moving towards brighter fireflies in the search space.", "configspace": "", "generation": 81, "fitness": 0.05372879391133628, "feedback": "The algorithm FireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.1357464799025958, 0.10627352998337525, 0.13998897910832253, 0.03950597217314311, 0.060501441956172686, 0.02987774776341079, 0.07119653356397315, 0.09401255882298587, 0.07298156662518052, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01650009107992445, 0.023813222558850655, 0.018642384843966076, 0.04560093659775355, 0.012851651769902661, 0.023591467375425945, 0.03892207529511982, 0.007599608742888231, 0.018022578324925598, 0.013975355457449212, 9.999999999998899e-05, 9.999999999998899e-05, 0.042492702405095395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.05885491260658493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061771610702035296, 0.012688260322795242, 9.999999999998899e-05, 0.013527645512571684, 9.999999999998899e-05, 0.136228434437503, 0.10007812094694468, 0.059042111345430026, 0.02158035409774961, 9.999999999998899e-05, 0.01682401199855199, 0.046745546238070035, 0.005066286365258743, 0.10827111664479616, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033139044941984275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07502096488726162, 0.042979992656721144, 0.08605244991174332, 9.999999999998899e-05, 0.012634101388564134, 9.999999999998899e-05, 0.07412291428149087, 0.039225020452660075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1574433027013723, 0.1744757951842797, 0.16928290872895013, 0.09431648225632139, 0.10957305617471447, 0.09580441870675127, 0.1578283362321039, 0.2117928805361926, 0.16705416183722177, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506173987491432, 0.03390349415069527, 0.03719725782243599, 0.0305657719158271, 0.017925718468796203, 0.04189667369647343, 0.07037621471796518, 0.09464881203397091, 0.0857336348212353, 0.10033510664689893, 0.06626756604103212, 0.07216914632160132, 0.09235055660614433, 0.07789212330331652, 0.07935501634181219, 0.11849909171526174, 0.13965264522046306, 0.11178126019334145, 0.11384554566375626, 0.1369171857655087, 0.12975060000936123, 0.11573064203983408, 0.14475902745541191, 0.10488132323266819, 0.05894751701284118, 0.09650291066213723, 0.05495497199552846, 0.05763097672119932, 0.08260938056190847, 0.07359141789825407, 0.06054002862141916, 0.0588079880616208, 0.047545874984542214, 0.12237751908494043, 0.1267897675697668, 0.14231605439428718, 0.11957894564960092, 0.1736783386747507, 0.1521211323956695, 0.12567442767143255, 0.15644277598988443, 0.16307720952528648, 0.1310422565790439, 0.14428095684209563, 0.1438651464460945, 0.1294231201217444, 0.14437395276512055, 0.12859058569175164, 0.10347831300011001, 0.14051344630166696, 9.999999999998899e-05, 0.06506474734872358, 0.1073698482510903, 0.06447915632709811, 0.11220283660480723, 0.1207914665021157, 0.08492744809918318, 0.06088618922663591, 0.0627732137504543, 0.0727870441817684, 0.1257673253490189, 0.0463532592976873, 0.06033898489850176, 0.02401427936489453, 0.06463003256986632, 0.045511073114331335, 0.06549318978606411, 0.04833423182501051, 0.08909179968002867, 0.1329488561008142, 0.12431395408434875, 0.14763022729669195, 0.15782816386365517, 0.12726308552446497, 0.1687546094367317, 0.13726473868019706, 0.14831610616482882, 0.14731006490103193, 0.04133664904621037, 0.05401502464310559, 0.03513025227475208, 0.030682151889877995, 0.03134219855787246, 0.03076781556333097, 0.021984417148480317, 0.031905372076819316, 0.03990879499186417]}, "mutation_prompt": null}
{"id": "06fe52f6-68dc-4e24-8df5-f9c30eaaa634", "solution": "import numpy as np\n\nclass SocialSpiderOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_spiders = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_spiders, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_spiders):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "SocialSpiderOptimization", "description": "A novel algorithm inspired by the concept of social spider optimization, where individuals mimic the collaborative foraging behavior of social spiders to optimize solutions efficiently.", "configspace": "", "generation": 82, "fitness": 0.2897854536777337, "feedback": "The algorithm SocialSpiderOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "21024ea2-a328-4efe-b2ec-3560d1a30aed", "solution": "import numpy as np\n\nclass FireflyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.num_fireflies = 10\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            for i in range(self.num_fireflies):\n                firefly = population[i]\n                for j in range(self.pop_size):\n                    r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                    mutant = population[r1] + self.F * (population[r2] - population[r3])\n                    crossover_mask = np.random.rand(self.dim) < self.CR\n                    trial = np.where(crossover_mask, mutant, firefly)\n\n                    if func(trial) < fitness[i]:\n                        population[i] = trial\n                        fitness[i] = func(trial)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "FireflyDifferentialEvolution", "description": "An evolutionary algorithm combining Differential Evolution and Firefly Algorithm for global exploration and local exploitation, utilizing the attractiveness attraction mechanism with population diversity preservation.", "configspace": "", "generation": 83, "fitness": 0.2169829596124505, "feedback": "The algorithm FireflyDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.5121951363385208, 0.47399468634345243, 0.38363195354244817, 0.42593707128632385, 0.5141162436298599, 0.31561930955834117, 0.40664892649517737, 0.4101768601350473, 0.313253609378242, 0.20172799783015005, 0.1342684842072165, 0.05830445708198151, 0.13584320444717346, 0.07709997468703567, 0.11643495157722827, 0.25714621028219276, 0.19845521261685495, 0.12430881660879056, 0.097527512745328, 0.09887725464326103, 0.0956775230655239, 0.085576820537548, 0.08371134543842995, 0.10394811802301751, 0.10127414813271574, 0.0866935551068464, 0.0891924163496034, 0.10002016879840359, 0.08568539603449377, 0.09763392727721987, 0.08590238562173291, 0.09068664490171596, 0.10214810423974174, 0.0830458029331449, 0.09671871391179121, 0.0919429157650049, 0.9763375835685334, 0.9886396746221718, 0.9868883031885505, 0.9720254430034566, 0.9782907739358175, 0.9684974650683792, 0.9625557462089562, 0.9775849944072295, 0.987425022058846, 0.18265207886576196, 0.17327122803601758, 0.29337642923333374, 0.2283548555429017, 0.13871194756313743, 0.24516827978760558, 0.18429878783672315, 0.11822156507449744, 0.19396235791589833, 0.20567423792508333, 0.3371098769243961, 0.19749153620423443, 0.3458397747105948, 0.6170705188219137, 0.26756215430607966, 0.1704726153012842, 0.21906415186588069, 0.21771813149634345, 0.14423166391729025, 0.09467695626548245, 0.1313006477934252, 0.1282529209767992, 0.1299582598407425, 0.11527178235554603, 0.13728897852791866, 0.12661818228070465, 0.1788771307746041, 0.1512967441281693, 0.12054634721646984, 0.11298353532109173, 0.10631249040635027, 0.13433125976029292, 0.11782125755743178, 0.13236983977812178, 0.11807262147305153, 0.16989147902513868, 0.018472449550858583, 9.999999999998899e-05, 0.002314181212232369, 0.01667696732741375, 9.999999999998899e-05, 0.010709159719433758, 9.999999999998899e-05, 9.999999999998899e-05, 0.039270629583225136, 0.07572699387127901, 0.07743960003522787, 0.07344866385836757, 0.13583149776123882, 0.04449512204420247, 0.16569082506248467, 0.10244021504662537, 0.10065268659027948, 0.16243960710714056, 0.03161003085305314, 0.15824360834745854, 0.0811267349834075, 9.999999999998899e-05, 0.018319146350035176, 9.999999999998899e-05, 0.07069755287269819, 0.05438564113736544, 0.07317123634954237, 0.11579055987430986, 0.18064475308835848, 0.1419112630754118, 0.10355004648624022, 0.1523548604079482, 0.04731055967104858, 0.14689099995462696, 0.0659175436103756, 0.13255488792261627, 0.3760097760744131, 0.41783407847770937, 0.42277980305526575, 0.4136062782929064, 0.4157800890649106, 0.40131652098317505, 0.398393318780466, 0.42349392033168276, 0.43249484675998473, 0.07702850808417028, 0.10811860915516569, 0.10770602367552407, 0.07403259739449985, 0.07984102282484895, 0.08282867037492392, 0.10190227108536232, 0.0750356123408994, 0.0753201495139425, 0.14355531806169586, 0.11586371929878236, 0.12906375592630526, 0.11824486071702123, 0.1804752038705275, 0.13810385833325967, 0.19364453694664296, 0.12844844594252647, 0.1272620138016226, 0.2710228226031218, 0.300548734043919, 0.3081705457406101, 0.32776480482918746, 0.24642139846862254, 0.2553413313101882, 0.2850710966117287, 0.3710933007375289, 0.20480353628609815, 0.2024037178869087, 0.24501426532680048, 0.2552478468199383, 0.25459090548496965, 0.18786591797570162, 0.20553588778316523, 0.2155313274045667, 0.25490999416583204, 0.1899408315004315, 0.19588879094714107, 0.17115273451419777, 0.1708437050502698, 0.1781025248627064, 0.2069109914437146, 0.18087328645563217, 0.192666309486485, 0.1888590139851587, 0.17984669464513703, 0.19969820090950552, 0.17691967832336775, 0.16564587018996313, 0.16989098111055412, 0.1691007167706019, 0.17716234595360836, 0.1743012417323191, 0.17815018996553023, 0.1969191196493827, 0.4796438541955004, 0.477284711449412, 0.22378774043909866, 0.18912663916195382, 0.25853448824940806, 0.5327602393198765, 0.1546502328499515, 0.7319582365763776, 0.47158296065072025, 0.37762088835977825, 0.28321535874063564, 0.5271026357421726, 0.19980925098653812, 0.3041359833839724, 0.1492904506030378, 0.1815400028859715, 0.29890617644490236, 0.303195216515452, 0.17337938327297908, 0.17090475266392857, 0.17393271056477533, 0.18118829000156378, 0.18499314994401284, 0.20401135401340553, 0.19303426147321812, 0.18663896328346374, 0.18658220769655087, 0.056353677385385326, 0.061431480885731804, 0.08508668062113645, 0.08103615466108627, 0.0698270594142203, 0.06643731201443992, 0.07424220895686229, 0.06774224441127297, 0.07447633412937449]}, "mutation_prompt": null}
{"id": "2e5da9b0-5fd0-4340-951f-a279c5b396c3", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "9470ec09-1a09-41a4-9379-123ffc17667a", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "a0a9254a-060b-4b88-8067-043f6441ee08", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_fireflies = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_fireflies, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_fireflies):\n                if i != best_idx:\n                    attractiveness = 1 / (1 + np.linalg.norm(population[i] - best_solution))\n                    new_solution = population[i] + attractiveness * (np.random.uniform(self.lower_bound, self.upper_bound, self.dim) - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "FireflyOptimization", "description": "A novel algorithm inspired by the concept of firefly optimization, where fireflies attract each other based on light intensity to optimize solutions collaboratively.", "configspace": "", "generation": 86, "fitness": 0.11937005592194133, "feedback": "The algorithm FireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.08.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.2556421369713887, 0.22169761877433847, 0.22988735472089972, 0.20887751963689738, 0.2085200417458335, 0.23719592725915362, 0.2570036878608456, 0.21820608366984673, 0.21674977646359006, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07716212917289955, 0.07610381742425198, 0.06941822894906036, 0.07249188188607603, 0.0795559413221627, 0.07174491432534813, 0.07583795597370258, 0.07252018763474066, 0.07171800925951888, 0.06355314075452334, 0.0704736024769167, 0.0587887822301878, 0.07114829983783366, 0.07140891223276269, 0.053045473129012644, 0.06567497328208882, 0.06793629440839288, 0.06345503957828091, 0.05456017646238309, 0.04856820238802706, 0.056688256211243404, 0.05288475189239328, 0.052744875530258306, 0.053130684428308594, 0.05404660821849716, 0.058574648439327914, 0.05064837704862457, 0.14120098047159335, 0.12449503100023318, 0.11205211918027402, 0.11614977595020737, 0.10441560161356278, 0.12038465739692983, 0.1076973450224954, 0.11001456214797223, 0.12425666738282104, 0.20767643787735202, 0.17806580115890325, 0.17939019914360577, 0.16413367316015193, 0.1670305253277634, 0.1754821955377207, 0.17998290487409163, 0.1651342327281633, 0.169880514801101, 0.11997360069389851, 0.047701051511228276, 0.07497267633436644, 0.0637685316958505, 0.04846678176431318, 0.039750921173435594, 0.044710466578158026, 0.055226968713509295, 0.06803656086185494, 0.11644424500307482, 0.07319390572130213, 0.06285487331598905, 0.07762865173516142, 0.09186686265754707, 0.06736266333754282, 0.09790592269211551, 0.0764281061378792, 0.08537768436369952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012729154221095662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12679886559288112, 0.07648075300010859, 0.11714748029404531, 0.07269288194757051, 0.058289530487286134, 0.06493071653728, 0.08677581758609154, 0.09876687246318128, 0.10141704551322694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011884609142024827, 0.02258773710269435, 0.006897455082699011, 0.021898601339891854, 0.00731091902576031, 0.0031259947039575797, 0.010217265477824533, 0.0016350097055561896, 9.999999999998899e-05, 0.28280890460944885, 0.23547009947896635, 0.32402356288362066, 0.24542589452958563, 0.2348544531124691, 0.23684744462794738, 0.25374146143499987, 0.29913939677039425, 0.2607183627531313, 0.049410797819137375, 0.04528368999430399, 0.033624171199814534, 0.09692168322722283, 0.061218140700225354, 0.07122594878828403, 0.07646003584211936, 0.07098102603166612, 0.0731056190923769, 0.18230524135238102, 0.18210133194869527, 0.2067596529751481, 0.16823230851056648, 0.14002842944546556, 0.14964960993103937, 0.14772761718017224, 0.17760262839454166, 0.15556485014887889, 0.18550340396472675, 0.19200687126521332, 0.18210698373035128, 0.22034096878038523, 0.2280459062367769, 0.20383862675171116, 0.17701963487660355, 0.16436118143610368, 0.16382551611243912, 0.14755268048827652, 0.1274612988255387, 0.12768777227201022, 0.17086298951502976, 0.1613326498560349, 0.17999165373078918, 0.13455699258104337, 0.11806125277439916, 0.12426344319402416, 0.21357373001878155, 0.20896420353553102, 0.21113216540704693, 0.2126069103239141, 0.21398610276826402, 0.19942448458590611, 0.20843653104126414, 0.21028197806133553, 0.2165697316967008, 0.16796220794129402, 0.16283039849103387, 0.17322377561666924, 0.17353960034561822, 0.17394435829555677, 0.17317655426037382, 0.17094630410316802, 0.16920014194198318, 0.18197339371587828, 0.17253174830033657, 0.20375250842740844, 0.21071936653304102, 0.2960908223180243, 0.149983698672305, 0.14984049408171873, 0.1616046634173286, 0.29054122549718986, 0.21841030904002123, 0.27605361704457787, 0.24820651406515148, 0.2795514787980744, 0.17352768315681877, 0.21067235468922696, 0.1590892670827848, 0.1989418740403266, 0.16688175081041134, 0.20693542614031912, 0.1816591518819345, 0.19067684038110333, 0.1810930218249438, 0.1978282335443825, 0.19896799697989076, 0.17845407827131965, 0.18473305861917766, 0.1831001061929899, 0.18015029881044942, 0.0850054346339606, 0.08330340133776104, 0.08410940910908138, 0.09611266736462454, 0.0716487391224846, 0.08949445944918444, 0.08778124704363277, 0.08312889434955395, 0.09046075689474475]}, "mutation_prompt": null}
{"id": "3e232b11-437f-44ea-8cff-a215deb80056", "solution": "import numpy as np\n\nclass SocialSpiderOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_spiders = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_spiders, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_spiders):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "SocialSpiderOptimization", "description": "A novel algorithm inspired by the concept of social spider optimization, where individuals imitate the cooperative hunting behavior of social spiders to optimize solutions collectively.", "configspace": "", "generation": 87, "fitness": 0.2897854536777337, "feedback": "The algorithm SocialSpiderOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "83d92962-2b27-4011-8056-284f46ff1196", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "fde29c59-4a62-45e9-b741-487dcfd3a9b6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                vel1 = self.w * population[i] + self.c1 * r1 * (population[np.random.randint(self.num_particles)] - population[i])\n                vel2 = self.w * population[i] + self.c2 * r2 * (population[np.random.randint(self.num_particles)] - population[i])\n                u = population[i] + self.F * (vel1 - vel2)\n                new_solution = np.clip(u, self.lower_bound, self.upper_bound)\n                if func(new_solution) < fitness[i]:\n                    population[i] = new_solution\n                    fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]\n\nhybrid_pso_de = HybridPSODE(budget=1000, dim=10)  # Example usage", "name": "HybridPSODE", "description": "Utilizing a hybrid approach combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 89, "fitness": 0.280630784518239, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.8170521580959138, 0.7980038178193796, 0.7960320135174213, 0.7984961103217271, 0.7927723368996495, 0.7812343561761954, 0.8033078236109321, 0.7977085106806437, 0.7817736606005514, 0.6393424897398504, 0.658945662481853, 0.5930892540731381, 0.6409021598836208, 0.6497975204094519, 0.620732757137727, 0.6348076813604061, 0.6140040982064644, 0.5868521266208779, 0.11569601378637195, 0.1082562699497075, 0.10622336287835965, 0.10380261172420668, 0.10322206777107878, 0.10991788153874493, 0.12217796825060556, 0.10863599784683209, 0.11371548617280858, 0.08839063623268972, 0.08048502284118697, 0.09130230808125162, 0.09640243284335825, 0.0945114543563772, 0.0955861995081736, 0.08662432224754735, 0.09686898211509887, 0.09082100091915124, 0.9254853145782924, 0.8930650824039957, 0.9519748563838774, 0.9112687684570571, 0.9341970745989913, 0.9519011440450108, 0.8879961299715801, 0.9049784740193962, 0.9196416595827165, 0.4535372504571752, 0.43980118140927205, 0.452080786711052, 0.48339346238913317, 0.4527524218007998, 0.450174880167023, 0.46668994784202955, 0.47858203814578915, 0.45978625021262143, 0.6296143301363546, 0.6105591991610914, 0.6165605149896238, 0.6752695493720726, 0.7896742583426075, 0.701860008992093, 0.497194410345568, 0.4358941725970291, 0.6990432710854495, 0.14717603633965248, 0.18418606157321893, 0.17974824476087614, 0.18328515419782498, 0.17828519357246464, 0.188169132049542, 0.18332938932219567, 0.17829401511357323, 0.1871874835210604, 0.1819121220917942, 0.19107326128019608, 0.1732383099497472, 0.17637965964590008, 0.20175796165888105, 0.1506705259786908, 0.18430793909416177, 0.19872268910817747, 0.14983068569714508, 0.0028367076975175376, 9.999999999998899e-05, 0.0004153620444414807, 9.999999999998899e-05, 0.08032976670525915, 9.999999999998899e-05, 0.0053378211783634555, 0.008244738051318534, 0.0034487996607109883, 0.1579410617544703, 0.06227025254646357, 0.07239021763407616, 0.06760577324204964, 0.07184117714086258, 0.06463507978513139, 0.08279080900741431, 0.04965168316552404, 0.0759234369202999, 9.999999999998899e-05, 0.02208050798235328, 0.00032603167743472383, 0.026944131729255916, 0.04684733783364259, 0.04237252642522271, 0.0022735325734538625, 0.01760111902684025, 0.05929106871163736, 0.12845705578027589, 0.17110819978083003, 0.14582998888482634, 0.13522743868181186, 0.13406573725431203, 0.1313538124678102, 0.11780797445549962, 0.13152001609236064, 0.14325518242521773, 0.49403540669091983, 0.49327075365197537, 0.4973971347699767, 0.5325009708776336, 0.5120545643775074, 0.5235631183958689, 0.5170987413272738, 0.5115177850971513, 0.5234609253325577, 0.1102470919632691, 0.11289110096231814, 0.10735498578858516, 0.10089662043835745, 0.08800071341784166, 0.0969323936514025, 0.11631019612620785, 0.10566305942643228, 0.09118639027091668, 0.12013414815304846, 0.15001737686144412, 0.13211128276145723, 0.14206153271071054, 0.14649133464587671, 0.14438536541281644, 0.16304810076324427, 0.146771277394392, 0.1914838338076238, 0.3128737186261169, 0.291566098713013, 0.3121852969411443, 0.2746996134643803, 0.3101604495643183, 0.30560730994316454, 0.34115163440753127, 0.3360288614326795, 0.28266677660673556, 0.20066019054199524, 0.23054845801073276, 0.19614430093345014, 0.20398463822155632, 0.25669542354426367, 0.23178734952070212, 0.18448127661484126, 0.24436885989093193, 0.2098745060590127, 0.210751551026218, 0.21260981677141666, 0.19773125019493487, 0.19237353263375534, 0.1933800981571202, 0.19054727857003817, 0.19541051173264323, 0.19226213129194114, 0.19879488390932776, 0.1789825813317275, 0.1818594151843813, 0.17848551612647612, 0.18230121796910137, 0.19427373571828543, 0.18033011531899423, 0.18743613718092145, 0.2133812080154487, 0.18013098884062895, 0.3426267342975122, 0.2882463377737037, 0.49143281414075735, 0.3273716093850946, 0.20266503033705519, 0.43668989663279356, 0.23881995623382446, 0.3367296830732339, 0.272778986410406, 0.23523473836846143, 0.20610912296746287, 0.2766278878281797, 0.21925097507768687, 0.2771127500772146, 0.22690384520081142, 0.21575340187759984, 0.2090782113618217, 0.19095152686424166, 0.17709864656857932, 0.1977458425632821, 0.1854270351612738, 0.19604611446039177, 0.1848792095940407, 0.1922734415556736, 0.19605432374185516, 0.1856638016034774, 0.19122268793131758, 0.07770022377806451, 0.08226581348689921, 0.08087756360107234, 0.08038988348078036, 0.07533669662532361, 0.07667295774880767, 0.07302640582174913, 0.07157384936170419, 0.06974930469188034]}, "mutation_prompt": null}
{"id": "d4d0a2d4-aa35-4984-bf69-b40e2184eedb", "solution": "import numpy as np\n\nclass AntColonyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_ants = 10\n\n    def __call__(self, func):\n        def initialize_colony():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_ants, self.dim))\n\n        def evaluate_colony(colony):\n            return np.array([func(solution) for solution in colony])\n\n        def update_colony(colony, pheromones):\n            best_idx = np.argmin(pheromones)\n            best_solution = colony[best_idx]\n\n            for i in range(self.num_ants):\n                if i != best_idx:\n                    new_solution = colony[i] + np.random.normal(0, 1, self.dim) * (best_solution - colony[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < pheromones[i]:\n                        colony[i] = new_solution\n                        pheromones[i] = func(new_solution)\n\n            return colony, pheromones\n\n        colony = initialize_colony()\n        pheromones = evaluate_colony(colony)\n\n        for _ in range(self.budget - self.budget // 10):\n            colony, pheromones = update_colony(colony, pheromones)\n\n        best_idx = np.argmin(pheromones)\n        return colony[best_idx]", "name": "AntColonyOptimization", "description": "An algorithm inspired by the concept of colony optimization, where individuals mimic the foraging behavior of ant colonies to cooperatively optimize solutions.", "configspace": "", "generation": 90, "fitness": 0.2897854536777337, "feedback": "The algorithm AntColonyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "4dc9e9b0-62ff-45fe-a3c9-051d141b5971", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "f2541e52-6c1b-427e-a6c1-758623059c37", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "ce16baa7-1e09-48fb-81b6-fdc38b5f4b4f", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_fireflies = 10\n        self.alpha = 0.2\n        self.beta = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_fireflies, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def attractiveness(distance):\n            return self.alpha * np.exp(-self.beta * distance)\n\n        def update_population(population, fitness):\n            for i in range(self.num_fireflies):\n                for j in range(self.num_fireflies):\n                    if fitness[j] < fitness[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_value = attractiveness(distance)\n                        population[i] += attractiveness_value * (population[j] - population[i])\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "FireflyOptimization", "description": "An innovative algorithm inspired by the concept of firefly optimization, where fireflies collaborate to find the optimal solution by attracting each other based on their brightness.", "configspace": "", "generation": 93, "fitness": 0.038206022072542464, "feedback": "The algorithm FireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.08469340054131202, 0.06432772651221763, 0.09013496638771212, 0.019583725566517884, 0.05267361210777377, 0.0279741956533206, 0.05157998501197414, 0.05456780018035301, 0.06888318735192878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0040533101718081, 0.01467079663371329, 0.0065420555749218234, 0.011068322447620238, 0.0012186513362246743, 9.999999999998899e-05, 0.02250502609760774, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011459888075115998, 9.999999999998899e-05, 0.005670624832022297, 0.02099352605535243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.031275575641395825, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030824800688146192, 0.017464582008139384, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10760977571031838, 0.03775594762470191, 0.027197658936434, 0.012958542022915798, 9.999999999998899e-05, 9.999999999998899e-05, 0.03481018861806473, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0048497549999696465, 9.999999999998899e-05, 0.028498514450208345, 0.016587639279189492, 9.999999999998899e-05, 9.999999999998899e-05, 0.03055113334974957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07840071328182474, 0.1070271971752389, 0.15391142237034128, 0.09430046140888093, 0.08051072568095674, 0.09580441870675127, 0.1240568991094797, 0.09716408355800721, 0.13139100974911888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 9.999999999998899e-05, 0.03437773646844888, 0.00043776124336036837, 9.999999999998899e-05, 0.03256522560287667, 0.0843016493060943, 0.10962558126579713, 0.07235322730730875, 0.11142252761917659, 0.06632915363335634, 0.0813031012917953, 0.07646029773553364, 0.0640386836870841, 0.07726393575557644, 0.11060818692299834, 0.0962505644704219, 0.11397261775711454, 0.11638815900439659, 0.08313086597287589, 0.1142419190235403, 0.12125529223153275, 0.1001363042967901, 0.08767087928131445, 0.05245077058191472, 0.032044563337571885, 0.045438776728365715, 0.058431845467741605, 0.019716365220044607, 0.05970196047302523, 0.06116566004863666, 0.038530072755655564, 0.027980669498364086, 0.12071996972437138, 0.0685506667036494, 0.16412360262930703, 0.14134872482702432, 0.0790596723311855, 0.1496429364429379, 0.13341844709842754, 0.085141452573131, 0.16193555605008492, 9.999999999998899e-05, 9.999999999998899e-05, 0.033077973154390206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0569896683363591, 9.999999999998899e-05, 9.999999999998899e-05, 0.06095578956872394, 0.056143274529988574, 0.05864661780564928, 0.11703335518540114, 0.1207914665021157, 0.061750941843425444, 0.06088618922663591, 0.057316035480995065, 0.05998308966292021, 0.0764564843025104, 0.06801950673170831, 0.021382120667616022, 0.01890482356226819, 0.021600351495484005, 0.04606614866379932, 0.019209202523007507, 0.0158348977852244, 0.045318723093862534, 0.15771493235443812, 0.13979303301310952, 0.18650180196342436, 0.15947118684627315, 0.1542019971267018, 0.1609389069329885, 0.18810292465675937, 0.13784015772213298, 0.1725978623882154, 0.020217201254133177, 0.012290649321279434, 0.036972723373855154, 0.01717597510652047, 0.0058749879062220955, 0.027008310739226382, 0.013710932371509998, 0.0005231948317452328, 0.03270999632393412]}, "mutation_prompt": null}
{"id": "083b3ef2-87ab-4324-b082-b46ca7b6d84c", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "79b97fc5-c2a1-487e-bcdc-3f87fc405469", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "96e68117-76ea-462d-a40b-ed4b06e79564", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 10\n        self.num_individuals = 5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_particles):\n                idxs = np.random.choice(range(self.num_particles), self.num_individuals, replace=False)\n                individuals = population[idxs]\n\n                for j in range(self.num_individuals):\n                    r1 = np.random.uniform(0, 1, self.dim)\n                    r2 = np.random.uniform(0, 1, self.dim)\n                    new_solution = population[i] + self.c1 * r1 * (best_solution - population[i]) + self.c2 * r2 * (individuals[j] - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridPSODE", "description": "A novel algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to enhance global exploration and local exploitation for solving black box optimization problems efficiently.", "configspace": "", "generation": 96, "fitness": 0.2651395543071783, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.27.", "error": "", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9374328587748586, 0.9276317231042156, 0.8823804868440139, 0.9059531303383281, 0.9266197809632456, 0.8962122083442329, 0.8874163543422541, 0.87784924419418, 0.8327918378284047, 0.7921698329949398, 0.044947835002531744, 0.8958189620773144, 0.8963887702389638, 0.7619424951346735, 0.8768043285106458, 0.8812904032175363, 0.8009356077165983, 0.8855198369439605, 0.09351365635329689, 0.0979197198829257, 0.12711286386235987, 0.1459927108099326, 0.11833802257806492, 0.11857062723764689, 0.1473447238162906, 0.162788079558159, 0.13478356914927447, 0.10561246486586806, 0.10600871038616211, 0.13533685457547906, 0.1358038525852271, 0.13863150707957628, 0.10213319119019781, 0.10895748966038532, 0.03244442946901782, 0.07960223751664364, 0.9898961286262816, 0.9754789053714599, 0.996042954743495, 0.9856848337361452, 0.9800271728371068, 0.9707898212526744, 0.9804969133062247, 0.9726264740036678, 0.8345092044084319, 0.24858424780710497, 0.20678856368168685, 0.10775971964791076, 0.1523697398455095, 0.21662843588780933, 0.5356183566934409, 0.4100387650766558, 0.20725610616530643, 0.051083168537897294, 0.21762260275940226, 0.08305806028527529, 0.17188509974101984, 0.21430435766894929, 0.19444933945058895, 0.12060589123568499, 0.15096843574105756, 0.12058532818164336, 0.09745744993403782, 0.15028754665062483, 0.14779987734236033, 0.24421481055749206, 0.15135753889482784, 0.0191407609513371, 0.13103919759283977, 0.1609066368687121, 0.1593722672055834, 0.2133097200676336, 0.18393283931107474, 0.24591077541621453, 0.1578898427383736, 0.20647618574397042, 0.13063588313429642, 0.1398671176461347, 0.16352860157513693, 0.14418925132817384, 0.12947660245942771, 0.006665680555118736, 9.999999999998899e-05, 0.08733676943642021, 9.999999999998899e-05, 0.061950006875612806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07999356826868353, 0.08208395462162787, 0.08053491362378828, 0.1248231992080755, 0.010312760943240185, 0.08817566152740342, 0.18115811944646854, 0.07971392044924464, 0.12292648267313566, 0.09325119766883527, 0.09666300727085164, 0.06664058128370576, 0.23176150125162454, 0.1994628617412766, 0.09801146087156176, 0.10700331304965971, 0.07743682471667512, 0.10059000413600994, 0.10273783641805656, 0.1227746723903489, 0.19081494538004184, 0.039742216566998834, 0.16614257601576843, 0.04060820509799923, 0.11083592387855024, 0.0964799950245393, 0.09569972698518958, 0.5746376091085572, 0.6223250573506957, 0.5420858348428345, 0.43149081048307825, 0.4355791394258476, 0.39954065127301597, 0.5181680416190888, 0.6331259369971647, 0.5727428945215658, 0.10577733228761577, 0.10914377222934657, 0.11276001549986281, 0.12874750025791204, 0.1247061154948329, 0.11954413710312961, 0.061190025940854875, 0.15742471648764444, 0.11106163801300772, 0.1771315245435755, 0.20722914736310682, 0.18841890122421212, 0.21172303604851828, 0.1512066796020799, 0.1762069138418283, 0.17229531251428654, 0.17484841037269494, 0.2103320425309423, 0.3417539784053548, 0.29702333840591344, 0.39210728356199775, 0.2523953374604494, 0.20410465203014294, 0.3579835454508846, 0.23339216288910591, 0.2740615154190995, 0.22971789083659744, 0.23011153415455, 0.1896290520697298, 0.15864768786115802, 0.15877157713073398, 0.14194216494970646, 0.22339249065995748, 0.23020549092370024, 0.17656661583964162, 0.11052935468650071, 0.2060813345613286, 0.18901909488476498, 0.24616116543026523, 0.23062758469910427, 0.20383147219866005, 0.3008742505193899, 0.21717604133200352, 0.2315741551170577, 0.2546422831937579, 0.2101745735192736, 0.1946333624694171, 0.19085119613144108, 0.18737964696570475, 0.19094500368855327, 0.21321354680793647, 0.22801647502430933, 0.1904099666222625, 0.17698905186812952, 0.13920477639456585, 0.18811822684774526, 0.20071530986393704, 0.9498173971086499, 0.19993500750417548, 0.14872252906232475, 0.19953512064561563, 0.11500433547821753, 0.15453824267136274, 0.4239583922730462, 0.16947980309922572, 0.22454164434567592, 0.12929308712881227, 0.3035629095691945, 0.2130000831244433, 0.10888716723423442, 0.10526880439363595, 0.09501667290716231, 0.207166601528324, 0.18437475776694812, 0.1831008954120995, 0.18729904026972333, 0.1921977661542853, 0.17915541405584112, 0.20161011155006814, 0.18911673985965716, 0.18535509248785664, 0.096209793844106, 0.08145714443469554, 0.0904425566294218, 0.11735678706491726, 0.11305248605921947, 0.0858156773854567, 0.11211843422455825, 0.09748088922953502, 0.08797113136129375]}, "mutation_prompt": null}
{"id": "0d9ad09c-33e5-44ea-b1db-2ac662644196", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "4814f0b1-efda-4372-8b49-bb582ad7cd45", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
{"id": "b406ce2a-352c-4efb-a568-922e435401ac", "solution": "import numpy as np\n\nclass WolfPackOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_wolves = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_wolves, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(solution) for solution in population])\n\n        def update_population(population, fitness):\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n            for i in range(self.num_wolves):\n                if i != best_idx:\n                    new_solution = population[i] + np.random.normal(0, 1, self.dim) * (best_solution - population[i])\n                    new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                    if func(new_solution) < fitness[i]:\n                        population[i] = new_solution\n                        fitness[i] = func(new_solution)\n\n            return population, fitness\n\n        population = initialize_population()\n        fitness = evaluate_population(population)\n\n        for _ in range(self.budget - self.budget // 10):\n            population, fitness = update_population(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "WolfPackOptimization", "description": "A novel algorithm inspired by the concept of wolf pack optimization, where individuals mimic the hunting behavior of wolves in nature to optimize solutions collaboratively.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5eff8d78-cc67-4014-bcbe-a7a9ddefc9ce", "metadata": {"aucs": [0.9090053486859281, 0.9350164742559801, 0.9190771845918223, 0.911678545319998, 0.9148534579672631, 0.8833927796216431, 0.9166862255481774, 0.9226891485338413, 0.9129103569133903, 0.8661081458295135, 0.8479158506242126, 0.8404803068545398, 0.8524966239520052, 0.8133716922560047, 0.8514722026323218, 0.8449513863074232, 0.8776586656791312, 0.8394423547324632, 0.18789195875049303, 0.17933412333477283, 0.15962830901846192, 0.741853145382925, 0.1620398048271774, 0.07186015519390898, 0.11516429083426627, 0.1237773746961719, 0.15906949566363104, 0.11844626347222442, 0.11626519681808078, 0.09350152191419692, 0.11103337092844101, 0.1238656787118636, 0.10468175007532576, 0.1133511886185199, 0.14843987718838303, 0.17437510531323674, 0.9846661460362092, 0.9855997135486094, 0.9792685180837262, 0.9714701055576948, 0.9760785845745907, 0.9802420085621811, 0.9696880010455784, 0.9784430051420668, 0.9683405095601019, 0.5596998008943519, 0.4476324467672216, 0.4319140782381389, 0.38165060455704447, 0.15134825384528972, 0.6237373167137408, 0.44368168759317717, 0.08712460193119309, 0.46931126627878517, 0.20959630640647842, 0.4176891040310864, 0.6195212682877865, 0.20974615739795377, 0.16131943274758065, 0.11692935045542874, 0.30147823048035005, 0.2200621983563109, 0.20165694458775807, 0.20334912286211404, 0.13564905757883572, 0.18845845639815084, 0.24452678845856546, 0.2510059442235113, 0.2352239473337412, 0.1727352846228305, 0.413871063171953, 0.16502227317142282, 0.18543205787335026, 0.12138266376439755, 0.12984899842364706, 0.13581618667701245, 0.18892793756154647, 0.1337521190267993, 0.2060660645734349, 0.19779351402290135, 0.13494633993303506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04733184979977012, 9.999999999998899e-05, 0.08101785466434608, 0.02946841469756456, 0.027192648620321558, 0.05694850648622374, 0.07239419384998513, 0.02879257860072626, 0.08453350529909565, 0.040692519751919676, 0.07542575418857267, 0.08561422280319053, 0.0522098270053617, 0.03614418916958295, 0.1843425441159562, 0.08175337010767325, 0.1121525142336417, 0.13104354555392295, 0.07622183375120972, 0.11533785457270174, 0.30128956631733506, 0.048177444910187495, 0.07054981345207356, 0.11688543054147105, 0.06250887089545287, 0.03552048006259245, 0.10113029075900903, 0.08214955446476724, 0.2623750819056041, 0.0929320686940397, 0.487639333671647, 0.4810467960490239, 0.5783758873419675, 0.5408877176739426, 0.45729323401821065, 0.5088725983924445, 0.5625777942415564, 0.48977789007351336, 0.5523141910227916, 0.16227196563147173, 0.09725756107737538, 0.07041949052935104, 0.1275987871325488, 0.1020754815098095, 0.1112040258205299, 0.12299331615154074, 0.11960375003264889, 0.11076779771072487, 0.14006355283286798, 0.16795197782747595, 0.1744993634829749, 0.21790532856774603, 0.14597991807734056, 0.2345031881154619, 0.18164249288888945, 0.28493955789371284, 0.21527279131962662, 0.33032456127431487, 0.4009528880402521, 0.21532853289966114, 0.411439196656718, 0.20656414023790182, 0.3100216101589106, 0.5123977641221862, 0.22447966191721003, 0.2951628971961553, 0.24795441724207767, 0.27455171099270315, 0.17532836433856414, 0.22620711322234843, 0.23138073042400442, 0.22675243442293136, 0.17043975269866296, 0.13229264023013187, 0.22781847734395855, 0.19038959479224438, 0.18572475054556625, 0.20381551295237965, 0.1927824805876639, 0.18097905983575424, 0.1839555737882279, 0.20686622078561467, 0.17912967962271564, 0.19546880292157465, 0.24909531002163476, 0.26675746215754104, 0.6448860450500971, 0.2505303207053936, 0.21820047965306355, 0.2011097782039074, 0.2240901291377917, 0.19788758523511296, 0.21934591917204116, 0.17767842153451296, 0.17128599074271822, 0.7808722821715494, 0.1983933424272506, 0.20056885057335427, 0.1314413683200253, 0.15221101179996654, 0.15680700091455924, 0.16747972564012215, 0.5285459236226071, 0.16780364094003541, 0.16849843035826484, 0.20942164556570786, 0.16981001561237086, 0.21089589062632952, 0.11288450909345504, 0.10704178961760391, 0.17219648512382113, 0.17912293299474058, 0.1839619620251216, 0.18966422818294615, 0.1942940466922628, 0.18549544948779917, 0.1828993577567095, 0.1742941915810734, 0.18074245277896572, 0.18210161409766512, 0.07983541311731479, 0.087763671142157, 0.08588890607891131, 0.08057044674992098, 0.07310812840548331, 0.09823357476559702, 0.08915501898816425, 0.07981175746173153, 0.07840597804572591]}, "mutation_prompt": null}
