{"id": "22fb038b-7023-4011-ab96-71c5900f576f", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 0, "fitness": 0.15155609404954962, "feedback": "The algorithm FireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "b44a59ec-6ee5-4aee-aabd-eb5d579dd043", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "7d826a05-1d1d-47e2-a561-64358946df32", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "0b48dcd7-9dad-48c3-bfcc-f4841e8bbf9a", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "a7a83ae6-6959-4b55-8572-1141ec5d400b", "solution": "import numpy as np\n\nclass DragonflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "DragonflyOptimization", "description": "A novel metaheuristic algorithm called \"Dragonfly Algorithm\" mimicking the swarming behavior of dragonflies to optimize black box functions through collaborative movement and information sharing.", "configspace": "", "generation": 4, "fitness": 0.15155609404954962, "feedback": "The algorithm DragonflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "58f17dce-f32c-4ff5-a1d0-e85f1637d9d1", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "d72ed87c-2d24-42cc-bb66-e05e6f6ddf9b", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "0609d158-be7b-472b-aaec-41a3665f7ed1", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "5e575690-182c-4a0c-90cd-384bc64d2dc4", "solution": "import numpy as np\n\nclass DragonflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "DragonflyOptimization", "description": "A novel metaheuristic algorithm called \"Dragonfly Algorithm\" inspired by the flocking behavior of dragonflies to optimize black box functions by coordinating movement and sharing information.", "configspace": "", "generation": 8, "fitness": 0.15155609404954962, "feedback": "The algorithm DragonflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "12fe1f18-895f-40c6-9a02-6691700fb6f2", "solution": "import numpy as np\n\nclass EnhancedFireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        # Introducing Levy flights for enhanced exploration\n                        levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))  \n                        population[i] += beta * (population[j] - population[i]) + self.alpha * levy\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedFireflyOptimization", "description": "Enhancing Firefly Optimization Algorithm by introducing Levy flights for more effective exploration in the search space.", "configspace": "", "generation": 9, "fitness": 0.08850527556213753, "feedback": "The algorithm EnhancedFireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.23155808603794004, 0.18569600559410537, 0.18160248956816627, 0.20184267692317126, 0.2096313446802115, 0.1565518563254834, 0.2485156975807865, 0.23739669269858144, 0.22786932481083788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06979381161917264, 0.04460520274270641, 0.04780892230276035, 0.038036261725305276, 0.030548626053809258, 0.04746424752591882, 0.03577724486498013, 0.05567489235532286, 0.03911644072017484, 0.01875534506588028, 0.015756977132026617, 0.04216973576054772, 0.03682669408947492, 0.026192930324068442, 0.028967196894888136, 0.021385832096801116, 0.03824571473482319, 0.030858469535903543, 0.12850121521933267, 0.1315221610648981, 0.13798196129793783, 0.3262111172445611, 0.13192119444296235, 0.1750733513494499, 0.12290522419721905, 0.18319399043654006, 0.12136612281276227, 0.090573563934782, 0.03762713451377253, 0.04879010323315436, 0.04006190745494864, 0.07997228490969466, 0.097729268128804, 0.0605975342648819, 0.05722718607190547, 0.10878254665921017, 0.10345552352386744, 0.09126706966720544, 0.08663287926742036, 0.1841389224559803, 0.113188948113645, 0.11448838803778161, 0.10647324717432638, 0.09804682564246703, 0.13198693849490428, 0.004875926800036123, 9.999999999998899e-05, 0.00020290094642627654, 0.020532325093937986, 0.02859714607064001, 0.00010656289066168778, 0.013842732129515256, 0.021029912048736166, 0.01738979918780692, 9.999999999998899e-05, 0.035783720501746386, 9.999999999998899e-05, 0.003960744929754179, 0.00035487110067622396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0186843996744388, 0.045895655384959544, 0.032246967529975024, 0.023822488625240612, 0.03249021181128864, 0.0365497582211457, 0.04987598929154391, 0.04041823387536658, 0.05370373659174732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00025300715215037517, 0.0005567783266715587, 9.999999999998899e-05, 0.010331242636417715, 0.014159303534481804, 0.010745961102623047, 0.0021518928139130367, 0.013245887222123165, 0.0016937305887637644, 0.17001130537345777, 0.21131886288583457, 0.22268440276799206, 0.20907468436956278, 0.22118024652299462, 0.15422577917375457, 0.21714655784735015, 0.15428619959410395, 0.18768569820860892, 0.04451144980448807, 0.053075277357954254, 0.0606203581610949, 0.04975916248865364, 0.03682210790269291, 0.028389741385138167, 0.03416760412142683, 0.0479914097576164, 0.04494245927809737, 0.16084304284750284, 0.12473159183708482, 0.13257423375164012, 0.15916481432211693, 0.1687100771688358, 0.15725008155685682, 0.13293540302534623, 0.13572718442658038, 0.1400398755739929, 0.14847786387497086, 0.16120804015336998, 0.17147796594311782, 0.14513100960373737, 0.14687799802192147, 0.1443802980621267, 0.1698118063918146, 0.1772806380716021, 0.1813454556350208, 0.08132518038804992, 0.10787769825132287, 0.09651422037856716, 0.0963338033640142, 0.08334310345782503, 0.10289487288952093, 0.10425761442367876, 0.13054480765551746, 0.11492767813777849, 0.13661276328564365, 0.13674563348360458, 0.1605706100390043, 0.1475537969561317, 0.13137222467357712, 0.14987202586464154, 0.13683569379161908, 0.13170628393248485, 0.15802766561190407, 0.15774428358213322, 0.09620315831296389, 0.0459366512755478, 0.10141935521700829, 0.13052353705817588, 0.10373822322504478, 0.06336230597024006, 0.08822733612642819, 0.10734376630190579, 0.166157876891028, 0.1476131247505591, 0.14806304449914132, 0.11891021009187275, 0.17644834173735657, 0.15509418098693006, 0.146179033559792, 0.15826848013738493, 0.14579288059118822, 0.16557879683344, 0.1383913369840789, 0.13546795424756441, 0.12081702485066703, 0.10932124450571445, 0.275868100043822, 0.16035532569418176, 0.15980244958548795, 0.18070489827546532, 0.18734376899749272, 0.18421792570869033, 0.20527215660190812, 0.18139300951508852, 0.1932802862520645, 0.20376877128723692, 0.20317120899762364, 0.1881649222717422, 0.18043530220023007, 0.040520228326345165, 0.03433551095483289, 0.03577025083669649, 0.04732510141679158, 0.05310239631483238, 0.042837407628238955, 0.03970667464553257, 0.04500148661501191, 0.03961661220182899]}, "mutation_prompt": null}
{"id": "941f0c3f-c7f8-455a-9756-3ea88954484e", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "e1f3cc77-4bb4-487e-ac47-0dc31358b0f7", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "6adc4356-734f-41a3-8dab-50ef9751cbaa", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "cd43b0cd-4ddc-4980-b7c3-90794a531d9b", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "ccfc6a8f-7110-4424-8c7c-6b6e91dab51c", "solution": "import numpy as np\n\nclass RefinedFireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-0.5, 0.5, self.dim)  # Refinement\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "RefinedFireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution, with a refined strategy.", "configspace": "", "generation": 14, "fitness": 0.13816926537572682, "feedback": "The algorithm RefinedFireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.45527607527685854, 0.3472575384706582, 0.46437727783207616, 0.39180409545525474, 0.3468590382974107, 0.3770131821027244, 0.43679433533088663, 0.3296745651685785, 0.36191176836425076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002518804624822568, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0753602968071746, 0.042514146513802364, 0.04072116039406015, 0.0679154965629496, 0.034298315774384025, 0.049643266011242804, 0.04901786181517742, 0.057173278639384595, 0.0621985984287301, 0.060392140791421633, 0.04197615107371944, 0.054549091737534416, 0.0865659781972623, 0.03157498119668323, 0.019656825405265366, 0.042407469526469344, 0.07610569065737205, 0.02453941565914941, 0.08409654151245471, 0.08807411436717649, 0.07582242473605072, 0.08062779908228279, 0.0604453320656505, 0.09360614148294477, 0.09929476783096203, 0.054120423930953065, 0.1974271179271423, 0.2622637918317047, 0.18523124720725792, 0.04850573319114593, 0.23551846527501386, 0.1298757896218814, 0.23913646171048875, 0.1693604064695996, 0.1289323244728071, 0.22920455836585374, 0.1574630564500623, 0.2201185165849603, 0.12319880557942031, 0.11021090200201722, 0.15069058149999215, 0.03309320914051317, 0.06670106299320777, 0.13114894744956562, 0.10905801769123713, 0.1790307850346795, 0.11384777067561336, 0.08662759784307017, 0.09587434401773587, 0.1515842892389272, 0.08725852970695591, 0.14779193162472892, 0.17600298112079615, 0.15588253750496772, 0.18791488731001071, 0.12416032441949809, 0.12360138232653028, 0.12104816096750359, 0.1277931323233228, 0.14039940192039124, 0.1615938294170275, 0.1357048241702925, 0.1493528507208295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08914461466979451, 9.999999999998899e-05, 9.999999999998899e-05, 0.020113624316708045, 9.999999999998899e-05, 0.0037815362752676718, 0.08018467017234399, 0.06163888263147077, 0.07011529761488533, 0.055242004319371873, 0.06665367518259557, 0.03247830451040723, 0.09428387567703578, 0.0786128027629589, 0.05763301211468175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09336069337812203, 0.026571564024885808, 0.09324115523879373, 0.03992734667367237, 0.06621006166073617, 0.07232474968319003, 0.06651955375000684, 0.04612643773055003, 0.07701827362970126, 0.38482150460865305, 0.3966258107658619, 0.3892692951883121, 0.3681665774477578, 0.31174874342055026, 0.328902552989794, 0.444306919955227, 0.30953233195106966, 0.4195311240388877, 0.01254880697279459, 0.020517073909211314, 0.05246349149833984, 0.07009393185798274, 0.028285587206368867, 0.08921389512471889, 0.07271751525888925, 0.04247568385779288, 0.07044292947853736, 0.1188174856862535, 0.16008137238705822, 0.16681750465022982, 0.12103728466715125, 0.25840304343836384, 0.17521187622007361, 0.24089636664277314, 0.15538227286519435, 0.15399311937495275, 0.1632240267418894, 0.1267195198425739, 0.16816771591667135, 0.2088000399999178, 0.17128733382502048, 0.28316116027195415, 0.15497409365715897, 0.22370203049806836, 0.18672204488286148, 0.10269526381036664, 0.06874225630096187, 0.17808107036400833, 0.14883380545711267, 0.15751506106212254, 0.19825073293104212, 0.11059126836756128, 0.19197772004316416, 0.17694026659809825, 0.21953510449690106, 0.19611592477417084, 0.20232645353163825, 0.22668512022178833, 0.1919388190334399, 0.2037576841330706, 0.19649280206818043, 0.19055454749956702, 0.21639466949514508, 0.14989809395734932, 0.18113301485137567, 0.1567300760689786, 0.15151399361769724, 0.14895567794810538, 0.14056341903099823, 0.15103445463810694, 0.17351864711317555, 0.15191675073575295, 0.15983422717481333, 0.17117254159717943, 0.4644428444870484, 0.5682110541876482, 0.18023203429336987, 0.21539831229930773, 0.10892802715900307, 0.1448300971927009, 0.1530150670035899, 0.5267643759784417, 0.2075975001699938, 0.13240949524325607, 0.15711781235313516, 0.14772177206431503, 0.15171579571413618, 0.2785665035001106, 0.08596649580600046, 0.2409307292393632, 0.18030031420705217, 0.18828979683465163, 0.21453843104992354, 0.18116426249014683, 0.17492301578819602, 0.17380360821417185, 0.17990014115380093, 0.19730278322386496, 0.22111888828808612, 0.057973839742794575, 0.05656967558775339, 0.06896894697633726, 0.058608703360015224, 0.0728389686592209, 0.09656244649604251, 0.06257005987808839, 0.06530938533156916, 0.11493352021535741]}, "mutation_prompt": null}
{"id": "85d9238f-20e0-40f8-92dd-c24f8cf9ff3b", "solution": "import numpy as np\n\nclass EnhancedFireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.levy_scale = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        # Introduce Levy flights\n                        levy_step = self.levy_scale * np.random.standard_cauchy(self.dim)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * levy_step\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedFireflyOptimization", "description": "Enhancing Firefly Optimization Algorithm by introducing Levy flights for improved exploration and exploitation.", "configspace": "", "generation": 15, "fitness": 0.1483537168921018, "feedback": "The algorithm EnhancedFireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.10.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.4543015637526945, 0.38716442705402654, 0.46321908332975803, 0.3450135093668075, 0.3639477695836201, 0.4435790404143921, 0.4240774571758368, 0.3475013218860463, 0.3993119622132334, 0.05358753569752228, 0.0269364853255889, 0.00998563677556763, 0.03638743346735196, 0.058540236712018134, 0.011024697353431478, 0.02128856498330589, 0.002802015266006541, 0.005838298228483141, 0.08650474606957359, 0.09447155606516677, 0.0970815706734175, 0.1487551638383049, 0.05435683880551967, 0.09650772632576554, 0.09590564555315118, 0.09624780803122734, 0.06505503449412064, 0.0906993408791541, 0.054887204979290116, 0.09361560345391773, 0.1016332764363801, 0.06748593859498875, 0.08227330055987514, 0.1029343713937344, 0.09937560333286022, 0.08006597938701054, 0.3434546451586965, 0.1494142919731155, 0.35473339395957737, 0.18751379882002261, 0.07264338405369997, 0.28444113009430816, 0.375139810715713, 0.06823052778380756, 0.11518195658584485, 0.2285806115482505, 0.13933979425502385, 0.11551865047806442, 0.20782609397603025, 0.05813729150988256, 0.2056758690690086, 0.12011963644490187, 0.07973029767163176, 0.21112921748864122, 0.19710559390751603, 0.18732485268603472, 0.1320695892302438, 0.19176491154074116, 0.19363002910911853, 0.15572738125820873, 0.1790768905636394, 0.15266816632815972, 0.1521121477469365, 0.2126801054264782, 0.091496258467746, 0.1320480431179234, 0.14960437836706153, 0.08294139602652595, 0.06923801426245157, 0.1523494543510726, 0.12895128917485676, 0.1494737853986433, 0.16531766540333426, 0.07845459228884444, 0.11033957618556467, 0.1236392309270592, 0.11720693956475026, 0.12761274200380157, 0.19181592254523083, 0.12551907418286157, 0.11560196742141848, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003938241647017282, 0.0407207498417822, 9.999999999998899e-05, 0.002430127624851175, 9.999999999998899e-05, 0.01509188700749542, 0.06683059405184244, 0.052089145439852325, 0.08433113158612959, 0.039995914886766015, 0.06538885617851542, 0.09503719948269262, 0.0959376320008285, 0.06818259752703326, 0.05761013121761083, 0.006798959290586604, 0.003985911125283237, 0.04220825198563194, 0.007033700411963273, 9.999999999998899e-05, 0.014644370190699196, 0.0014222280301663393, 0.0025812046219755302, 9.999999999998899e-05, 0.07991456742471947, 0.08015216619790155, 0.10409149468427803, 0.07945022033650018, 0.02788087864397426, 0.08673606887378116, 0.06260099452517898, 0.07018057183230797, 0.07220728032451262, 0.33092233220096823, 0.39158097750650245, 0.4169650042339754, 0.3342945402567481, 0.3155208539572373, 0.3236760798030779, 0.3868611831427402, 0.3276888219592893, 0.41781159013637525, 0.03444743960282648, 0.047001800746763855, 0.06758597325882054, 0.08605514475413534, 0.034040357452502445, 0.0718715534372053, 0.12665757567995006, 0.05953191604303376, 0.07511055244998366, 0.15636800615705904, 0.131875265809415, 0.18715233178018953, 0.17072239515560428, 0.12426615385473361, 0.173487513840604, 0.16807963018094485, 0.13787438102371796, 0.15799681727768022, 0.17208460514031698, 0.15614994731599396, 0.19725543449131744, 0.19747335603023242, 0.24217295807567385, 0.3013463340827919, 0.14751594431349735, 0.2209086592038021, 0.21151782560070265, 0.11000776662836653, 0.10007506483030171, 0.21758808531273355, 0.16296757515449878, 0.16023527677108362, 0.21985129348482335, 0.15128637596851635, 0.17334241157785968, 0.1151482297691091, 0.2164611363391954, 0.1684810350528001, 0.2187388276123099, 0.22635700825161764, 0.18357852452200996, 0.20451446605090096, 0.21057994766337618, 0.18262071118686507, 0.20345327040914984, 0.17323269517464635, 0.167283788567553, 0.17908137772949217, 0.17623154396958307, 0.24747018328354642, 0.1841517647914478, 0.17912712571358902, 0.14460683200981894, 0.15330308092762934, 0.23944163970639543, 0.24174471067534553, 0.4133337077204625, 0.27694574971404995, 0.17638782432170697, 0.1326511436414145, 0.1412577160900006, 0.14070003712496038, 0.15492849124111274, 0.3314166245650815, 0.2531431567848883, 0.12428052379626986, 0.33451940144902936, 0.12425318609976854, 0.15585315992991655, 0.12411015640592427, 0.12024589248598982, 0.1862353414504747, 0.17861736372033488, 0.17658911229843, 0.18026891245759924, 0.18698606639489712, 0.2016949124836136, 0.1871778107678309, 0.17001222527869708, 0.17364793748374463, 0.1875838454870401, 0.07812403749998653, 0.08335846347317744, 0.07497532909134352, 0.07385770327105945, 0.08335150927190516, 0.09642572161876362, 0.08008511186462508, 0.07142961966190942, 0.08200482513353602]}, "mutation_prompt": null}
{"id": "6e124119-c2c9-46e9-ab16-02dfc9994f83", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "8286d5cc-8538-4ba1-9a2d-f84373718d11", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "23a387bf-fc76-45f3-aad6-1e3db235ca7f", "solution": "import numpy as np\n\nclass FlockOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FlockOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds in a flock to optimize a population of solutions by mimicking interactions and movements.", "configspace": "", "generation": 18, "fitness": 0.15155609404954962, "feedback": "The algorithm FlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "7f89ba7a-457d-4040-a0b2-e2c56f6df06f", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "1d13f253-5df6-4a41-8e41-2cfeff0738bc", "solution": "import numpy as np\n\nclass SocialSpiderOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.rho = 0.1\n        self.beta0 = 1.0\n        self.gamma = 0.2\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.rho * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "SocialSpiderOptimization", "description": "A novel algorithm called \"Social Spider Optimization\" inspired by the cooperative hunting behavior of social spiders to collaboratively search the solution space for optimization tasks.", "configspace": "", "generation": 20, "fitness": 0.06814915283731648, "feedback": "The algorithm SocialSpiderOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.25036121829211433, 0.08966146663302299, 0.19368362651829885, 0.1481853420662428, 0.10765263396062197, 0.11195485040305597, 0.1807902688588291, 0.07697906991194692, 0.10326394786968518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01402772379121453, 0.021942054957263424, 0.027593554624967376, 0.04769126261510903, 0.006805514454223172, 0.02591631962135421, 0.03900712425493025, 0.009819180768346314, 0.02391920965392802, 0.01584101780331315, 0.0035350451779458947, 0.009963627191611146, 0.03670431182437894, 0.00874163648513604, 0.010292226676442584, 0.03507084407506611, 0.016294191152748327, 0.0026028842868613955, 0.04909066307013199, 0.047111319263014595, 0.044082000440464064, 0.057243151707185636, 0.04687545855643349, 0.04132544894855017, 0.06643203379293094, 0.048986754550083944, 0.04586983392655697, 0.08618328590967705, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539826667188409, 0.0011649133000866119, 0.05462187814147024, 9.999999999998899e-05, 0.012532990211251982, 0.009624080690750048, 0.12025638358472202, 0.13014865116059993, 0.062314581156250104, 0.13066497076445394, 0.0823824998616266, 0.010018462447943244, 0.059375666117176484, 0.06854595315436585, 0.0921704528492765, 0.08918953831111542, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012627172788537422, 9.999999999998899e-05, 9.999999999998899e-05, 0.04193818649056247, 0.00022147122688620513, 0.014352970617530936, 0.06569233725752743, 9.999999999998899e-05, 0.08229316745782345, 0.07122941288661389, 9.999999999998899e-05, 0.09374776275033325, 0.07076760899008827, 9.999999999998899e-05, 0.03283613982395073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004366379802204778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004750351514568596, 0.03408407413819181, 0.035352631596969, 0.05351852550496439, 0.04240452091205993, 0.035172366103313424, 0.027239069356797208, 0.05842802004494985, 0.024203157668393205, 0.023650176080243335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01372552517586667, 9.999999999998899e-05, 0.00014339259805928872, 0.0010298322683409689, 9.999999999998899e-05, 0.0355676941209464, 9.999999999998899e-05, 9.999999999998899e-05, 0.016418850911768867, 0.13372895155918052, 0.1762593956549694, 0.17067570913375074, 0.11082895715224328, 0.10963236193018133, 0.10891175685883059, 0.27666856828824526, 0.09892642823646514, 0.2247435062029638, 0.02583822173972472, 0.009400388653542202, 0.03083234642244337, 0.04118676569700419, 0.004337398937690695, 0.04416340822785714, 0.026076200429362317, 0.00298199861278714, 0.034834093183216286, 0.11866801055175225, 0.12698631785298364, 0.1269124617544759, 0.12195449827007598, 0.12419934635761709, 0.1620088402278701, 0.13786800058619264, 0.10604701571486053, 0.13269594185803857, 0.12340413968067987, 0.10861220212194145, 0.18004233103468925, 0.1464990531087198, 0.12686633032666195, 0.13458440330523913, 0.1387896699854727, 0.18372508997379866, 0.13180296049538265, 0.07051853635946426, 0.047119201796992805, 0.11121847527700279, 0.09089992993597784, 0.0704338123628957, 0.0780187741039674, 0.08425229358001507, 0.11058369045119087, 0.07625767207018253, 0.1590712652345908, 0.12712040802898916, 0.15033912554522122, 0.18743893438527093, 0.11490036817391647, 0.14241438233606663, 0.1718743512994514, 0.10938233362422323, 0.14715798516640843, 0.08997974084989857, 0.08467998570325996, 0.07354024607502685, 0.07925273946165157, 0.006589586246803614, 0.06668236954152384, 0.08002506683604693, 0.04913155713751216, 0.041823705731591665, 0.07159762235568445, 0.0983365860082207, 0.13978587654384478, 0.15847202008604055, 0.15527270227137546, 0.07723595431936314, 0.10719807392725611, 0.11076383439534765, 0.10095043886945732, 0.27190769753204835, 0.1518273117704415, 0.07247298498447963, 0.0977440824014475, 0.0395409305018638, 0.06981523142949608, 0.06463802864792856, 0.06546308227228981, 0.11000952961409949, 0.1844004137878723, 0.1824008511690477, 0.1783559766366417, 0.18980992617254167, 0.18645028348635917, 0.17973106011471995, 0.18670621073904903, 0.20131785903084687, 0.18556895698699416, 0.03936576289989657, 0.03732776162911011, 0.04769580423339981, 0.04111965737152001, 0.041894340926033724, 0.04192934638965107, 0.04237774496540769, 0.04026434406640145, 0.044138698150775646]}, "mutation_prompt": null}
{"id": "eb08625e-baab-42d1-9582-0ca9e3fb77e0", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "e22a7ada-d51a-480b-a424-6e4b2f563eeb", "solution": "import numpy as np\n\nclass ElectricFieldOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "ElectricFieldOptimization", "description": "A novel metaheuristic algorithm named \"Electric Field Optimization\" inspired by the electric field behavior to guide the search process towards the optimal solution by utilizing attraction and repulsion forces among individuals.", "configspace": "", "generation": 22, "fitness": 0.15155609404954962, "feedback": "The algorithm ElectricFieldOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "635473df-98a2-48d7-85b4-62c91b6bb50d", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "7fd811c1-de68-4fdc-95dd-e6b566348de1", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "f814c4e3-b97f-4911-9ab4-701c18b8bff0", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "dc0a85e3-fb4c-4585-8545-d754ae335621", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "4d11ce87-5f73-48a0-adb9-0e60691adf1c", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "5e95a1f4-e653-4bba-99a1-fd91f5123264", "solution": "import numpy as np\n\nclass EnhancedFireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        step_size = beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] += np.where(step_size > 0, 1, -1) * np.minimum(np.abs(step_size), np.abs(population[i] - population[j]))\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedFireflyOptimization", "description": "An enhanced version of Firefly Optimization Algorithm with adaptive step sizes and dynamic exploration to improve convergence speed and solution quality.", "configspace": "", "generation": 28, "fitness": 0.10538398267296277, "feedback": "The algorithm EnhancedFireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.2636672471306123, 0.2644200935918246, 0.24631733155586621, 0.12650778324379275, 0.14431022552186, 0.14713685594906256, 0.15957610270129408, 0.1406636378919851, 0.11866988521468413, 0.0, 0.0, 0.0, 0.0, 0.05826559616835236, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.046626633650254545, 0.0744956725638738, 0.05497453043037437, 0.06768427966545754, 0.035026767765736655, 0.03727917495689104, 0.05073461264795065, 0.09473921194015222, 0.0561275463298212, 0.0507928624396653, 0.06285299705612346, 0.051873183614089435, 0.07274669628087793, 0.023963049400808067, 0.04829871519537954, 0.07958767355669583, 0.08597069968645243, 0.024208040376234252, 0.04631797439231655, 0.055289161636039696, 0.048748855151107606, 0.07396634976059535, 0.05116926598487004, 0.04832320833587678, 0.06745277876354738, 0.05322893196573064, 0.050224343050584874, 0.07139416484651884, 0.06301284327096723, 0.005342596003190203, 0.0872430543122813, 0.04316822260481712, 0.056114232744849724, 0.06121913989089223, 0.03801898491148026, 0.0, 0.16382731206240497, 0.2832267807340293, 0.11964470062784005, 0.10603625573513198, 0.11681254033947353, 0.05573036501612383, 0.10695528425519174, 0.1212922694399371, 0.2026125586171671, 0.12688673440531817, 0.0700964258732567, 0.04626955712705971, 0.0, 0.0, 0.0, 0.04760334115231435, 0.05980912411920103, 0.055518170535101885, 0.21069789526270222, 0.13235291525121606, 0.007326496576078312, 0.1443701191339435, 0.10316593345623548, 0.12345613531699595, 0.12399415651646828, 0.055199902895172404, 0.1255731526466336, 0.0, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.06855566762045895, 0.05455282687560303, 0.08262245673427893, 0.035341615221414546, 0.04961310037906663, 0.05762928159571368, 0.09028639764808599, 0.04758488610734768, 0.05975998848079178, 0.0, 0.03671558068874892, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003918634596009163, 0.0, 0.0, 0.0020774778610098688, 0.29895909336862947, 0.29382567523718395, 0.2800512321728601, 0.1560458978537459, 0.18228078945590664, 0.13873115229729516, 0.34251625495299265, 0.18000201012547312, 0.3061036987068577, 0.02391881746017621, 0.024526995844889043, 0.055131642929048374, 0.09022590453738233, 0.03654319672704298, 0.11664679425691504, 0.0631089254956374, 0.03469624252864889, 0.06705583618639432, 0.127718572440633, 0.16732413216706066, 0.1302963776038195, 0.14232825163791563, 0.16669260258380236, 0.13721116203240513, 0.19775547414037897, 0.16286974824952793, 0.23853377686273447, 0.16226853545505693, 0.12877144966794762, 0.2081921448579035, 0.1746196759174662, 0.17938377055143706, 0.18140306393774153, 0.1533959560571826, 0.21494612294473336, 0.1648413138862248, 0.09765226400277205, 0.06807442040970602, 0.11643725480781542, 0.1687859406565151, 0.135883904850848, 0.1471347065787182, 0.12697684248412056, 0.12523844319243616, 0.1908558727232883, 0.24898145970826513, 0.16467881536822093, 0.2162288772133607, 0.23830502021030897, 0.17908719382457006, 0.18881082067031252, 0.20914214815573196, 0.22115233733142659, 0.18515440230296532, 0.14983556119218333, 0.15860007526342812, 0.15393724860848612, 0.16893131937707806, 0.14663030947493205, 0.16699772330292895, 0.15672222368414745, 0.15569641103679366, 0.153854905556138, 0.15224587612051332, 0.16528229672496597, 0.16333906975867174, 0.3184334832787894, 0.1619242824399043, 0.18393701606127055, 0.24303950561745802, 0.1455483825831272, 0.16666323779879477, 0.33725359319892634, 0.20714259474514907, 0.15332273227992788, 0.14774384246557748, 0.13445322369230328, 0.13143358809254402, 0.25046941680852375, 0.13720410421985452, 0.1503484804145977, 0.1963116940121965, 0.18675085400903157, 0.18663608195520376, 0.1899482481781143, 0.18521512150125308, 0.19308819244617947, 0.188799456280364, 0.17487105303934392, 0.2006077949975834, 0.04516453820488353, 0.07639402167259723, 0.07528334742375864, 0.07047625478442388, 0.07685502585746251, 0.09760709971885773, 0.07346269820135898, 0.05507293997416074, 0.06673506062837187]}, "mutation_prompt": null}
{"id": "f8db68dc-4702-41ca-ad95-aa50621bec26", "solution": "import numpy as np\n\nclass EnhancedFireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        # Introducing Levy flight for enhanced exploration\n                        levy = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * levy\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedFireflyOptimization", "description": "Enhancing Firefly Optimization by introducing Levy flight for improved exploration capabilities.", "configspace": "", "generation": 29, "fitness": 0.08850527556213753, "feedback": "The algorithm EnhancedFireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.23155808603794004, 0.18569600559410537, 0.18160248956816627, 0.20184267692317126, 0.2096313446802115, 0.1565518563254834, 0.2485156975807865, 0.23739669269858144, 0.22786932481083788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06979381161917264, 0.04460520274270641, 0.04780892230276035, 0.038036261725305276, 0.030548626053809258, 0.04746424752591882, 0.03577724486498013, 0.05567489235532286, 0.03911644072017484, 0.01875534506588028, 0.015756977132026617, 0.04216973576054772, 0.03682669408947492, 0.026192930324068442, 0.028967196894888136, 0.021385832096801116, 0.03824571473482319, 0.030858469535903543, 0.12850121521933267, 0.1315221610648981, 0.13798196129793783, 0.3262111172445611, 0.13192119444296235, 0.1750733513494499, 0.12290522419721905, 0.18319399043654006, 0.12136612281276227, 0.090573563934782, 0.03762713451377253, 0.04879010323315436, 0.04006190745494864, 0.07997228490969466, 0.097729268128804, 0.0605975342648819, 0.05722718607190547, 0.10878254665921017, 0.10345552352386744, 0.09126706966720544, 0.08663287926742036, 0.1841389224559803, 0.113188948113645, 0.11448838803778161, 0.10647324717432638, 0.09804682564246703, 0.13198693849490428, 0.004875926800036123, 9.999999999998899e-05, 0.00020290094642627654, 0.020532325093937986, 0.02859714607064001, 0.00010656289066168778, 0.013842732129515256, 0.021029912048736166, 0.01738979918780692, 9.999999999998899e-05, 0.035783720501746386, 9.999999999998899e-05, 0.003960744929754179, 0.00035487110067622396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0186843996744388, 0.045895655384959544, 0.032246967529975024, 0.023822488625240612, 0.03249021181128864, 0.0365497582211457, 0.04987598929154391, 0.04041823387536658, 0.05370373659174732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00025300715215037517, 0.0005567783266715587, 9.999999999998899e-05, 0.010331242636417715, 0.014159303534481804, 0.010745961102623047, 0.0021518928139130367, 0.013245887222123165, 0.0016937305887637644, 0.17001130537345777, 0.21131886288583457, 0.22268440276799206, 0.20907468436956278, 0.22118024652299462, 0.15422577917375457, 0.21714655784735015, 0.15428619959410395, 0.18768569820860892, 0.04451144980448807, 0.053075277357954254, 0.0606203581610949, 0.04975916248865364, 0.03682210790269291, 0.028389741385138167, 0.03416760412142683, 0.0479914097576164, 0.04494245927809737, 0.16084304284750284, 0.12473159183708482, 0.13257423375164012, 0.15916481432211693, 0.1687100771688358, 0.15725008155685682, 0.13293540302534623, 0.13572718442658038, 0.1400398755739929, 0.14847786387497086, 0.16120804015336998, 0.17147796594311782, 0.14513100960373737, 0.14687799802192147, 0.1443802980621267, 0.1698118063918146, 0.1772806380716021, 0.1813454556350208, 0.08132518038804992, 0.10787769825132287, 0.09651422037856716, 0.0963338033640142, 0.08334310345782503, 0.10289487288952093, 0.10425761442367876, 0.13054480765551746, 0.11492767813777849, 0.13661276328564365, 0.13674563348360458, 0.1605706100390043, 0.1475537969561317, 0.13137222467357712, 0.14987202586464154, 0.13683569379161908, 0.13170628393248485, 0.15802766561190407, 0.15774428358213322, 0.09620315831296389, 0.0459366512755478, 0.10141935521700829, 0.13052353705817588, 0.10373822322504478, 0.06336230597024006, 0.08822733612642819, 0.10734376630190579, 0.166157876891028, 0.1476131247505591, 0.14806304449914132, 0.11891021009187275, 0.17644834173735657, 0.15509418098693006, 0.146179033559792, 0.15826848013738493, 0.14579288059118822, 0.16557879683344, 0.1383913369840789, 0.13546795424756441, 0.12081702485066703, 0.10932124450571445, 0.275868100043822, 0.16035532569418176, 0.15980244958548795, 0.18070489827546532, 0.18734376899749272, 0.18421792570869033, 0.20527215660190812, 0.18139300951508852, 0.1932802862520645, 0.20376877128723692, 0.20317120899762364, 0.1881649222717422, 0.18043530220023007, 0.040520228326345165, 0.03433551095483289, 0.03577025083669649, 0.04732510141679158, 0.05310239631483238, 0.042837407628238955, 0.03970667464553257, 0.04500148661501191, 0.03961661220182899]}, "mutation_prompt": null}
{"id": "3a8b4223-6919-435e-a76c-e2e959915b60", "solution": "import numpy as np\n\nclass DragonflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.step_size = 0.1\n        self.attraction_coeff = 0.5\n        self.volatility_coeff = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attraction = self.attraction_coeff / (1 + distance**2)\n                        volatility = np.random.uniform(0, 1, self.dim) * self.volatility_coeff\n                        population[i] += attraction * (population[j] - population[i]) + volatility\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "DragonflyOptimization", "description": "A novel metaheuristic algorithm called \"Dragonfly Optimization Algorithm\" inspired by the hunting behavior of dragonflies to optimize black box functions by mimicking their swift movements and strategic prey capture.", "configspace": "", "generation": 30, "fitness": 0.06283361853306338, "feedback": "The algorithm DragonflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.11934132898717487, 0.08472194787071785, 0.10030865694281088, 0.09441464170441993, 0.10750000009520266, 0.11042008850345264, 0.10335606641865958, 0.07559024671848924, 0.06906824036944004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04429866854846931, 0.03587396918768393, 0.028238431949494047, 0.028017252776645907, 0.013196776782065323, 0.022964655693860414, 0.018248263482334326, 0.01633390289533987, 0.018640148621513974, 0.028749775332356564, 0.01622560722021482, 0.03599747796787156, 0.030164514999035608, 0.014226301945530762, 0.021380892705704313, 0.026424684731299553, 0.003396732035032657, 0.009210584067633865, 0.045179741609489454, 0.045385788542351646, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.06274794416174423, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017542718644854016, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10844581932662989, 0.10334451984434623, 0.08686592974934737, 0.09424975637216482, 0.08104835983623926, 0.056043796109598976, 0.06333734507947808, 0.07251648436746239, 0.09299683648944734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002777984996942373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0059703527593181205, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013811199808333452, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025098788008800166, 0.012114343865202493, 0.042272565236919246, 0.040737484609618346, 0.03119202196463211, 0.046992010483127844, 0.06983645251090131, 0.02075869911792816, 0.045983356086301885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.125006191923125, 0.15756555760738078, 0.15717344494345376, 0.12325125286274685, 0.1116470129788264, 0.112032403960997, 0.18403159006399972, 0.09936308427690455, 0.15343902168888812, 0.02421469815410726, 0.03400186453780185, 0.030615805021602327, 0.037652844594972534, 0.002512629706959202, 0.023354583384227023, 0.007098506272884886, 0.0010494710856603362, 0.026771643209770768, 0.1397718240079161, 0.13362890692779017, 0.12417895851528227, 0.16082410754439647, 0.12274445206534113, 0.1439131569917368, 0.10320950386501881, 0.11651161612556094, 0.14843980582575733, 0.1376662991110419, 0.12441229278874577, 0.1871739371122192, 0.1658012674410565, 0.13076153619129205, 0.14415808450193812, 0.15363262481801976, 0.17454859298470105, 0.15405684778205408, 0.0757545927527653, 0.06774662976713719, 0.13060449246268924, 0.10890242041882103, 0.07668090983531506, 0.09125035704775653, 0.11309704045651581, 0.11022841867340616, 0.09347710333488335, 0.17516010587993514, 0.13264196975530396, 0.1513351760185624, 0.19392141349065728, 0.12787557647014924, 0.1567128841067541, 0.15897677923933806, 0.1229960822279863, 0.159663685912513, 0.06528014139435512, 0.002594273574381245, 0.0850128184665706, 0.009686976964897953, 0.01467908782346461, 0.04977542648417388, 0.11169980851377381, 0.020065969235403602, 0.11474086467966749, 0.12213086576586285, 0.11272586910805038, 0.10987486566709082, 0.11022222333983789, 0.1207914665021157, 0.10837607190807919, 0.1070176662487543, 0.1068817176862572, 0.08381035528276803, 0.15466111579478825, 0.10865922104946457, 0.07365914932536366, 0.08266861624831778, 0.04938705712998959, 0.07975242759420487, 0.09552046572091244, 0.07832330514952646, 0.1217235201410033, 0.1884185333183338, 0.1934921160471732, 0.17674171853138032, 0.1771967650124574, 0.21166080082784022, 0.18942247471515372, 0.1999628260709998, 0.18495061296587612, 0.20809029332591045, 0.034838134472707005, 0.049262437494965394, 0.05313316274190205, 0.04849427801327588, 0.055807097935585026, 0.038938024228601154, 0.05985203891663837, 0.04001889253460722, 0.05367163872333236]}, "mutation_prompt": null}
{"id": "a2e66820-baac-460e-ad62-d88f53b01e25", "solution": "import numpy as np\n\nclass DragonflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "DragonflyOptimization", "description": "A novel metaheuristic algorithm named \"Dragonfly Algorithm\" inspired by the swarming behavior of dragonflies in capturing prey to optimize black box functions within a defined budget of function evaluations.", "configspace": "", "generation": 31, "fitness": 0.15155609404954962, "feedback": "The algorithm DragonflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "a06299c8-f360-4314-9877-3a6bec396a86", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "edcee26c-eef0-4973-afd2-d09f99c757d0", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "3c3c2f7c-c543-46ea-8a9d-aa761c7998e9", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "4c2e21b0-9a3b-4cb3-a5b3-09a5240a7d89", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "aa7a19f9-6be3-4421-9e10-9972e45a8b56", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "019d1ccd-1aad-45af-98f7-b9bea9dfd576", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "504b8b62-a176-42e8-a2e1-426a36991adc", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "bb41f425-04ea-416d-9b45-8a44f27d3057", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "7f25f5d4-e19c-4da3-bccd-dedd8add303e", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "f12c6518-ed0c-4a8a-bc6f-1c4ea54a693a", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "c2918114-664c-4254-8dfd-47fe5ec562a1", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "085451cf-688f-4a3c-a99c-b9c7473eabbc", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "580a758a-3b64-4f72-a6ec-3ca3a909d9ae", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "b77dbbc2-a83c-4ddb-9cfd-58a484daef4d", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "5e271330-cc1f-4846-a925-11a90869f864", "solution": "import numpy as np\n\nclass MothSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "MothSwarmOptimization", "description": "A novel metaheuristic algorithm named \"Moth Swarm Optimization\" inspired by the movement patterns of moths in their search for food sources to optimize black box functions in continuous search spaces.", "configspace": "", "generation": 46, "fitness": 0.15155609404954962, "feedback": "The algorithm MothSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "7d655f56-d1ba-4967-8082-105829922a4b", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "8ba29f7e-11f3-4a8f-a1c5-2986cf27958c", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "146e6bcf-204f-4776-964e-487e0f091d4a", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "d84a4574-fdd5-47dc-a280-fe5ec8520946", "solution": "import numpy as np\n\nclass WhirlpoolOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "WhirlpoolOptimization", "description": "A novel metaheuristic algorithm \"Whirlpool Optimization\" inspired by the dynamics of whirlpools in nature to iteratively converge towards optimal solutions within the search space.", "configspace": "", "generation": 50, "fitness": 0.15155609404954962, "feedback": "The algorithm WhirlpoolOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "c80f594b-daab-4583-b227-6d97ced54d69", "solution": "import numpy as np\n\nclass BeetleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "BeetleSwarmOptimization", "description": "A novel metaheuristic algorithm named \"Beetle Swarm Optimization\" inspired by the collaborative foraging behavior of beetles to optimize black box functions.", "configspace": "", "generation": 51, "fitness": 0.15155609404954962, "feedback": "The algorithm BeetleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "fb35607d-e9a1-4882-89b4-560faf88e913", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "7a420111-60a1-4c41-999c-54eaf8e57f6f", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "152dad95-ee47-40f9-8981-e9e12d911311", "solution": "import numpy as np\n\nclass MothFlameOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "MothFlameOptimization", "description": "A novel metaheuristic algorithm named \"Moth Flame Optimization Algorithm\" that simulates the navigation of moths towards a brighter light source for global optimization.", "configspace": "", "generation": 54, "fitness": 0.15155609404954962, "feedback": "The algorithm MothFlameOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "a9016ea5-9e97-4408-9c42-2d3fe2044e6a", "solution": "import numpy as np\n\nclass DragonflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "DragonflyOptimization", "description": "A novel metaheuristic algorithm called \"Dragonfly Algorithm\" inspired by the hunting behavior of dragonflies to navigate the search space efficiently and effectively.", "configspace": "", "generation": 55, "fitness": 0.15155609404954962, "feedback": "The algorithm DragonflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "6fb0b497-3f14-4005-a357-ac48a5091e39", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "56be3ffd-190c-4640-b988-b0379d971345", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "42ad8739-9dec-4bb7-b982-1e6051db5db5", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "a1f77c04-1c83-4d9b-b29a-808f1957a884", "solution": "import numpy as np\n\nclass DragonflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "DragonflyOptimization", "description": "A novel metaheuristic algorithm named \"Dragonfly Algorithm\" inspired by the hunting behavior of dragonflies to optimize black box functions by mimicking their prey-catching strategy.", "configspace": "", "generation": 59, "fitness": 0.15155609404954962, "feedback": "The algorithm DragonflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "20b77d31-d932-46f9-8659-9254ce505df2", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "d7710d9a-6e90-43a8-b8c8-0c981a4c6480", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "67b23354-9595-495e-824a-a4e19b25e82f", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "5cca7780-3a2e-43b5-af7e-dd7b16d36de8", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "9f889e42-07bb-43ad-8a3a-cbee1426256e", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "ea1a8442-e930-40bd-875b-e9f743be9bbc", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "3300b3fc-8b19-4946-bade-d7efa0ef0814", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "bb21b3b3-a969-48ce-ad99-be3e0453b890", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "db69ba07-ae73-4f1b-9472-48f48d171c2b", "solution": "import numpy as np\n\nclass EnhancedFireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def chaos_map(self, x):\n        return 3.9 * x * (1 - x)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            chaos_vals = np.random.uniform(0, 1, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        chaos_factor = self.chaos_map(chaos_vals[i])\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * chaos_factor\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedFireflyOptimization", "description": "Enhancing Firefly Optimization Algorithm by introducing a chaotic map for improved exploration-exploitation balance", "configspace": "", "generation": 68, "fitness": 0.07774046065514248, "feedback": "The algorithm EnhancedFireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.13719795694181391, 0.09315020977219879, 0.14317206862087517, 0.09841912845587653, 0.1121007549502665, 0.11042008850345264, 0.1222286401895184, 0.07431300570909605, 0.0800392506495824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05300952696598671, 0.06996741921638072, 0.04934799876174234, 0.03525964243111901, 0.0205371241075909, 0.04820580890776949, 0.022678477577683598, 0.05485945246848534, 0.03674577443695615, 0.04948252866418357, 0.04244350040432254, 0.03956995423110843, 0.04135880348209542, 0.031508556675597044, 0.05143795698043119, 0.07394185015991173, 0.01216751468474031, 0.043496738910324906, 0.055342027501397384, 0.04937140088215963, 0.05140802453564297, 0.05542715153120514, 0.04687545855643349, 0.037428727900089886, 0.0651413371215449, 0.048986754550083944, 0.0392018832149682, 0.11681546027878409, 0.021901975561392617, 9.999999999998899e-05, 0.01861915494914046, 0.0015271909495800928, 0.006342613001302788, 9.999999999998899e-05, 0.01717309431615499, 9.999999999998899e-05, 0.11535073221719538, 0.15685887033991786, 0.10450860550396024, 0.1379755918525869, 0.07457831163590944, 0.11361056232683964, 0.09862133654233407, 0.10937437052679999, 0.15249569824391362, 9.999999999998899e-05, 0.00805150801509813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09596528291459705, 9.999999999998899e-05, 9.999999999998899e-05, 0.0759522397997211, 9.999999999998899e-05, 0.006616208778188359, 0.02152468572943067, 9.999999999998899e-05, 0.0032641961413073517, 0.013157219084706906, 9.999999999998899e-05, 0.003896838035175265, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0201841183816327, 0.02275950230394408, 0.0313211954904522, 0.02174362956614606, 0.06605696809095785, 0.0280255749870576, 0.037874766066569476, 0.026905170614120455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.25236094749635696, 0.1688101059941266, 0.18380610253467144, 0.17274626412060456, 0.12229573514789316, 0.1290679940223698, 0.27924566184197375, 0.12008325497012429, 0.2016725363773283, 0.044081889173234634, 0.04828281784598598, 0.05089342593562818, 0.05798428719422022, 0.0017938461011586249, 0.04707934865938912, 0.03708917800765266, 0.0026226998906120347, 0.03036637449246682, 0.1256805460682081, 0.1285408437751907, 0.12358381525885032, 0.10867126001526795, 0.10852972522114013, 0.12370482318622267, 0.1354618002285075, 0.10972618628609265, 0.13144855733134175, 0.1490183996368467, 0.12808835073695612, 0.21691107672512067, 0.17405686239749574, 0.147012127237528, 0.14857110022665942, 0.1674850248175519, 0.18605266638817652, 0.14664283385247767, 0.0882332477009723, 0.07010818231831617, 0.19927411228411052, 0.11139611144621109, 0.08540244822369025, 0.09137281627800331, 0.10261258974408005, 0.13502797473815298, 0.0967439018059646, 0.153166664554652, 0.1461195418555209, 0.1581753886423145, 0.20736803319858654, 0.13904742128046133, 0.1533591674911533, 0.14312338818751236, 0.14107275398570618, 0.18020568194008935, 0.1615436400589626, 0.12891742845279552, 0.15813126987607573, 0.13673115140523984, 0.13467891092238315, 0.14479179949077947, 0.1645236885120659, 0.1518123399982615, 0.15967284662916337, 0.14020368075645506, 0.12309535021431417, 0.1215686315587996, 0.16025885788648608, 0.15698275777328563, 0.1251787370863665, 0.11057453414300833, 0.10926976652866072, 0.11125523136271209, 0.2237781561051272, 0.11905639715222838, 0.14137186872206908, 0.11436660531187404, 0.06811499642673846, 0.0968372528472663, 0.19642575058715683, 0.07694009112485967, 0.2860360813730116, 0.18771416753904668, 0.19318281448278873, 0.17456104686059448, 0.1673285575041633, 0.16387199483718518, 0.19210761637252938, 0.182704038809273, 0.18038498162625094, 0.18312292865129243, 0.037771137839594626, 0.04115273621558535, 0.05016096697046102, 0.061367697770533636, 0.04750144806910139, 0.06742314724297471, 0.07731334381452104, 0.05222532373908784, 0.06835466509116372]}, "mutation_prompt": null}
{"id": "3795d46f-3d30-490b-8bbf-57cd2395e5d1", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "384ed756-0341-4e8a-976b-27e3277efdf2", "solution": "import numpy as np\n\nclass ImprovedFireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        step_size = beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i] + step_size, self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "ImprovedFireflyOptimization", "description": "An improved Firefly Optimization Algorithm with dynamic step size and boundary constraint handling for better exploration-exploitation balance in solving black box optimization problems.", "configspace": "", "generation": 70, "fitness": 0.15155609404954962, "feedback": "The algorithm ImprovedFireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "d94056f6-8159-485d-8f6f-d35b5cf79a79", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "9207456a-8d4f-46cc-b99e-0e515653be69", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "17438af3-2371-4332-b1c5-7eb4e2f9972c", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "8bc8b69f-cc81-45ef-9015-c48997616578", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "2c2b0036-611d-4809-a37f-f51de6deb3fc", "solution": "import numpy as np\n\nclass MothFlameOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "MothFlameOptimization", "description": "A novel metaheuristic algorithm named \"Moth Flame Optimization\" inspired by the phototaxis behavior of moths to navigate the solution space by moving toward light sources and performing random movements for exploration.", "configspace": "", "generation": 75, "fitness": 0.15155609404954962, "feedback": "The algorithm MothFlameOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "43eb5086-aaa9-44ab-92bb-0227435b82c1", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "8120244c-31e7-4e3e-b0e3-a2cfe59bf56d", "solution": "import numpy as np\n\nclass EnhancedFireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.levy_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        levy = np.random.standard_cauchy(self.dim) * self.levy_coeff\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * levy\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "EnhancedFireflyOptimization", "description": "Enhancing Firefly Optimization Algorithm by introducing Levy flights for improved exploration in the solution space.", "configspace": "", "generation": 77, "fitness": 0.08716345089316668, "feedback": "The algorithm EnhancedFireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.20909144940392832, 0.16910151437332366, 0.24484907135496092, 0.2343243387299484, 0.21707252605382155, 0.24047657795641264, 0.2449527136368349, 0.17593078707062737, 0.2045403074340043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03910735778872698, 0.032180910951999264, 0.037334219972111726, 0.053841217814942555, 0.029160084819231824, 0.04630897617993557, 0.03924168735530709, 0.0473177124801607, 0.043006613773442615, 0.031245608095692323, 0.014796861815300488, 0.022770183952974032, 0.04046050608797647, 0.018595799254995327, 0.018649902346302816, 0.020515634245120817, 0.02584169987388918, 0.0406521299864413, 0.1512948260523017, 0.22304336189373597, 0.12419180264197383, 0.13002443471860914, 0.09882931225491742, 0.15226665941801454, 0.14006615038605852, 0.13479763998070504, 0.13448887300514767, 0.08228890218026541, 0.09203044390431092, 0.08040523239038777, 0.040158845136671006, 0.0611512320159987, 0.046688901511270364, 0.07808417597997308, 0.05546951224637908, 0.08080425271206038, 0.10551283542517864, 0.1111341582774894, 0.11601205250139379, 0.14040450214040956, 0.11799598885934304, 0.09311398752746824, 0.10093648124137322, 0.12305901531890717, 0.10321031595079144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025385192396627843, 0.007536650987827076, 0.033010188604467694, 0.009981547482742048, 0.003908547393481232, 0.00010969228661183994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003145370022389349, 0.00016329709463902553, 0.02303734295042892, 9.999999999998899e-05, 0.03139920430989296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018727912647821587, 0.03737229650418372, 0.06139412291809965, 0.012968498496436998, 0.021433435831046177, 0.04583846212702736, 0.06915146255033544, 0.03727254848928152, 0.015616346458839359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012177535865439681, 0.003925754624939715, 0.0010166641291085021, 0.005824085600034001, 0.015126878489101325, 0.012774591955911685, 0.01116708588969828, 0.0004367116757135747, 0.0085422992095604, 0.18148222287546534, 0.213662083102524, 0.19977870439258372, 0.17461347331810506, 0.17694542831380933, 0.20077117495605923, 0.23478367849483606, 0.18084766212467307, 0.19331371887230075, 0.059817054992568064, 0.043634394507752416, 0.04369589044274158, 0.04013397317886791, 0.03617821430287227, 0.046999013869284845, 0.03670128976655107, 0.039512216702129455, 0.05524873768740324, 0.13547426433759724, 0.1590049289615043, 0.1393178333550712, 0.1370360078694024, 0.15142582271093163, 0.12082021643435092, 0.1349934651855541, 0.14764290143706316, 0.13222459732727443, 0.16842989252844076, 0.1535969389882872, 0.17701858416530503, 0.14363262720377368, 0.17022459108623045, 0.14750238859533094, 0.17328948205137973, 0.2015428707982907, 0.17330451543735093, 0.08091248016015429, 0.11278706424603824, 0.10930746069708408, 0.08892313572551624, 0.09078337188109875, 0.11702106952250302, 0.10877844524330338, 0.11777588985337861, 0.0953751576582954, 0.1495867670220281, 0.15063536023978852, 0.17630697205915258, 0.13061550807788191, 0.13166089640276046, 0.1319501355397359, 0.14134541377023546, 0.1449537840994637, 0.14353901871722774, 0.09367108629340726, 0.09307699287643068, 0.10960779341729776, 0.12580708709253086, 0.126229072815653, 0.14121356869208235, 0.1317388706394348, 0.058492994203922954, 0.0971359134222246, 0.15348090920347857, 0.16265960367519383, 0.11423761724215742, 0.17259193708264264, 0.13423830329601083, 0.134512548046976, 0.174275606501893, 0.13691642749699973, 0.14392294949917817, 0.14513961302020673, 0.16399323689920953, 0.175948657546946, 0.12920386047226706, 0.1282107494174064, 0.10767626633568217, 0.13262469941491095, 0.15154589828678977, 0.17609070388629267, 0.19208666479647352, 0.198470000534556, 0.17742495990722795, 0.18843437962706044, 0.1784459923857934, 0.17888066519850254, 0.18394932303496803, 0.19052464379224265, 0.18617870211474852, 0.0431484283661433, 0.04229826367876144, 0.05963270449086999, 0.04708780467262841, 0.04280421932471257, 0.04858751735100508, 0.04133281063291849, 0.043448206471529915, 0.04365411528498209]}, "mutation_prompt": null}
{"id": "baebf0e6-e9b2-448f-9a0a-0371f91d00f8", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "bc72fee7-8d79-4899-9813-8bc031f3665a", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "3f9d65f0-3293-4cfa-a7d0-86c8185bf7c4", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "6cfae15d-f1e7-426b-9626-f052199af435", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "374403a0-8234-4e2b-881e-9201d57a5531", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "7a6a9518-d833-4cc9-8c8e-25c6cbf7d621", "solution": "import numpy as np\n\nclass DragonflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "DragonflyOptimization", "description": "A metaheuristic algorithm called \"Dragonfly Algorithm\" inspired by the swarming behavior of dragonflies to optimize black box functions by simulating their search and prey behavior.", "configspace": "", "generation": 83, "fitness": 0.15155609404954962, "feedback": "The algorithm DragonflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "0a962812-d6b7-44af-aea5-c8f7b3acaa97", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "d5979080-71ac-45f4-b2d1-8f6107ee08f2", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "3ddd741d-b259-4a63-80c5-225c063e9793", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "e75f4667-8596-41e6-aac4-a65b4effc7f9", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "f90b833c-55d0-4ed4-9080-1c11dc40c9fc", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "93130549-3e0a-4f69-98cb-4c75b0e35508", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "a7ab481f-d60e-47f1-a217-b1b09ed8dc4c", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "dc6d0c4c-df2a-4ccf-99f5-794c8be221c7", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "258e517e-f3f2-44c4-ac18-fcac29073884", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "5f84f42b-d09b-4331-a927-f4be33632ce3", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "268370c9-21a5-405c-b994-cd2974618617", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "3e0347e2-10f5-4146-aeb9-77e2294be5fe", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "8b1c5384-cf83-4c04-b4f0-5979436aa65d", "solution": "import numpy as np\n\nclass AdaptiveFireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        step_size = np.random.uniform(0, 1, self.dim) * beta\n                        direction = population[j] - population[i]\n                        population[i] += step_size * direction + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "AdaptiveFireflyOptimization", "description": "Enhancing the Firefly Optimization Algorithm by introducing adaptive step size and a multi-directional movement strategy to improve exploration and exploitation balance.", "configspace": "", "generation": 96, "fitness": 0.11603602049296997, "feedback": "The algorithm AdaptiveFireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.36123883527141365, 0.24614273296648348, 0.35142087276199785, 0.2823775164414303, 0.2313326351560635, 0.2881493440561421, 0.30854750835912925, 0.21244761198571305, 0.2698172074094014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05745393867378512, 0.0566572108736082, 0.061848599692900796, 0.07514170822771338, 0.028908296733410332, 0.06105106528476523, 0.060162502899905324, 0.05072878731149466, 0.055795828291995364, 0.05828508915893493, 0.03720434284830221, 0.04116301007291734, 0.0705791599601544, 0.04249118167416943, 0.04578739027609535, 0.0674189018315623, 0.03804179117866968, 0.0322254012677875, 0.06797743867919304, 0.04642856357131986, 0.057912106186488566, 0.061695167156984976, 0.04816542142974378, 0.05877661239255072, 0.08012003018484792, 0.05286994004387213, 0.06479761431560527, 0.18219160891362685, 0.06346689851161647, 0.053200612733520614, 0.16433678084785985, 0.046761297081914344, 0.14475584912410888, 0.13589920496065966, 0.0706977134299388, 0.15910884807205217, 0.1903725165664537, 0.22313293247899935, 0.11609510315596039, 0.2258320554270502, 0.15110292367388445, 0.13373031429514615, 0.11503410441229955, 0.10393944618151107, 0.15820599106430144, 0.128663651271391, 0.0569356474011391, 0.08828982730182033, 0.04350484497046492, 0.0915158394085005, 0.05997462500881634, 0.1259691412984797, 0.10545002038031093, 0.10729039513917671, 0.1360849470376646, 0.07968086594305501, 0.13681195268697244, 0.11085461097125293, 0.08750359437575483, 0.0977603687672205, 0.1267451014461367, 0.09439498226381571, 0.11227843464286036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028954831756835664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06569816278448126, 0.023015839278485495, 0.10778981321115644, 0.035800315516600456, 0.044062450184794266, 0.038088591677016614, 0.08066172724931242, 0.04718837327977854, 0.048485851720749595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05423323245633149, 0.006954814940538512, 0.06733121001836151, 0.03869060464543239, 0.018939567779586275, 0.05688120487252146, 0.030227043490519856, 0.02593289864301862, 0.049163840523701374, 0.2754308328995244, 0.2920711600557778, 0.32792913949383196, 0.26482562813033617, 0.2115113085014837, 0.2572593632486012, 0.32622633810536095, 0.20554594893184808, 0.33346150973730926, 0.025492781867634373, 0.023970878612168955, 0.05434786985797324, 0.07842259721303058, 0.025539291104483497, 0.07826678256340402, 0.0609895457248647, 0.0376651998604568, 0.05456588574655419, 0.1671468318114797, 0.12385687204057161, 0.1510760771802705, 0.14427810301271726, 0.15348386140297188, 0.15514697532542232, 0.13617738399278756, 0.12256012921947079, 0.1445851877210622, 0.1947925059011708, 0.1232153026634587, 0.22064288034093338, 0.21937080329496328, 0.2086490315692, 0.24420680377573734, 0.13817644516010152, 0.22182864336068764, 0.19519685995300728, 0.1539637925796571, 0.06353125109257984, 0.16477175889891327, 0.14743109636237206, 0.12904428237842547, 0.17655110201525004, 0.13947124016324142, 0.14860374366221984, 0.11722978538021767, 0.23420621605709624, 0.16297091008454734, 0.1924494791939052, 0.20579485267787345, 0.19198666931738184, 0.1873318120970925, 0.216522945395498, 0.17660826552554265, 0.22256774783443012, 0.1350476546176862, 0.12715562637260613, 0.13722621025457682, 0.11944603534376474, 0.11454656085662684, 0.13519548799669012, 0.13090364301074875, 0.11631933310544207, 0.11763165022627764, 0.12306315299175163, 0.13827259294705108, 0.3479006280258987, 0.3730703522550648, 0.16255844651546902, 0.10678565327750988, 0.21971101016180394, 0.11142384751649459, 0.30223320823828903, 0.304185743681742, 0.28522830761655005, 0.15201545381144332, 0.10681965852931297, 0.12429639579349494, 0.13633535005910513, 0.19617497977735143, 0.172236837461201, 0.16957853539760248, 0.18898972017201943, 0.19515165121920297, 0.17925388290821942, 0.18841665136516217, 0.19221192054263114, 0.19345508887187268, 0.21032907863760752, 0.1757558924716941, 0.181924289428552, 0.049737242286445715, 0.05549425233779781, 0.054521910329964896, 0.05109985823731944, 0.07777669470243331, 0.07925633024787948, 0.05272733069121638, 0.059375212646602504, 0.054556563544927106]}, "mutation_prompt": null}
{"id": "97722790-d2ca-4c00-bdf6-fa700a066521", "solution": "import numpy as np\n\nclass QuantumFireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        phi = np.random.uniform(0, np.pi)\n                        quantum_beta = beta * np.exp(1j * phi) \n                        population[i] += np.real(quantum_beta * (population[j] - population[i])) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "QuantumFireflyOptimization", "description": "A novel metaheuristic algorithm called \"Quantum Firefly Optimization Algorithm\" that incorporates quantum behaviors to enhance the search capability of fireflies in the solution space.", "configspace": "", "generation": 97, "fitness": 0.05429041238022263, "feedback": "The algorithm QuantumFireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.1206361264430974, 0.08498400032838016, 0.10234516108627811, 0.09578497527943797, 0.10750000009520266, 0.11042008850345264, 0.09997827981928309, 0.0756829985839671, 0.08081519211105403, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00916276369548319, 0.016351372789765284, 0.023772334058923095, 0.03727900320827071, 0.007905180197505302, 0.022943057685541723, 0.018248263482334326, 0.015241939324483256, 0.02723979298278123, 0.005716101532362128, 0.007247071894115997, 0.0008447743057493629, 0.03589143635638137, 0.0016592083734623397, 9.999999999998899e-05, 0.01688447087565348, 0.007834355398500747, 0.006682961122999931, 0.045179741609489454, 0.045385788542351646, 0.04474068200746828, 0.053340261193588256, 0.04687545855643349, 0.03880266068892069, 0.06621966342534358, 0.048986754550083944, 0.04107622583730375, 0.06277155243252652, 9.999999999998899e-05, 9.999999999998899e-05, 0.06075815211191349, 0.0003269644285841533, 0.012156053744555528, 9.999999999998899e-05, 0.011397659531043991, 9.999999999998899e-05, 0.10635789004939811, 0.11599038177181442, 0.059824388882108726, 0.09360633086131442, 0.07722826446974251, 0.007739473631148908, 0.03842025806046656, 0.059574284925487886, 0.03147761833505769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00326337664804921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012833145153285819, 0.027198565934497876, 0.007966165723724217, 0.0046884837396977685, 0.027176446714582747, 0.024640505726659323, 0.028120050130748697, 0.007847644300863599, 0.0021365554176728807, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11590207280389464, 0.15756555760738078, 0.1534091322868777, 0.11464517753917736, 0.10522440876665373, 0.097906605159921, 0.20499142244945823, 0.09875280119427421, 0.13227537911736909, 0.010083583735560175, 0.0024637149894908283, 0.02566543545809641, 0.044740206581370345, 0.0037248621011325422, 0.030481566652078573, 0.0024333892488382913, 0.004509597802356491, 0.030261322849820083, 0.14954316397560963, 0.12259114480267852, 0.12914932081737274, 0.13871918464572552, 0.1282330847209543, 0.12846561163812897, 0.12992488236033495, 0.11821175957969787, 0.13522121818438626, 0.12191479723759546, 0.11189752975911105, 0.1697185551350161, 0.14944021849617783, 0.12786020129422027, 0.13855773184144293, 0.13089930274928085, 0.17377774300845283, 0.1298962993528574, 0.06455934322183365, 0.06144482492365955, 0.08627477518448778, 0.08015591750595996, 0.0708625675687008, 0.07268050750764687, 0.0869533854153004, 0.0997711199450243, 0.08889079279099332, 0.16230074811596984, 0.11598022000168129, 0.15203031555087532, 0.14815190111106968, 0.10903760143872865, 0.12286369500923788, 0.15223877488853144, 0.11577154398056733, 0.13425477210821324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09138513358442046, 0.08426834408166739, 0.1060160476262687, 0.10972219466256627, 0.1396350033377335, 0.07929743603626027, 0.1070176662487543, 0.10905403411328518, 0.08748087641689051, 0.12012125432780996, 0.12301659774178098, 0.06932034027342138, 0.06875544171240577, 0.04693333336503602, 0.06300063957920443, 0.06496942135614059, 0.051460610899777715, 0.06512597085799476, 0.16736157208371982, 0.19760359906665848, 0.18538582491377764, 0.18487453812354404, 0.19213300956922785, 0.1852723619141733, 0.19876754985634748, 0.17940142175533746, 0.18055223463428316, 0.03289816451750249, 0.02805467796083083, 0.0377613402234267, 0.036737471952161815, 0.03557293821615004, 0.0346250461745129, 0.03609498935511091, 0.03833993572062444, 0.035572900987610234]}, "mutation_prompt": null}
{"id": "77aa8b2b-c042-44ee-918e-931c4eac04fc", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyOptimization", "description": "A novel metaheuristic algorithm called \"Firefly Optimization Algorithm\" inspired by the flashing behavior of fireflies to search the solution space by attracting each other towards a better solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
{"id": "767cbc2d-5ffa-4f6e-801e-3eefc2eb8b96", "solution": "import numpy as np\n\nclass MothFlameOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Minimization\n                        distance = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * distance**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                        population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                        fitness[i] = func(population[i])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "MothFlameOptimization", "description": "A novel metaheuristic algorithm \"Moth Flame Optimization\" mimicking the navigational behavior of moths around a flame to optimize black box functions.", "configspace": "", "generation": 99, "fitness": 0.15155609404954962, "feedback": "The algorithm MothFlameOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "22fb038b-7023-4011-ab96-71c5900f576f", "metadata": {"aucs": [0.3973127361739216, 0.34869698784563397, 0.41987934341380595, 0.34557559231950596, 0.3375465631480029, 0.3684608765768368, 0.3854653382211929, 0.3573254066923567, 0.36521043147396615, 9.999999999998899e-05, 0.0012395739748313206, 9.999999999998899e-05, 9.999999999998899e-05, 0.026234565753063155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110328142028988, 0.09572569768458039, 0.0638096319036473, 0.06742984131406082, 0.044354607418888414, 0.07662312755012257, 0.06665656637999473, 0.06943046975476552, 0.08111659521237158, 0.05918153275909954, 0.053472426272867746, 0.06174402680591051, 0.08879878515985873, 0.038110660909807526, 0.04621930114036277, 0.080055087087478, 0.08366579836484433, 0.06150583560427125, 0.4636231165841964, 0.2918126859088891, 0.08336340607897696, 0.10347486016117291, 0.0692833564303833, 0.09858872106181205, 0.16642490295123424, 0.13078886174148596, 0.3741622998848888, 0.23120766456235275, 0.17219734720679192, 0.12495859327108227, 0.23327152119673789, 0.16088138413952346, 0.2270294356963216, 0.20413423832253053, 0.14204971660116594, 0.21740660260025757, 0.2575917904938355, 0.507740255190146, 0.12521450523967137, 0.23726163103440334, 0.17122752467660174, 0.12414390956384325, 0.10180353790107255, 0.17177686814127735, 0.15658689974301288, 0.18593817820513692, 0.09680255118181036, 0.12819336871170217, 0.09256070349661727, 0.11461432557211415, 0.15528706804013515, 0.15720132416226373, 0.1557918922789855, 0.14788964208804678, 0.15722428115254738, 0.1194111648538525, 0.14465096191036608, 0.17847438959300432, 0.14569166226463892, 0.11141602129833827, 0.15404481322472496, 0.128994076999015, 0.14041252283941974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641615785744202, 9.999999999998899e-05, 9.999999999998899e-05, 0.07178878235168373, 0.044993289384786306, 0.13092730052143253, 0.03118594390775975, 0.04579736469484974, 0.04554965224450913, 0.11075406808481891, 0.06344395216090037, 0.07160883331041823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600565556363892, 0.033378104672053044, 0.08894392325477696, 0.06503996223240083, 0.052062058429815594, 0.09108389390897442, 0.0588830425586826, 0.06934228217291061, 0.05948591750318377, 0.35489666493012095, 0.3562203549249706, 0.39827469048373254, 0.3495151214816551, 0.29968334400351115, 0.33077721129032833, 0.39554616947912224, 0.31960088802718, 0.3788508476652721, 0.041876673120323726, 0.03784790076870881, 0.06571688628048455, 0.07461312044292356, 0.050771975691906834, 0.10408639860380786, 0.0641767921144214, 0.06048779005356897, 0.0810704124855467, 0.18306351483297545, 0.19193998338979779, 0.17117630652866989, 0.17529408936231283, 0.20338896044850552, 0.21798436081100103, 0.18922345571151067, 0.15324852291873392, 0.20853354406541014, 0.19573150470274459, 0.13060154833484872, 0.2559586276761, 0.224826612466133, 0.18554764656543576, 0.28121131439565783, 0.196792327213696, 0.2529248869397215, 0.21019649424384812, 0.17218685924542698, 0.06734550718675658, 0.20558295612637867, 0.1546673732759557, 0.1402262560760733, 0.16862304908351322, 0.15785366848958782, 0.18213533597981313, 0.16982054665000546, 0.20799830860940116, 0.17759206277758743, 0.19278681583842694, 0.23831357446507107, 0.16836742748588018, 0.21132195897265282, 0.211735851156705, 0.19205077736227827, 0.20785345103814545, 0.16536413481187862, 0.1558466571608509, 0.17140591289647977, 0.16423051920874077, 0.16062299826972848, 0.18101960067679956, 0.17108770162589304, 0.15089359463354157, 0.1620942486221737, 0.09682310340702716, 0.15610158556175646, 0.45526076514602376, 0.542122395099075, 0.1841518048417613, 0.16669355737523217, 0.49150316063670485, 0.15464883236811033, 0.14535968978696623, 0.3734766701784057, 0.29219517758242053, 0.3514188682438355, 0.16589305722475, 0.1635757789779605, 0.16069550961156331, 0.3400963417223437, 0.13502015026034042, 0.24853382963202075, 0.18592245556483689, 0.18690119451545406, 0.17391685296116954, 0.2048802598020515, 0.1783577743238266, 0.18561973499659257, 0.19035272314575502, 0.18281258955784419, 0.18723612286263058, 0.06170775599268785, 0.07248349372882024, 0.06562208069629794, 0.07421865839514852, 0.07657841419791278, 0.09221570676522717, 0.07538953554564631, 0.07631277583463747, 0.07446290264338273]}, "mutation_prompt": null}
