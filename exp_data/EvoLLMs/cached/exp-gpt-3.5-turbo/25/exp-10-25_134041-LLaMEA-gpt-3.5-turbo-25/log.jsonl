{"id": "8d9b783b-ffd9-4cc0-be6f-195c873728a5", "solution": "import numpy as np\n\nclass EHEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def pso_update(x, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            v = w * x['velocity'] + c1 * np.random.rand() * (p_best - x['position']) + c2 * np.random.rand() * (g_best - x['position'])\n            x['position'] = np.clip(x['position'] + v, -5.0, 5.0)\n            x['velocity'] = v\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        p_best_idx = np.argmin(fitness_values)\n        g_best_idx = p_best_idx\n        g_best = population[g_best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                r1, r2, r3 = np.random.choice(population, 3, replace=False)\n                new_ind = de_mutate(r1, r2, r3)\n                new_ind_fitness = objective_function(new_ind)\n\n                if new_ind_fitness < fitness_values[idx]:\n                    population[idx] = new_ind\n                    fitness_values[idx] = new_ind_fitness\n\n                if new_ind_fitness < fitness_values[p_best_idx]:\n                    p_best_idx = idx\n\n                p_best = population[p_best_idx]\n                g_best_fitness = objective_function(g_best)\n\n                if new_ind_fitness < g_best_fitness:\n                    g_best = new_ind\n\n                for i in range(self.population_size):\n                    population[i] = pso_update({'position': population[i], 'velocity': np.zeros(self.dim)}, p_best, g_best)\n\n        return g_best", "name": "EHEA", "description": "Efficient Hybrid Evolutionary Algorithm (EHEA) combining Differential Evolution (DE) and Particle Swarm Optimization (PSO) for robust optimization on continuous domains.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 34, in __call__\n  File \"mtrand.pyx\", line 930, in numpy.random.mtrand.RandomState.choice\nValueError: a must be 1-dimensional\n.", "error": "ValueError('a must be 1-dimensional')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 34, in __call__\n  File \"mtrand.pyx\", line 930, in numpy.random.mtrand.RandomState.choice\nValueError: a must be 1-dimensional\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "2cc013d0-8cbf-4eea-a5da-e439cf24c632", "solution": "import numpy as np\n\nclass EHEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def pso_update(x, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            v = w * x['velocity'] + c1 * np.random.rand() * (p_best - x['position']) + c2 * np.random.rand() * (g_best - x['position'])\n            x['position'] = np.clip(x['position'] + v, -5.0, 5.0)\n            x['velocity'] = v\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        p_best_idx = np.argmin(fitness_values)\n        g_best_idx = p_best_idx\n        g_best = population[g_best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                r1, r2, r3 = np.random.choice(population, 3, replace=False)\n                new_ind = de_mutate(r1, r2, r3)\n                new_ind_fitness = objective_function(new_ind)\n\n                if new_ind_fitness < fitness_values[idx]:\n                    population[idx] = new_ind\n                    fitness_values[idx] = new_ind_fitness\n\n                if new_ind_fitness < fitness_values[p_best_idx]:\n                    p_best_idx = idx\n\n                p_best = population[p_best_idx]\n                g_best_fitness = objective_function(g_best)\n\n                if new_ind_fitness < g_best_fitness:\n                    g_best = new_ind\n\n                for i in range(self.population_size):\n                    population[i] = pso_update({'position': population[i], 'velocity': np.zeros(self.dim)}, p_best, g_best)\n\n        return g_best", "name": "EHEA", "description": "Efficient Hybrid Evolutionary Algorithm (EHEA) combining Differential Evolution (DE) and Particle Swarm Optimization (PSO) for robust optimization on continuous domains.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8d9b783b-ffd9-4cc0-be6f-195c873728a5", "metadata": {}, "mutation_prompt": null}
{"id": "ecb8ccb1-bf4f-4162-9e5a-8d53050baf64", "solution": "import numpy as np\n\nclass EHEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def pso_update(x, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            v = w * x['velocity'] + c1 * np.random.rand() * (p_best - x['position']) + c2 * np.random.rand() * (g_best - x['position'])\n            x['position'] = np.clip(x['position'] + v, -5.0, 5.0)\n            x['velocity'] = v\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        p_best_idx = np.argmin(fitness_values)\n        g_best_idx = p_best_idx\n        g_best = population[g_best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                r1, r2, r3 = np.random.choice(population, 3, replace=False)\n                new_ind = de_mutate(r1, r2, r3)\n                new_ind_fitness = objective_function(new_ind)\n\n                if new_ind_fitness < fitness_values[idx]:\n                    population[idx] = new_ind\n                    fitness_values[idx] = new_ind_fitness\n\n                if new_ind_fitness < fitness_values[p_best_idx]:\n                    p_best_idx = idx\n\n                p_best = population[p_best_idx]\n                g_best_fitness = objective_function(g_best)\n\n                if new_ind_fitness < g_best_fitness:\n                    g_best = new_ind\n\n                for i in range(self.population_size):\n                    population[i] = pso_update({'position': population[i], 'velocity': np.zeros(self.dim)}, p_best, g_best)\n\n        return g_best", "name": "EHEA", "description": "Efficient Hybrid Evolutionary Algorithm (EHEA) combining Differential Evolution (DE) and Particle Swarm Optimization (PSO) for robust optimization on continuous domains.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8d9b783b-ffd9-4cc0-be6f-195c873728a5", "metadata": {}, "mutation_prompt": null}
{"id": "a3cf343c-93f8-494b-ba34-df5680cfa7b6", "solution": "import numpy as np\n\nclass CESO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def crossover(x1, x2):\n            alpha = np.random.uniform(0, 1, size=self.dim)\n            child = x1 * alpha + x2 * (1 - alpha)\n            return child\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        p_best_idx = np.argmin(fitness_values)\n        g_best_idx = p_best_idx\n        g_best = population[g_best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                r1, r2 = np.random.choice(population, 2, replace=False)\n                new_ind = crossover(ind, r1)\n                new_ind_fitness = objective_function(new_ind)\n\n                if new_ind_fitness < fitness_values[idx]:\n                    population[idx] = new_ind\n                    fitness_values[idx] = new_ind_fitness\n\n                if new_ind_fitness < fitness_values[p_best_idx]:\n                    p_best_idx = idx\n\n                p_best = population[p_best_idx]\n                g_best_fitness = objective_function(g_best)\n\n                if new_ind_fitness < g_best_fitness:\n                    g_best = new_ind\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.choice(population, 2, replace=False)\n                population[i] = crossover(population[i], r1)\n\n        return g_best", "name": "CESO", "description": "Introducing a Novel Algorithm called Crossover-based Evolutionary Swarm Optimization (CESO) that combines crossover operation from Evolutionary Algorithms and swarm behavior from Particle Swarm Optimization to enhance exploration and exploitation in optimization tasks.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "8d9b783b-ffd9-4cc0-be6f-195c873728a5", "metadata": {}, "mutation_prompt": null}
{"id": "f3c2a526-4ef9-44ef-803f-5fc09990658b", "solution": "import numpy as np\n\nclass ES_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def mutate(x, sigma):\n            return x + np.random.normal(0, sigma, size=self.dim)\n\n        population = initialize_population()\n        best_solution = population[np.argmin([objective_function(ind) for ind in population]).copy()\n        sigma = 0.1\n\n        for _ in range(self.max_iter):\n            for i in range(self.population_size):\n                new_solution = mutate(population[i], sigma)\n                if objective_function(new_solution) < objective_function(population[i]):\n                    population[i] = new_solution\n                    if objective_function(new_solution) < objective_function(best_solution):\n                        best_solution = new_solution\n                else:\n                    acceptance_probability = np.exp((objective_function(population[i]) - objective_function(new_solution)) / 1)\n                    if np.random.rand() < acceptance_probability:\n                        population[i] = new_solution\n\n            sigma *= 0.99  # Annealing the standard deviation\n\n        return best_solution", "name": "ES_SA", "description": "Implementing a Metaheuristic Optimization Algorithm combining Evolution Strategies (ES) and Simulated Annealing (SA) for versatile black box optimization.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 22, 9, '        sigma = 0.1\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 22, 9, '        sigma = 0.1\\n'))", "parent_id": "8d9b783b-ffd9-4cc0-be6f-195c873728a5", "metadata": {}, "mutation_prompt": null}
{"id": "7f41f087-ddf3-4006-bbb9-412baf05545c", "solution": "import numpy as np\n\nclass HAFA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def firefly_move(x, attractiveness, best, alpha=0.2):\n            r = np.random.uniform(-1, 1, size=self.dim)\n            distance = np.linalg.norm(x - best)\n            x += attractiveness * np.exp(-alpha * distance) * r\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                attractiveness = 1 / (1 + fitness_values[idx])\n                population[idx] = firefly_move(ind, attractiveness, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "HAFA", "description": "Introducing Hybrid Adaptive Firefly Algorithm (HAFA) incorporating Firefly Algorithm (FA) with Adaptive Evolution Strategies for enhanced optimization performance.", "configspace": "", "generation": 5, "fitness": 0.04548216186452609, "feedback": "The algorithm HAFA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "8d9b783b-ffd9-4cc0-be6f-195c873728a5", "metadata": {"aucs": [0.08933162680043094, 0.06463136198528485, 0.09432555861361269, 0.09012396370594722, 0.06221920929783864, 0.07736700600147217, 0.07861143124733372, 0.07473117584057054, 0.0697125821422736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014980836822906296, 0.007766949268587231, 0.01088371859009818, 0.003241147607464301, 0.006897737994836062, 0.022695855902503892, 9.999999999998899e-05, 0.011665147245921936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02171312732274333, 0.005903836277417085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04764576253633568, 0.04522697235821638, 0.04398068198486438, 0.053599685672371944, 0.0469435960318082, 0.03744240767784501, 0.06472789830423809, 0.049428065109532904, 0.03943738168524802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017297525728783292, 9.999999999998899e-05, 9.999999999998899e-05, 0.011471567019465723, 9.999999999998899e-05, 0.10075148723158822, 0.03775594762470191, 0.052233822106523387, 0.1268964143111534, 0.02828640668082405, 9.999999999998899e-05, 0.041534546764113056, 0.06967341970697905, 0.030807672433890043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022522490051123167, 9.999999999998899e-05, 0.046393994781700365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998794519783007, 0.13879659513922615, 0.1507250902421272, 0.09465748792581785, 0.09736497375348951, 0.09672722883412366, 0.16912145135663936, 0.0974267775728882, 0.12204071423774698, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00913283979550017, 9.999999999998899e-05, 0.02544659497291346, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07466286033394443, 0.0956390306361864, 0.08014875365698793, 0.10667305696503349, 0.11702992044010374, 0.06616607037275424, 0.11049716940110865, 0.10012586077739072, 0.0815997910755859, 0.1275497836402808, 0.13558284603372628, 0.15432857145927714, 0.14020926353096763, 0.12373934768308203, 0.12453645890953047, 0.12769727552144172, 0.17593294130380432, 0.11853625947308699, 0.04646633170981784, 0.03775659330926828, 0.08148166279794333, 0.07868293648477609, 0.07139130341723554, 0.06634074238875565, 0.08434874687731642, 0.10330483727297102, 0.07111811167538817, 0.14470328784097197, 0.11948593941938757, 0.15321026610369137, 0.15069668596050922, 0.1156391415021506, 0.13362689346216572, 0.12851838993782894, 0.10643264534588648, 0.13713718165630362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058399269113706964, 0.0825305395912419, 0.08665062642088395, 0.08647123008340463, 0.1207914665021157, 0.07928124974140993, 0.07401708855895017, 0.09697595040694418, 0.070945595180254, 0.11094104487000955, 0.10064107209935158, 0.020617890281754314, 0.05166628319151456, 0.03753586530814501, 0.045635747218529255, 0.05515755985701254, 0.04019044166964181, 0.04759550751346964, 0.1541128409701894, 0.14774686756531497, 0.15766957381389857, 0.15671794466189803, 0.1601950776271418, 0.16877077803536755, 0.16247006387139884, 0.17516109187667972, 0.15817958509709373, 0.018516405190831198, 0.028848061218650356, 0.04458529818306889, 0.03500760532392344, 0.04627428778798626, 0.02405201793757683, 0.024101541896661582, 0.011406039504302523, 0.030504882951016388]}, "mutation_prompt": null}
{"id": "4ded737b-9538-4b9b-adeb-20d923c983fd", "solution": "import numpy as np\n\nclass HAFA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def firefly_move(x, attractiveness, best, alpha=0.2):\n            r = np.random.uniform(-1, 1, size=self.dim)\n            distance = np.linalg.norm(x - best)\n            x += attractiveness * np.exp(-alpha * distance) * r\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                attractiveness = 1 / (1 + fitness_values[idx])\n                population[idx] = firefly_move(ind, attractiveness, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "HAFA", "description": "Introducing Hybrid Adaptive Firefly Algorithm (HAFA) incorporating Firefly Algorithm (FA) with Adaptive Evolution Strategies for enhanced optimization performance.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f41f087-ddf3-4006-bbb9-412baf05545c", "metadata": {"aucs": [0.08933162680043094, 0.06463136198528485, 0.09432555861361269, 0.09012396370594722, 0.06221920929783864, 0.07736700600147217, 0.07861143124733372, 0.07473117584057054, 0.0697125821422736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014980836822906296, 0.007766949268587231, 0.01088371859009818, 0.003241147607464301, 0.006897737994836062, 0.022695855902503892, 9.999999999998899e-05, 0.011665147245921936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02171312732274333, 0.005903836277417085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04764576253633568, 0.04522697235821638, 0.04398068198486438, 0.053599685672371944, 0.0469435960318082, 0.03744240767784501, 0.06472789830423809, 0.049428065109532904, 0.03943738168524802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017297525728783292, 9.999999999998899e-05, 9.999999999998899e-05, 0.011471567019465723, 9.999999999998899e-05, 0.10075148723158822, 0.03775594762470191, 0.052233822106523387, 0.1268964143111534, 0.02828640668082405, 9.999999999998899e-05, 0.041534546764113056, 0.06967341970697905, 0.030807672433890043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022522490051123167, 9.999999999998899e-05, 0.046393994781700365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998794519783007, 0.13879659513922615, 0.1507250902421272, 0.09465748792581785, 0.09736497375348951, 0.09672722883412366, 0.16912145135663936, 0.0974267775728882, 0.12204071423774698, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00913283979550017, 9.999999999998899e-05, 0.02544659497291346, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07466286033394443, 0.0956390306361864, 0.08014875365698793, 0.10667305696503349, 0.11702992044010374, 0.06616607037275424, 0.11049716940110865, 0.10012586077739072, 0.0815997910755859, 0.1275497836402808, 0.13558284603372628, 0.15432857145927714, 0.14020926353096763, 0.12373934768308203, 0.12453645890953047, 0.12769727552144172, 0.17593294130380432, 0.11853625947308699, 0.04646633170981784, 0.03775659330926828, 0.08148166279794333, 0.07868293648477609, 0.07139130341723554, 0.06634074238875565, 0.08434874687731642, 0.10330483727297102, 0.07111811167538817, 0.14470328784097197, 0.11948593941938757, 0.15321026610369137, 0.15069668596050922, 0.1156391415021506, 0.13362689346216572, 0.12851838993782894, 0.10643264534588648, 0.13713718165630362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058399269113706964, 0.0825305395912419, 0.08665062642088395, 0.08647123008340463, 0.1207914665021157, 0.07928124974140993, 0.07401708855895017, 0.09697595040694418, 0.070945595180254, 0.11094104487000955, 0.10064107209935158, 0.020617890281754314, 0.05166628319151456, 0.03753586530814501, 0.045635747218529255, 0.05515755985701254, 0.04019044166964181, 0.04759550751346964, 0.1541128409701894, 0.14774686756531497, 0.15766957381389857, 0.15671794466189803, 0.1601950776271418, 0.16877077803536755, 0.16247006387139884, 0.17516109187667972, 0.15817958509709373, 0.018516405190831198, 0.028848061218650356, 0.04458529818306889, 0.03500760532392344, 0.04627428778798626, 0.02405201793757683, 0.024101541896661582, 0.011406039504302523, 0.030504882951016388]}, "mutation_prompt": null}
{"id": "e05e4a97-442a-4642-9e83-30eec94008aa", "solution": "import numpy as np\n\nclass HAFA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def firefly_move(x, attractiveness, best, alpha=0.2):\n            r = np.random.uniform(-1, 1, size=self.dim)\n            distance = np.linalg.norm(x - best)\n            x += attractiveness * np.exp(-alpha * distance) * r\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                attractiveness = 1 / (1 + fitness_values[idx])\n                population[idx] = firefly_move(ind, attractiveness, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "HAFA", "description": "Introducing Hybrid Adaptive Firefly Algorithm (HAFA) incorporating Firefly Algorithm (FA) with Adaptive Evolution Strategies for enhanced optimization performance.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f41f087-ddf3-4006-bbb9-412baf05545c", "metadata": {"aucs": [0.08933162680043094, 0.06463136198528485, 0.09432555861361269, 0.09012396370594722, 0.06221920929783864, 0.07736700600147217, 0.07861143124733372, 0.07473117584057054, 0.0697125821422736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014980836822906296, 0.007766949268587231, 0.01088371859009818, 0.003241147607464301, 0.006897737994836062, 0.022695855902503892, 9.999999999998899e-05, 0.011665147245921936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02171312732274333, 0.005903836277417085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04764576253633568, 0.04522697235821638, 0.04398068198486438, 0.053599685672371944, 0.0469435960318082, 0.03744240767784501, 0.06472789830423809, 0.049428065109532904, 0.03943738168524802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017297525728783292, 9.999999999998899e-05, 9.999999999998899e-05, 0.011471567019465723, 9.999999999998899e-05, 0.10075148723158822, 0.03775594762470191, 0.052233822106523387, 0.1268964143111534, 0.02828640668082405, 9.999999999998899e-05, 0.041534546764113056, 0.06967341970697905, 0.030807672433890043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022522490051123167, 9.999999999998899e-05, 0.046393994781700365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998794519783007, 0.13879659513922615, 0.1507250902421272, 0.09465748792581785, 0.09736497375348951, 0.09672722883412366, 0.16912145135663936, 0.0974267775728882, 0.12204071423774698, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00913283979550017, 9.999999999998899e-05, 0.02544659497291346, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07466286033394443, 0.0956390306361864, 0.08014875365698793, 0.10667305696503349, 0.11702992044010374, 0.06616607037275424, 0.11049716940110865, 0.10012586077739072, 0.0815997910755859, 0.1275497836402808, 0.13558284603372628, 0.15432857145927714, 0.14020926353096763, 0.12373934768308203, 0.12453645890953047, 0.12769727552144172, 0.17593294130380432, 0.11853625947308699, 0.04646633170981784, 0.03775659330926828, 0.08148166279794333, 0.07868293648477609, 0.07139130341723554, 0.06634074238875565, 0.08434874687731642, 0.10330483727297102, 0.07111811167538817, 0.14470328784097197, 0.11948593941938757, 0.15321026610369137, 0.15069668596050922, 0.1156391415021506, 0.13362689346216572, 0.12851838993782894, 0.10643264534588648, 0.13713718165630362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058399269113706964, 0.0825305395912419, 0.08665062642088395, 0.08647123008340463, 0.1207914665021157, 0.07928124974140993, 0.07401708855895017, 0.09697595040694418, 0.070945595180254, 0.11094104487000955, 0.10064107209935158, 0.020617890281754314, 0.05166628319151456, 0.03753586530814501, 0.045635747218529255, 0.05515755985701254, 0.04019044166964181, 0.04759550751346964, 0.1541128409701894, 0.14774686756531497, 0.15766957381389857, 0.15671794466189803, 0.1601950776271418, 0.16877077803536755, 0.16247006387139884, 0.17516109187667972, 0.15817958509709373, 0.018516405190831198, 0.028848061218650356, 0.04458529818306889, 0.03500760532392344, 0.04627428778798626, 0.02405201793757683, 0.024101541896661582, 0.011406039504302523, 0.030504882951016388]}, "mutation_prompt": null}
{"id": "4764f9c5-f6dc-4442-a010-998022b9e00f", "solution": "import numpy as np\n\nclass HAFA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def firefly_move(x, attractiveness, best, alpha=0.2):\n            r = np.random.uniform(-1, 1, size=self.dim)\n            distance = np.linalg.norm(x - best)\n            x += attractiveness * np.exp(-alpha * distance) * r\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                attractiveness = 1 / (1 + fitness_values[idx])\n                population[idx] = firefly_move(ind, attractiveness, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "HAFA", "description": "Introducing Hybrid Adaptive Firefly Algorithm (HAFA) incorporating Firefly Algorithm (FA) with Adaptive Evolution Strategies for enhanced optimization performance.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f41f087-ddf3-4006-bbb9-412baf05545c", "metadata": {"aucs": [0.08933162680043094, 0.06463136198528485, 0.09432555861361269, 0.09012396370594722, 0.06221920929783864, 0.07736700600147217, 0.07861143124733372, 0.07473117584057054, 0.0697125821422736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014980836822906296, 0.007766949268587231, 0.01088371859009818, 0.003241147607464301, 0.006897737994836062, 0.022695855902503892, 9.999999999998899e-05, 0.011665147245921936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02171312732274333, 0.005903836277417085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04764576253633568, 0.04522697235821638, 0.04398068198486438, 0.053599685672371944, 0.0469435960318082, 0.03744240767784501, 0.06472789830423809, 0.049428065109532904, 0.03943738168524802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017297525728783292, 9.999999999998899e-05, 9.999999999998899e-05, 0.011471567019465723, 9.999999999998899e-05, 0.10075148723158822, 0.03775594762470191, 0.052233822106523387, 0.1268964143111534, 0.02828640668082405, 9.999999999998899e-05, 0.041534546764113056, 0.06967341970697905, 0.030807672433890043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022522490051123167, 9.999999999998899e-05, 0.046393994781700365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11998794519783007, 0.13879659513922615, 0.1507250902421272, 0.09465748792581785, 0.09736497375348951, 0.09672722883412366, 0.16912145135663936, 0.0974267775728882, 0.12204071423774698, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00913283979550017, 9.999999999998899e-05, 0.02544659497291346, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07466286033394443, 0.0956390306361864, 0.08014875365698793, 0.10667305696503349, 0.11702992044010374, 0.06616607037275424, 0.11049716940110865, 0.10012586077739072, 0.0815997910755859, 0.1275497836402808, 0.13558284603372628, 0.15432857145927714, 0.14020926353096763, 0.12373934768308203, 0.12453645890953047, 0.12769727552144172, 0.17593294130380432, 0.11853625947308699, 0.04646633170981784, 0.03775659330926828, 0.08148166279794333, 0.07868293648477609, 0.07139130341723554, 0.06634074238875565, 0.08434874687731642, 0.10330483727297102, 0.07111811167538817, 0.14470328784097197, 0.11948593941938757, 0.15321026610369137, 0.15069668596050922, 0.1156391415021506, 0.13362689346216572, 0.12851838993782894, 0.10643264534588648, 0.13713718165630362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058399269113706964, 0.0825305395912419, 0.08665062642088395, 0.08647123008340463, 0.1207914665021157, 0.07928124974140993, 0.07401708855895017, 0.09697595040694418, 0.070945595180254, 0.11094104487000955, 0.10064107209935158, 0.020617890281754314, 0.05166628319151456, 0.03753586530814501, 0.045635747218529255, 0.05515755985701254, 0.04019044166964181, 0.04759550751346964, 0.1541128409701894, 0.14774686756531497, 0.15766957381389857, 0.15671794466189803, 0.1601950776271418, 0.16877077803536755, 0.16247006387139884, 0.17516109187667972, 0.15817958509709373, 0.018516405190831198, 0.028848061218650356, 0.04458529818306889, 0.03500760532392344, 0.04627428778798626, 0.02405201793757683, 0.024101541896661582, 0.011406039504302523, 0.030504882951016388]}, "mutation_prompt": null}
{"id": "6dec3792-b5cc-42e3-8589-f0feaf57494a", "solution": "import numpy as np\n\nclass E_HAFA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def firefly_move(x, attractiveness, best, alpha=0.2):\n            r = np.random.uniform(-1, 1, size=self.dim)\n            distance = np.linalg.norm(x - best)\n            x += attractiveness * np.exp(-alpha * distance) * r\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        def de_move(x, population, f=0.5, cr=0.7):\n            a, b, c = np.random.choice(population, 3, replace=False)\n            mutant = np.clip(a + f * (b - c), -5.0, 5.0)\n            crossover = np.random.rand(self.dim) < cr\n            trial = np.where(crossover, mutant, x)\n            return trial\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                attractiveness = 1 / (1 + fitness_values[idx])\n                if np.random.rand() < 0.5:  # 0.25 probability to use DE strategy\n                    population[idx] = de_move(ind, population)\n                else:\n                    population[idx] = firefly_move(ind, attractiveness, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "E_HAFA", "description": "Enhancing Hybrid Adaptive Firefly Algorithm (E-HAFA) by incorporating Differential Evolution (DE) strategy for improved optimization performance.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "7f41f087-ddf3-4006-bbb9-412baf05545c", "metadata": {}, "mutation_prompt": null}
{"id": "407d06b1-0be1-42c7-b6b7-0d524619116a", "solution": "import numpy as np\n\nclass MHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            x = (1 - bandwidth) * x + bandwidth * best + bandwidth * r\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "MHSA", "description": "Introducing Meta-Harmony Search Algorithm (MHSA) combining Harmony Search with Metaheuristic Techniques for robust optimization performance.", "configspace": "", "generation": 10, "fitness": 0.08162733232424906, "feedback": "The algorithm MHSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "7f41f087-ddf3-4006-bbb9-412baf05545c", "metadata": {"aucs": [0.16354065876392976, 0.16952305532871337, 0.16290748125290577, 0.08952233024927114, 0.06934198272148095, 0.1031371817943928, 0.10407721884476995, 0.10007354862271167, 0.08432526963842046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05151859782147772, 0.054513610978995874, 0.05179816741783927, 0.05656561064275034, 0.046103911786398055, 0.056116054916303226, 0.042798540518292016, 0.061694354521643624, 0.05007488006496352, 0.047957563629904665, 0.04213472579519617, 0.05900752488039274, 0.04237747435513306, 0.03924342899397992, 0.03802823130216315, 0.03830839820166787, 0.025567794988540116, 0.033237107754611306, 0.04644853126422477, 0.04347469638248602, 0.04429385420456988, 0.053340261193588256, 0.04688175279618134, 0.037428727900089886, 0.0638860334912611, 0.04898696017486126, 0.0392018832149682, 0.09380496557186924, 0.09723246691951681, 0.08103496111482722, 0.10849242002029713, 0.030754116712574664, 0.012293047044062089, 9.999999999998899e-05, 0.04782618893647572, 9.999999999998899e-05, 0.11839758277327128, 0.10373252100981245, 0.11185931269477312, 0.13415467820335147, 0.11740412130885758, 0.10481112372412749, 0.06827151217862626, 0.09740384438453986, 0.09452805663877772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014348543122522983, 9.999999999998899e-05, 9.999999999998899e-05, 0.05671872944521705, 0.04608124103059874, 0.015317272476454535, 0.01113492308502062, 0.026144131875329935, 0.006532123231759557, 9.999999999998899e-05, 0.05109835133190388, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10014733170963686, 0.0822434566730843, 0.08070322707554367, 0.06100132689293691, 0.018525083263080555, 0.030648299269828705, 0.06756997062437187, 0.04482834199665653, 0.11936229000916065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20923838664498462, 0.1704350369268437, 0.18996422074777852, 0.15661055997402362, 0.14258232094828982, 0.14452159734393466, 0.20365460498652066, 0.19246470057907294, 0.20302822321988556, 0.045919313182331334, 0.03420069022106287, 0.010160003985856148, 0.04247333234224393, 0.042810863608542915, 0.04243661201982163, 0.035633273316576175, 0.03463722184778473, 0.03718306576034325, 0.1290053583126919, 0.15041801039621927, 0.134333169322988, 0.13582011089262547, 0.14636973781010454, 0.09173285894401073, 0.10792758484238296, 0.12320627045915822, 0.1217412980208954, 0.1519591172790169, 0.1735522467359346, 0.18614054636902877, 0.19330925377443764, 0.16884161197182712, 0.18820301383983928, 0.15610747341219577, 0.19538620259822714, 0.1672390792787839, 0.10239606862777384, 0.10888225274716301, 0.1237211596787392, 0.13767652977110478, 0.11653761025627574, 0.12931356902664515, 0.11599262734146765, 0.1436624379714494, 0.12471928058787252, 0.19041015137748607, 0.18707769984599187, 0.19010710499419015, 0.19467067000461324, 0.180693805557268, 0.20057530325020512, 0.19431485819762928, 0.20371170025878294, 0.2085461119352704, 0.11518842950988639, 0.10644203500868243, 0.14358657851525136, 0.12943638387293743, 0.12009468012090896, 0.11805441220586199, 0.1310637207502603, 0.12416958814829737, 0.12410555596075046, 0.08953629340724312, 0.10981183255749893, 0.12124675294432896, 0.13282062251200388, 0.1529995673184258, 0.13716893669795227, 0.08173891332820116, 0.13836397602192652, 0.19247567311241753, 0.16717629431547953, 0.11942667080429181, 0.08930091847772126, 0.0868240190018893, 0.07383398122740781, 0.11385395530960485, 0.14111377452403262, 0.12521722608861507, 0.11058533980559859, 0.18685637646125164, 0.18953843073206245, 0.18168096922872845, 0.18851806925867676, 0.1771628551600949, 0.19004514459803346, 0.19413418790225534, 0.1831267068296346, 0.1772244125908402, 0.06085059829110773, 0.061297349028599624, 0.06431915027725776, 0.07140634860008721, 0.07703333900612319, 0.060218235012250765, 0.05496089276337701, 0.06418261059170671, 0.07441309205409474]}, "mutation_prompt": null}
{"id": "10fc6f19-9446-4059-a2c7-bbd1b2371581", "solution": "import numpy as np\n\nclass EnhancedMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.bandwidth = 0.01\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best):\n            r = np.random.rand(self.dim)\n            x = (1 - self.bandwidth) * x + self.bandwidth * best + self.bandwidth * r\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            # Dynamic adaptation of bandwidth\n            self.bandwidth *= 0.99\n\n        return best", "name": "EnhancedMHSA", "description": "Enhancing Meta-Harmony Search Algorithm (MHSA) by incorporating a dynamic adaptation mechanism for bandwidth adjustment during the optimization process.", "configspace": "", "generation": 11, "fitness": 0.06335331883874872, "feedback": "The algorithm EnhancedMHSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "407d06b1-0be1-42c7-b6b7-0d524619116a", "metadata": {"aucs": [0.1316192918539495, 0.11307110057701886, 0.14064598316215304, 0.08952233024927114, 0.06669711260498357, 0.0984992844754281, 0.10031886900981812, 0.0961563708383888, 0.08323697196040125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029373723332727253, 0.037886401283818705, 0.031155629501449233, 0.03403554059018621, 0.023936947160018263, 0.045179922412399875, 0.023032390078265186, 0.018521292635928277, 0.04423580481942868, 0.014885920666270924, 0.009701142511676752, 0.01694953685421008, 0.028648590260979323, 0.012320435840302846, 0.004077949942067227, 0.020208656784326595, 0.007349448432843353, 0.0026968717973774314, 0.04582751615737124, 0.0429255315580771, 0.043462241879622, 0.053340261193588256, 0.04688175279618134, 0.037428727900089886, 0.0638860334912611, 0.04898696017486126, 0.0392018832149682, 0.04684562999768005, 0.026732149266430638, 9.999999999998899e-05, 0.07898447375679607, 0.01548586120504114, 0.0018154663845932895, 9.999999999998899e-05, 0.035026795362212426, 9.999999999998899e-05, 0.10027683525177622, 0.06790074257930756, 0.07979967918088826, 0.09988233441569427, 0.0623568337071998, 0.037213461629478695, 0.05234884798423012, 0.06467451669967572, 0.049678282106258354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13410187761311188, 0.059376041017119685, 0.07322917279758445, 0.05704413262890118, 0.00032597216286889275, 0.021215854120625766, 9.999999999998899e-05, 0.011526035086185993, 0.02853623394112126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14760046403654248, 0.15819562595359404, 0.1686443998062609, 0.13285232858552976, 0.10821843656409114, 0.11931586320062337, 0.17969072285024978, 0.14246489701064036, 0.16224142889807813, 0.03904663121789853, 0.01563616624205455, 9.999999999998899e-05, 0.028850082238683128, 0.024857988979233747, 0.04363781296329583, 0.02485235638828276, 0.02247896158287599, 0.03437485628927128, 0.12653785929880323, 0.15336139353429024, 0.11000167964530361, 0.1312307677838811, 0.1313846564946476, 0.10248562615665469, 0.10375097402051581, 0.10737235988443172, 0.10395573535648128, 0.12950112418881765, 0.14982901754197553, 0.1459248668043529, 0.16086753270147947, 0.14245302661335157, 0.1493756720835765, 0.14086013068589287, 0.1747814720023918, 0.14706484909493245, 0.08192473213368068, 0.07873418804299637, 0.08576165160288363, 0.10617990316111359, 0.0955979310069428, 0.10133653679890975, 0.09363688748320598, 0.10789331099373589, 0.0939439550731237, 0.18304744378591742, 0.16190049055812195, 0.20783682331974174, 0.18708291748928418, 0.16001420824431667, 0.18824533900618545, 0.1915308700091125, 0.15453258970683803, 0.18317144775398597, 0.052882249582941965, 9.999999999998899e-05, 0.10665751096437948, 0.11021545780931952, 0.09240102999465671, 0.09264142229531114, 0.05947669803067168, 0.05089673141128204, 0.07576971459438342, 0.06812276054614574, 0.0961292955997547, 0.10924400312751736, 0.10265076581174348, 0.15164854989358934, 0.0858814962837654, 0.07327880109192497, 0.10688975096033848, 0.08916427331806986, 0.1124092074670694, 0.10524353623069638, 0.03609078949912581, 0.0638529132519634, 0.05176866779948264, 0.05334757229188458, 0.059409002208415274, 0.053077811369008354, 0.05586018883377564, 0.19160930851819047, 0.197003016645802, 0.17631597793020914, 0.19011164004950953, 0.19379792336289836, 0.1725153913872144, 0.20361872396155367, 0.18094407506575394, 0.19499414790393732, 0.05380206006305921, 0.045183500180472014, 0.049766577855787864, 0.07081588810715733, 0.061099624607416025, 0.05837867801961638, 0.05151239404372587, 0.049366596040457233, 0.046120495394175176]}, "mutation_prompt": null}
{"id": "0527c20e-b5fa-4406-916a-20f38ea2cbe0", "solution": "import numpy as np\n\nclass MHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            x = (1 - bandwidth) * x + bandwidth * best + bandwidth * r\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "MHSA", "description": "Introducing Meta-Harmony Search Algorithm (MHSA) combining Harmony Search with Metaheuristic Techniques for robust optimization performance.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "407d06b1-0be1-42c7-b6b7-0d524619116a", "metadata": {"aucs": [0.16354065876392976, 0.16952305532871337, 0.16290748125290577, 0.08952233024927114, 0.06934198272148095, 0.1031371817943928, 0.10407721884476995, 0.10007354862271167, 0.08432526963842046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05151859782147772, 0.054513610978995874, 0.05179816741783927, 0.05656561064275034, 0.046103911786398055, 0.056116054916303226, 0.042798540518292016, 0.061694354521643624, 0.05007488006496352, 0.047957563629904665, 0.04213472579519617, 0.05900752488039274, 0.04237747435513306, 0.03924342899397992, 0.03802823130216315, 0.03830839820166787, 0.025567794988540116, 0.033237107754611306, 0.04644853126422477, 0.04347469638248602, 0.04429385420456988, 0.053340261193588256, 0.04688175279618134, 0.037428727900089886, 0.0638860334912611, 0.04898696017486126, 0.0392018832149682, 0.09380496557186924, 0.09723246691951681, 0.08103496111482722, 0.10849242002029713, 0.030754116712574664, 0.012293047044062089, 9.999999999998899e-05, 0.04782618893647572, 9.999999999998899e-05, 0.11839758277327128, 0.10373252100981245, 0.11185931269477312, 0.13415467820335147, 0.11740412130885758, 0.10481112372412749, 0.06827151217862626, 0.09740384438453986, 0.09452805663877772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014348543122522983, 9.999999999998899e-05, 9.999999999998899e-05, 0.05671872944521705, 0.04608124103059874, 0.015317272476454535, 0.01113492308502062, 0.026144131875329935, 0.006532123231759557, 9.999999999998899e-05, 0.05109835133190388, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10014733170963686, 0.0822434566730843, 0.08070322707554367, 0.06100132689293691, 0.018525083263080555, 0.030648299269828705, 0.06756997062437187, 0.04482834199665653, 0.11936229000916065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20923838664498462, 0.1704350369268437, 0.18996422074777852, 0.15661055997402362, 0.14258232094828982, 0.14452159734393466, 0.20365460498652066, 0.19246470057907294, 0.20302822321988556, 0.045919313182331334, 0.03420069022106287, 0.010160003985856148, 0.04247333234224393, 0.042810863608542915, 0.04243661201982163, 0.035633273316576175, 0.03463722184778473, 0.03718306576034325, 0.1290053583126919, 0.15041801039621927, 0.134333169322988, 0.13582011089262547, 0.14636973781010454, 0.09173285894401073, 0.10792758484238296, 0.12320627045915822, 0.1217412980208954, 0.1519591172790169, 0.1735522467359346, 0.18614054636902877, 0.19330925377443764, 0.16884161197182712, 0.18820301383983928, 0.15610747341219577, 0.19538620259822714, 0.1672390792787839, 0.10239606862777384, 0.10888225274716301, 0.1237211596787392, 0.13767652977110478, 0.11653761025627574, 0.12931356902664515, 0.11599262734146765, 0.1436624379714494, 0.12471928058787252, 0.19041015137748607, 0.18707769984599187, 0.19010710499419015, 0.19467067000461324, 0.180693805557268, 0.20057530325020512, 0.19431485819762928, 0.20371170025878294, 0.2085461119352704, 0.11518842950988639, 0.10644203500868243, 0.14358657851525136, 0.12943638387293743, 0.12009468012090896, 0.11805441220586199, 0.1310637207502603, 0.12416958814829737, 0.12410555596075046, 0.08953629340724312, 0.10981183255749893, 0.12124675294432896, 0.13282062251200388, 0.1529995673184258, 0.13716893669795227, 0.08173891332820116, 0.13836397602192652, 0.19247567311241753, 0.16717629431547953, 0.11942667080429181, 0.08930091847772126, 0.0868240190018893, 0.07383398122740781, 0.11385395530960485, 0.14111377452403262, 0.12521722608861507, 0.11058533980559859, 0.18685637646125164, 0.18953843073206245, 0.18168096922872845, 0.18851806925867676, 0.1771628551600949, 0.19004514459803346, 0.19413418790225534, 0.1831267068296346, 0.1772244125908402, 0.06085059829110773, 0.061297349028599624, 0.06431915027725776, 0.07140634860008721, 0.07703333900612319, 0.060218235012250765, 0.05496089276337701, 0.06418261059170671, 0.07441309205409474]}, "mutation_prompt": null}
{"id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "solution": "import numpy as np\n\nclass EnhancedMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "EnhancedMHSA", "description": "Enhancing Meta-Harmony Search Algorithm by introducing a novel Harmony Search operator for diversification and improving local search capabilities.", "configspace": "", "generation": 13, "fitness": 0.09095873538646969, "feedback": "The algorithm EnhancedMHSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "407d06b1-0be1-42c7-b6b7-0d524619116a", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "52c3658a-305b-4aa0-a6be-72b9fa2d3579", "solution": "import numpy as np\n\nclass EnhancedMHSARefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "EnhancedMHSARefined", "description": "Introducing a novel Harmony Search operator for diversification and improving local search capabilities in Meta-Harmony Search Algorithm.", "configspace": "", "generation": 14, "fitness": 0.09095873538646969, "feedback": "The algorithm EnhancedMHSARefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "cf3d3347-e037-43c3-be72-85f10a6451ae", "solution": "import numpy as np\n\nclass EnhancedMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "EnhancedMHSA", "description": "Enhancing Meta-Harmony Search Algorithm by introducing a novel Harmony Search operator for diversification and improving local search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "f9bdc3b5-41e0-4075-8310-33b4732d036b", "solution": "import numpy as np\n\nclass EnhancedMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "EnhancedMHSA", "description": "Enhancing Meta-Harmony Search Algorithm by introducing a novel Harmony Search operator for diversification and improving local search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "bd5a778a-8a1b-42f1-8fdc-57554f7482de", "solution": "import numpy as np\n\nclass EnhancedMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "EnhancedMHSA", "description": "Enhancing Meta-Harmony Search Algorithm by introducing a novel Harmony Search operator for diversification and improving local search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "a1d16798-5de7-48a9-a506-4e56e8f83f72", "solution": "import numpy as np\n\nclass EnhancedMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "EnhancedMHSA", "description": "Enhancing Meta-Harmony Search Algorithm by introducing a novel Harmony Search operator for diversification and improving local search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "8dd4a2d9-96c5-4bd5-a906-8d1d855fbf96", "solution": "import numpy as np\n\nclass RefinedEnhancedMHSA(EnhancedMHSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def harmony_search_move(x, best, bandwidth=0.05):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.25, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        return super().__call__(func)", "name": "RefinedEnhancedMHSA", "description": "Refining Enhanced Meta-Harmony Search Algorithm by adjusting probability and bandwidth parameters in the harmony search move.", "configspace": "", "generation": 19, "fitness": 0.09095873538646969, "feedback": "The algorithm RefinedEnhancedMHSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "b56b824e-bbf8-4eb4-a8d0-5ca5ffe9e19e", "solution": "import numpy as np\n\nclass EnhancedMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "EnhancedMHSA", "description": "Enhancing Meta-Harmony Search Algorithm by introducing a novel Harmony Search operator for diversification and improving local search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "4040ddf6-add2-4dae-aba7-32c71b934f03", "solution": "import numpy as np\n\nclass EnhancedMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "EnhancedMHSA", "description": "Enhancing Meta-Harmony Search Algorithm by introducing a novel Harmony Search operator for diversification and improving local search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "d8c9d67f-e88a-4cf2-b25c-a033e3c255a8", "solution": "import numpy as np\n\nclass EnhancedMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "EnhancedMHSA", "description": "Enhancing Meta-Harmony Search Algorithm by introducing a novel Harmony Search operator for diversification and improving local search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "a58f5a1e-44e2-4a8f-bcfe-776b8ed4c0d1", "solution": "import numpy as np\n\nclass EnhancedMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "EnhancedMHSA", "description": "Enhancing Meta-Harmony Search Algorithm by introducing a novel Harmony Search operator for diversification and improving local search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "09c875fa-6299-49ac-9b09-e7714daea140", "solution": "import numpy as np\n\nclass EnhancedMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "EnhancedMHSA", "description": "Enhancing Meta-Harmony Search Algorithm by introducing a novel Harmony Search operator for diversification and improving local search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "2e829c7b-cfed-4c07-9859-c3359c4e7a01", "solution": "import numpy as np\n\nclass EnhancedMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "EnhancedMHSA", "description": "Enhancing Meta-Harmony Search Algorithm by introducing a novel Harmony Search operator for diversification and improving local search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "d1774c5c-91d6-4ffa-bb57-257fae8b43d9", "solution": "import numpy as np\n\nclass EnhancedMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                population[idx] = harmony_search_move(ind, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "EnhancedMHSA", "description": "Enhancing Meta-Harmony Search Algorithm by introducing a novel Harmony Search operator for diversification and improving local search capabilities.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.19898344400392542, 0.16086379824391128, 0.24706454594372895, 0.1486268418322486, 0.19153537637958706, 0.1846623232959158, 0.1726340057808402, 0.1668525590464004, 0.20245242247323125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03973847563629984, 0.05881979834480189, 0.04291835587563708, 0.04318292568844395, 0.04172286838259154, 0.04926777728860887, 0.04132221169280059, 0.0550710977861234, 0.05218839623866167, 0.026488252992347583, 0.038265478103450046, 0.02733689294538255, 0.06401944486825129, 0.04131598539610837, 0.0268628745681595, 0.03771501640353636, 0.027930983424733324, 0.022836383437754515, 0.07826441139925788, 0.0799521355185443, 0.08119266683231419, 0.07977822148146263, 0.07417874996009288, 0.08122052347057374, 0.11214844303878513, 0.0820618876662893, 0.08724009426073531, 0.08712852281284145, 0.0811769126583084, 0.12111202199433557, 0.08812270744209749, 0.07356661482299165, 0.09801443918889308, 0.09684327756333022, 0.0707504678948202, 0.0665149324019152, 0.1199366374252806, 0.19512785228251572, 0.140357583201839, 0.11084807892656501, 0.12132561291869226, 0.10069303072951385, 0.13855933020516253, 0.1255274405458051, 0.11488830479312984, 0.01821959454925237, 0.015841603730184062, 0.0020425111090250914, 0.012482306367665452, 9.999999999998899e-05, 0.07054830130275169, 0.017596114138780816, 0.0003874158819003881, 0.0028102772064881876, 0.002650641953262811, 0.0009983608360613072, 9.999999999998899e-05, 0.007411781806100359, 0.0007599854059604505, 9.999999999998899e-05, 0.013136556863046822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03158814596526749, 0.06085599428945587, 0.04212671700695503, 0.047357796837958044, 0.04971021960861366, 0.04618407464417229, 0.026422528864272876, 0.08893311892299238, 0.035236263303106585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007731327517050524, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034422653791699176, 0.0024503693794271086, 9.999999999998899e-05, 0.18365282764602986, 0.19657549480087544, 0.22243996614204742, 0.20726682221853765, 0.18774430435639566, 0.18040345654760281, 0.20778187767094725, 0.18730971570401156, 0.19989585437640367, 0.04428541001226516, 0.04215278826865687, 0.03956482772190917, 0.0471897184270047, 0.05516581251772823, 0.04491303440182237, 0.04516513218949969, 0.041337601063081486, 0.043673848113537694, 0.16194672856872772, 0.12456257862935749, 0.1277590156489421, 0.13216915522455897, 0.1410230893641341, 0.12694214745286658, 0.2106826352065283, 0.1269657268731753, 0.13701395916242598, 0.15866892629830487, 0.16945829880917973, 0.1638455447290249, 0.16086900877273436, 0.17033072331413224, 0.17940879927246156, 0.15886992286073198, 0.1754118530764195, 0.17901411711320014, 0.11515263634004769, 0.11153897538134605, 0.09633793212417263, 0.10512760653068531, 0.11773201016875012, 0.12147071288460287, 0.11566221985162595, 0.10397916842037613, 0.1129343093805052, 0.16864973339899625, 0.15106133933937582, 0.18432069687183594, 0.1543393272076532, 0.17222201577311647, 0.16110345439329887, 0.17992136553142368, 0.14957827325487993, 0.1753343621483776, 0.14422141882516681, 0.15331817569964423, 0.137865026389702, 0.15574788022364194, 0.14254465702018593, 0.1408906477521341, 0.14366676773519815, 0.14225410840774444, 0.1500428428555901, 0.14520309654263142, 0.1622470152692842, 0.183159823142236, 0.15594050859284703, 0.1590813493437261, 0.17489544430576265, 0.18148312697752622, 0.14409421813711965, 0.16286552975657365, 0.1618686678400545, 0.1492142568511866, 0.14598535148228498, 0.14919013492055233, 0.18527105106010544, 0.164885660369662, 0.15342062842128912, 0.16722544617920498, 0.20030811134931215, 0.19020981171727902, 0.19091983797483125, 0.18247348097652927, 0.18081099877376328, 0.1847196829020199, 0.1823461331480768, 0.18981616593187822, 0.2004310251509438, 0.17503016504509328, 0.05595477725503373, 0.05857858752934064, 0.055790892260083824, 0.06035471127464953, 0.06453892075004641, 0.05412483215583541, 0.054974403072004296, 0.046010785139427024, 0.06034815387667691]}, "mutation_prompt": null}
{"id": "07db4ba4-5d4a-47b4-95b3-1e12b3a1fd9b", "solution": "import numpy as np\n\nclass AdaptiveBandwidthMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                bandwidth = 0.01 + 0.24 * np.random.rand()\n                population[idx] = harmony_search_move(ind, best, bandwidth)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "AdaptiveBandwidthMHSA", "description": "Introducing a modified Harmony Search operator with adaptive bandwidth control for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 27, "fitness": 0.09605412106007068, "feedback": "The algorithm AdaptiveBandwidthMHSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "aefcb0cf-619c-4055-8cb4-35c85398475e", "metadata": {"aucs": [0.20113438579265708, 0.18806856026803476, 0.22361211242990975, 0.2220565960558215, 0.20208749822744587, 0.17777229776358183, 0.1845405989313671, 0.1618612794669334, 0.1819437008379301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060135976835367, 0.04899172604678348, 0.06482335694882169, 0.05115443363913874, 0.044456869171903834, 0.05181636802417544, 0.06266973793318853, 0.05907098317056503, 0.044820715914606235, 0.042075534775909196, 0.03570824244294435, 0.04094695050286867, 0.0474927704416539, 0.04008847773690871, 0.05280748571339078, 0.04952162955843564, 0.03350901325746525, 0.03203654619844076, 0.07511621898785559, 0.0782198538836919, 0.07656410019619309, 0.07099594843892554, 0.09518023103970896, 0.07325194724889883, 0.0715408565335438, 0.08380846629278982, 0.07350599525065904, 0.07589100655640446, 0.13456382828200752, 0.0785109197660937, 0.09530417109903488, 0.06630521790537114, 0.07049841409151436, 0.08853646002424143, 0.06784302528927888, 0.10220463724367201, 0.14543055232362345, 0.12850738110411875, 0.1349053352701094, 0.11975990187062524, 0.12457806181784947, 0.13323246288077084, 0.12382290411008667, 0.18439258581422524, 0.1392374885596771, 0.02259930849830294, 0.00384729444518106, 0.003265928455709388, 9.999999999998899e-05, 0.0021889378331201303, 0.009329469692606063, 0.003209228649079021, 9.999999999998899e-05, 0.0053341294980279175, 0.0021925421437385406, 0.012435138190650452, 0.008757432598437975, 0.027015185405705466, 0.07555423154121421, 0.025117264012839424, 0.00858269874376505, 0.020698503707481497, 0.008470492042922495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059933072319817815, 0.04905262767746099, 0.05009439208324218, 0.040360262591288665, 0.07285046168725473, 0.07973812921646917, 0.061197567935656116, 0.03585161151185545, 0.08787487900818869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002822677762355119, 9.999999999998899e-05, 9.999999999998899e-05, 0.01976360561398871, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22296060587744615, 0.21228589188933455, 0.202774642247604, 0.22441020903915432, 0.18202495686759934, 0.20219141090464587, 0.19792862921620735, 0.188538593036491, 0.21177404683045298, 0.04428871635016307, 0.05095802898917523, 0.05279714391046364, 0.045748862122982015, 0.04294245607223823, 0.04874415513734254, 0.06859671984996896, 0.04565519006294039, 0.05699381654853719, 0.1324010791604633, 0.15098556714900702, 0.13681825164997719, 0.14836931153415533, 0.15024223100093426, 0.13866871404453796, 0.15077710181697745, 0.1632577771460163, 0.13060928669694827, 0.16038391189689916, 0.1858936713247772, 0.16452766769810245, 0.16435179186850524, 0.17167374127364432, 0.17172926159448088, 0.16601378986329252, 0.17377774300845283, 0.16149008069918314, 0.10464507352880537, 0.12586965192927424, 0.10604007216807332, 0.1066681203933838, 0.10868575254218138, 0.11910046278889108, 0.11768171604367039, 0.10512286725622921, 0.11103736405502673, 0.17278607773648313, 0.17915408819207534, 0.19039200932301414, 0.15945806546602237, 0.16269123036633282, 0.2076235560720101, 0.1560960737812369, 0.1603382372522164, 0.160843432849463, 0.1533612167701227, 0.14930960845302166, 0.16053302826085714, 0.15476319321431642, 0.15660022475125823, 0.14640763909731924, 0.14840027676042178, 0.15387430000267976, 0.14611037762347312, 0.1685164659115208, 0.19698144001789775, 0.1722942010350227, 0.1930710431058671, 0.21718699095414018, 0.16676557699815564, 0.2450346565885212, 0.1831705951707776, 0.16141397557307102, 0.20008712356304004, 0.17755851012860258, 0.14235491118402155, 0.24243090676817336, 0.17580861730110642, 0.18565575071600204, 0.1748468256957587, 0.17421626538484325, 0.18152973470018452, 0.18585177039647338, 0.18529844393752581, 0.18296390816035324, 0.18275125858531105, 0.18190219747355274, 0.18614525274713567, 0.18138679924473222, 0.18858851622925943, 0.21172625423878255, 0.05196542545727012, 0.054655145608832, 0.06051535904469352, 0.07039645551309381, 0.06254978804457278, 0.0734081698550193, 0.059910454097883536, 0.05268190804081074, 0.05977640467972911]}, "mutation_prompt": null}
{"id": "802406a5-f03b-475e-9327-a7417d171901", "solution": "import numpy as np\n\nclass AdaptiveBandwidthMHSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def harmony_search_move(x, best, bandwidth=0.01):\n            r = np.random.rand(self.dim)\n            prob = np.random.rand(self.dim)\n            x = np.where(prob < 0.5, (1 - bandwidth) * x + bandwidth * best + bandwidth * r, np.random.uniform(-5.0, 5.0, size=(self.dim)))\n            x = np.clip(x, -5.0, 5.0)\n            return x\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                bandwidth = 0.01 + 0.24 * np.random.rand()\n                population[idx] = harmony_search_move(ind, best, bandwidth)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "AdaptiveBandwidthMHSA", "description": "Introducing a modified Harmony Search operator with adaptive bandwidth control for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07db4ba4-5d4a-47b4-95b3-1e12b3a1fd9b", "metadata": {"aucs": [0.20113438579265708, 0.18806856026803476, 0.22361211242990975, 0.2220565960558215, 0.20208749822744587, 0.17777229776358183, 0.1845405989313671, 0.1618612794669334, 0.1819437008379301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060135976835367, 0.04899172604678348, 0.06482335694882169, 0.05115443363913874, 0.044456869171903834, 0.05181636802417544, 0.06266973793318853, 0.05907098317056503, 0.044820715914606235, 0.042075534775909196, 0.03570824244294435, 0.04094695050286867, 0.0474927704416539, 0.04008847773690871, 0.05280748571339078, 0.04952162955843564, 0.03350901325746525, 0.03203654619844076, 0.07511621898785559, 0.0782198538836919, 0.07656410019619309, 0.07099594843892554, 0.09518023103970896, 0.07325194724889883, 0.0715408565335438, 0.08380846629278982, 0.07350599525065904, 0.07589100655640446, 0.13456382828200752, 0.0785109197660937, 0.09530417109903488, 0.06630521790537114, 0.07049841409151436, 0.08853646002424143, 0.06784302528927888, 0.10220463724367201, 0.14543055232362345, 0.12850738110411875, 0.1349053352701094, 0.11975990187062524, 0.12457806181784947, 0.13323246288077084, 0.12382290411008667, 0.18439258581422524, 0.1392374885596771, 0.02259930849830294, 0.00384729444518106, 0.003265928455709388, 9.999999999998899e-05, 0.0021889378331201303, 0.009329469692606063, 0.003209228649079021, 9.999999999998899e-05, 0.0053341294980279175, 0.0021925421437385406, 0.012435138190650452, 0.008757432598437975, 0.027015185405705466, 0.07555423154121421, 0.025117264012839424, 0.00858269874376505, 0.020698503707481497, 0.008470492042922495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059933072319817815, 0.04905262767746099, 0.05009439208324218, 0.040360262591288665, 0.07285046168725473, 0.07973812921646917, 0.061197567935656116, 0.03585161151185545, 0.08787487900818869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002822677762355119, 9.999999999998899e-05, 9.999999999998899e-05, 0.01976360561398871, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22296060587744615, 0.21228589188933455, 0.202774642247604, 0.22441020903915432, 0.18202495686759934, 0.20219141090464587, 0.19792862921620735, 0.188538593036491, 0.21177404683045298, 0.04428871635016307, 0.05095802898917523, 0.05279714391046364, 0.045748862122982015, 0.04294245607223823, 0.04874415513734254, 0.06859671984996896, 0.04565519006294039, 0.05699381654853719, 0.1324010791604633, 0.15098556714900702, 0.13681825164997719, 0.14836931153415533, 0.15024223100093426, 0.13866871404453796, 0.15077710181697745, 0.1632577771460163, 0.13060928669694827, 0.16038391189689916, 0.1858936713247772, 0.16452766769810245, 0.16435179186850524, 0.17167374127364432, 0.17172926159448088, 0.16601378986329252, 0.17377774300845283, 0.16149008069918314, 0.10464507352880537, 0.12586965192927424, 0.10604007216807332, 0.1066681203933838, 0.10868575254218138, 0.11910046278889108, 0.11768171604367039, 0.10512286725622921, 0.11103736405502673, 0.17278607773648313, 0.17915408819207534, 0.19039200932301414, 0.15945806546602237, 0.16269123036633282, 0.2076235560720101, 0.1560960737812369, 0.1603382372522164, 0.160843432849463, 0.1533612167701227, 0.14930960845302166, 0.16053302826085714, 0.15476319321431642, 0.15660022475125823, 0.14640763909731924, 0.14840027676042178, 0.15387430000267976, 0.14611037762347312, 0.1685164659115208, 0.19698144001789775, 0.1722942010350227, 0.1930710431058671, 0.21718699095414018, 0.16676557699815564, 0.2450346565885212, 0.1831705951707776, 0.16141397557307102, 0.20008712356304004, 0.17755851012860258, 0.14235491118402155, 0.24243090676817336, 0.17580861730110642, 0.18565575071600204, 0.1748468256957587, 0.17421626538484325, 0.18152973470018452, 0.18585177039647338, 0.18529844393752581, 0.18296390816035324, 0.18275125858531105, 0.18190219747355274, 0.18614525274713567, 0.18138679924473222, 0.18858851622925943, 0.21172625423878255, 0.05196542545727012, 0.054655145608832, 0.06051535904469352, 0.07039645551309381, 0.06254978804457278, 0.0734081698550193, 0.059910454097883536, 0.05268190804081074, 0.05977640467972911]}, "mutation_prompt": null}
{"id": "6fe57a6a-4785-47a1-b3f3-624b98350e72", "solution": "import numpy as np\n\nclass HybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.cuckoo_params['pa']\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "HybridCuckooDE", "description": "Introducing a Hybrid Cuckoo Search algorithm that combines the exploration capabilities of Cuckoo Search with the exploitation power of Differential Evolution for efficient optimization in black box problems.", "configspace": "", "generation": 29, "fitness": 0.09690024448617066, "feedback": "The algorithm HybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.11.", "error": "", "parent_id": "07db4ba4-5d4a-47b4-95b3-1e12b3a1fd9b", "metadata": {"aucs": [0.16617292629125147, 0.15388264110994643, 0.1415303004129106, 0.18467042359582397, 0.14961175680991767, 0.17993528764045763, 0.18499928727250525, 0.16632505877248327, 0.14375361876581516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043180639587592995, 0.031432326100557795, 0.03267644454451912, 0.04514077273446526, 0.05364351868081374, 0.0369222063190513, 0.03507602670336618, 0.041210068527014254, 0.03893876877364133, 0.03453061856043027, 0.03188971995955492, 0.033250257709896536, 0.04502880637757467, 0.02549824988059135, 0.03452552954345123, 0.025613927160759498, 0.018059880242257687, 0.01753297784451202, 0.6912448346046267, 0.21917929263453784, 0.9274282612677672, 0.1170668870100453, 0.2757025167464413, 0.3611557865711036, 0.1796499769633325, 0.5958247945457501, 0.2355391127240941, 0.0713496425551492, 0.06634977801843855, 0.08228748173793898, 0.0791936480264307, 0.07300934738921261, 0.07187002242424223, 0.07214467616353615, 0.0839253936136809, 0.08446909575792338, 0.11826754729716082, 0.10600019453351284, 0.09678878073140618, 0.11482513649035153, 0.09225639621582682, 0.13182799782633314, 0.13537858149481197, 0.11841519571291703, 0.1000481176693192, 9.999999999998899e-05, 9.999999999998899e-05, 0.02688160849419219, 9.999999999998899e-05, 0.003560039874072607, 0.023210715324286646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011261704131239836, 9.999999999998899e-05, 9.999999999998899e-05, 0.012832753650806272, 0.0213378910332358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06612817822266848, 0.029527654029489536, 0.0661024882863872, 0.040864589480398394, 0.03424310529075536, 0.04143768440083784, 0.015435999822475233, 0.022535733548917802, 0.028489217016937074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1653258389284954, 0.18099186075895346, 0.1873304389120799, 0.17579291792497476, 0.18230494896321447, 0.21877763846759868, 0.19483138862049365, 0.17808397771969142, 0.18735327810948543, 0.03883999436485974, 0.044145285629592634, 0.04237172345567031, 0.03847103961293741, 0.03483651357920403, 0.04703289272748101, 0.03763552084259425, 0.032953673370846426, 0.04083828424634761, 0.16656831624672486, 0.1297525309737283, 0.13205461956471987, 0.1223428978940363, 0.13676962474646603, 0.13353648277544738, 0.12696884918943774, 0.1884501845992136, 0.13543821790596589, 0.1806503629896088, 0.14254163812210574, 0.15713386376827077, 0.18358409917228924, 0.1766934879671035, 0.16776025648199488, 0.17668993334930405, 0.17377774300845283, 0.16870382889404578, 0.10357621749916857, 0.10457553392585761, 0.10283563262693385, 0.0933572254156626, 0.10649404260009199, 0.12571791423144008, 0.10074725313381483, 0.0997711199450243, 0.10977176772046482, 0.15416897710668076, 0.13907790137256748, 0.14926623319814303, 0.154507865702595, 0.14838610378106187, 0.1453374048556927, 0.15033427268214306, 0.13430409831119794, 0.13657806412726092, 0.1576308070991117, 0.11911785149450316, 0.11240674101373427, 0.13644856469285493, 0.12639776588201634, 0.14694506244267813, 0.14301171555562053, 0.14051113009053373, 0.10006618895602382, 0.13043512018940984, 0.14351405348627866, 0.1557230155495628, 0.1377071140972641, 0.16320429341299403, 0.19691047931071481, 0.15317819761248397, 0.1600812575146099, 0.1450715798006087, 0.1475252376682834, 0.14844583030520497, 0.15173629770963304, 0.1443597946958305, 0.14075702166937576, 0.1172892703426589, 0.17258027154121025, 0.1585165051504569, 0.1945743685052821, 0.1931356871128168, 0.17862019837671161, 0.1782159878124694, 0.19009545486401602, 0.1780558449553924, 0.17417514962820058, 0.1826478153776906, 0.17041991366861398, 0.18987040410341682, 0.06155456797914971, 0.04692331272151751, 0.0412989537356232, 0.038939470242663865, 0.04138861583885389, 0.04625405813262207, 0.0463363358547062, 0.047377841503239315, 0.04997597994322911]}, "mutation_prompt": null}
{"id": "4ccb2588-c0ac-451e-bf4e-b2365a349a0a", "solution": "# import numpy as np\n\nclass DynamicHybridCuckooDE(HybridCuckooDE):\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def update_probability(success):\n            self.pa = max(0.1, min(0.9, self.pa + 0.1 if success else -0.1))\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            success = False\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    new_x = cuckoo_search_move(ind, best)\n                    new_fitness = objective_function(new_x)\n                    if new_fitness < fitness_values[idx]:\n                        population[idx] = new_x\n                        fitness_values[idx] = new_fitness\n                        success = True\n                else:\n                    new_x = differential_evolution_move(population, idx, best)\n                    new_fitness = objective_function(new_x)\n                    if new_fitness < fitness_values[idx]:\n                        population[idx] = new_x\n                        fitness_values[idx] = new_fitness\n                        success = True\n\n            update_probability(success)\n\n            best_idx = np.argmin(fitness_values)\n\n            if fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n        return best", "name": "DynamicHybridCuckooDE", "description": "Enhancing HybridCuckooDE by dynamically adapting the probability of performing Cuckoo Search and Differential Evolution moves based on performance feedback for improved optimization efficiency.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "6fe57a6a-4785-47a1-b3f3-624b98350e72", "metadata": {}, "mutation_prompt": null}
{"id": "3e7ac3f0-78b0-4754-92f2-8f1fa084e795", "solution": "import numpy as np\n\nclass HybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.cuckoo_params['pa']\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "HybridCuckooDE", "description": "Introducing a Hybrid Cuckoo Search algorithm that combines the exploration capabilities of Cuckoo Search with the exploitation power of Differential Evolution for efficient optimization in black box problems.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6fe57a6a-4785-47a1-b3f3-624b98350e72", "metadata": {"aucs": [0.16617292629125147, 0.15388264110994643, 0.1415303004129106, 0.18467042359582397, 0.14961175680991767, 0.17993528764045763, 0.18499928727250525, 0.16632505877248327, 0.14375361876581516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043180639587592995, 0.031432326100557795, 0.03267644454451912, 0.04514077273446526, 0.05364351868081374, 0.0369222063190513, 0.03507602670336618, 0.041210068527014254, 0.03893876877364133, 0.03453061856043027, 0.03188971995955492, 0.033250257709896536, 0.04502880637757467, 0.02549824988059135, 0.03452552954345123, 0.025613927160759498, 0.018059880242257687, 0.01753297784451202, 0.6912448346046267, 0.21917929263453784, 0.9274282612677672, 0.1170668870100453, 0.2757025167464413, 0.3611557865711036, 0.1796499769633325, 0.5958247945457501, 0.2355391127240941, 0.0713496425551492, 0.06634977801843855, 0.08228748173793898, 0.0791936480264307, 0.07300934738921261, 0.07187002242424223, 0.07214467616353615, 0.0839253936136809, 0.08446909575792338, 0.11826754729716082, 0.10600019453351284, 0.09678878073140618, 0.11482513649035153, 0.09225639621582682, 0.13182799782633314, 0.13537858149481197, 0.11841519571291703, 0.1000481176693192, 9.999999999998899e-05, 9.999999999998899e-05, 0.02688160849419219, 9.999999999998899e-05, 0.003560039874072607, 0.023210715324286646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011261704131239836, 9.999999999998899e-05, 9.999999999998899e-05, 0.012832753650806272, 0.0213378910332358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06612817822266848, 0.029527654029489536, 0.0661024882863872, 0.040864589480398394, 0.03424310529075536, 0.04143768440083784, 0.015435999822475233, 0.022535733548917802, 0.028489217016937074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1653258389284954, 0.18099186075895346, 0.1873304389120799, 0.17579291792497476, 0.18230494896321447, 0.21877763846759868, 0.19483138862049365, 0.17808397771969142, 0.18735327810948543, 0.03883999436485974, 0.044145285629592634, 0.04237172345567031, 0.03847103961293741, 0.03483651357920403, 0.04703289272748101, 0.03763552084259425, 0.032953673370846426, 0.04083828424634761, 0.16656831624672486, 0.1297525309737283, 0.13205461956471987, 0.1223428978940363, 0.13676962474646603, 0.13353648277544738, 0.12696884918943774, 0.1884501845992136, 0.13543821790596589, 0.1806503629896088, 0.14254163812210574, 0.15713386376827077, 0.18358409917228924, 0.1766934879671035, 0.16776025648199488, 0.17668993334930405, 0.17377774300845283, 0.16870382889404578, 0.10357621749916857, 0.10457553392585761, 0.10283563262693385, 0.0933572254156626, 0.10649404260009199, 0.12571791423144008, 0.10074725313381483, 0.0997711199450243, 0.10977176772046482, 0.15416897710668076, 0.13907790137256748, 0.14926623319814303, 0.154507865702595, 0.14838610378106187, 0.1453374048556927, 0.15033427268214306, 0.13430409831119794, 0.13657806412726092, 0.1576308070991117, 0.11911785149450316, 0.11240674101373427, 0.13644856469285493, 0.12639776588201634, 0.14694506244267813, 0.14301171555562053, 0.14051113009053373, 0.10006618895602382, 0.13043512018940984, 0.14351405348627866, 0.1557230155495628, 0.1377071140972641, 0.16320429341299403, 0.19691047931071481, 0.15317819761248397, 0.1600812575146099, 0.1450715798006087, 0.1475252376682834, 0.14844583030520497, 0.15173629770963304, 0.1443597946958305, 0.14075702166937576, 0.1172892703426589, 0.17258027154121025, 0.1585165051504569, 0.1945743685052821, 0.1931356871128168, 0.17862019837671161, 0.1782159878124694, 0.19009545486401602, 0.1780558449553924, 0.17417514962820058, 0.1826478153776906, 0.17041991366861398, 0.18987040410341682, 0.06155456797914971, 0.04692331272151751, 0.0412989537356232, 0.038939470242663865, 0.04138861583885389, 0.04625405813262207, 0.0463363358547062, 0.047377841503239315, 0.04997597994322911]}, "mutation_prompt": null}
{"id": "f2b28a89-5b70-43d8-9088-faf87ac18d98", "solution": "import numpy as np\n\nclass HybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.cuckoo_params['pa']\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "HybridCuckooDE", "description": "Introducing a Hybrid Cuckoo Search algorithm that combines the exploration capabilities of Cuckoo Search with the exploitation power of Differential Evolution for efficient optimization in black box problems.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6fe57a6a-4785-47a1-b3f3-624b98350e72", "metadata": {"aucs": [0.16617292629125147, 0.15388264110994643, 0.1415303004129106, 0.18467042359582397, 0.14961175680991767, 0.17993528764045763, 0.18499928727250525, 0.16632505877248327, 0.14375361876581516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043180639587592995, 0.031432326100557795, 0.03267644454451912, 0.04514077273446526, 0.05364351868081374, 0.0369222063190513, 0.03507602670336618, 0.041210068527014254, 0.03893876877364133, 0.03453061856043027, 0.03188971995955492, 0.033250257709896536, 0.04502880637757467, 0.02549824988059135, 0.03452552954345123, 0.025613927160759498, 0.018059880242257687, 0.01753297784451202, 0.6912448346046267, 0.21917929263453784, 0.9274282612677672, 0.1170668870100453, 0.2757025167464413, 0.3611557865711036, 0.1796499769633325, 0.5958247945457501, 0.2355391127240941, 0.0713496425551492, 0.06634977801843855, 0.08228748173793898, 0.0791936480264307, 0.07300934738921261, 0.07187002242424223, 0.07214467616353615, 0.0839253936136809, 0.08446909575792338, 0.11826754729716082, 0.10600019453351284, 0.09678878073140618, 0.11482513649035153, 0.09225639621582682, 0.13182799782633314, 0.13537858149481197, 0.11841519571291703, 0.1000481176693192, 9.999999999998899e-05, 9.999999999998899e-05, 0.02688160849419219, 9.999999999998899e-05, 0.003560039874072607, 0.023210715324286646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011261704131239836, 9.999999999998899e-05, 9.999999999998899e-05, 0.012832753650806272, 0.0213378910332358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06612817822266848, 0.029527654029489536, 0.0661024882863872, 0.040864589480398394, 0.03424310529075536, 0.04143768440083784, 0.015435999822475233, 0.022535733548917802, 0.028489217016937074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1653258389284954, 0.18099186075895346, 0.1873304389120799, 0.17579291792497476, 0.18230494896321447, 0.21877763846759868, 0.19483138862049365, 0.17808397771969142, 0.18735327810948543, 0.03883999436485974, 0.044145285629592634, 0.04237172345567031, 0.03847103961293741, 0.03483651357920403, 0.04703289272748101, 0.03763552084259425, 0.032953673370846426, 0.04083828424634761, 0.16656831624672486, 0.1297525309737283, 0.13205461956471987, 0.1223428978940363, 0.13676962474646603, 0.13353648277544738, 0.12696884918943774, 0.1884501845992136, 0.13543821790596589, 0.1806503629896088, 0.14254163812210574, 0.15713386376827077, 0.18358409917228924, 0.1766934879671035, 0.16776025648199488, 0.17668993334930405, 0.17377774300845283, 0.16870382889404578, 0.10357621749916857, 0.10457553392585761, 0.10283563262693385, 0.0933572254156626, 0.10649404260009199, 0.12571791423144008, 0.10074725313381483, 0.0997711199450243, 0.10977176772046482, 0.15416897710668076, 0.13907790137256748, 0.14926623319814303, 0.154507865702595, 0.14838610378106187, 0.1453374048556927, 0.15033427268214306, 0.13430409831119794, 0.13657806412726092, 0.1576308070991117, 0.11911785149450316, 0.11240674101373427, 0.13644856469285493, 0.12639776588201634, 0.14694506244267813, 0.14301171555562053, 0.14051113009053373, 0.10006618895602382, 0.13043512018940984, 0.14351405348627866, 0.1557230155495628, 0.1377071140972641, 0.16320429341299403, 0.19691047931071481, 0.15317819761248397, 0.1600812575146099, 0.1450715798006087, 0.1475252376682834, 0.14844583030520497, 0.15173629770963304, 0.1443597946958305, 0.14075702166937576, 0.1172892703426589, 0.17258027154121025, 0.1585165051504569, 0.1945743685052821, 0.1931356871128168, 0.17862019837671161, 0.1782159878124694, 0.19009545486401602, 0.1780558449553924, 0.17417514962820058, 0.1826478153776906, 0.17041991366861398, 0.18987040410341682, 0.06155456797914971, 0.04692331272151751, 0.0412989537356232, 0.038939470242663865, 0.04138861583885389, 0.04625405813262207, 0.0463363358547062, 0.047377841503239315, 0.04997597994322911]}, "mutation_prompt": null}
{"id": "965f9989-a8c2-4b18-a808-6c4ed212c781", "solution": "import numpy as np\n\nclass HybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.cuckoo_params['pa']\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n        return best", "name": "HybridCuckooDE", "description": "Introducing a Hybrid Cuckoo Search algorithm that combines the exploration capabilities of Cuckoo Search with the exploitation power of Differential Evolution for efficient optimization in black box problems.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6fe57a6a-4785-47a1-b3f3-624b98350e72", "metadata": {"aucs": [0.16617292629125147, 0.15388264110994643, 0.1415303004129106, 0.18467042359582397, 0.14961175680991767, 0.17993528764045763, 0.18499928727250525, 0.16632505877248327, 0.14375361876581516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043180639587592995, 0.031432326100557795, 0.03267644454451912, 0.04514077273446526, 0.05364351868081374, 0.0369222063190513, 0.03507602670336618, 0.041210068527014254, 0.03893876877364133, 0.03453061856043027, 0.03188971995955492, 0.033250257709896536, 0.04502880637757467, 0.02549824988059135, 0.03452552954345123, 0.025613927160759498, 0.018059880242257687, 0.01753297784451202, 0.6912448346046267, 0.21917929263453784, 0.9274282612677672, 0.1170668870100453, 0.2757025167464413, 0.3611557865711036, 0.1796499769633325, 0.5958247945457501, 0.2355391127240941, 0.0713496425551492, 0.06634977801843855, 0.08228748173793898, 0.0791936480264307, 0.07300934738921261, 0.07187002242424223, 0.07214467616353615, 0.0839253936136809, 0.08446909575792338, 0.11826754729716082, 0.10600019453351284, 0.09678878073140618, 0.11482513649035153, 0.09225639621582682, 0.13182799782633314, 0.13537858149481197, 0.11841519571291703, 0.1000481176693192, 9.999999999998899e-05, 9.999999999998899e-05, 0.02688160849419219, 9.999999999998899e-05, 0.003560039874072607, 0.023210715324286646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011261704131239836, 9.999999999998899e-05, 9.999999999998899e-05, 0.012832753650806272, 0.0213378910332358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06612817822266848, 0.029527654029489536, 0.0661024882863872, 0.040864589480398394, 0.03424310529075536, 0.04143768440083784, 0.015435999822475233, 0.022535733548917802, 0.028489217016937074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1653258389284954, 0.18099186075895346, 0.1873304389120799, 0.17579291792497476, 0.18230494896321447, 0.21877763846759868, 0.19483138862049365, 0.17808397771969142, 0.18735327810948543, 0.03883999436485974, 0.044145285629592634, 0.04237172345567031, 0.03847103961293741, 0.03483651357920403, 0.04703289272748101, 0.03763552084259425, 0.032953673370846426, 0.04083828424634761, 0.16656831624672486, 0.1297525309737283, 0.13205461956471987, 0.1223428978940363, 0.13676962474646603, 0.13353648277544738, 0.12696884918943774, 0.1884501845992136, 0.13543821790596589, 0.1806503629896088, 0.14254163812210574, 0.15713386376827077, 0.18358409917228924, 0.1766934879671035, 0.16776025648199488, 0.17668993334930405, 0.17377774300845283, 0.16870382889404578, 0.10357621749916857, 0.10457553392585761, 0.10283563262693385, 0.0933572254156626, 0.10649404260009199, 0.12571791423144008, 0.10074725313381483, 0.0997711199450243, 0.10977176772046482, 0.15416897710668076, 0.13907790137256748, 0.14926623319814303, 0.154507865702595, 0.14838610378106187, 0.1453374048556927, 0.15033427268214306, 0.13430409831119794, 0.13657806412726092, 0.1576308070991117, 0.11911785149450316, 0.11240674101373427, 0.13644856469285493, 0.12639776588201634, 0.14694506244267813, 0.14301171555562053, 0.14051113009053373, 0.10006618895602382, 0.13043512018940984, 0.14351405348627866, 0.1557230155495628, 0.1377071140972641, 0.16320429341299403, 0.19691047931071481, 0.15317819761248397, 0.1600812575146099, 0.1450715798006087, 0.1475252376682834, 0.14844583030520497, 0.15173629770963304, 0.1443597946958305, 0.14075702166937576, 0.1172892703426589, 0.17258027154121025, 0.1585165051504569, 0.1945743685052821, 0.1931356871128168, 0.17862019837671161, 0.1782159878124694, 0.19009545486401602, 0.1780558449553924, 0.17417514962820058, 0.1826478153776906, 0.17041991366861398, 0.18987040410341682, 0.06155456797914971, 0.04692331272151751, 0.0412989537356232, 0.038939470242663865, 0.04138861583885389, 0.04625405813262207, 0.0463363358547062, 0.047377841503239315, 0.04997597994322911]}, "mutation_prompt": null}
{"id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 34, "fitness": 0.10767138448807355, "feedback": "The algorithm EnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "6fe57a6a-4785-47a1-b3f3-624b98350e72", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "a1d11e3f-9c26-4c53-ae2b-da9316f4fe5a", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "b968ca70-03b4-4d3e-8ec0-74a3f8f01783", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "1775ddaa-926b-4b14-9de1-1d7bf767fd81", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "19f139f7-8bd6-48d9-b2c9-b9d9826a472d", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "01ea052d-3465-43e2-a078-a1ebca6dff43", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "436de8c1-22cf-4161-8ba3-adededc1dd70", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "564e58ef-6aee-4cbf-9072-f271598b4e64", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "0c88f3f4-eb74-450a-8c37-fa162729f097", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "eea1c338-797d-4b9e-8906-0715364467f8", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "c886910f-030a-4fa5-b13a-f5a50a52a893", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "3fecde02-065b-405a-91ae-348ffde636b9", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "6ea9691d-1f34-4e73-8d63-f2a4aad2f9ca", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "956362c0-5fe5-4b2a-8726-aabbd98fded5", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "1ea156fb-8c7c-4a04-a00f-bd4e1652410c", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n        self.pa = 0.25\n        self.cuckoo_params = {'pa': 0.25, 'beta': 1.5}\n        self.de_params = {'f': 0.5, 'cr': 0.9}\n        self.adaptive_pa = 0.25\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def levy_flight(size):\n            sigma_u = (np.math.gamma(1 + self.cuckoo_params['beta']) * np.sin(np.pi * self.cuckoo_params['beta'] / 2) / np.math.gamma((1 + self.cuckoo_params['beta']) / 2) * (1 ** (self.cuckoo_params['beta'] - 1))) ** (1 / self.cuckoo_params['beta'])\n            sigma_v = 1\n            u = np.random.normal(0, sigma_u, size)\n            v = np.random.normal(0, sigma_v, size)\n            return u / (np.absolute(v) ** (1 / self.cuckoo_params['beta']))\n\n        def cuckoo_search_move(x, best):\n            new_x = x + levy_flight(self.dim) * (x - best) * self.adaptive_pa\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        def differential_evolution_move(population, idx, best):\n            r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), idx), 3, replace=False)\n            mutant_vector = population[r1] + self.de_params['f'] * (population[r2] - population[r3])\n            crossover_points = np.random.rand(self.dim) < self.de_params['cr']\n            trial_vector = np.where(crossover_points, mutant_vector, population[idx])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            return trial_vector\n\n        population = initialize_population()\n        fitness_values = np.array([objective_function(ind) for ind in population])\n        best_idx = np.argmin(fitness_values)\n        best = population[best_idx].copy()\n\n        for _ in range(self.max_iter):\n            for idx, ind in enumerate(population):\n                if np.random.rand() < self.pa:\n                    population[idx] = cuckoo_search_move(ind, best)\n                else:\n                    population[idx] = differential_evolution_move(population, idx, best)\n\n            new_fitness_values = np.array([objective_function(ind) for ind in population])\n            best_idx = np.argmin(new_fitness_values)\n\n            if new_fitness_values[best_idx] < fitness_values[best_idx]:\n                best = population[best_idx]\n\n            fitness_values = new_fitness_values\n\n            if np.random.rand() < 0.25:\n                self.adaptive_pa = np.clip(self.adaptive_pa * 1.05, 0, 1)\n\n        return best", "name": "EnhancedHybridCuckooDE", "description": "Enhancing HybridCuckooDE by incorporating a dynamic adaptive parameter tuning mechanism to adaptively adjust the exploration and exploitation rates during optimization.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.14480026718042505, 0.18578033385663462, 0.16963983853618736, 0.16423764043248867, 0.17003897302248294, 0.1504992085769551, 0.15312274434310713, 0.1628297430960396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590657590721258, 0.04235584683648708, 0.046131967582656586, 0.04649756190187471, 0.041428189204667065, 0.05060681200398176, 0.05007479225552358, 0.045319742394208884, 0.03206870704870868, 0.020331134094000447, 0.03080935443735311, 0.03261084868946895, 0.024360285982440666, 0.025873538727171908, 0.03322585059596772, 0.032400365989317836, 0.02707066529944646, 0.022447555657500007, 0.5921830409265345, 0.7384372328605905, 0.6613750825202738, 0.5309413146187199, 0.7469402626953322, 0.8771296381985485, 0.614163657338977, 0.7088676463093038, 0.6426708293976422, 0.09823548728715525, 0.06699022629933593, 0.06341843348471377, 0.06300485028578207, 0.07014542326785689, 0.05783374522003759, 0.06299194323991164, 0.06179512627326744, 0.06361075965354557, 0.1276130553661764, 0.09731615869684462, 0.1242926586742944, 0.10909150325637562, 0.09558091342052699, 0.08454694851198097, 0.11244084049442393, 0.1391049680061276, 0.09690276881373305, 9.999999999998899e-05, 0.00789084104474802, 9.999999999998899e-05, 0.023372275023465616, 0.00808920677174807, 9.999999999998899e-05, 9.999999999998899e-05, 0.003265674264830154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003202112679385749, 0.0010348143062044457, 0.008423205905983555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010659969094764299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03791639446563133, 0.02761776781469527, 0.038493543529259155, 0.025155909883305516, 0.0811746806416539, 0.014080736731239107, 0.037495527395430495, 0.046618554742864804, 0.03930880544761295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1857085112673944, 0.21023932503903975, 0.1863818571471203, 0.17883646848006773, 0.1709723363083573, 0.24279133252598128, 0.19350162217445832, 0.1671053865134241, 0.1854290463086179, 0.044804265695236656, 0.044529175228229856, 0.059199098344537515, 0.05162643054008609, 0.044372224875384725, 0.05288563435477878, 0.04024595112058327, 0.03726753668277938, 0.038532183629739314, 0.14845280884032253, 0.13544554534405928, 0.13860366462375218, 0.12753463539500676, 0.1297908584439621, 0.1353965396997603, 0.12933058598225722, 0.14893985072651283, 0.1399515915097974, 0.14475274385281134, 0.15564612621858942, 0.15212055987330864, 0.16050897010741205, 0.1595417471889392, 0.16331783317199844, 0.1482201821355157, 0.1816947052410427, 0.1616340738365547, 0.09439337079317645, 0.09697048508611172, 0.10461893497521413, 0.10790754135123337, 0.08532693962199134, 0.1061972061143821, 0.09559816217576955, 0.10347663999193324, 0.10563304670738038, 0.14504209015292235, 0.13699331768215528, 0.14531788987621563, 0.15745268667481072, 0.15806019505492697, 0.14141635828769572, 0.14575925803425338, 0.1542192734063772, 0.13576319093489797, 0.12091990769604422, 0.1313950094977112, 0.0884941365832359, 0.12995424762508678, 0.13200745257462676, 0.1530243043861056, 0.1321411242581596, 0.13270517792020364, 0.11176422161019106, 0.15620491675666037, 0.1653704849916492, 0.14845226727223237, 0.1427691588399277, 0.12296082313798962, 0.13747040579244618, 0.15544145653564378, 0.13824583653828193, 0.16264388182579093, 0.25715325297239255, 0.17004569203121478, 0.11946173437591712, 0.16858014648248532, 0.0966879936783116, 0.13072284827878888, 0.18050837655719731, 0.16103226875115684, 0.13676950365485663, 0.1875879261256732, 0.2017515742139041, 0.1851036353113683, 0.21526371232748454, 0.17321515659200504, 0.18369226595956512, 0.1794830219502348, 0.18194951145446614, 0.19950084877483432, 0.05052960390035299, 0.04692331272151751, 0.04486495778932753, 0.05397023383862165, 0.04324089064730974, 0.047601258272165436, 0.04000459091727848, 0.04433097493347338, 0.046954942916736186]}, "mutation_prompt": null}
{"id": "71a90a43-3253-4feb-a18c-d900e12d931f", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 49, "fitness": 0.10950948015073847, "feedback": "The algorithm RefinedEnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "fa593d27-b89f-4d32-81f5-03e579dcf4f0", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "9ccbf67f-72c1-46c3-9491-e94146967bd7", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "d50cbdc7-cad5-418c-92ae-b93ceeb2afb2", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "df929122-85ab-4e84-a424-a3fc3455b195", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "ff7f14a7-6f20-41e8-9604-c566b35ceddd", "solution": "import numpy as np\n\nclass DynamicProbCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25\n    \n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return self.optimize(func)\n    \n    def optimize(self, func):\n        # Implementation of the optimization algorithm\n        pass", "name": "DynamicProbCuckooDE", "description": "Dynamically adjusting the probability of accepting a new solution in Cuckoo Search with Differential Evolution using a 0.25 probability rate to enhance exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": 0.0, "feedback": "The algorithm DynamicProbCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "b2b60a83-8493-4719-b648-e7292a5e8f3f", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "0057eca9-11dc-4dd2-9cbf-80a06f83f6ed", "solution": "import numpy as np\n\nclass ProbabilisticAcceptanceAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25\n    \n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)  # Adjust acceptance probability\n        # Your optimization algorithm code using the adjusted acceptance probability\n        return optimized_solution", "name": "ProbabilisticAcceptanceAlgorithm", "description": "Dynamically adjusting the probability of accepting a new solution during optimization based on a fixed probability rate of 0.25 to enhance exploration-exploitation balance.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'optimized_solution' is not defined\").", "error": "NameError(\"name 'optimized_solution' is not defined\")", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {}, "mutation_prompt": null}
{"id": "51185589-8ce6-40c7-95f6-146704355c33", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "675844cf-46ca-4425-b96d-bb319f355318", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "ae93c81b-a69c-4752-b658-5702d7e74fd6", "solution": "import numpy as np\n\nclass CustomRefinedEnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25\n\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return EnhancedHybridCuckooDE(self.budget, self.dim, pa=self.pa)(func)", "name": "CustomRefinedEnhancedHybridCuckooDE", "description": "Dynamically adjust the probability of accepting a new solution in a Cuckoo Search algorithm by updating the probability value based on a fixed rate.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"__init__() got an unexpected keyword argument 'pa'\").", "error": "TypeError(\"__init__() got an unexpected keyword argument 'pa'\")", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {}, "mutation_prompt": null}
{"id": "439d3700-fc0e-451a-9462-941e1c5c6f43", "solution": "import numpy as np\n\nclass DynamicProbMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25\n\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        # Insert your novel metaheuristic optimization algorithm here\n        return optimized_solution", "name": "DynamicProbMetaheuristic", "description": "Implementing a Novel Metaheuristic Algorithm using Dynamic Probability Adjustment for Black Box Optimization.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'optimized_solution' is not defined\").", "error": "NameError(\"name 'optimized_solution' is not defined\")", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {}, "mutation_prompt": null}
{"id": "7580fbdc-c10f-457e-b958-a47fc1de1958", "solution": "import numpy as np\n\nclass MyNovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25\n\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)  # Refining the probability of acceptance\n        # Implement your novel metaheuristic algorithm here to optimize the black box function 'func'\n        return optimized_solution", "name": "MyNovelMetaheuristicAlgorithm", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate to enhance optimization performance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'optimized_solution' is not defined\").", "error": "NameError(\"name 'optimized_solution' is not defined\")", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {}, "mutation_prompt": null}
{"id": "adc5b834-1b1d-47ff-87b6-a87f94d27f6c", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "08c61915-8b9c-40c8-aafe-b90a808203be", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "ffd0be9c-c246-4d73-a258-1886f1b7304a", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "38b17b5b-7ffc-4dd2-ba06-a86d01c35959", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "d5d5ede7-c421-4141-89b0-0d49129c4706", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "ca69441e-6f58-4a7c-a892-c0d8048c13f1", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "7b6d6783-63d0-471f-b68f-ee69dda0bd51", "solution": "import numpy as np\n\nclass AdaptiveEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 0.25, 0, 1)\n        return super().__call__(func)", "name": "AdaptiveEnhancedHybridCuckooDE", "description": "Adapting probability in EnhancedHybridCuckooDE to improve exploration-exploitation balance for black box optimization problems.", "configspace": "", "generation": 67, "fitness": 0.09786560227796047, "feedback": "The algorithm AdaptiveEnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.10.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.20959970193430266, 0.15796663949418654, 0.19684812101799065, 0.19648801608245525, 0.16059360694246994, 0.15868472098172337, 0.1711778653181827, 0.15416881184494757, 0.1675228188974739, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041086281720749906, 0.043248904032345714, 0.041335247836398636, 0.042598469956352525, 0.08451668295287762, 0.04063139352298273, 0.039358439872426376, 0.04509543362778223, 0.04188268281404284, 0.026774877404582398, 0.022020097529086513, 0.04523551605853604, 0.024186484547326303, 0.0226933238192627, 0.036160225517183786, 0.028920454240626503, 0.0219634785635362, 0.026020268531996793, 0.6558082508215782, 0.17160935200713523, 0.4175663782590372, 0.3527988339467565, 0.16989885901485302, 0.30248598232388446, 0.5884568646734911, 0.6963659539519613, 0.38258548199495224, 0.10064615144228606, 0.06020844576918716, 0.08274129805588759, 0.07782642636959058, 0.06267043373800263, 0.06240194594877391, 0.057794617787943925, 0.07994486282544344, 0.08445234657527367, 0.12280804641031651, 0.11353101548996836, 0.08305221014149466, 0.11803520262179112, 0.12821649656308365, 0.16671863229158046, 0.09657679473495451, 0.09685925889525004, 0.09521590618581488, 0.02172876857535977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01538343614288551, 0.006096566234658707, 0.00013091364566064634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012129574850810232, 0.006795947075414421, 0.00022741580082563662, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013671613078366507, 0.008687582514480319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033439015523442195, 0.07156321490759188, 0.02076056480571986, 0.02211848765752944, 0.01396818727996052, 0.03195532070170359, 0.020728992988962247, 0.0709597652533761, 0.030133915676403555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030465411057011282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18601392384115378, 0.17261086496212152, 0.1764668298013483, 0.18701759045599242, 0.18245587018067932, 0.1818177629018246, 0.2105329878034249, 0.18292827409101597, 0.1931628033657311, 0.03255921465759293, 0.03837612954862002, 0.03131156548990821, 0.039766766779225526, 0.036504569009670695, 0.038973569109671535, 0.04746263350781954, 0.045124301503737696, 0.043827656592067776, 0.1322926753937923, 0.13024110356204022, 0.1610093321189735, 0.1451087022933243, 0.14359236903800943, 0.1396016612175457, 0.13459371687138677, 0.13321974631906175, 0.12012033120292986, 0.15752190239734776, 0.14417989007283227, 0.1584388235889641, 0.16014041007615964, 0.1531188685467314, 0.16448777085933375, 0.1540667487042896, 0.17377774300845283, 0.14505304860135437, 0.09381748450484995, 0.1088699163775676, 0.0941359010369599, 0.10394311194631956, 0.09629998416348462, 0.10764655011106461, 0.11701504119836703, 0.0997711199450243, 0.10621321238811166, 0.15335139383162566, 0.15626778450054446, 0.1481100313498972, 0.14094574250024183, 0.14825483005519635, 0.1428453003515322, 0.14588174233162643, 0.16044185791085186, 0.14047257665799662, 0.13194994537429505, 0.12538140727232816, 0.1078720443575577, 0.09375385663947877, 0.1387900166118785, 0.14121910729957776, 0.13117997952398475, 0.12831372700580923, 0.12880480064959154, 0.18603917742472553, 0.15171723385403058, 0.13337004220437432, 0.13846711129291234, 0.21067638558042845, 0.1622131754541304, 0.16505458633236958, 0.16731991200373963, 0.15522776286519435, 0.12860154642032973, 0.15535670816043712, 0.15705266183017463, 0.16058041473203644, 0.16433046343311852, 0.1211252473187262, 0.14913928660035325, 0.16237009855779616, 0.2124011378221582, 0.18010078486812742, 0.18434580849080318, 0.18528070531407637, 0.1939436113082631, 0.18446608789144936, 0.1773382768570262, 0.17971928406318727, 0.19272039647788175, 0.18344271928444222, 0.047587153141309346, 0.04416440648527875, 0.07535873496089973, 0.04808418697918093, 0.044644298226563794, 0.056114377574048024, 0.04317735853308857, 0.05846976581424845, 0.040266574562210944]}, "mutation_prompt": null}
{"id": "cf5c20fc-e395-4a02-90e8-2fe690722255", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "a7314cb0-f054-47ad-8d19-5fcb2f1c0d5e", "solution": "import numpy as np\n\nclass ModifiedRefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 0.25, 0, 1)\n        return super().__call__(func)", "name": "ModifiedRefinedEnhancedHybridCuckooDE", "description": "Enhancing Cuckoo Search with Differential Evolution by dynamically adjusting the probability of accepting new solutions based on a 0.25 probability rate.", "configspace": "", "generation": 69, "fitness": 0.09786560227796047, "feedback": "The algorithm ModifiedRefinedEnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.10.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.20959970193430266, 0.15796663949418654, 0.19684812101799065, 0.19648801608245525, 0.16059360694246994, 0.15868472098172337, 0.1711778653181827, 0.15416881184494757, 0.1675228188974739, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041086281720749906, 0.043248904032345714, 0.041335247836398636, 0.042598469956352525, 0.08451668295287762, 0.04063139352298273, 0.039358439872426376, 0.04509543362778223, 0.04188268281404284, 0.026774877404582398, 0.022020097529086513, 0.04523551605853604, 0.024186484547326303, 0.0226933238192627, 0.036160225517183786, 0.028920454240626503, 0.0219634785635362, 0.026020268531996793, 0.6558082508215782, 0.17160935200713523, 0.4175663782590372, 0.3527988339467565, 0.16989885901485302, 0.30248598232388446, 0.5884568646734911, 0.6963659539519613, 0.38258548199495224, 0.10064615144228606, 0.06020844576918716, 0.08274129805588759, 0.07782642636959058, 0.06267043373800263, 0.06240194594877391, 0.057794617787943925, 0.07994486282544344, 0.08445234657527367, 0.12280804641031651, 0.11353101548996836, 0.08305221014149466, 0.11803520262179112, 0.12821649656308365, 0.16671863229158046, 0.09657679473495451, 0.09685925889525004, 0.09521590618581488, 0.02172876857535977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01538343614288551, 0.006096566234658707, 0.00013091364566064634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012129574850810232, 0.006795947075414421, 0.00022741580082563662, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013671613078366507, 0.008687582514480319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033439015523442195, 0.07156321490759188, 0.02076056480571986, 0.02211848765752944, 0.01396818727996052, 0.03195532070170359, 0.020728992988962247, 0.0709597652533761, 0.030133915676403555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030465411057011282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18601392384115378, 0.17261086496212152, 0.1764668298013483, 0.18701759045599242, 0.18245587018067932, 0.1818177629018246, 0.2105329878034249, 0.18292827409101597, 0.1931628033657311, 0.03255921465759293, 0.03837612954862002, 0.03131156548990821, 0.039766766779225526, 0.036504569009670695, 0.038973569109671535, 0.04746263350781954, 0.045124301503737696, 0.043827656592067776, 0.1322926753937923, 0.13024110356204022, 0.1610093321189735, 0.1451087022933243, 0.14359236903800943, 0.1396016612175457, 0.13459371687138677, 0.13321974631906175, 0.12012033120292986, 0.15752190239734776, 0.14417989007283227, 0.1584388235889641, 0.16014041007615964, 0.1531188685467314, 0.16448777085933375, 0.1540667487042896, 0.17377774300845283, 0.14505304860135437, 0.09381748450484995, 0.1088699163775676, 0.0941359010369599, 0.10394311194631956, 0.09629998416348462, 0.10764655011106461, 0.11701504119836703, 0.0997711199450243, 0.10621321238811166, 0.15335139383162566, 0.15626778450054446, 0.1481100313498972, 0.14094574250024183, 0.14825483005519635, 0.1428453003515322, 0.14588174233162643, 0.16044185791085186, 0.14047257665799662, 0.13194994537429505, 0.12538140727232816, 0.1078720443575577, 0.09375385663947877, 0.1387900166118785, 0.14121910729957776, 0.13117997952398475, 0.12831372700580923, 0.12880480064959154, 0.18603917742472553, 0.15171723385403058, 0.13337004220437432, 0.13846711129291234, 0.21067638558042845, 0.1622131754541304, 0.16505458633236958, 0.16731991200373963, 0.15522776286519435, 0.12860154642032973, 0.15535670816043712, 0.15705266183017463, 0.16058041473203644, 0.16433046343311852, 0.1211252473187262, 0.14913928660035325, 0.16237009855779616, 0.2124011378221582, 0.18010078486812742, 0.18434580849080318, 0.18528070531407637, 0.1939436113082631, 0.18446608789144936, 0.1773382768570262, 0.17971928406318727, 0.19272039647788175, 0.18344271928444222, 0.047587153141309346, 0.04416440648527875, 0.07535873496089973, 0.04808418697918093, 0.044644298226563794, 0.056114377574048024, 0.04317735853308857, 0.05846976581424845, 0.040266574562210944]}, "mutation_prompt": null}
{"id": "ba2fa982-f1b2-41a0-a9b2-aa732cf51f59", "solution": "import numpy as np\n\nclass DynamicProbabilityRefinedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.pa = np.clip(self.pa * 1.05, 0, 1)\n            # optimization logic here using the dynamic probability\n        return optimized_solution", "name": "DynamicProbabilityRefinedHybridCuckooDE", "description": "Dynamic Probability Refined Hybrid Cuckoo Differential Evolution optimizing algorithm adjusting the probability of accepting new solutions based on a fixed rate of 0.25.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'optimized_solution' is not defined\").", "error": "NameError(\"name 'optimized_solution' is not defined\")", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {}, "mutation_prompt": null}
{"id": "26be93d0-7f66-4844-a391-5f8c15082646", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 0.25, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Dynamically adjusting the acceptance probability of a new solution with a 0.25 probability rate in an Enhanced Hybrid Cuckoo Differential Evolution algorithm.", "configspace": "", "generation": 71, "fitness": 0.09786560227796047, "feedback": "The algorithm RefinedEnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.10.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.20959970193430266, 0.15796663949418654, 0.19684812101799065, 0.19648801608245525, 0.16059360694246994, 0.15868472098172337, 0.1711778653181827, 0.15416881184494757, 0.1675228188974739, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041086281720749906, 0.043248904032345714, 0.041335247836398636, 0.042598469956352525, 0.08451668295287762, 0.04063139352298273, 0.039358439872426376, 0.04509543362778223, 0.04188268281404284, 0.026774877404582398, 0.022020097529086513, 0.04523551605853604, 0.024186484547326303, 0.0226933238192627, 0.036160225517183786, 0.028920454240626503, 0.0219634785635362, 0.026020268531996793, 0.6558082508215782, 0.17160935200713523, 0.4175663782590372, 0.3527988339467565, 0.16989885901485302, 0.30248598232388446, 0.5884568646734911, 0.6963659539519613, 0.38258548199495224, 0.10064615144228606, 0.06020844576918716, 0.08274129805588759, 0.07782642636959058, 0.06267043373800263, 0.06240194594877391, 0.057794617787943925, 0.07994486282544344, 0.08445234657527367, 0.12280804641031651, 0.11353101548996836, 0.08305221014149466, 0.11803520262179112, 0.12821649656308365, 0.16671863229158046, 0.09657679473495451, 0.09685925889525004, 0.09521590618581488, 0.02172876857535977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01538343614288551, 0.006096566234658707, 0.00013091364566064634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012129574850810232, 0.006795947075414421, 0.00022741580082563662, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013671613078366507, 0.008687582514480319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033439015523442195, 0.07156321490759188, 0.02076056480571986, 0.02211848765752944, 0.01396818727996052, 0.03195532070170359, 0.020728992988962247, 0.0709597652533761, 0.030133915676403555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030465411057011282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18601392384115378, 0.17261086496212152, 0.1764668298013483, 0.18701759045599242, 0.18245587018067932, 0.1818177629018246, 0.2105329878034249, 0.18292827409101597, 0.1931628033657311, 0.03255921465759293, 0.03837612954862002, 0.03131156548990821, 0.039766766779225526, 0.036504569009670695, 0.038973569109671535, 0.04746263350781954, 0.045124301503737696, 0.043827656592067776, 0.1322926753937923, 0.13024110356204022, 0.1610093321189735, 0.1451087022933243, 0.14359236903800943, 0.1396016612175457, 0.13459371687138677, 0.13321974631906175, 0.12012033120292986, 0.15752190239734776, 0.14417989007283227, 0.1584388235889641, 0.16014041007615964, 0.1531188685467314, 0.16448777085933375, 0.1540667487042896, 0.17377774300845283, 0.14505304860135437, 0.09381748450484995, 0.1088699163775676, 0.0941359010369599, 0.10394311194631956, 0.09629998416348462, 0.10764655011106461, 0.11701504119836703, 0.0997711199450243, 0.10621321238811166, 0.15335139383162566, 0.15626778450054446, 0.1481100313498972, 0.14094574250024183, 0.14825483005519635, 0.1428453003515322, 0.14588174233162643, 0.16044185791085186, 0.14047257665799662, 0.13194994537429505, 0.12538140727232816, 0.1078720443575577, 0.09375385663947877, 0.1387900166118785, 0.14121910729957776, 0.13117997952398475, 0.12831372700580923, 0.12880480064959154, 0.18603917742472553, 0.15171723385403058, 0.13337004220437432, 0.13846711129291234, 0.21067638558042845, 0.1622131754541304, 0.16505458633236958, 0.16731991200373963, 0.15522776286519435, 0.12860154642032973, 0.15535670816043712, 0.15705266183017463, 0.16058041473203644, 0.16433046343311852, 0.1211252473187262, 0.14913928660035325, 0.16237009855779616, 0.2124011378221582, 0.18010078486812742, 0.18434580849080318, 0.18528070531407637, 0.1939436113082631, 0.18446608789144936, 0.1773382768570262, 0.17971928406318727, 0.19272039647788175, 0.18344271928444222, 0.047587153141309346, 0.04416440648527875, 0.07535873496089973, 0.04808418697918093, 0.044644298226563794, 0.056114377574048024, 0.04317735853308857, 0.05846976581424845, 0.040266574562210944]}, "mutation_prompt": null}
{"id": "fe3f3cb3-6fa5-421c-be92-8ae475334446", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 0.25, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Dynamically adjusting the probability of accepting a new solution by refining the EnhancedHybridCuckooDE algorithm using a 0.25 probability rate to optimize black box functions.", "configspace": "", "generation": 72, "fitness": 0.09786560227796047, "feedback": "The algorithm RefinedEnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.10.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.20959970193430266, 0.15796663949418654, 0.19684812101799065, 0.19648801608245525, 0.16059360694246994, 0.15868472098172337, 0.1711778653181827, 0.15416881184494757, 0.1675228188974739, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041086281720749906, 0.043248904032345714, 0.041335247836398636, 0.042598469956352525, 0.08451668295287762, 0.04063139352298273, 0.039358439872426376, 0.04509543362778223, 0.04188268281404284, 0.026774877404582398, 0.022020097529086513, 0.04523551605853604, 0.024186484547326303, 0.0226933238192627, 0.036160225517183786, 0.028920454240626503, 0.0219634785635362, 0.026020268531996793, 0.6558082508215782, 0.17160935200713523, 0.4175663782590372, 0.3527988339467565, 0.16989885901485302, 0.30248598232388446, 0.5884568646734911, 0.6963659539519613, 0.38258548199495224, 0.10064615144228606, 0.06020844576918716, 0.08274129805588759, 0.07782642636959058, 0.06267043373800263, 0.06240194594877391, 0.057794617787943925, 0.07994486282544344, 0.08445234657527367, 0.12280804641031651, 0.11353101548996836, 0.08305221014149466, 0.11803520262179112, 0.12821649656308365, 0.16671863229158046, 0.09657679473495451, 0.09685925889525004, 0.09521590618581488, 0.02172876857535977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01538343614288551, 0.006096566234658707, 0.00013091364566064634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012129574850810232, 0.006795947075414421, 0.00022741580082563662, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013671613078366507, 0.008687582514480319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033439015523442195, 0.07156321490759188, 0.02076056480571986, 0.02211848765752944, 0.01396818727996052, 0.03195532070170359, 0.020728992988962247, 0.0709597652533761, 0.030133915676403555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030465411057011282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18601392384115378, 0.17261086496212152, 0.1764668298013483, 0.18701759045599242, 0.18245587018067932, 0.1818177629018246, 0.2105329878034249, 0.18292827409101597, 0.1931628033657311, 0.03255921465759293, 0.03837612954862002, 0.03131156548990821, 0.039766766779225526, 0.036504569009670695, 0.038973569109671535, 0.04746263350781954, 0.045124301503737696, 0.043827656592067776, 0.1322926753937923, 0.13024110356204022, 0.1610093321189735, 0.1451087022933243, 0.14359236903800943, 0.1396016612175457, 0.13459371687138677, 0.13321974631906175, 0.12012033120292986, 0.15752190239734776, 0.14417989007283227, 0.1584388235889641, 0.16014041007615964, 0.1531188685467314, 0.16448777085933375, 0.1540667487042896, 0.17377774300845283, 0.14505304860135437, 0.09381748450484995, 0.1088699163775676, 0.0941359010369599, 0.10394311194631956, 0.09629998416348462, 0.10764655011106461, 0.11701504119836703, 0.0997711199450243, 0.10621321238811166, 0.15335139383162566, 0.15626778450054446, 0.1481100313498972, 0.14094574250024183, 0.14825483005519635, 0.1428453003515322, 0.14588174233162643, 0.16044185791085186, 0.14047257665799662, 0.13194994537429505, 0.12538140727232816, 0.1078720443575577, 0.09375385663947877, 0.1387900166118785, 0.14121910729957776, 0.13117997952398475, 0.12831372700580923, 0.12880480064959154, 0.18603917742472553, 0.15171723385403058, 0.13337004220437432, 0.13846711129291234, 0.21067638558042845, 0.1622131754541304, 0.16505458633236958, 0.16731991200373963, 0.15522776286519435, 0.12860154642032973, 0.15535670816043712, 0.15705266183017463, 0.16058041473203644, 0.16433046343311852, 0.1211252473187262, 0.14913928660035325, 0.16237009855779616, 0.2124011378221582, 0.18010078486812742, 0.18434580849080318, 0.18528070531407637, 0.1939436113082631, 0.18446608789144936, 0.1773382768570262, 0.17971928406318727, 0.19272039647788175, 0.18344271928444222, 0.047587153141309346, 0.04416440648527875, 0.07535873496089973, 0.04808418697918093, 0.044644298226563794, 0.056114377574048024, 0.04317735853308857, 0.05846976581424845, 0.040266574562210944]}, "mutation_prompt": null}
{"id": "486155da-86fc-4209-b518-dbff21771cb7", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "7312a95b-5541-493e-9981-7f70597095d3", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "a720a307-27e2-4383-8c85-0c6381b21d0c", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Enhancing Cuckoo Search with Differential Evolution by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate for improved optimization performance.", "configspace": "", "generation": 75, "fitness": 0.10950948015073847, "feedback": "The algorithm RefinedEnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "b9ddac53-8614-4714-bbac-d9d6bfacd094", "solution": "import numpy as np\n\nclass DynamicEnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25  # Initial acceptance probability\n        \n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "DynamicEnhancedHybridCuckooDE", "description": "Dynamic Enhanced Hybrid Cuckoo Differential Evolution with Adaptive Probability Adjustment to improve solution exploration.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'super' object has no attribute '__call__'\").", "error": "AttributeError(\"'super' object has no attribute '__call__'\")", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {}, "mutation_prompt": null}
{"id": "68d308ef-8813-462d-83d5-923e3c6bc0ae", "solution": "import numpy as np\n\nclass EnhancedHybridCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            candidate = np.random.uniform(-5.0, 5.0, self.dim)\n            idx = np.random.randint(self.budget)\n            if func(candidate) < func(self.population[idx]):\n                self.population[idx] = candidate\n                self.pa = np.clip(self.pa * 1.05, 0, 1)\n            else:\n                if np.random.rand() < self.pa:\n                    self.population[idx] = candidate\n        return self.population", "name": "EnhancedHybridCuckooDE", "description": "Enhanced Hybrid Cuckoo Differential Evolution with Dynamic Probability Adjustment", "configspace": "", "generation": 77, "fitness": 0.09036810127196124, "feedback": "The algorithm EnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.1910085237549286, 0.16963280925375024, 0.17501907700431252, 0.223325444795495, 0.16041458373062145, 0.16635968784112265, 0.1859785890008261, 0.16594216300172315, 0.19666348846686688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041600965980207905, 0.043478126937750106, 0.04609300199939603, 0.046911585600443284, 0.03802713647612743, 0.042387369100212346, 0.05476217577016318, 0.03914541125650284, 0.05569645267128853, 0.03580967422038961, 0.03892826240127101, 0.04082040586519342, 0.032380224786094036, 0.031603258759964725, 0.04381446385903931, 0.0399515424243857, 0.04142828829438916, 0.02688445356464031, 0.07920876156348733, 0.11052358665840634, 0.07406059628874029, 0.09537402456803556, 0.08284557889355326, 0.0905080276838719, 0.10973678984927082, 0.0888242116288438, 0.0878897005465844, 0.10645307329861498, 0.0765945166908526, 0.09188111155178835, 0.1182626513752546, 0.05868838168935686, 0.07344572304188746, 0.06280790334636388, 0.07226661154515046, 0.07817829874758986, 0.1032852753085386, 0.12180220610166548, 0.1076024015040089, 0.14046078862095146, 0.11513182617499773, 0.12511976107225142, 0.1294066359000008, 0.13831100410959296, 0.08778438729574867, 0.011772462621913338, 0.009233075716081673, 0.0023267924110672578, 0.00035273758302012403, 9.999999999998899e-05, 0.019672361717422926, 9.999999999998899e-05, 0.0003901507194082887, 0.010850722119968848, 9.999999999998899e-05, 0.0007333125451394196, 0.002066174890453243, 9.999999999998899e-05, 0.027827795385898413, 0.009069374202058, 0.0018729519253014582, 0.001445881632253454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04440602866288823, 0.05683805394036223, 0.0776578767218109, 0.04024492645220834, 0.0340734491518353, 0.09441783635996204, 0.04916808311525778, 0.08169971566635881, 0.08278935373931984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012071423784774216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006453593513214395, 9.999999999998899e-05, 0.18270557371372154, 0.19319367939957077, 0.220361947194473, 0.18734499192953835, 0.17839204919842633, 0.20724634117484197, 0.1861520031101751, 0.18706473139549584, 0.1878776513406566, 0.05812429860956403, 0.04388277110547756, 0.027532565082129756, 0.04452138622623991, 0.046039667546572294, 0.07130473801445891, 0.058553074711983344, 0.04087374008683886, 0.054834456117751174, 0.11697188010620663, 0.14978409678219595, 0.12479916714704764, 0.14045050541691617, 0.13639354891819244, 0.12097385297998642, 0.1491354154840403, 0.1417680297774877, 0.14661016048057318, 0.15805628768397806, 0.18793334307192766, 0.16391688978978014, 0.16090186951261842, 0.16909806639998393, 0.1679756808045264, 0.16376184811851235, 0.1628188905238379, 0.16071190611444686, 0.10643211115094875, 0.1067834702732241, 0.09953617901610001, 0.11293202135439628, 0.108809688665224, 0.11617464387804233, 0.10636932220037121, 0.11697831716867169, 0.1006194657849292, 0.1490671784798242, 0.14958205742790065, 0.139852479121354, 0.1537609046868138, 0.15299375845468766, 0.13966565271264464, 0.14362391434790533, 0.15624927530223176, 0.18791424680255253, 0.1480236618095958, 0.16014430109390942, 0.14264750239136503, 0.13567045185048898, 0.13213404056243672, 0.1395652633908283, 0.1514774339106647, 0.14714376619128366, 0.16450869021275427, 0.16167520598636786, 0.16148448583488484, 0.15809520669204646, 0.22630029404627994, 0.15743194221186418, 0.16515191410074004, 0.16093811948094117, 0.2408512497216817, 0.18199043141128413, 0.16833644323823793, 0.17719997418670208, 0.21044527413804603, 0.1574412214927925, 0.16223404897799787, 0.15011693347730892, 0.16930392878070322, 0.14652789767706875, 0.1331774243931606, 0.17708129709658627, 0.18765112255954242, 0.17546501091868938, 0.184620059451292, 0.19275955743265505, 0.19088945311156014, 0.17717042948892125, 0.1956237365376563, 0.19434841499761724, 0.05532500988258238, 0.05146470791867652, 0.044495106832699416, 0.05611550383231423, 0.05558561721869815, 0.06586051308560814, 0.0598119394092651, 0.057927040709663924, 0.0600313186496767]}, "mutation_prompt": null}
{"id": "463f7e39-e598-4f62-98b1-f729d9fd2543", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "562d86a9-be1a-4587-bc50-9c56672b4fb4", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "22a0484d-2805-431f-8f07-c2510a500814", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "76ef1cec-8e39-4101-9d96-57736d5c6a4d", "solution": "import numpy as np\n\nclass AdaptiveProbabilisticMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.pa = np.clip(self.pa * 1.05, 0, 1)\n            # Use the probability self.pa for accepting new solutions\n            # Optimization logic here\n        return best_solution", "name": "AdaptiveProbabilisticMetaheuristic", "description": "An adaptive metaheuristic algorithm that dynamically adjusts the probability of accepting a new solution based on the given probability rate.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'best_solution' is not defined\").", "error": "NameError(\"name 'best_solution' is not defined\")", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {}, "mutation_prompt": null}
{"id": "95a8cda2-7ea4-48b4-a5bb-01fa01bbe13d", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "91da9ba8-c329-4ec2-977f-f4f5ae2203b3", "solution": "import numpy as np\n\nclass DynamicAcceptanceProbabilityAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25\n        \n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        # Insert your optimization algorithm here using the updated acceptance probability", "name": "DynamicAcceptanceProbabilityAlgorithm", "description": "Dynamically adjust the probability of accepting a new solution based on a fixed rate of 0.25 to enhance the optimization process.", "configspace": "", "generation": 83, "fitness": 0.0, "feedback": "The algorithm DynamicAcceptanceProbabilityAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "be098641-1256-480b-9996-721c2a0e2f16", "solution": "import numpy as np\n\nclass CustomRefinedEnhancedHybridCuckooDE(RefinedEnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 0.25, 0, 1)  # Refine the probability adjustment\n        return super().__call__(func)", "name": "CustomRefinedEnhancedHybridCuckooDE", "description": "Refine the probability of accepting a new solution dynamically based on a fixed probability rate.", "configspace": "", "generation": 84, "fitness": 0.10069980844167825, "feedback": "The algorithm CustomRefinedEnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.11.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.1970532862027604, 0.16467468889147707, 0.1779343033573244, 0.16256256147435122, 0.17247890345468164, 0.16303092762537996, 0.1457491796872471, 0.15340202164270178, 0.18899205966127297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03359246237950553, 0.037403815721491096, 0.03770550636508907, 0.030825774504561032, 0.03658549935368571, 0.037847297715810746, 0.03375839090861721, 0.04450261170455683, 0.04271284270134601, 0.02538779334188568, 0.0368528283352072, 0.022628626867334245, 0.0301387697558253, 0.02382430626177523, 0.02541672656977334, 0.03184216034820653, 0.03187637332263582, 0.025238824064589993, 0.5858863162167456, 0.12630649996197718, 0.6305159129019129, 0.5705920085185995, 0.21857261018594332, 0.30981944182331467, 0.27861850933171517, 0.9390357091040221, 0.5453656969446472, 0.06036167562691952, 0.07743675162753627, 0.052694286664396905, 0.03711662279195094, 0.07971446604274313, 0.0888112869975386, 0.07683561062059163, 0.06005584441747436, 0.06679223223645936, 0.11976240001471183, 0.09518961792971947, 0.10542433355020331, 0.09312535438965586, 0.11919067938530681, 0.16671863229158046, 0.09997819193871782, 0.11660790806036803, 0.13301070705033202, 9.999999999998899e-05, 0.0092749022082258, 9.999999999998899e-05, 9.999999999998899e-05, 0.01538343614288551, 9.999999999998899e-05, 0.002777257453600801, 9.999999999998899e-05, 9.999999999998899e-05, 0.02550040210142457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0053882397702013085, 0.02129617654486826, 0.007972414911801229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03304970831311982, 0.12324597187163966, 0.03471323767649159, 0.1015521930870813, 0.025195164779791557, 0.021308766261037282, 0.0357919571142058, 0.04730637173785157, 0.05439746071916529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003436405764232431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19187204956841752, 0.1717367715940985, 0.16634134635920694, 0.2016641332270055, 0.1937335145616449, 0.21602149896108092, 0.2036843471999582, 0.18577999120944722, 0.19993517958198936, 0.05478982460249804, 0.031099555317710803, 0.03719858170987378, 0.029544721397737672, 0.04532709314429284, 0.03848613722247973, 0.039733219942485465, 0.03997523801822844, 0.04988139125643121, 0.13465228477705782, 0.12326566127839156, 0.16392783793808352, 0.15225200783222503, 0.13661620570934296, 0.14479650254175558, 0.1362160397780321, 0.1237317188020135, 0.14015404579536062, 0.15820516467928813, 0.14986068668675712, 0.15571858262002536, 0.1577809530277413, 0.17389972835811462, 0.15770767158771926, 0.1632698119669178, 0.17377774300845283, 0.14952659249115208, 0.09493783696155755, 0.1030057889141166, 0.10093037306305941, 0.10403955806021747, 0.09941647084352956, 0.09609298766321606, 0.12521694192570798, 0.11929322899724559, 0.10689241428280982, 0.14226370478226358, 0.15807228628704395, 0.143625464780199, 0.1497802278184538, 0.1327215795106449, 0.14485187499728325, 0.15665603866436595, 0.13111603190988697, 0.14290536524112174, 0.12932057995821977, 0.09842966859211377, 0.12340125477994479, 0.14989545989102293, 0.13960527319602367, 0.14728444918910388, 0.13608062728130987, 0.12836786391585642, 0.09024038131523482, 0.12251979614913344, 0.16537373853541704, 0.15920614654586984, 0.12887324432033676, 0.21940015496463983, 0.16196904452991634, 0.1692634923904972, 0.17403874281977405, 0.14750283795793617, 0.13253961261194092, 0.1698530249914676, 0.1428635327831771, 0.15491839317180567, 0.1634615197367999, 0.145704489366566, 0.20850246009841256, 0.12104022860261243, 0.1959269363602818, 0.19379925207150928, 0.19033011867751815, 0.1915936087860427, 0.17736198998478625, 0.18270864983859114, 0.18040989718623224, 0.1840341578906819, 0.19531302711375587, 0.1976896257148626, 0.04904551462368634, 0.05110686539099585, 0.06436137034204548, 0.0411909533204704, 0.047398935643307105, 0.047769379607091156, 0.04769514869677838, 0.050436999562548435, 0.04960025113864319]}, "mutation_prompt": null}
{"id": "f122bfa9-2973-4127-aa25-e1606cf76b36", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "0cea2e85-0c2a-42b5-aeff-3e4d086f67e0", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "549da100-9394-45aa-a45e-db66b79329ae", "solution": "import numpy as np\n\nclass DynamicProbEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 0.25, 0, 1)\n        return super().__call__(func)", "name": "DynamicProbEnhancedHybridCuckooDE", "description": "Dynamically adjust the probability of accepting new solutions based on a fixed rate to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 87, "fitness": 0.09046213234086958, "feedback": "The algorithm DynamicProbEnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.19102729223769788, 0.16963315152156688, 0.17501907700431252, 0.223325444795495, 0.16041458373062145, 0.16635968784112265, 0.18597317657476575, 0.16594216300172315, 0.19666348846686688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041600965980207905, 0.043478126937750106, 0.046092742584506574, 0.046911585600443284, 0.03802713647612743, 0.042387415106256765, 0.05476217577016318, 0.039147317277312355, 0.055698866289718874, 0.03580967422038961, 0.03892593025840052, 0.04082040586519342, 0.032380224786094036, 0.03160542997176652, 0.04382804104208682, 0.0399515424243857, 0.04142828829438916, 0.02688445356464031, 0.0792139966408989, 0.11052358665840634, 0.07406286217654667, 0.09537402456803556, 0.08284557889355326, 0.0905080276838719, 0.10973678984927082, 0.0888242116288438, 0.0878897005465844, 0.10645307329861498, 0.0765945166908526, 0.09360384747874118, 0.1182626513752546, 0.058157181814736725, 0.08884807258218264, 0.06280790334636388, 0.08112891316160786, 0.07817829874758986, 0.10329645272781163, 0.12180220610166548, 0.10760518969246224, 0.14046078862095146, 0.11513182617499773, 0.12511976107225142, 0.1294066359000008, 0.13831100410959296, 0.08778523020725748, 0.011772462621913338, 0.009233075716081673, 0.0023267924110672578, 0.00035273758302012403, 9.999999999998899e-05, 0.019672361717422926, 9.999999999998899e-05, 0.00038965431099191594, 0.010850722119968848, 9.999999999998899e-05, 0.0007333125451394196, 0.002063649296502823, 9.999999999998899e-05, 0.027827795385898413, 0.009072204550496621, 0.001885191036101741, 0.001445881632253454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04442449809044724, 0.05340093823408476, 0.0776578767218109, 0.04024492645220834, 0.034082871787205704, 0.09441783635996204, 0.04916808311525778, 0.08173163108102877, 0.08278935373931984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012071423784774216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006453593513214395, 9.999999999998899e-05, 0.1796444747690854, 0.19319367939957077, 0.220361947194473, 0.18734499192953835, 0.17838447992883044, 0.20724634117484197, 0.1861520031101751, 0.1870760424608412, 0.1878776513406566, 0.05812429860956403, 0.04388277110547756, 0.027532565082129756, 0.04452138622623991, 0.046039667546572294, 0.07130473801445891, 0.058573192747590874, 0.04087975744047123, 0.05483604359980676, 0.11696558189925421, 0.14978409678219595, 0.12481503426836082, 0.14045050541691617, 0.13639354891819244, 0.12097807590776188, 0.1491354154840403, 0.14177520892490736, 0.14661016048057318, 0.1580665439136727, 0.18793334307192766, 0.16391688978978014, 0.16090186951261842, 0.16909806639998393, 0.16766114964597767, 0.16376719370782555, 0.1628188905238379, 0.16071190611444686, 0.10643211115094875, 0.1067834702732241, 0.09953617901610001, 0.11293202135439628, 0.10881220846727824, 0.11617464387804233, 0.10636932220037121, 0.11697831716867169, 0.10062066494449595, 0.1490671784798242, 0.14958205742790065, 0.1398528088414046, 0.15335424208823056, 0.15423709179420309, 0.13966797706071488, 0.14362391434790533, 0.15624927530223176, 0.18791424680255253, 0.1480236618095958, 0.16014430109390942, 0.14264750239136503, 0.13566447858444186, 0.13213404056243672, 0.13956340545954082, 0.1514816777537924, 0.14714376619128366, 0.16450869021275427, 0.16167520598636786, 0.16148448583488484, 0.15809520669204646, 0.22633019563306633, 0.15742375271031817, 0.16515699054867583, 0.1609125168846136, 0.2408512497216817, 0.18199043141128413, 0.16833644323823793, 0.17719193382722465, 0.21044527413804603, 0.1574412214927925, 0.16222532756354902, 0.15014127320535064, 0.16930392878070322, 0.14652789767706875, 0.13318300288058904, 0.17769084380452693, 0.18765112255954242, 0.17546605795205794, 0.184615310355417, 0.19275955743265505, 0.19088945311156014, 0.17717086173365137, 0.19562554079644678, 0.19435447465330546, 0.05532500988258238, 0.05146470791867652, 0.044492534420294216, 0.05611550383231423, 0.05558561721869815, 0.06586051308560814, 0.05981779978352186, 0.05792965993145749, 0.0600313186496767]}, "mutation_prompt": null}
{"id": "344d65ae-e4ad-4ae7-9ff4-ac2a17eba496", "solution": "import numpy as np\n\nclass DynamicallyAdjustedCuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25\n\n    def __call__(self, func):\n        solution = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n        for _ in range(self.budget):\n            new_solution = self.generate_new_solution(solution)\n            if func(new_solution) < func(solution) or np.random.rand() < self.pa:\n                solution = new_solution\n        return solution\n\n    def generate_new_solution(self, solution):\n        # Custom logic to generate a new solution based on the current solution\n        return solution  # Placeholder logic for demonstration", "name": "DynamicallyAdjustedCuckooDE", "description": "Dynamically adjusting the probability of accepting new solutions using a probability rate of 0.25 to enhance the optimization process.", "configspace": "", "generation": 88, "fitness": 0.01584647966858364, "feedback": "The algorithm DynamicallyAdjustedCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.03.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.07014120149131509, 0.033169135226909896, 0.05977475439485991, 0.008412792100028876, 0.00434803254024807, 0.025288696900545027, 0.03222514068478122, 0.04631839876120303, 0.029853643019375542, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00462856315335225, 0.0017233825755258447, 9.999999999998899e-05, 9.999999999998899e-05, 0.01403421191803611, 0.0013002555277971117, 9.999999999998899e-05, 0.015039070566202462, 0.0018755134366887916, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008617486609551306, 9.999999999998899e-05, 0.12391795494314395, 0.06711180782050574, 9.999999999998899e-05, 9.999999999998899e-05, 0.09461470627041313, 0.04265552973176889, 0.015971634787736777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0062887401470239634, 0.03869253920765536, 0.05468846648487902, 0.0038516687163507868, 0.007251846793454253, 0.04269832293754261, 0.008927236457533794, 0.025876799553841034, 9.999999999998899e-05, 0.09125260076425479, 0.07002381117691492, 0.05544011216750555, 0.10273960207795751, 0.04187441940010561, 0.06575276177740275, 0.11420206329748472, 0.06611323825188997, 0.04981964338561207, 0.02042035300808842, 9.999999999998899e-05, 9.999999999998899e-05, 0.044650675553987496, 9.999999999998899e-05, 0.0284366169571878, 0.05648699256316181, 0.0052957361934719005, 9.999999999998899e-05, 0.0916346253723066, 0.014783134363436479, 0.06804331621272863, 0.09130231661935506, 0.01723509741699314, 0.04239781190054204, 0.12245976138762271, 0.024173274365021813, 0.07554159735876675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028015673491834092, 0.012084602816619716, 0.015011458769910169, 0.045164631487977336, 0.013065948923402737, 0.01676630709854743, 0.03391929261879634, 0.056615725614002965, 0.02064624418490768, 0.013454406845382572, 0.03967402848431323, 0.008073334029525148, 0.011030978839133287, 0.009759435717904164, 0.012899610169580189, 0.012009348088349192, 0.011495043442883213, 0.015968679650421702, 0.057968894696363016, 0.12017502569002791, 0.0810878491228012, 0.10735471808377628, 0.06962354731804643, 0.12465113207635137, 0.05192136688274929, 0.04778425663700692, 0.07277987677638487, 9.999999999998899e-05, 9.999999999998899e-05, 0.009977089842196252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00378771705097114, 9.999999999998899e-05, 0.004760402692256194]}, "mutation_prompt": null}
{"id": "c08a6739-d01f-47cf-8e77-f872321ead5c", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "5c690edd-c5c6-4021-a54f-7abc24a5bba9", "solution": "import numpy as np\n\nclass DynamicProbEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 0.25, 0, 1)\n        return super().__call__(func)", "name": "DynamicProbEnhancedHybridCuckooDE", "description": "Dynamically adjusting the probability of accepting a new solution in EnhancedHybridCuckooDE with a 0.25 probability rate to optimize black box functions within a specified budget.", "configspace": "", "generation": 90, "fitness": 0.09046213234086958, "feedback": "The algorithm DynamicProbEnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.19102729223769788, 0.16963315152156688, 0.17501907700431252, 0.223325444795495, 0.16041458373062145, 0.16635968784112265, 0.18597317657476575, 0.16594216300172315, 0.19666348846686688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041600965980207905, 0.043478126937750106, 0.046092742584506574, 0.046911585600443284, 0.03802713647612743, 0.042387415106256765, 0.05476217577016318, 0.039147317277312355, 0.055698866289718874, 0.03580967422038961, 0.03892593025840052, 0.04082040586519342, 0.032380224786094036, 0.03160542997176652, 0.04382804104208682, 0.0399515424243857, 0.04142828829438916, 0.02688445356464031, 0.0792139966408989, 0.11052358665840634, 0.07406286217654667, 0.09537402456803556, 0.08284557889355326, 0.0905080276838719, 0.10973678984927082, 0.0888242116288438, 0.0878897005465844, 0.10645307329861498, 0.0765945166908526, 0.09360384747874118, 0.1182626513752546, 0.058157181814736725, 0.08884807258218264, 0.06280790334636388, 0.08112891316160786, 0.07817829874758986, 0.10329645272781163, 0.12180220610166548, 0.10760518969246224, 0.14046078862095146, 0.11513182617499773, 0.12511976107225142, 0.1294066359000008, 0.13831100410959296, 0.08778523020725748, 0.011772462621913338, 0.009233075716081673, 0.0023267924110672578, 0.00035273758302012403, 9.999999999998899e-05, 0.019672361717422926, 9.999999999998899e-05, 0.00038965431099191594, 0.010850722119968848, 9.999999999998899e-05, 0.0007333125451394196, 0.002063649296502823, 9.999999999998899e-05, 0.027827795385898413, 0.009072204550496621, 0.001885191036101741, 0.001445881632253454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04442449809044724, 0.05340093823408476, 0.0776578767218109, 0.04024492645220834, 0.034082871787205704, 0.09441783635996204, 0.04916808311525778, 0.08173163108102877, 0.08278935373931984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012071423784774216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006453593513214395, 9.999999999998899e-05, 0.1796444747690854, 0.19319367939957077, 0.220361947194473, 0.18734499192953835, 0.17838447992883044, 0.20724634117484197, 0.1861520031101751, 0.1870760424608412, 0.1878776513406566, 0.05812429860956403, 0.04388277110547756, 0.027532565082129756, 0.04452138622623991, 0.046039667546572294, 0.07130473801445891, 0.058573192747590874, 0.04087975744047123, 0.05483604359980676, 0.11696558189925421, 0.14978409678219595, 0.12481503426836082, 0.14045050541691617, 0.13639354891819244, 0.12097807590776188, 0.1491354154840403, 0.14177520892490736, 0.14661016048057318, 0.1580665439136727, 0.18793334307192766, 0.16391688978978014, 0.16090186951261842, 0.16909806639998393, 0.16766114964597767, 0.16376719370782555, 0.1628188905238379, 0.16071190611444686, 0.10643211115094875, 0.1067834702732241, 0.09953617901610001, 0.11293202135439628, 0.10881220846727824, 0.11617464387804233, 0.10636932220037121, 0.11697831716867169, 0.10062066494449595, 0.1490671784798242, 0.14958205742790065, 0.1398528088414046, 0.15335424208823056, 0.15423709179420309, 0.13966797706071488, 0.14362391434790533, 0.15624927530223176, 0.18791424680255253, 0.1480236618095958, 0.16014430109390942, 0.14264750239136503, 0.13566447858444186, 0.13213404056243672, 0.13956340545954082, 0.1514816777537924, 0.14714376619128366, 0.16450869021275427, 0.16167520598636786, 0.16148448583488484, 0.15809520669204646, 0.22633019563306633, 0.15742375271031817, 0.16515699054867583, 0.1609125168846136, 0.2408512497216817, 0.18199043141128413, 0.16833644323823793, 0.17719193382722465, 0.21044527413804603, 0.1574412214927925, 0.16222532756354902, 0.15014127320535064, 0.16930392878070322, 0.14652789767706875, 0.13318300288058904, 0.17769084380452693, 0.18765112255954242, 0.17546605795205794, 0.184615310355417, 0.19275955743265505, 0.19088945311156014, 0.17717086173365137, 0.19562554079644678, 0.19435447465330546, 0.05532500988258238, 0.05146470791867652, 0.044492534420294216, 0.05611550383231423, 0.05558561721869815, 0.06586051308560814, 0.05981779978352186, 0.05792965993145749, 0.0600313186496767]}, "mutation_prompt": null}
{"id": "596cdc4c-74ed-44f2-ad5e-4bd2c3f49c38", "solution": "import numpy as np\n\nclass CustomRefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 0.25, 0, 1)\n        return super().__call__(func)", "name": "CustomRefinedEnhancedHybridCuckooDE", "description": "Dynamically adjusting the probability of accepting new solutions in an enhanced hybrid cuckoo algorithm for black box optimization.", "configspace": "", "generation": 91, "fitness": 0.09046213234086958, "feedback": "The algorithm CustomRefinedEnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.19102729223769788, 0.16963315152156688, 0.17501907700431252, 0.223325444795495, 0.16041458373062145, 0.16635968784112265, 0.18597317657476575, 0.16594216300172315, 0.19666348846686688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041600965980207905, 0.043478126937750106, 0.046092742584506574, 0.046911585600443284, 0.03802713647612743, 0.042387415106256765, 0.05476217577016318, 0.039147317277312355, 0.055698866289718874, 0.03580967422038961, 0.03892593025840052, 0.04082040586519342, 0.032380224786094036, 0.03160542997176652, 0.04382804104208682, 0.0399515424243857, 0.04142828829438916, 0.02688445356464031, 0.0792139966408989, 0.11052358665840634, 0.07406286217654667, 0.09537402456803556, 0.08284557889355326, 0.0905080276838719, 0.10973678984927082, 0.0888242116288438, 0.0878897005465844, 0.10645307329861498, 0.0765945166908526, 0.09360384747874118, 0.1182626513752546, 0.058157181814736725, 0.08884807258218264, 0.06280790334636388, 0.08112891316160786, 0.07817829874758986, 0.10329645272781163, 0.12180220610166548, 0.10760518969246224, 0.14046078862095146, 0.11513182617499773, 0.12511976107225142, 0.1294066359000008, 0.13831100410959296, 0.08778523020725748, 0.011772462621913338, 0.009233075716081673, 0.0023267924110672578, 0.00035273758302012403, 9.999999999998899e-05, 0.019672361717422926, 9.999999999998899e-05, 0.00038965431099191594, 0.010850722119968848, 9.999999999998899e-05, 0.0007333125451394196, 0.002063649296502823, 9.999999999998899e-05, 0.027827795385898413, 0.009072204550496621, 0.001885191036101741, 0.001445881632253454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04442449809044724, 0.05340093823408476, 0.0776578767218109, 0.04024492645220834, 0.034082871787205704, 0.09441783635996204, 0.04916808311525778, 0.08173163108102877, 0.08278935373931984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012071423784774216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006453593513214395, 9.999999999998899e-05, 0.1796444747690854, 0.19319367939957077, 0.220361947194473, 0.18734499192953835, 0.17838447992883044, 0.20724634117484197, 0.1861520031101751, 0.1870760424608412, 0.1878776513406566, 0.05812429860956403, 0.04388277110547756, 0.027532565082129756, 0.04452138622623991, 0.046039667546572294, 0.07130473801445891, 0.058573192747590874, 0.04087975744047123, 0.05483604359980676, 0.11696558189925421, 0.14978409678219595, 0.12481503426836082, 0.14045050541691617, 0.13639354891819244, 0.12097807590776188, 0.1491354154840403, 0.14177520892490736, 0.14661016048057318, 0.1580665439136727, 0.18793334307192766, 0.16391688978978014, 0.16090186951261842, 0.16909806639998393, 0.16766114964597767, 0.16376719370782555, 0.1628188905238379, 0.16071190611444686, 0.10643211115094875, 0.1067834702732241, 0.09953617901610001, 0.11293202135439628, 0.10881220846727824, 0.11617464387804233, 0.10636932220037121, 0.11697831716867169, 0.10062066494449595, 0.1490671784798242, 0.14958205742790065, 0.1398528088414046, 0.15335424208823056, 0.15423709179420309, 0.13966797706071488, 0.14362391434790533, 0.15624927530223176, 0.18791424680255253, 0.1480236618095958, 0.16014430109390942, 0.14264750239136503, 0.13566447858444186, 0.13213404056243672, 0.13956340545954082, 0.1514816777537924, 0.14714376619128366, 0.16450869021275427, 0.16167520598636786, 0.16148448583488484, 0.15809520669204646, 0.22633019563306633, 0.15742375271031817, 0.16515699054867583, 0.1609125168846136, 0.2408512497216817, 0.18199043141128413, 0.16833644323823793, 0.17719193382722465, 0.21044527413804603, 0.1574412214927925, 0.16222532756354902, 0.15014127320535064, 0.16930392878070322, 0.14652789767706875, 0.13318300288058904, 0.17769084380452693, 0.18765112255954242, 0.17546605795205794, 0.184615310355417, 0.19275955743265505, 0.19088945311156014, 0.17717086173365137, 0.19562554079644678, 0.19435447465330546, 0.05532500988258238, 0.05146470791867652, 0.044492534420294216, 0.05611550383231423, 0.05558561721869815, 0.06586051308560814, 0.05981779978352186, 0.05792965993145749, 0.0600313186496767]}, "mutation_prompt": null}
{"id": "b85ecfe0-aa61-4f81-bd9f-12ce1daab582", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "1553f3ad-88c2-4573-9f50-e67279086018", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "031773bc-3b7b-43ba-a2c1-8c30ba170c6f", "solution": "import numpy as np\n\nclass AdaptedProbabilityEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa + 0.25, 0, 1)\n        return super().__call__(func)", "name": "AdaptedProbabilityEnhancedHybridCuckooDE", "description": "Adapting Probability-Enhanced Hybrid Cuckoo Differential Evolution by dynamically adjusting the probability of accepting new solutions based on a fixed probability rate of 0.25.", "configspace": "", "generation": 94, "fitness": 0.09040765030517382, "feedback": "The algorithm AdaptedProbabilityEnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.19100278235108603, 0.16963280925375024, 0.17501907700431252, 0.223325444795495, 0.16041458373062145, 0.16651374034631117, 0.1859785890008261, 0.16594216300172315, 0.19666348846686688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041600965980207905, 0.043478126937750106, 0.04609300199939603, 0.04690928639110281, 0.03802713647612743, 0.042387369100212346, 0.05476217577016318, 0.03914541125650284, 0.05569645267128853, 0.03580967422038961, 0.03892826240127101, 0.040819661113065786, 0.032380224786094036, 0.031603258759964725, 0.043807053089080505, 0.0399515424243857, 0.04142828829438916, 0.02688445356464031, 0.07920876156348733, 0.11052358665840634, 0.07405913067203962, 0.09537402456803556, 0.08399532276234478, 0.0905080276838719, 0.10973678984927082, 0.08982693191249547, 0.0878897005465844, 0.10645307329861498, 0.0765945166908526, 0.09188111155178835, 0.1182626513752546, 0.05868838168935686, 0.07344572304188746, 0.06280790334636388, 0.07226661154515046, 0.07817829874758986, 0.1032852753085386, 0.12179014507377905, 0.10762135205257761, 0.14046078862095146, 0.11513182617499773, 0.12511976107225142, 0.1294066359000008, 0.13831100410959296, 0.08778438729574867, 0.011772462621913338, 0.009233075716081673, 0.0023254955022664614, 0.00035273758302012403, 9.999999999998899e-05, 0.019672361717422926, 9.999999999998899e-05, 0.00038866149415894835, 0.010850722119968848, 9.999999999998899e-05, 0.0007333125451394196, 0.002066174890453243, 9.999999999998899e-05, 0.027827795385898413, 0.009069374202058, 0.001876904216518649, 0.001445881632253454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04440602866288823, 0.05683805394036223, 0.0776578767218109, 0.04024492645220834, 0.03406364974798637, 0.09440741932766372, 0.049154092286258, 0.08169971566635881, 0.08278935373931984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012071423784774216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006455767912089461, 9.999999999998899e-05, 0.17963388972979888, 0.19319367939957077, 0.220361947194473, 0.18734499192953835, 0.17839204919842633, 0.20724634117484197, 0.1861520031101751, 0.18705342033015038, 0.1878776513406566, 0.05812429860956403, 0.04388277110547756, 0.027532565082129756, 0.04452138622623991, 0.046039667546572294, 0.07130473801445891, 0.058553074711983344, 0.04087374008683886, 0.054832868635695586, 0.11697188010620663, 0.14978372118959193, 0.12483883495033066, 0.14045050541691617, 0.13639354891819244, 0.12097385297998642, 0.1491354154840403, 0.1417680297774877, 0.14660541859178156, 0.15805628768397806, 0.18793334307192766, 0.16391688978978014, 0.16090186951261842, 0.16909806639998393, 0.1679756808045264, 0.16376184811851235, 0.1628188905238379, 0.16071190611444686, 0.10643211115094875, 0.1067834702732241, 0.09953617901610001, 0.11293202135439628, 0.108809688665224, 0.11617464387804233, 0.10636932220037121, 0.11697831716867169, 0.1006194657849292, 0.1490671784798242, 0.1495795128098817, 0.14832232579204063, 0.1537609046868138, 0.15299375845468766, 0.13966318580579884, 0.14362391434790533, 0.15624927530223176, 0.18791424680255253, 0.1480236618095958, 0.16014430109390942, 0.14264750239136503, 0.13567045185048898, 0.13213404056243672, 0.1395652633908283, 0.1514774339106647, 0.14714376619128366, 0.16450869021275427, 0.16167520598636786, 0.16148448583488484, 0.15809520669204646, 0.22630029404627994, 0.1574410698392359, 0.16515191410074004, 0.16093811948094117, 0.2408512497216817, 0.18199043141128413, 0.16833644323823793, 0.17719997418670208, 0.21044527413804603, 0.1574412214927925, 0.16223404897799787, 0.15011765758988926, 0.16930392878070322, 0.14652789767706875, 0.13317184590573217, 0.17681080643102653, 0.18765112255954242, 0.1765941388520227, 0.184620059451292, 0.19275955743265505, 0.19088945311156014, 0.17717042948892125, 0.1956237365376563, 0.19434841499761724, 0.05532500988258238, 0.05146470791867652, 0.044495106832699416, 0.05611550383231423, 0.05558561721869815, 0.06586051308560814, 0.0598119394092651, 0.057927040709663924, 0.0600313186496767]}, "mutation_prompt": null}
{"id": "5baee9e9-cecc-4b64-9b0a-529614312e3a", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "40fe4849-4dca-4c5b-8ff5-a71f0cfe748b", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        lines = self.get_selected_solution_lines()\n        for i in range(len(lines)):\n            if np.random.rand() < 0.25:\n                lines[i] = refine_line(lines[i])  # Function to refine the line\n        self.set_selected_solution_lines(lines)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE with dynamic probability adjustment using a 0.25 rate for black box optimization.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'RefinedEnhancedHybridCuckooDE' object has no attribute 'get_selected_solution_lines'\").", "error": "AttributeError(\"'RefinedEnhancedHybridCuckooDE' object has no attribute 'get_selected_solution_lines'\")", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {}, "mutation_prompt": null}
{"id": "b08a0ca7-00f6-4975-b314-2263ccf8800e", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 0.25, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Enhancing Cuckoo Search with Differential Evolution by dynamically adjusting the probability of accepting a new solution using a 0.25 probability rate.", "configspace": "", "generation": 97, "fitness": 0.09046213234086958, "feedback": "The algorithm RefinedEnhancedHybridCuckooDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.19102729223769788, 0.16963315152156688, 0.17501907700431252, 0.223325444795495, 0.16041458373062145, 0.16635968784112265, 0.18597317657476575, 0.16594216300172315, 0.19666348846686688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041600965980207905, 0.043478126937750106, 0.046092742584506574, 0.046911585600443284, 0.03802713647612743, 0.042387415106256765, 0.05476217577016318, 0.039147317277312355, 0.055698866289718874, 0.03580967422038961, 0.03892593025840052, 0.04082040586519342, 0.032380224786094036, 0.03160542997176652, 0.04382804104208682, 0.0399515424243857, 0.04142828829438916, 0.02688445356464031, 0.0792139966408989, 0.11052358665840634, 0.07406286217654667, 0.09537402456803556, 0.08284557889355326, 0.0905080276838719, 0.10973678984927082, 0.0888242116288438, 0.0878897005465844, 0.10645307329861498, 0.0765945166908526, 0.09360384747874118, 0.1182626513752546, 0.058157181814736725, 0.08884807258218264, 0.06280790334636388, 0.08112891316160786, 0.07817829874758986, 0.10329645272781163, 0.12180220610166548, 0.10760518969246224, 0.14046078862095146, 0.11513182617499773, 0.12511976107225142, 0.1294066359000008, 0.13831100410959296, 0.08778523020725748, 0.011772462621913338, 0.009233075716081673, 0.0023267924110672578, 0.00035273758302012403, 9.999999999998899e-05, 0.019672361717422926, 9.999999999998899e-05, 0.00038965431099191594, 0.010850722119968848, 9.999999999998899e-05, 0.0007333125451394196, 0.002063649296502823, 9.999999999998899e-05, 0.027827795385898413, 0.009072204550496621, 0.001885191036101741, 0.001445881632253454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04442449809044724, 0.05340093823408476, 0.0776578767218109, 0.04024492645220834, 0.034082871787205704, 0.09441783635996204, 0.04916808311525778, 0.08173163108102877, 0.08278935373931984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012071423784774216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006453593513214395, 9.999999999998899e-05, 0.1796444747690854, 0.19319367939957077, 0.220361947194473, 0.18734499192953835, 0.17838447992883044, 0.20724634117484197, 0.1861520031101751, 0.1870760424608412, 0.1878776513406566, 0.05812429860956403, 0.04388277110547756, 0.027532565082129756, 0.04452138622623991, 0.046039667546572294, 0.07130473801445891, 0.058573192747590874, 0.04087975744047123, 0.05483604359980676, 0.11696558189925421, 0.14978409678219595, 0.12481503426836082, 0.14045050541691617, 0.13639354891819244, 0.12097807590776188, 0.1491354154840403, 0.14177520892490736, 0.14661016048057318, 0.1580665439136727, 0.18793334307192766, 0.16391688978978014, 0.16090186951261842, 0.16909806639998393, 0.16766114964597767, 0.16376719370782555, 0.1628188905238379, 0.16071190611444686, 0.10643211115094875, 0.1067834702732241, 0.09953617901610001, 0.11293202135439628, 0.10881220846727824, 0.11617464387804233, 0.10636932220037121, 0.11697831716867169, 0.10062066494449595, 0.1490671784798242, 0.14958205742790065, 0.1398528088414046, 0.15335424208823056, 0.15423709179420309, 0.13966797706071488, 0.14362391434790533, 0.15624927530223176, 0.18791424680255253, 0.1480236618095958, 0.16014430109390942, 0.14264750239136503, 0.13566447858444186, 0.13213404056243672, 0.13956340545954082, 0.1514816777537924, 0.14714376619128366, 0.16450869021275427, 0.16167520598636786, 0.16148448583488484, 0.15809520669204646, 0.22633019563306633, 0.15742375271031817, 0.16515699054867583, 0.1609125168846136, 0.2408512497216817, 0.18199043141128413, 0.16833644323823793, 0.17719193382722465, 0.21044527413804603, 0.1574412214927925, 0.16222532756354902, 0.15014127320535064, 0.16930392878070322, 0.14652789767706875, 0.13318300288058904, 0.17769084380452693, 0.18765112255954242, 0.17546605795205794, 0.184615310355417, 0.19275955743265505, 0.19088945311156014, 0.17717086173365137, 0.19562554079644678, 0.19435447465330546, 0.05532500988258238, 0.05146470791867652, 0.044492534420294216, 0.05611550383231423, 0.05558561721869815, 0.06586051308560814, 0.05981779978352186, 0.05792965993145749, 0.0600313186496767]}, "mutation_prompt": null}
{"id": "8c4f22e8-1eee-4495-bd0b-5bc1a8ac4afd", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridCuckooDE(EnhancedHybridCuckooDE):\n    def __call__(self, func):\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        return super().__call__(func)", "name": "RefinedEnhancedHybridCuckooDE", "description": "Refining EnhancedHybridCuckooDE by dynamically adjusting the probability of accept of a new solution using a 0.25 probability rate.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {"aucs": [0.16617292629125147, 0.15260122273281906, 0.15703511425122774, 0.16301673577033848, 0.17291783681225337, 0.1544138999923953, 0.1667063141462901, 0.1669657754176549, 0.15606003019198966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02986201908726238, 0.025282889945340892, 0.03413149198051635, 0.04467887307059426, 0.040502786706560046, 0.04822547209738315, 0.03229275822640432, 0.039035403911146904, 0.03753303701886557, 0.024966989745839996, 0.015413706569210817, 0.022681413591020827, 0.03985854706484915, 0.011526544068070743, 0.01844759719731881, 0.026991220784525094, 0.021142647169273165, 0.03989170807891096, 0.7294081368681027, 0.713438288980003, 0.7069470878876654, 0.7885680217805733, 0.5913716431389543, 0.7254257049465708, 0.6380275817598526, 0.6824919755713101, 0.8240107729505016, 0.05733085548726047, 0.05269784018142587, 0.05999787875632501, 0.0811858735759532, 0.0486857265822086, 0.0422632453041244, 0.07361420821193188, 0.08587382164677493, 0.06218451990026186, 0.1120143598546971, 0.1011321687088399, 0.09119499431159017, 0.12386091140607458, 0.1350323140140094, 0.11048443298124899, 0.11846905696580667, 0.12021100039224752, 0.12625061284827566, 9.999999999998899e-05, 0.006335727744438913, 0.005276994124840173, 0.023372275023465616, 0.00022132691482978917, 0.013548287949459725, 9.999999999998899e-05, 0.025669099588506605, 9.999999999998899e-05, 9.999999999998899e-05, 0.003057800881208661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06286867874083146, 0.000523324336321962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034909807572554574, 0.0015798786235389217, 0.055993940059183345, 0.04403710205624889, 0.03427057281535073, 0.024687978171849645, 0.04272938961795936, 0.07199738043231374, 0.04614453838323429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007405387760253013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044720115601526444, 0.16455112893955648, 0.18324022323854183, 0.18499457212762405, 0.1720255474378557, 0.18267200943238981, 0.17340869192831265, 0.20184990709203998, 0.17289234516148821, 0.17479537370843623, 0.03183304775025009, 0.028895811388798043, 0.033648603098806795, 0.03033811532905617, 0.03476795384555009, 0.039752371018692556, 0.03987344086836331, 0.03409249779934975, 0.04143890241358572, 0.13269612989355606, 0.145756587086457, 0.1298368587930845, 0.13317910829510382, 0.14971976846500779, 0.15167758573505252, 0.14973071999863186, 0.13427253596152844, 0.12384881542011739, 0.16572847598643603, 0.15677375827220608, 0.1559780688765663, 0.15547339335230703, 0.16414383596455373, 0.14639797310618563, 0.16576257761508872, 0.17377774300845283, 0.15579695754143763, 0.09077942417758, 0.09316958253495977, 0.09971783738879403, 0.10896989766687659, 0.14443116507224463, 0.09922281729082494, 0.09238751050412453, 0.12802872071740545, 0.09421428272958254, 0.1549626940174581, 0.14748415493605793, 0.151835952466446, 0.13841287106798938, 0.14844124324022856, 0.1538372205405012, 0.15500574101955844, 0.16378191563679734, 0.1486866204374805, 0.09006709534763757, 0.14679730378542577, 0.08873560959128535, 0.15007367110981418, 0.13510412265753713, 0.1449580680161614, 0.147448893852549, 0.1469422639190252, 0.1250342321238671, 0.1401125851420325, 0.22535745557970288, 0.15309330721945758, 0.1294389529904978, 0.16063721916870766, 0.16134982552533694, 0.1399794658157263, 0.14786631574583264, 0.12774732961723134, 0.2068862049808765, 0.28858380036393805, 0.15313091056107409, 0.16858014648248532, 0.12000384790711527, 0.17549609359653118, 0.1609580564055867, 0.1618255197018421, 0.15318088645317474, 0.18203671921652276, 0.17843518515388046, 0.18455301960280912, 0.17832612771620604, 0.19087962973035466, 0.18056522883979542, 0.18257275365835723, 0.17168799546767555, 0.19965493951966018, 0.044164218307000014, 0.05355409798948918, 0.047740755880395946, 0.054054174583281545, 0.04538136466945886, 0.0414597344981219, 0.04004393064066136, 0.04109439500413792, 0.039558482141562545]}, "mutation_prompt": null}
{"id": "d139c13d-6c98-440f-b2e2-66a4a42b76c9", "solution": "import numpy as np\n\nclass CustomAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25\n\n    def __call__(self, func):\n        # Custom optimization algorithm implementation\n        # Modify algorithm based on the given probability rate\n        self.pa = np.clip(self.pa * 1.05, 0, 1)\n        # Implement optimization process for the given budget and dimension\n        return optimized_solution", "name": "CustomAlgorithm", "description": "Enhancing Cuckoo Search with Differential Evolution by dynamically adjusting the probability of accept of a new solution using a given probability rate.", "configspace": "", "generation": 99, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'optimized_solution' is not defined\").", "error": "NameError(\"name 'optimized_solution' is not defined\")", "parent_id": "71a90a43-3253-4feb-a18c-d900e12d931f", "metadata": {}, "mutation_prompt": null}
