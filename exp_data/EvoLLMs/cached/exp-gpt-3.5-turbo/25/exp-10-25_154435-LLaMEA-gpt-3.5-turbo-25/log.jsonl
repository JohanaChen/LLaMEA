{"id": "5411ba70-ad41-4193-9290-747def2881c8", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "d1165109-c278-4303-ae15-fa686996b7af", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5411ba70-ad41-4193-9290-747def2881c8", "metadata": {}, "mutation_prompt": null}
{"id": "0e0d766e-483a-4978-a430-4c6e1695be16", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5411ba70-ad41-4193-9290-747def2881c8", "metadata": {}, "mutation_prompt": null}
{"id": "1493b9d2-6fdc-4601-901c-327d2d74cb4b", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5411ba70-ad41-4193-9290-747def2881c8", "metadata": {}, "mutation_prompt": null}
{"id": "90a2c174-1b9a-4810-bcc8-6d800a6a8d18", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5411ba70-ad41-4193-9290-747def2881c8", "metadata": {}, "mutation_prompt": null}
{"id": "236b0ac5-e660-479c-8bc3-232f9f9c1d7d", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5411ba70-ad41-4193-9290-747def2881c8", "metadata": {}, "mutation_prompt": null}
{"id": "63473819-6e64-4920-a00c-c61272736592", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5411ba70-ad41-4193-9290-747def2881c8", "metadata": {}, "mutation_prompt": null}
{"id": "7ec25bef-0e02-4600-95eb-939f63b822a0", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5411ba70-ad41-4193-9290-747def2881c8", "metadata": {}, "mutation_prompt": null}
{"id": "e025280d-d488-49cb-8ae5-e031c04891ea", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5411ba70-ad41-4193-9290-747def2881c8", "metadata": {}, "mutation_prompt": null}
{"id": "40b13a1b-b6db-478f-8690-7802e36a684e", "solution": "import numpy as np\n\nclass GravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "GravitationalOptimization", "description": "A novel metaheuristic algorithm inspired by the concept of gravitational forces among particles in space to optimize black box functions within a given evaluation budget.", "configspace": "", "generation": 9, "fitness": 0.09144843562834938, "feedback": "The algorithm GravitationalOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "5411ba70-ad41-4193-9290-747def2881c8", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "cebdd9ca-7d90-4a3a-b76f-73eeb219555b", "solution": "import numpy as np\n\nclass GravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "GravitationalOptimization", "description": "A novel metaheuristic algorithm inspired by the concept of gravitational forces among particles in space to optimize black box functions within a given evaluation budget.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40b13a1b-b6db-478f-8690-7802e36a684e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "1828ba54-18ce-400b-aeea-6371622221f2", "solution": "import numpy as np\n\nclass SchoolingFishOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "SchoolingFishOptimization", "description": "An algorithm inspired by the behavior of schooling fish, where individuals move towards the center of mass of their neighbors to optimize black box functions within a given evaluation budget.", "configspace": "", "generation": 11, "fitness": 0.09144843562834938, "feedback": "The algorithm SchoolingFishOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "40b13a1b-b6db-478f-8690-7802e36a684e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 12, "fitness": 0.13544748093570386, "feedback": "The algorithm DifferentialGravitationalOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "40b13a1b-b6db-478f-8690-7802e36a684e", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "bf226813-49b4-4d0a-ab43-13d990549ac6", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "17311b23-53eb-4869-a5b9-48416dcc1761", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "5c58530e-8429-4d7d-9239-bbcd274046b3", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "d12531b6-9581-4443-98fb-1217e8ef73f8", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "c1358fe9-fcb1-4600-8996-b0646a1d9eca", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "ec867117-484a-4d81-ae90-d6e55a5ca787", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "1f573236-932c-4e43-8354-555104e80d5b", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "4786f424-60d9-464b-9615-3220360a916a", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "cad2bff2-0d4c-4aaf-8df8-1832b8360c01", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "97bbed19-7ff0-48a6-a9c5-d8a2ef4cfb92", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "2be8e6aa-eac8-4240-92e8-b1e4f0d5c25d", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "4d7b097e-f3ca-4266-88e6-c8e04c6bb96c", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "10363dca-c7e4-45c2-bfb8-ad49bc041435", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "b0f1d5bc-0f76-44bd-b054-87a1df8fae3b", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "4cabee1a-c097-4917-a983-0f979193a9f9", "solution": "import numpy as np\n\nclass FireflyDifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n                    else:\n                        # Firefly Algorithm\n                        attractiveness = 1 / (1 + np.linalg.norm(solution - best_solution))\n                        solution = solution + attractiveness * (best_solution - solution)\n        \n        return best_solution", "name": "FireflyDifferentialGravitationalOptimization", "description": "Introducing Firefly Differential Gravitational Optimization (FDGO) by enhancing Differential Gravitational Optimization with Firefly Algorithm for improved global exploration and exploitation in black box function optimization within a specified evaluation budget.", "configspace": "", "generation": 27, "fitness": 0.13544748093570386, "feedback": "The algorithm FireflyDifferentialGravitationalOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "8e6ebfbb-379e-487e-b106-4216afdddee7", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "850a3d3f-4ed3-4707-ad2c-df1cbb11f176", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "4606f769-9def-4c70-abb1-9857bb0ec10a", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "eae0e764-07c4-4176-92d9-2885c7e5008c", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "7579410a-5765-4a28-a266-f9fa131b34dc", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "f62623b2-6ab5-4a91-9826-9ad1c9e5c0de", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "e34e0bc8-91ff-4eb5-8c40-2ea9f26cb59f", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "a1d8831a-5300-47ca-ba65-96599197b8fd", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "f0b2f754-5dc9-402b-9f1f-44c160460e9e", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "cdaf2e6c-6a75-4c3b-a010-e4568e926031", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "5532373c-c515-4abb-8ce2-73c38de94d41", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "77f452fa-af27-4853-baf1-4c734e416647", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "8a253991-4838-4627-881a-37ec1f23421d", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "3fde5c39-75be-434f-a374-4cf50074c7e9", "solution": "import numpy as np\n\nclass HybridFireflyOppositionBased:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n\n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Opposition-based learning\n                    opposite_solution = self.lower_bound + self.upper_bound - solution\n                    opposite_fitness = func(opposite_solution)\n\n                    if opposite_fitness < best_fitness:\n                        best_solution = opposite_solution\n                        best_fitness = opposite_fitness\n\n        return best_solution", "name": "HybridFireflyOppositionBased", "description": "Introducing Hybrid Firefly Algorithm with Opposition-Based Learning to enhance exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 41, "fitness": 0.09181868519804891, "feedback": "The algorithm HybridFireflyOppositionBased got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.16971692795465443, 0.17489064890786488, 0.17049419186327108, 0.1753409672232339, 0.17778422684172523, 0.1721300339713807, 0.17633219772800768, 0.1825773935013001, 0.16479713936414697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039625792723416264, 0.0448726683814713, 0.03554631951956966, 0.054370128493160697, 0.040801753072656766, 0.04781369875723174, 0.05331979067661463, 0.06155195905234068, 0.05172589505187608, 0.029398090309464386, 0.03224143633460663, 0.038955622605577944, 0.049835937180699896, 0.04262327123609633, 0.053684769508608454, 0.035256396702065596, 0.03434589324997739, 0.04009010729773965, 0.08549810968257876, 0.08833790908387107, 0.08398079062743236, 0.08057299153789677, 0.08108959266026883, 0.08655027521039815, 0.08565171658171133, 0.08050136383253526, 0.08882807253163005, 0.07618887647675165, 0.08421960762604463, 0.11153443985382927, 0.051459642350150325, 0.061638579752033906, 0.05896853039526451, 0.09119820725825445, 0.06605968041200538, 0.08946016547174385, 0.14642630553743818, 0.18937784749607778, 0.1429602275059224, 0.09819622485531376, 0.13071947479982393, 0.11983546313892401, 0.11985750152479246, 0.11986061546153504, 0.14869801690968687, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007983853893068771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016797931278241585, 0.0030769555310286023, 0.05889633996650079, 9.999999999998899e-05, 0.0021813209000043354, 0.03407501388045364, 0.009478359551449489, 0.01767261919218599, 0.005272034965116079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09791466682730587, 0.0796697120319001, 0.11854128765692784, 0.05943449495860109, 0.03365367129351782, 0.05915783483858961, 0.04895015338813191, 0.053664138675936335, 0.07273429353751437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010891692875595438, 0.001511817257103365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026725821096277302, 9.999999999998899e-05, 0.21620793653313208, 0.21255383186646282, 0.19048257330293528, 0.20487011715995818, 0.18441515963747912, 0.1963722810375481, 0.1958343811858042, 0.1836456067502843, 0.19020912580161708, 0.07098456223014837, 0.03976867159319086, 0.04309469198409965, 0.042107376193863844, 0.03791769974754111, 0.04564176107312434, 0.053990380358245216, 0.041002329753382916, 0.048252872561696525, 0.1456673863669068, 0.12057039814656001, 0.14743570345978874, 0.1707734972713031, 0.13935937835649204, 0.12828428375835954, 0.15522685478301212, 0.14486588191774918, 0.13568784829234026, 0.16362792331493115, 0.15896942610538112, 0.16750313888077706, 0.16443032368436528, 0.1709736533685593, 0.1686524544726351, 0.18109623715220702, 0.1737374423529502, 0.16814891411305122, 0.10414344363417916, 0.10830266162535485, 0.10933544126104755, 0.12244567448242638, 0.12834683771541677, 0.10994891695347864, 0.11259941845396859, 0.12317467671733506, 0.11943875772923951, 0.14467678991794475, 0.15629824473745957, 0.14238069211291715, 0.15996661910696497, 0.18712787797590347, 0.16736992812192752, 0.1466519777574825, 0.15352241053617943, 0.18017738732837074, 0.14830373045176293, 0.14190930235082355, 0.1511126067562818, 0.14207798404706085, 0.13847790042868113, 0.15204753251574454, 0.1288486853852695, 0.13884311211074052, 0.1605084278214981, 0.17317152823586512, 0.1646420338673823, 0.17830522771166346, 0.15473619416076123, 0.17953320864824507, 0.18437808671551714, 0.15513287621645888, 0.16598806251765108, 0.1605275720465028, 0.14901608974139746, 0.16607883133535584, 0.19174740067469132, 0.14440649329511068, 0.1913925315168521, 0.1554173704136389, 0.17075613475898477, 0.1737996835438842, 0.1855099857030056, 0.16851160520200503, 0.18456993196526772, 0.17511242949162875, 0.1846124888298114, 0.209577355264579, 0.18927302316932215, 0.1764184916076551, 0.18125697305360822, 0.20296278427561232, 0.05603902261967009, 0.05649045512783302, 0.06402781917675415, 0.050363338223223364, 0.058652804351200905, 0.06273596371592538, 0.07225736371481473, 0.05278180620121753, 0.05321510089441139]}, "mutation_prompt": null}
{"id": "8e288885-bda8-41c1-8dc6-589fd27284ad", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "d7638dd8-7b39-4a71-a298-3f49de65767d", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "dd9ba030-9ed9-425e-a6d5-3b1028b1d3d3", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "d590eb5c-70c8-40eb-9775-d1c1fc3e1034", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "36147d2a-a093-44ad-bc82-b4c692bcfff7", "solution": "import numpy as np\n\nclass DifferentialGravitationalPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n                    else:\n                        # Particle Swarm Optimization\n                        w = 0.5  # Inertia weight\n                        c1 = 1.5  # Cognitive factor\n                        c2 = 1.5  # Social factor\n                        velocity = np.random.uniform(-1, 1, self.dim)\n                        best_personal = np.copy(best_solution)\n                        best_global = np.copy(best_solution)\n                        velocity = w * velocity + c1 * np.random.rand() * (best_personal - solution) + c2 * np.random.rand() * (best_global - solution)\n                        solution += velocity\n                \n        return best_solution", "name": "DifferentialGravitationalPSO", "description": "Enhancing Differential Gravitational Optimization with Particle Swarm Optimization (PSO) to combine global exploration of gravitation with local search capabilities of particle swarm.", "configspace": "", "generation": 46, "fitness": 0.13195967052976643, "feedback": "The algorithm DifferentialGravitationalPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.2133206972919942, 0.2263960727621417, 0.2061466686442336, 0.2179422417717065, 0.20294148716724503, 0.18333349423496315, 0.1994172745191447, 0.2041265353053212, 0.16195408686810975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046172735438248846, 0.05812207218902765, 0.04615149588447098, 0.05417561878571853, 0.03901713902571868, 0.05309848943349971, 0.047107947029129016, 0.05896106299794679, 0.03967931398656854, 0.04286246283986206, 0.053876448141847555, 0.06508264086347737, 0.03290207559370861, 0.054322192176964434, 0.0484657173006966, 0.02216427584795766, 0.042758221017793585, 0.037430097440244725, 0.9985192457120247, 0.9880107551073419, 0.9986259278309978, 0.11942203206774626, 0.9913279538192037, 0.9889430297979561, 0.9713129671793566, 0.9944548819102138, 0.9933761697293533, 0.08278033773875759, 0.07383473612968738, 0.10433597278588436, 0.0983299157451425, 0.10105270918383247, 0.09696138046433644, 0.08176638016603233, 0.07612551580552063, 0.08977953547813688, 0.11449576726548294, 0.14878529976126775, 0.13933109259623766, 0.1083202248131152, 0.125065174116874, 0.13613452856262231, 0.14717974575140358, 0.16971276630162013, 0.1260236993366851, 0.05030776811366544, 0.02476193950595751, 9.999999999998899e-05, 0.021049765575857582, 0.026067957045470713, 0.0006952111956961549, 0.019418399487744487, 0.014249237396433134, 0.0397555192716178, 0.05663646244928844, 0.06481356520055337, 0.04078373358796039, 0.03738919661594753, 0.03555950114212303, 0.0034786025326569714, 0.047328518530280195, 0.0005664814020812647, 0.040753476271345734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07552132456923277, 0.024312992039882686, 0.04154387431122364, 0.03426442917592942, 0.010226771282563107, 0.06825070472550598, 0.04855849509189136, 0.044719087911538336, 0.03913132353027082, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008816346614481496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002241502629314329, 0.00353213524794338, 9.999999999998899e-05, 0.0008182507267862071, 9.999999999998899e-05, 0.18697509561465164, 0.21478852569251772, 0.23813966671345466, 0.2616537640689388, 0.19884522720728404, 0.18325730274230922, 0.22011864842708873, 0.22886775715485297, 0.2522351747031084, 0.052092288864946434, 0.04697720690462681, 0.04609686099869903, 0.05505638127363022, 0.0415988986663659, 0.051201933835095415, 0.041384361853315954, 0.03697789545421237, 0.05056733617233733, 0.15051114822301026, 0.11954831268924337, 0.16637883148001853, 0.12919857945468216, 0.14342850471620916, 0.13599186327248403, 0.1232405651383055, 0.1432646427696469, 0.11457899844909192, 0.19918022560460824, 0.1652004896280005, 0.16613378784027732, 0.17302359532017964, 0.17190519625092948, 0.19308298646528332, 0.18267548441910053, 0.17560310604357943, 0.16152319059914189, 0.12117585582188473, 0.12779948372532635, 0.10214540578707043, 0.1132727519135982, 0.12747973060290008, 0.10951829371857569, 0.13165733015468273, 0.1238037751357498, 0.1247539059552435, 0.16890915238037651, 0.18189348974680175, 0.16094719305681915, 0.14577703159769806, 0.17848471431681723, 0.1627523949217764, 0.18842078154044717, 0.15829060952766072, 0.14925054079893385, 0.15147434811858151, 0.15557986610171792, 0.14356281935581483, 0.15708825500040113, 0.1589885416675082, 0.1558002548027222, 0.15602398093536995, 0.15997748846733817, 0.16378711868201568, 0.16351209146143153, 0.1960948027638313, 0.16482435027018005, 0.25811530463526955, 0.2195122304035686, 0.149710119225949, 0.13648018699464193, 0.2523683525735656, 0.2054246669271108, 0.16225821553495057, 0.23151111302369798, 0.21216127635810145, 0.21756587634068536, 0.17548206904424846, 0.21060363596920173, 0.15453353794618396, 0.205916189449463, 0.1591895561462079, 0.18893422503494284, 0.16885609445846517, 0.17995270127065943, 0.18796474282929443, 0.18438341189316032, 0.19918076605551638, 0.1774791119823127, 0.18472931653095825, 0.18410808417077806, 0.057995004617005685, 0.05304053955855326, 0.05230122722221009, 0.058011245797089606, 0.07062612996893824, 0.05639336047109356, 0.05641914100190659, 0.05506734297237381, 0.061874982085121655]}, "mutation_prompt": null}
{"id": "997dfe8a-2d3d-45ff-ab6b-c0a3e285f21d", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "a2b3f2e9-8027-4635-9eba-d58b44cc03cd", "solution": "import numpy as np\n\nclass HybridBatAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.frequency_min = 0.0\n        self.frequency_max = 2.0\n        self.loudness = 1.0\n        self.pulse_rate = 0.5\n        \n    def __call__(self, func):\n        population = [np.random.uniform(self.lower_bound, self.upper_bound, self.dim) for _ in range(self.population_size)]\n        velocities = [np.zeros(self.dim) for _ in range(self.population_size)]\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            for i, bat in enumerate(population):\n                frequency = self.frequency_min + (self.frequency_max - self.frequency_min) * np.random.rand()\n                velocities[i] += (bat - best_solution) * frequency\n                new_bat = bat + velocities[i]\n                \n                if np.random.rand() > self.pulse_rate:\n                    new_bat = best_solution + 0.001 * np.random.normal(0, 1, self.dim)\n                \n                if func(new_bat) < func(bat) and np.random.rand() < self.loudness:\n                    population[i] = new_bat\n                \n                best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        return best_solution", "name": "HybridBatAlgorithm", "description": "Implementing a Hybrid Bat Algorithm (HBA) combining the echolocation behavior of bats with a local search strategy to enhance exploration and exploitation for efficient black box function optimization within a given budget.", "configspace": "", "generation": 48, "fitness": 0.04141733727474454, "feedback": "The algorithm HybridBatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.07312051805220232, 0.06794603217718409, 0.08710209249141188, 0.020564100031180588, 0.05431814632201626, 0.028860703841572688, 0.05252821665021579, 0.05392508597304857, 0.07786278118808365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022769190255165106, 9.999999999998899e-05, 0.004814367072636938, 0.006182598900937419, 0.011149110557394093, 0.028057989362065605, 0.002219011773277324, 0.001130477736197455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029549701255365268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04643808580137343, 0.034550537878335286, 0.04390128112975633, 0.040336712455929624, 0.04815823532794672, 0.03151783787935669, 0.03435132761899262, 0.05025699906489589, 0.026696252186055203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001876498846283492, 0.01861722605853866, 9.999999999998899e-05, 0.015486278852403168, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.027847082877482388, 0.004582727918697516, 9.999999999998899e-05, 0.03583257267873741, 0.026279303607937843, 9.999999999998899e-05, 0.06305380895521362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022458828832527478, 0.042441056315305814, 0.05814849024916835, 9.999999999998899e-05, 0.009112655694092475, 9.999999999998899e-05, 9.999999999998899e-05, 0.024817325832054538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11889687723580133, 0.10952173650358366, 0.15049239383435264, 0.09537124364547234, 0.1085220392165529, 0.0972318106572464, 0.12586675696466842, 0.11498911484630803, 0.14098511482178033, 0.0005285338981307897, 9.999999999998899e-05, 9.999999999998899e-05, 0.015381094219826807, 9.999999999998899e-05, 0.02857484331450466, 0.0007612135016774602, 9.999999999998899e-05, 0.050065375801476186, 0.0957998884363751, 0.08852866836764606, 0.06184995949783334, 0.1291894713122631, 0.07491580417937893, 0.06826558953973838, 0.08092117101393848, 0.06051662046832884, 0.0812142089229887, 0.10333996744731466, 0.11344406913519411, 0.11079248434137645, 0.1150418974862989, 0.10310444129026963, 0.11502496596856104, 0.13127272138636759, 0.12163125950398812, 0.0926670685233516, 0.04611476025902306, 0.07084828677990751, 0.04146158430720692, 0.06574346959210164, 0.04018695062243127, 0.0501790389927097, 0.06890782143646068, 0.07791989150170009, 0.04873917861859123, 0.1746384001673401, 0.08435019135118837, 0.16376364583121872, 0.12082654890298417, 0.09831817928294784, 0.14404061159843373, 0.12823640800601566, 0.1355304247279162, 0.15617605763643572, 9.999999999998899e-05, 9.999999999998899e-05, 0.07118783735911804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04714185326088283, 0.05790927149817848, 0.06130544423468798, 0.11243120485399782, 0.12862491328977044, 0.06657529419341568, 0.06558494173130369, 0.05977905213732537, 0.06516930867215964, 0.04039961209277554, 0.04974046984730973, 0.017427307015663973, 0.020500109672807465, 0.05385991355758035, 0.04885692357297888, 0.020091950663920888, 0.016429611888991724, 0.04878928912491065, 0.14808594201246128, 0.15600083030059808, 0.18877426917978757, 0.14100902190385645, 0.19488951764341833, 0.14815827430215212, 0.1546301829530381, 0.17149437234384335, 0.20516660161479727, 0.028419897235586578, 0.03788223437104876, 0.05702127749466923, 0.011572602975766344, 0.02705212359742959, 0.02702805870689573, 0.030400476742892923, 0.046596015400038215, 0.023774956424037375]}, "mutation_prompt": null}
{"id": "fa5e0c4b-350e-4e2a-8a27-d768804cbc00", "solution": "import numpy as np\n\nclass ChargedSystemSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        k = 1.38e-23  # Boltzmann constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Electrostatic forces\n                    distance = np.linalg.norm(best_solution - solution)\n                    force = k * (1 / distance**2)\n                    direction = (solution - best_solution) / distance\n                    charged_solution = best_solution + force * direction\n                    charged_fitness = func(charged_solution)\n                    \n                    if charged_fitness < best_fitness:\n                        best_solution = charged_solution\n                        best_fitness = charged_fitness\n        \n        return best_solution", "name": "ChargedSystemSearch", "description": "Introducing Charged System Search (CSS) algorithm that simulates charged particles interacting to find optimal solutions by considering electrostatic forces.", "configspace": "", "generation": 49, "fitness": 0.08409078660901488, "feedback": "The algorithm ChargedSystemSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.16927762788715262, 0.17413006428495814, 0.16294376662305998, 0.15721929636775023, 0.17659670749914236, 0.16669701194362774, 0.17036295127981937, 0.15035646246183498, 0.16334326652626896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03518288564426586, 0.04431602673298363, 0.03155999734624437, 0.03477299476013451, 0.03579780957360146, 0.036118527764506636, 0.0477572547851185, 0.06078918482051954, 0.05172157588175541, 0.02167872959413164, 0.02286649643862415, 0.03790659397707219, 0.02111488865293576, 0.04125479170130841, 0.050766198854041766, 0.035267971316044755, 0.033043256060973136, 0.028015981028681414, 0.07378333829826256, 0.06770411037285051, 0.08377448581611313, 0.07955900795530046, 0.07987929394547877, 0.08088807846012624, 0.08030690470129431, 0.07630004303492244, 0.07833923934762477, 0.06387058391753941, 0.0712117117431651, 0.10026817539189392, 0.0501333590502252, 0.061638579752033906, 0.03722152678611634, 0.09123748535354714, 0.037123590897267245, 0.08949860275220345, 0.11708266444161797, 0.18937784749607778, 0.1429127043403452, 0.0963690211217143, 0.08544324751973387, 0.11884720986375319, 0.09926275722762745, 0.117833256049376, 0.10820189207038788, 9.999999999998899e-05, 9.999999999998899e-05, 0.000801627661309201, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01680478760612425, 9.999999999998899e-05, 0.058912382624063175, 9.999999999998899e-05, 0.0021813209000043354, 0.0340859829981508, 0.00948118989988811, 0.01767626307382253, 0.00439626868114007, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033020032823218526, 0.06604695525472182, 0.043278491294509114, 0.05943449495860109, 0.023665595110908155, 0.04605199468471077, 0.031555332814013126, 0.03204301466575521, 0.045863851205464545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025548963301563754, 9.999999999998899e-05, 0.21383660698865858, 0.19072791987444915, 0.1768223069661533, 0.20281292243147853, 0.18338752646534917, 0.19574077102208454, 0.19548270722606143, 0.16402067066559778, 0.1858017548485924, 0.029810234406728697, 0.03560131736484051, 0.034702755891325765, 0.03626041886112197, 0.03540930752118543, 0.04272537100366258, 0.05379054596248334, 0.03772148548006793, 0.04530784911298269, 0.13619512471760642, 0.11809814217316528, 0.1209395794632091, 0.13990815451656513, 0.13921666682522937, 0.11649190990469482, 0.14772591993309903, 0.14469383247268164, 0.12214058804475059, 0.16324596446907613, 0.15444249203172566, 0.16749445410318875, 0.1632745366285242, 0.16746045656122366, 0.16793651991445202, 0.15688932312147863, 0.17368289131749448, 0.14502474712784374, 0.10309364286214351, 0.09653000185360894, 0.10918384079197441, 0.10107477378725183, 0.12531688253452344, 0.10671964878997242, 0.10144119469540425, 0.12312200015900565, 0.11677848449714856, 0.13264928085794658, 0.15462889850163974, 0.14218789840983204, 0.15285634374576584, 0.13634814163556253, 0.1537001595771058, 0.14562272658589936, 0.1525176216894546, 0.17649367580390374, 0.13130424871552515, 0.14090711904482034, 0.13382002749471977, 0.13200344829929067, 0.13691714512374986, 0.14654718384345267, 0.12555345534942297, 0.13348159759507705, 0.1605902187800039, 0.13808696947253596, 0.16370954758092537, 0.1619479106566014, 0.15431394758756378, 0.14321746955843428, 0.1291246545893373, 0.15350114745117427, 0.15397191141008548, 0.15497117129660476, 0.14846599215142342, 0.14610640373297157, 0.14712796215984836, 0.13412639859912867, 0.1344336804537437, 0.14841061790322496, 0.16212379574901348, 0.16415727157882376, 0.14429847695000175, 0.16481204918208803, 0.18355106052694437, 0.17159440801139103, 0.1842912702087981, 0.20787856315599007, 0.1764280563692373, 0.17384334269564206, 0.17890478783418273, 0.20290485548919013, 0.05177551275582648, 0.04906947510704196, 0.06400192853877817, 0.050136896838379075, 0.058647581103370205, 0.049104390691300015, 0.07211472907440186, 0.05273011943409778, 0.04223059510635918]}, "mutation_prompt": null}
{"id": "bf92991f-b850-4bd8-9fc2-f1412ede4833", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "cd518450-5a30-4621-8b4a-e2a985f194ad", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "2b12e4ed-7fee-46dd-84cf-62849adec7c3", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "57406af6-5d3b-4a96-9246-016275a76c86", "solution": "import numpy as np\n\nclass HarmonyDifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n                    else:\n                        # Harmony Search\n                        harmony = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                        harmony_fitness = func(harmony)\n                        if harmony_fitness < best_fitness:\n                            best_solution = harmony\n                            best_fitness = harmony_fitness\n        \n        return best_solution", "name": "HarmonyDifferentialGravitationalOptimization", "description": "Integrating Harmony Search into Differential Gravitational Optimization for enhanced global and local search capabilities in black box function optimization under a limited evaluation budget. ", "configspace": "", "generation": 53, "fitness": 0.13128644961400854, "feedback": "The algorithm HarmonyDifferentialGravitationalOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.23990669977813295, 0.2148987471260717, 0.22228632486361255, 0.16487123058457653, 0.1922355062603398, 0.17523305394160793, 0.19217416466211845, 0.19233258425536826, 0.1898783538176383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04680227641490242, 0.04695406470076635, 0.04464888343865747, 0.05578662977990989, 0.04662286220673073, 0.03722952738336949, 0.053487441579486594, 0.06531103736743149, 0.060434676461503245, 0.05148864992371294, 0.05458039746916288, 0.05083268422865839, 0.04121769722487301, 0.06449076178972679, 0.05516402697648026, 0.03657031432144109, 0.03839027221018931, 0.03695567005508438, 0.9973037583031842, 0.9962623618308657, 0.9985404744655724, 0.8620115988970322, 0.9936743196684554, 0.9892350175941531, 0.9960741187650062, 0.9964595359546485, 0.0868160214756385, 0.09149570160574039, 0.07436409659714083, 0.12140107996952065, 0.07484274980096217, 0.07082662072347501, 0.06563375329102616, 0.09340980886720185, 0.04921468533655882, 0.11015862325455295, 0.13608721914010458, 0.19129642041205386, 0.14916801929683066, 0.12471284086159484, 0.11827747904033803, 0.13863308525478246, 0.12908073241888474, 0.1343032514851824, 0.1231387920092295, 0.00636945538550604, 0.07029388164785555, 0.024325519658055184, 9.999999999998899e-05, 0.01571382209449801, 9.999999999998899e-05, 0.004505177792549331, 0.03959123574211665, 0.043073365112545225, 0.04663481021697957, 0.06420645961965732, 0.042635515841038196, 0.027032495532874234, 0.03471487907944848, 0.03185902894272241, 0.044881087055201885, 0.0269482537434389, 0.02382439851921503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042938937660400134, 0.06738374300401118, 0.04486196719805302, 0.06442281156292373, 0.02551280217120999, 0.05090790867481809, 0.04248068642932956, 0.04621175866777305, 0.05824746808369652, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001059800371564501, 9.999999999998899e-05, 0.003324191050747105, 9.999999999998899e-05, 9.999999999998899e-05, 0.004502199683931063, 9.999999999998899e-05, 0.0046455808485670325, 9.999999999998899e-05, 0.21752617203558577, 0.22104108048475501, 0.25251341513975245, 0.22580925936513885, 0.210150487812235, 0.20355450937831687, 0.22361865070106413, 0.22057888725472508, 0.23045743980852418, 0.04481425273910167, 0.04603169174076971, 0.04063776474486058, 0.041684315960305085, 0.05149043206634052, 0.04877584335984653, 0.06550128421384782, 0.04387235984073501, 0.051527603671944755, 0.13662986591910609, 0.12012267491271544, 0.12422295639675118, 0.14047839834989428, 0.14018043932589697, 0.12206393636762258, 0.1486569572229759, 0.1466838625407929, 0.13316056112473384, 0.1820667296832037, 0.15813877109750152, 0.1776339363455598, 0.20237644356229068, 0.17896717720703725, 0.17319658514481395, 0.16221577249309727, 0.17943310126291545, 0.1537960736918934, 0.1292470457519196, 0.10182463127841002, 0.11893183543961383, 0.11139232756763451, 0.13158617322580501, 0.1204380445932497, 0.10396067983771207, 0.12343505029648227, 0.12024989848750156, 0.15440963561097687, 0.1676329082352993, 0.16028098506761312, 0.19183325902406312, 0.15725746041198452, 0.200000985755017, 0.18629065750916385, 0.17090833656775828, 0.1796497565129357, 0.14401773126060924, 0.158755966597959, 0.1452143161611983, 0.16315246215951396, 0.15847063949791007, 0.1551159170655233, 0.15546817101666222, 0.15002273963298796, 0.16166205261554567, 0.1627461200261454, 0.1807368049001774, 0.19176958069822703, 0.1836645664606129, 0.16449495366513733, 0.1691012210666355, 0.19661183796827386, 0.1629922782473261, 0.15859089771572432, 0.260815854653792, 0.17254283997657405, 0.18449156409845147, 0.1561926437339065, 0.15058013826454297, 0.21482647386047637, 0.16710761641760496, 0.17563754492104688, 0.2912236003208898, 0.16673441757212748, 0.18689993129885174, 0.17343648490048313, 0.18568253622108621, 0.2112240720514854, 0.1816512579810281, 0.17539279213212688, 0.1837878591080282, 0.20429173877795637, 0.0572861391723547, 0.04993849065950107, 0.06557953330689437, 0.051799342833313666, 0.059536289883350024, 0.05123813967876434, 0.07392399654352177, 0.053817042673365956, 0.051945028490749556]}, "mutation_prompt": null}
{"id": "71578bb8-5ae1-479b-9810-d278736a1fa7", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "6b38aecf-d19a-479a-bb96-8ba412c58581", "solution": "import numpy as np\n\nclass DifferentialGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Differential evolution\n                    mutant = best_solution + 0.5 * (best_solution - solution)\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        best_solution = mutant\n                        best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DifferentialGravitationalOptimization", "description": "Utilizing a novel Differential Gravitational Optimization (DGO) algorithm that enhances the Gravitational Optimization by incorporating differential evolution to improve exploration and exploitation capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.21541547610556633, 0.23436725359795096, 0.23804793322033968, 0.15829645689764948, 0.1972431701384708, 0.17033602101941947, 0.19318561606166318, 0.18247429017598293, 0.18159481008172862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038979143667352, 0.044419342881884205, 0.04466592416545956, 0.042569514462658664, 0.054682199887694516, 0.07180451631098517, 0.07105338065134092, 0.06435831725736929, 0.05868601429672493, 0.04521246368003373, 0.10001213262780562, 0.04357282344412028, 0.03132912265851595, 0.054589543069328506, 0.06441590804925268, 0.03638744772324809, 0.03811481030529518, 0.04244810712331526, 0.9977734807891956, 0.9953972672194901, 0.9984611546305512, 0.818328363451788, 0.9950909911963793, 0.9861746628395422, 0.9954026282224111, 0.9966233142255551, 0.9927120060219228, 0.06448064105290174, 0.07283557318259393, 0.11031427234820512, 0.058001156375962815, 0.06550813067989125, 0.08039670706895408, 0.13204411668144567, 0.04085722956439308, 0.10130648393399444, 0.13191782117039197, 0.19040889193630706, 0.14960159442428178, 0.14258777670150669, 0.12700738228545072, 0.13295511973226348, 0.1409888902853903, 0.1271616106836191, 0.13217505711246047, 0.017967278101449824, 0.06794118704798024, 0.03879105899078639, 0.01451160481644187, 0.010471455304491228, 9.999999999998899e-05, 9.999999999998899e-05, 0.032051962247614196, 0.03964579075325669, 0.042618500106215484, 0.05890436129528209, 0.05393657924265738, 0.046240563970913584, 0.03407501388045364, 0.05232818101279968, 0.04973416786552076, 0.03997409862269341, 0.020742633707288016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033005468111446, 0.06605534522379874, 0.043278491294509114, 0.06037073871151477, 0.023691950411690033, 0.04603890641415764, 0.03322532187885607, 0.038897341489519954, 0.049679047174106206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014146228470204303, 9.999999999998899e-05, 9.999999999998899e-05, 0.005485879054209497, 9.999999999998899e-05, 0.002546198734656002, 9.999999999998899e-05, 0.22408571032493485, 0.24080901601024007, 0.23276910680611662, 0.23325562040966408, 0.20825140479290005, 0.21817525473775168, 0.23431978864261493, 0.20401307959912385, 0.23384281291213715, 0.04311441592259213, 0.04558643026173903, 0.03563057097436362, 0.040527010977358224, 0.04620497947273283, 0.06530714362893175, 0.05835881707550239, 0.04212594777049106, 0.04958367813960618, 0.13619213982899836, 0.11809814217316528, 0.1209395794632091, 0.139910287086216, 0.13921666682522937, 0.11773529699879237, 0.14772899028581865, 0.1447963970892362, 0.12484289222711853, 0.17968336492733983, 0.15905413450689887, 0.17338635551146286, 0.17927585425787274, 0.18384747779105803, 0.2030022125910863, 0.15995664436438295, 0.1789026312127011, 0.16141109342632154, 0.1125585033281864, 0.10026791890517994, 0.11907507970996489, 0.133085873959783, 0.12654557572583236, 0.13051332940146498, 0.10653711941857602, 0.12313798044271118, 0.11736682911256557, 0.14529328618205017, 0.16132146872409192, 0.15710400175998906, 0.16318131879525954, 0.1766633946484315, 0.1821878178612475, 0.16834142223357795, 0.16524874624959907, 0.1781563495008941, 0.14828249245413294, 0.15423328903103628, 0.14998511948768378, 0.16127511166838027, 0.15712828238220222, 0.15869627312724477, 0.13908154721556276, 0.15120733368756245, 0.17278378088673818, 0.14046268967284048, 0.22019017976134525, 0.16838638226046387, 0.15938390227815002, 0.14457811485771688, 0.14826482833692012, 0.19607172271001871, 0.23363672397082758, 0.15508572293100387, 0.25250017248514, 0.20387614493498585, 0.1623580876203523, 0.23722302321461008, 0.14270868156059913, 0.14930665544620803, 0.16448584391166987, 0.19015093503786562, 0.2823608911579274, 0.16980216134166293, 0.18599946189922523, 0.17159440801139103, 0.184464688209371, 0.2093528979781386, 0.18249509809378917, 0.17896211463923772, 0.17890303177398603, 0.2029117827593636, 0.05473951255776732, 0.04933691332886725, 0.06789174299932799, 0.06255400272317713, 0.05940690745350363, 0.050026916385606635, 0.08118034408017138, 0.061420687147023645, 0.04948450196679055]}, "mutation_prompt": null}
{"id": "4edd84ba-bb1e-4c7c-b036-985dcecfe5b7", "solution": "import numpy as np\n\nclass QuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        mutant = best_solution + 0.5 * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "QuantumGravitationalOptimization", "description": "Introducing Quantum Gravitational Optimization (QGO) that combines gravitational optimization with quantum-inspired mechanisms to enhance search capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 56, "fitness": 0.16245084231179796, "feedback": "The algorithm QuantumGravitationalOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "49db7cc3-15ab-4799-9ddd-414f5c5104ab", "metadata": {"aucs": [0.2663002340100308, 0.2589149842097258, 0.2928456349358114, 0.2816569997852203, 0.27269491103248344, 0.26819275202659243, 0.25970896758454176, 0.2510680182605419, 0.2726948063208613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07753319622155119, 0.07435733528126709, 0.08152479351047892, 0.07237603971276763, 0.06485570910139304, 0.06206174335020265, 0.07289200862857215, 0.06358946677613564, 0.07897375406109586, 0.05761487540775745, 0.07102911334748385, 0.055179729577527925, 0.06908714455155929, 0.06158497283776965, 0.0807445153913966, 0.051728564764527585, 0.06841507233454269, 0.04838057671010387, 0.9983244653818528, 0.9902140539639969, 0.9987778975166429, 0.9886774645867299, 0.9941689314774846, 0.9881855314419338, 0.9974914958651637, 0.9941224056909256, 0.9913131531235351, 0.15749197977004992, 0.14581230316161198, 0.17020742174854953, 0.1688022401068784, 0.14592368802164146, 0.15269778515919263, 0.15103415398109898, 0.15500133780761793, 0.15397799683772428, 0.1939412148817128, 0.20203317556410338, 0.20594666410497553, 0.20424057584967448, 0.17426774043754178, 0.1970087199765136, 0.165884800670537, 0.18822663270702322, 0.16851700160145078, 0.06758243522724094, 0.0675792295124138, 0.06894806819771548, 0.07828381580020194, 0.08226779410575213, 0.060349646406194224, 0.06860659590282303, 0.07586898737165593, 0.08697744255743678, 0.10349174842914066, 0.09465929689569907, 0.07369216039746385, 0.08078992911872951, 0.07975598816567198, 0.07275791394696085, 0.07726497254484477, 0.07033475194380967, 0.03520362772004504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07902800607282334, 0.0688134852216521, 0.05045761645247715, 0.05728715958143171, 0.018022347239392555, 0.048827248142255475, 0.06764293857655923, 0.04993252986168861, 0.07244453286794128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02073300591306093, 0.029487725645389817, 0.03495881130114542, 0.02918033301681522, 0.039390702714818926, 0.02818209234260194, 0.02943121739906107, 0.01696517708441403, 9.999999999998899e-05, 0.2798793935846319, 0.2847828203051568, 0.2663051810449114, 0.2915781553814013, 0.31272210015403457, 0.27248113921763084, 0.31768776106755836, 0.274724086189717, 0.25865987713186145, 0.07910123299821914, 0.07266087096626273, 0.0659141184367964, 0.0636234887958782, 0.061543953846251886, 0.06236092119892678, 0.07528597675222282, 0.07316454808645578, 0.0717386316759927, 0.1607451574934028, 0.12494761358696682, 0.15154313201217795, 0.1449297852954533, 0.1315599091005477, 0.13878469977963437, 0.14913013468517788, 0.13543209165060233, 0.14816540572850567, 0.20303106954085592, 0.20593887901686514, 0.20844428152216843, 0.19999360333710658, 0.22416362930534695, 0.20171929607074424, 0.21710108687259888, 0.20486793534439995, 0.2136435680667188, 0.17220915033309847, 0.14447819291315467, 0.15914615356272932, 0.15415207762132577, 0.12724995116546944, 0.15937297192755928, 0.1567784101166677, 0.16015977414674676, 0.1371738234095088, 0.17426944175437165, 0.18045644469100697, 0.20312449572763824, 0.20008800490591727, 0.1876891138821033, 0.17450487768091238, 0.18040705158373116, 0.16896345091911114, 0.18909990484101613, 0.16697108044098752, 0.1760085370145663, 0.17021042768801686, 0.17591113265516434, 0.17545797526494067, 0.17317052165811297, 0.17869343267505933, 0.16989112527857464, 0.16335777166038246, 0.24145645354749146, 0.3269043314784117, 0.16094518642715516, 0.17909548821162802, 0.19597008059791254, 0.21822526686176769, 0.1734823765658039, 0.33444982714231686, 0.2713996592693546, 0.1877108181026168, 0.2958857450094323, 0.18688348394088894, 0.3347401762007415, 0.16638970544118126, 0.16525195136891602, 0.18301905323771406, 0.2402473337070805, 0.149985391516691, 0.28245370590553553, 0.1840048143769264, 0.18653132885464097, 0.18669099718672166, 0.18090472110898304, 0.17012385034410182, 0.1833580180489668, 0.18040429548211379, 0.18793694434958974, 0.07170055953014076, 0.07078621080776681, 0.06291746472195459, 0.07471378442674614, 0.07483038992751923, 0.07237158898582552, 0.08011933012362837, 0.06847307914255019, 0.06537161179105244]}, "mutation_prompt": null}
{"id": "509c9cb4-b796-457a-8e5b-5fd967a05ad5", "solution": "import numpy as np\n\nclass QuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        mutant = best_solution + 0.5 * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "QuantumGravitationalOptimization", "description": "Introducing Quantum Gravitational Optimization (QGO) that combines gravitational optimization with quantum-inspired mechanisms to enhance search capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4edd84ba-bb1e-4c7c-b036-985dcecfe5b7", "metadata": {"aucs": [0.2663002340100308, 0.2589149842097258, 0.2928456349358114, 0.2816569997852203, 0.27269491103248344, 0.26819275202659243, 0.25970896758454176, 0.2510680182605419, 0.2726948063208613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07753319622155119, 0.07435733528126709, 0.08152479351047892, 0.07237603971276763, 0.06485570910139304, 0.06206174335020265, 0.07289200862857215, 0.06358946677613564, 0.07897375406109586, 0.05761487540775745, 0.07102911334748385, 0.055179729577527925, 0.06908714455155929, 0.06158497283776965, 0.0807445153913966, 0.051728564764527585, 0.06841507233454269, 0.04838057671010387, 0.9983244653818528, 0.9902140539639969, 0.9987778975166429, 0.9886774645867299, 0.9941689314774846, 0.9881855314419338, 0.9974914958651637, 0.9941224056909256, 0.9913131531235351, 0.15749197977004992, 0.14581230316161198, 0.17020742174854953, 0.1688022401068784, 0.14592368802164146, 0.15269778515919263, 0.15103415398109898, 0.15500133780761793, 0.15397799683772428, 0.1939412148817128, 0.20203317556410338, 0.20594666410497553, 0.20424057584967448, 0.17426774043754178, 0.1970087199765136, 0.165884800670537, 0.18822663270702322, 0.16851700160145078, 0.06758243522724094, 0.0675792295124138, 0.06894806819771548, 0.07828381580020194, 0.08226779410575213, 0.060349646406194224, 0.06860659590282303, 0.07586898737165593, 0.08697744255743678, 0.10349174842914066, 0.09465929689569907, 0.07369216039746385, 0.08078992911872951, 0.07975598816567198, 0.07275791394696085, 0.07726497254484477, 0.07033475194380967, 0.03520362772004504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07902800607282334, 0.0688134852216521, 0.05045761645247715, 0.05728715958143171, 0.018022347239392555, 0.048827248142255475, 0.06764293857655923, 0.04993252986168861, 0.07244453286794128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02073300591306093, 0.029487725645389817, 0.03495881130114542, 0.02918033301681522, 0.039390702714818926, 0.02818209234260194, 0.02943121739906107, 0.01696517708441403, 9.999999999998899e-05, 0.2798793935846319, 0.2847828203051568, 0.2663051810449114, 0.2915781553814013, 0.31272210015403457, 0.27248113921763084, 0.31768776106755836, 0.274724086189717, 0.25865987713186145, 0.07910123299821914, 0.07266087096626273, 0.0659141184367964, 0.0636234887958782, 0.061543953846251886, 0.06236092119892678, 0.07528597675222282, 0.07316454808645578, 0.0717386316759927, 0.1607451574934028, 0.12494761358696682, 0.15154313201217795, 0.1449297852954533, 0.1315599091005477, 0.13878469977963437, 0.14913013468517788, 0.13543209165060233, 0.14816540572850567, 0.20303106954085592, 0.20593887901686514, 0.20844428152216843, 0.19999360333710658, 0.22416362930534695, 0.20171929607074424, 0.21710108687259888, 0.20486793534439995, 0.2136435680667188, 0.17220915033309847, 0.14447819291315467, 0.15914615356272932, 0.15415207762132577, 0.12724995116546944, 0.15937297192755928, 0.1567784101166677, 0.16015977414674676, 0.1371738234095088, 0.17426944175437165, 0.18045644469100697, 0.20312449572763824, 0.20008800490591727, 0.1876891138821033, 0.17450487768091238, 0.18040705158373116, 0.16896345091911114, 0.18909990484101613, 0.16697108044098752, 0.1760085370145663, 0.17021042768801686, 0.17591113265516434, 0.17545797526494067, 0.17317052165811297, 0.17869343267505933, 0.16989112527857464, 0.16335777166038246, 0.24145645354749146, 0.3269043314784117, 0.16094518642715516, 0.17909548821162802, 0.19597008059791254, 0.21822526686176769, 0.1734823765658039, 0.33444982714231686, 0.2713996592693546, 0.1877108181026168, 0.2958857450094323, 0.18688348394088894, 0.3347401762007415, 0.16638970544118126, 0.16525195136891602, 0.18301905323771406, 0.2402473337070805, 0.149985391516691, 0.28245370590553553, 0.1840048143769264, 0.18653132885464097, 0.18669099718672166, 0.18090472110898304, 0.17012385034410182, 0.1833580180489668, 0.18040429548211379, 0.18793694434958974, 0.07170055953014076, 0.07078621080776681, 0.06291746472195459, 0.07471378442674614, 0.07483038992751923, 0.07237158898582552, 0.08011933012362837, 0.06847307914255019, 0.06537161179105244]}, "mutation_prompt": null}
{"id": "8d3a3eb7-c076-4a6f-8415-87edda7b9132", "solution": "import numpy as np\n\nclass QuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        mutant = best_solution + 0.5 * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "QuantumGravitationalOptimization", "description": "Introducing Quantum Gravitational Optimization (QGO) that combines gravitational optimization with quantum-inspired mechanisms to enhance search capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4edd84ba-bb1e-4c7c-b036-985dcecfe5b7", "metadata": {"aucs": [0.2663002340100308, 0.2589149842097258, 0.2928456349358114, 0.2816569997852203, 0.27269491103248344, 0.26819275202659243, 0.25970896758454176, 0.2510680182605419, 0.2726948063208613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07753319622155119, 0.07435733528126709, 0.08152479351047892, 0.07237603971276763, 0.06485570910139304, 0.06206174335020265, 0.07289200862857215, 0.06358946677613564, 0.07897375406109586, 0.05761487540775745, 0.07102911334748385, 0.055179729577527925, 0.06908714455155929, 0.06158497283776965, 0.0807445153913966, 0.051728564764527585, 0.06841507233454269, 0.04838057671010387, 0.9983244653818528, 0.9902140539639969, 0.9987778975166429, 0.9886774645867299, 0.9941689314774846, 0.9881855314419338, 0.9974914958651637, 0.9941224056909256, 0.9913131531235351, 0.15749197977004992, 0.14581230316161198, 0.17020742174854953, 0.1688022401068784, 0.14592368802164146, 0.15269778515919263, 0.15103415398109898, 0.15500133780761793, 0.15397799683772428, 0.1939412148817128, 0.20203317556410338, 0.20594666410497553, 0.20424057584967448, 0.17426774043754178, 0.1970087199765136, 0.165884800670537, 0.18822663270702322, 0.16851700160145078, 0.06758243522724094, 0.0675792295124138, 0.06894806819771548, 0.07828381580020194, 0.08226779410575213, 0.060349646406194224, 0.06860659590282303, 0.07586898737165593, 0.08697744255743678, 0.10349174842914066, 0.09465929689569907, 0.07369216039746385, 0.08078992911872951, 0.07975598816567198, 0.07275791394696085, 0.07726497254484477, 0.07033475194380967, 0.03520362772004504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07902800607282334, 0.0688134852216521, 0.05045761645247715, 0.05728715958143171, 0.018022347239392555, 0.048827248142255475, 0.06764293857655923, 0.04993252986168861, 0.07244453286794128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02073300591306093, 0.029487725645389817, 0.03495881130114542, 0.02918033301681522, 0.039390702714818926, 0.02818209234260194, 0.02943121739906107, 0.01696517708441403, 9.999999999998899e-05, 0.2798793935846319, 0.2847828203051568, 0.2663051810449114, 0.2915781553814013, 0.31272210015403457, 0.27248113921763084, 0.31768776106755836, 0.274724086189717, 0.25865987713186145, 0.07910123299821914, 0.07266087096626273, 0.0659141184367964, 0.0636234887958782, 0.061543953846251886, 0.06236092119892678, 0.07528597675222282, 0.07316454808645578, 0.0717386316759927, 0.1607451574934028, 0.12494761358696682, 0.15154313201217795, 0.1449297852954533, 0.1315599091005477, 0.13878469977963437, 0.14913013468517788, 0.13543209165060233, 0.14816540572850567, 0.20303106954085592, 0.20593887901686514, 0.20844428152216843, 0.19999360333710658, 0.22416362930534695, 0.20171929607074424, 0.21710108687259888, 0.20486793534439995, 0.2136435680667188, 0.17220915033309847, 0.14447819291315467, 0.15914615356272932, 0.15415207762132577, 0.12724995116546944, 0.15937297192755928, 0.1567784101166677, 0.16015977414674676, 0.1371738234095088, 0.17426944175437165, 0.18045644469100697, 0.20312449572763824, 0.20008800490591727, 0.1876891138821033, 0.17450487768091238, 0.18040705158373116, 0.16896345091911114, 0.18909990484101613, 0.16697108044098752, 0.1760085370145663, 0.17021042768801686, 0.17591113265516434, 0.17545797526494067, 0.17317052165811297, 0.17869343267505933, 0.16989112527857464, 0.16335777166038246, 0.24145645354749146, 0.3269043314784117, 0.16094518642715516, 0.17909548821162802, 0.19597008059791254, 0.21822526686176769, 0.1734823765658039, 0.33444982714231686, 0.2713996592693546, 0.1877108181026168, 0.2958857450094323, 0.18688348394088894, 0.3347401762007415, 0.16638970544118126, 0.16525195136891602, 0.18301905323771406, 0.2402473337070805, 0.149985391516691, 0.28245370590553553, 0.1840048143769264, 0.18653132885464097, 0.18669099718672166, 0.18090472110898304, 0.17012385034410182, 0.1833580180489668, 0.18040429548211379, 0.18793694434958974, 0.07170055953014076, 0.07078621080776681, 0.06291746472195459, 0.07471378442674614, 0.07483038992751923, 0.07237158898582552, 0.08011933012362837, 0.06847307914255019, 0.06537161179105244]}, "mutation_prompt": null}
{"id": "9993ebb7-f29c-40e9-a2f6-e819d5dd8141", "solution": "import numpy as np\n\nclass QuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        mutant = best_solution + 0.5 * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "QuantumGravitationalOptimization", "description": "Introducing Quantum Gravitational Optimization (QGO) that combines gravitational optimization with quantum-inspired mechanisms to enhance search capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4edd84ba-bb1e-4c7c-b036-985dcecfe5b7", "metadata": {"aucs": [0.2663002340100308, 0.2589149842097258, 0.2928456349358114, 0.2816569997852203, 0.27269491103248344, 0.26819275202659243, 0.25970896758454176, 0.2510680182605419, 0.2726948063208613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07753319622155119, 0.07435733528126709, 0.08152479351047892, 0.07237603971276763, 0.06485570910139304, 0.06206174335020265, 0.07289200862857215, 0.06358946677613564, 0.07897375406109586, 0.05761487540775745, 0.07102911334748385, 0.055179729577527925, 0.06908714455155929, 0.06158497283776965, 0.0807445153913966, 0.051728564764527585, 0.06841507233454269, 0.04838057671010387, 0.9983244653818528, 0.9902140539639969, 0.9987778975166429, 0.9886774645867299, 0.9941689314774846, 0.9881855314419338, 0.9974914958651637, 0.9941224056909256, 0.9913131531235351, 0.15749197977004992, 0.14581230316161198, 0.17020742174854953, 0.1688022401068784, 0.14592368802164146, 0.15269778515919263, 0.15103415398109898, 0.15500133780761793, 0.15397799683772428, 0.1939412148817128, 0.20203317556410338, 0.20594666410497553, 0.20424057584967448, 0.17426774043754178, 0.1970087199765136, 0.165884800670537, 0.18822663270702322, 0.16851700160145078, 0.06758243522724094, 0.0675792295124138, 0.06894806819771548, 0.07828381580020194, 0.08226779410575213, 0.060349646406194224, 0.06860659590282303, 0.07586898737165593, 0.08697744255743678, 0.10349174842914066, 0.09465929689569907, 0.07369216039746385, 0.08078992911872951, 0.07975598816567198, 0.07275791394696085, 0.07726497254484477, 0.07033475194380967, 0.03520362772004504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07902800607282334, 0.0688134852216521, 0.05045761645247715, 0.05728715958143171, 0.018022347239392555, 0.048827248142255475, 0.06764293857655923, 0.04993252986168861, 0.07244453286794128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02073300591306093, 0.029487725645389817, 0.03495881130114542, 0.02918033301681522, 0.039390702714818926, 0.02818209234260194, 0.02943121739906107, 0.01696517708441403, 9.999999999998899e-05, 0.2798793935846319, 0.2847828203051568, 0.2663051810449114, 0.2915781553814013, 0.31272210015403457, 0.27248113921763084, 0.31768776106755836, 0.274724086189717, 0.25865987713186145, 0.07910123299821914, 0.07266087096626273, 0.0659141184367964, 0.0636234887958782, 0.061543953846251886, 0.06236092119892678, 0.07528597675222282, 0.07316454808645578, 0.0717386316759927, 0.1607451574934028, 0.12494761358696682, 0.15154313201217795, 0.1449297852954533, 0.1315599091005477, 0.13878469977963437, 0.14913013468517788, 0.13543209165060233, 0.14816540572850567, 0.20303106954085592, 0.20593887901686514, 0.20844428152216843, 0.19999360333710658, 0.22416362930534695, 0.20171929607074424, 0.21710108687259888, 0.20486793534439995, 0.2136435680667188, 0.17220915033309847, 0.14447819291315467, 0.15914615356272932, 0.15415207762132577, 0.12724995116546944, 0.15937297192755928, 0.1567784101166677, 0.16015977414674676, 0.1371738234095088, 0.17426944175437165, 0.18045644469100697, 0.20312449572763824, 0.20008800490591727, 0.1876891138821033, 0.17450487768091238, 0.18040705158373116, 0.16896345091911114, 0.18909990484101613, 0.16697108044098752, 0.1760085370145663, 0.17021042768801686, 0.17591113265516434, 0.17545797526494067, 0.17317052165811297, 0.17869343267505933, 0.16989112527857464, 0.16335777166038246, 0.24145645354749146, 0.3269043314784117, 0.16094518642715516, 0.17909548821162802, 0.19597008059791254, 0.21822526686176769, 0.1734823765658039, 0.33444982714231686, 0.2713996592693546, 0.1877108181026168, 0.2958857450094323, 0.18688348394088894, 0.3347401762007415, 0.16638970544118126, 0.16525195136891602, 0.18301905323771406, 0.2402473337070805, 0.149985391516691, 0.28245370590553553, 0.1840048143769264, 0.18653132885464097, 0.18669099718672166, 0.18090472110898304, 0.17012385034410182, 0.1833580180489668, 0.18040429548211379, 0.18793694434958974, 0.07170055953014076, 0.07078621080776681, 0.06291746472195459, 0.07471378442674614, 0.07483038992751923, 0.07237158898582552, 0.08011933012362837, 0.06847307914255019, 0.06537161179105244]}, "mutation_prompt": null}
{"id": "93c02808-5100-4ef0-a45a-bcbfa5136e82", "solution": "import numpy as np\n\nclass QuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        mutant = best_solution + 0.5 * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "QuantumGravitationalOptimization", "description": "Introducing Quantum Gravitational Optimization (QGO) that combines gravitational optimization with quantum-inspired mechanisms to enhance search capabilities for black box function optimization within a given evaluation budget.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4edd84ba-bb1e-4c7c-b036-985dcecfe5b7", "metadata": {"aucs": [0.2663002340100308, 0.2589149842097258, 0.2928456349358114, 0.2816569997852203, 0.27269491103248344, 0.26819275202659243, 0.25970896758454176, 0.2510680182605419, 0.2726948063208613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07753319622155119, 0.07435733528126709, 0.08152479351047892, 0.07237603971276763, 0.06485570910139304, 0.06206174335020265, 0.07289200862857215, 0.06358946677613564, 0.07897375406109586, 0.05761487540775745, 0.07102911334748385, 0.055179729577527925, 0.06908714455155929, 0.06158497283776965, 0.0807445153913966, 0.051728564764527585, 0.06841507233454269, 0.04838057671010387, 0.9983244653818528, 0.9902140539639969, 0.9987778975166429, 0.9886774645867299, 0.9941689314774846, 0.9881855314419338, 0.9974914958651637, 0.9941224056909256, 0.9913131531235351, 0.15749197977004992, 0.14581230316161198, 0.17020742174854953, 0.1688022401068784, 0.14592368802164146, 0.15269778515919263, 0.15103415398109898, 0.15500133780761793, 0.15397799683772428, 0.1939412148817128, 0.20203317556410338, 0.20594666410497553, 0.20424057584967448, 0.17426774043754178, 0.1970087199765136, 0.165884800670537, 0.18822663270702322, 0.16851700160145078, 0.06758243522724094, 0.0675792295124138, 0.06894806819771548, 0.07828381580020194, 0.08226779410575213, 0.060349646406194224, 0.06860659590282303, 0.07586898737165593, 0.08697744255743678, 0.10349174842914066, 0.09465929689569907, 0.07369216039746385, 0.08078992911872951, 0.07975598816567198, 0.07275791394696085, 0.07726497254484477, 0.07033475194380967, 0.03520362772004504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07902800607282334, 0.0688134852216521, 0.05045761645247715, 0.05728715958143171, 0.018022347239392555, 0.048827248142255475, 0.06764293857655923, 0.04993252986168861, 0.07244453286794128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02073300591306093, 0.029487725645389817, 0.03495881130114542, 0.02918033301681522, 0.039390702714818926, 0.02818209234260194, 0.02943121739906107, 0.01696517708441403, 9.999999999998899e-05, 0.2798793935846319, 0.2847828203051568, 0.2663051810449114, 0.2915781553814013, 0.31272210015403457, 0.27248113921763084, 0.31768776106755836, 0.274724086189717, 0.25865987713186145, 0.07910123299821914, 0.07266087096626273, 0.0659141184367964, 0.0636234887958782, 0.061543953846251886, 0.06236092119892678, 0.07528597675222282, 0.07316454808645578, 0.0717386316759927, 0.1607451574934028, 0.12494761358696682, 0.15154313201217795, 0.1449297852954533, 0.1315599091005477, 0.13878469977963437, 0.14913013468517788, 0.13543209165060233, 0.14816540572850567, 0.20303106954085592, 0.20593887901686514, 0.20844428152216843, 0.19999360333710658, 0.22416362930534695, 0.20171929607074424, 0.21710108687259888, 0.20486793534439995, 0.2136435680667188, 0.17220915033309847, 0.14447819291315467, 0.15914615356272932, 0.15415207762132577, 0.12724995116546944, 0.15937297192755928, 0.1567784101166677, 0.16015977414674676, 0.1371738234095088, 0.17426944175437165, 0.18045644469100697, 0.20312449572763824, 0.20008800490591727, 0.1876891138821033, 0.17450487768091238, 0.18040705158373116, 0.16896345091911114, 0.18909990484101613, 0.16697108044098752, 0.1760085370145663, 0.17021042768801686, 0.17591113265516434, 0.17545797526494067, 0.17317052165811297, 0.17869343267505933, 0.16989112527857464, 0.16335777166038246, 0.24145645354749146, 0.3269043314784117, 0.16094518642715516, 0.17909548821162802, 0.19597008059791254, 0.21822526686176769, 0.1734823765658039, 0.33444982714231686, 0.2713996592693546, 0.1877108181026168, 0.2958857450094323, 0.18688348394088894, 0.3347401762007415, 0.16638970544118126, 0.16525195136891602, 0.18301905323771406, 0.2402473337070805, 0.149985391516691, 0.28245370590553553, 0.1840048143769264, 0.18653132885464097, 0.18669099718672166, 0.18090472110898304, 0.17012385034410182, 0.1833580180489668, 0.18040429548211379, 0.18793694434958974, 0.07170055953014076, 0.07078621080776681, 0.06291746472195459, 0.07471378442674614, 0.07483038992751923, 0.07237158898582552, 0.08011933012362837, 0.06847307914255019, 0.06537161179105244]}, "mutation_prompt": null}
{"id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 61, "fitness": 0.1781935851589593, "feedback": "The algorithm EnhancedQuantumGravitationalOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "4edd84ba-bb1e-4c7c-b036-985dcecfe5b7", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "8e08511a-56bb-4115-8702-82a02f19daeb", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "94847e97-751d-4dd5-8d88-677370864de9", "solution": "import numpy as np\n\nclass HybridCuckooSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pa = 0.25  # Probability of abandoning a nest\n        self.alpha = 1.5  # Levy flight parameter\n        self.nests = np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n        \n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / abs(v) ** (1 / self.alpha)\n        return 0.01 * step\n        \n    def __call__(self, func):\n        best_nest = self.nests[np.argmin([func(nest) for nest in self.nests])]\n        \n        for _ in range(self.budget):\n            new_nests = []\n            for nest in self.nests:\n                if np.random.rand() < self.pa:\n                    step_size = self.levy_flight()\n                    new_nest = nest + step_size * (nest - best_nest)\n                    new_nests.append(new_nest)\n                else:\n                    new_nests.append(nest)\n                    \n            new_nests = np.clip(new_nests, self.lower_bound, self.upper_bound)\n            self.nests = sorted(new_nests, key=lambda x: func(x))[:self.budget]\n            best_nest = self.nests[np.argmin([func(nest) for nest in self.nests])]\n        \n        return best_nest", "name": "HybridCuckooSearch", "description": "Utilizing a Hybrid Cuckoo Search algorithm with Levy Flights for global exploration and local search.", "configspace": "", "generation": 63, "fitness": 0.09144843562834938, "feedback": "The algorithm HybridCuckooSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f0f3e3ef-b869-414b-8a91-d49b5b8834d2", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "0a31299a-b2ef-403c-aed7-8fe7b145479b", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "788ea97c-d3a2-4abf-9cde-a4b7d0bfd1f6", "solution": "import numpy as np\n\nclass DynamicEvolutionaryGravitationalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Dynamic Evolutionary Gravitational Search mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.25:  # Change the individual lines with 25% probability\n                        adapt_factor = np.random.uniform(0, 1)\n                        evolution_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution) + evolution_factor * np.random.normal(0, 1, self.dim)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "DynamicEvolutionaryGravitationalSearch", "description": "A novel algorithm named Dynamic Evolutionary Gravitational Search, incorporating dynamic adaptation factors and evolutionary strategies to improve exploration and exploitation for black box optimization.", "configspace": "", "generation": 66, "fitness": 0.1576038694686593, "feedback": "The algorithm DynamicEvolutionaryGravitationalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.2771812978406608, 0.2840721073027125, 0.22801064348422195, 0.2417016238103844, 0.22895555092800046, 0.23355959995598463, 0.21424258739691393, 0.2915445399458123, 0.26966349536660394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054623009692342905, 0.060547241744224656, 0.055978006206111375, 0.054552747214882014, 0.07853756084621055, 0.05152767336761355, 0.04655379969015083, 0.08075442180795689, 0.06062275239121884, 0.04695641855739874, 0.06464137732467812, 0.0551326709245199, 0.05625904179187602, 0.05136130324253485, 0.06486532983943327, 0.04249702989701076, 0.07598484373876035, 0.04654976033465541, 0.9954467857240465, 0.9836281191219368, 0.9989653276447534, 0.9970597950920876, 0.8783110175614888, 0.9917867904276056, 0.993940212454731, 0.9944584359711582, 0.9936554032106607, 0.06958292995214488, 0.12488879221896454, 0.12583021845206022, 0.14889471734002835, 0.12176570512303364, 0.12748899131565972, 0.10081892952982052, 0.10373902073660268, 0.1367803723231069, 0.20943904675920866, 0.24245347599346745, 0.18242235171445031, 0.2025923210068219, 0.14612060479308475, 0.15417474582024804, 0.11945487465746374, 0.16960804670543128, 0.2092127121619931, 0.03933114244277436, 0.09885879328660807, 0.08248759166053554, 0.03537877345522866, 0.0312079543278152, 0.058988025654412746, 0.04227808933425836, 0.09266255150260638, 0.06518715973022882, 0.04808351936434374, 0.0938249545486437, 0.10633044734248343, 0.08700168750884041, 0.10350131535794005, 0.1477239115629756, 0.10251949355194678, 0.11017531114316803, 0.11358818223237543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0634981755434495, 0.08476794235662088, 0.07905349661788919, 0.07541600958889672, 0.04355997547181889, 0.02277264996405426, 0.06778230906407967, 0.046327799745580545, 0.11567611082770402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019576152824235193, 0.021135675630743367, 0.030958165188444076, 0.009915693931370373, 0.0015467079397012418, 0.0072962765653971084, 0.004395293874270623, 0.06335970124917079, 0.00758239940420502, 0.29000105548912136, 0.2844836191393889, 0.24893331520919681, 0.270190769853457, 0.23231027231915036, 0.23988110111213068, 0.26836682367362685, 0.3000959572772013, 0.28506598872949007, 0.04455720636392002, 0.09323009915743519, 0.050142207874099065, 0.07508884283142747, 0.05897908889806747, 0.07309080669026902, 0.1013200468018034, 0.08036054289622274, 0.07101295073047809, 0.1438930706209529, 0.12277329729932263, 0.1661483757949429, 0.13547248025713, 0.14885983200527775, 0.1375567979674326, 0.14269527203328836, 0.17123702807169283, 0.13818780219553706, 0.20262832004470732, 0.20391162651308592, 0.18545067407590232, 0.20976457125109682, 0.21563186799983436, 0.219055379240357, 0.1985798385540929, 0.2155447101567961, 0.20294972745827045, 0.14885476534965492, 0.14249850777094653, 0.1499397629554231, 0.13395669685752187, 0.12803539128519337, 0.12074968048063928, 0.12931080500379322, 0.15508077851350588, 0.1287607997129524, 0.16054581443603166, 0.16715592948066738, 0.167911621665076, 0.17674491757871036, 0.16707272285342567, 0.1605083661367286, 0.16243999361510109, 0.17070714972448042, 0.18815843055619064, 0.16106894573974406, 0.15316163369051028, 0.16664270770559508, 0.15285198605362038, 0.1674186672590151, 0.15832245271173173, 0.16420336727735063, 0.17316323076143947, 0.15961554983654225, 0.34634878884938114, 0.2586460591920874, 0.3435259509865486, 0.2510168196525535, 0.17241022128057015, 0.1910589451011372, 0.3648465903148794, 0.23819515277966707, 0.23614184298844698, 0.21493296530887518, 0.23399467709527577, 0.26679583132806617, 0.16612065094477768, 0.2742957931429403, 0.1430053691988351, 0.19480268215725216, 0.18331294544612775, 0.17731656785389405, 0.18806813839557424, 0.18296245874368489, 0.18411998481319958, 0.18876894809725642, 0.17801561813627065, 0.23725943937678662, 0.17724279051372793, 0.18420808003178157, 0.19164030276343458, 0.0702606233540628, 0.053419859816447035, 0.06603047999035994, 0.08377959038770055, 0.059718231747321604, 0.048830216535003634, 0.0530494556068718, 0.06387127427298223, 0.06624479917907933]}, "mutation_prompt": null}
{"id": "6d76fc6a-fc69-45ce-b54c-269291889170", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "9570023d-99ba-411a-b60e-4ecb8596f342", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "08422602-61fd-4e4e-a2e6-07938598a5c3", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "f5648e0e-08bd-4e23-9062-bba1cabb3322", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "8e83913a-cb54-4afb-afa1-2cf14277c2f6", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "336acdc2-83cd-4431-967f-6dc45be2f8a2", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "c19814d9-0bac-4745-bd8d-71bca90b0017", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "acfdcdbd-65b4-479a-8a11-c528f18cca85", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "0d7d4a7d-9679-4e1c-94cb-60361388656c", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "aa4b80c7-eaf5-4249-84bb-25f7db4fe18c", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "ea99b6b8-bd42-490d-9882-8876063798b5", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "41cade28-116b-4604-aaf6-f09f531abe79", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "8efa9728-cbea-4c86-b4e0-d100ec51f4d6", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "2c338c04-b5f8-48b1-85df-74883efc17c6", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "03a55708-853c-4863-a578-1432db6bc62d", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "0e1ef8a5-a909-434e-b45e-f6b186bb88a3", "solution": "import numpy as np\n\nclass CollectiveQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        solutions = [np.random.uniform(self.lower_bound, self.upper_bound, self.dim) for _ in range(5)]\n        best_solution = solutions[0]\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for solution in solutions:\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                \n            for i in range(len(solutions)):\n                prob = np.random.uniform(0, 1)\n                if prob < 0.5:\n                    quantum_solution = solutions[i] + np.random.normal(0, 1, self.dim)\n                    quantum_fitness = func(quantum_solution)\n                    if quantum_fitness < best_fitness:\n                        solutions[i] = quantum_solution\n                else:\n                    adapt_factor = np.random.uniform(0, 1)\n                    mutant = best_solution + adapt_factor * (best_solution - solutions[i])\n                    mutant_fitness = func(mutant)\n                    if mutant_fitness < best_fitness:\n                        solutions[i] = mutant\n        \n        return best_solution", "name": "CollectiveQuantumGravitationalOptimization", "description": "Introducing Collective Quantum Gravitational Optimization (CQGO) by infusing a cooperative strategy among multiple solutions to enhance exploration-exploitation balance.", "configspace": "", "generation": 82, "fitness": 0.15087893326927432, "feedback": "The algorithm CollectiveQuantumGravitationalOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.30543438682961965, 0.2510781189510113, 0.24072415668875569, 0.23427483405371263, 0.2408900440318157, 0.2466219679539905, 0.26287657041081214, 0.24350171497354844, 0.2500395074695033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06985670144391787, 0.06698371246490953, 0.06931686555669492, 0.06055893396382872, 0.05172924482400143, 0.09261919432046872, 0.052096570179340995, 0.0638108325855441, 0.06583455627432555, 0.05222143076431873, 0.02886520327742803, 0.0858137723563368, 0.06213994177365134, 0.08417316555334653, 0.05668534044550744, 0.05359007933664284, 0.0403111779298555, 0.06358056230549713, 0.9822298248877486, 0.9490680258483482, 0.9955571680770539, 0.9867450871465634, 0.9483699106176845, 0.941509108615779, 0.9875278586502535, 0.9829615332209325, 0.9684948880296839, 0.165176946524911, 0.1428138379122056, 0.1359150496072853, 0.1479857461964008, 0.12521445800080633, 0.12902320466365547, 0.15717836458499956, 0.14656879401938772, 0.15957469071928065, 0.15971197042738072, 0.1625197496801255, 0.1335724855508743, 0.1723542194232588, 0.14456725035737306, 0.17544019344027384, 0.1806319152158683, 0.17801808356610904, 0.1834170090866316, 0.10389325216771517, 0.08091557296728935, 0.08143368988361632, 0.053280357057241434, 0.0953668351638931, 0.09362672529591787, 0.09580960033043506, 0.051719730948147635, 0.0722650464622222, 0.0833471127469686, 0.037829353496314666, 0.06235698025224479, 0.09595385140039214, 0.0843220590504572, 0.0869670289547626, 0.09196347853512965, 0.0688091878968824, 0.0793627218288806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011892231933645414, 0.02103049423936576, 0.05738456557740623, 0.05376805971703358, 0.001972977479289151, 0.02433463117263035, 0.07073236264049809, 0.04866108845536965, 0.022364247722280406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022561113745778627, 0.0014638956682392346, 0.03553067715639768, 0.013808040090426243, 0.022367792661270314, 0.015072318397782336, 0.0007698104232358727, 0.02011927669176583, 0.019427324319622352, 0.2473770051114057, 0.25904449885616265, 0.2670593477466898, 0.2643696777843443, 0.2418345295858929, 0.26373995683520346, 0.28045217603210215, 0.3021626452545392, 0.2865973526430877, 0.06704051148513168, 0.07763324560929163, 0.07311646211978917, 0.069883907950269, 0.0696090406172245, 0.05780890038866804, 0.07545503780925078, 0.06416402404403176, 0.06166719235149698, 0.16954820551283634, 0.13088679259010882, 0.12123339690769153, 0.1438185292688613, 0.14402886321473962, 0.1393172299664719, 0.131252593245881, 0.11821690489195158, 0.1350629909764942, 0.21876842345851444, 0.15412415052840456, 0.20151923060791754, 0.20738794942929883, 0.17640816973454876, 0.15747401156792296, 0.1894839773972099, 0.1602793259372043, 0.17876911850066812, 0.14798206163438932, 0.17976674542969506, 0.14339209078725146, 0.19459757450923632, 0.13197755931897504, 0.10117281123179778, 0.178698287048758, 0.14301898007673242, 0.11855206158416254, 0.218051374704341, 0.15410000852259387, 0.15960328544380487, 0.16840162642507406, 0.1555778399749994, 0.16770712942973165, 0.19059725652248727, 0.1567191992772976, 0.17600186030071452, 0.18709940270357495, 0.17654881915539666, 0.17037896743138958, 0.15925011349548335, 0.1737701717930067, 0.16822976906792697, 0.17839217322609968, 0.1592878354864764, 0.15815680390353426, 0.16974607563048316, 0.27272386490573897, 0.35923751571312357, 0.20378098937804123, 0.183481904851568, 0.15032543090490436, 0.11393754300391756, 0.1096582755276726, 0.15036524909743731, 0.274056206636792, 0.18650802941837374, 0.06975195624813058, 0.2526829923711831, 0.12422923705227518, 0.1729965006400489, 0.10762319061938475, 0.18197718494509318, 0.1048463563164993, 0.17774827662551873, 0.1871057822512947, 0.1709751848305212, 0.17600813650715863, 0.17323925180664135, 0.2143540282707337, 0.17873133527339047, 0.20027279652944563, 0.16199941719585897, 0.08978115934161213, 0.0543698441571534, 0.06483088034245921, 0.06282766057548994, 0.056153547017622985, 0.07184903230514006, 0.08431517396597643, 0.07337432654725395, 0.05739861159327375]}, "mutation_prompt": null}
{"id": "add7f586-65f9-4b8f-9ba7-b8bf81bfa614", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "9e516bc1-2930-499a-822b-f6148098ec4e", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "29ad6e32-d544-4ee5-a417-f760c1648942", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "f9335009-81ab-4826-9642-e704aa75b905", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "1c43395b-68e1-4f19-88d1-481a720da82c", "solution": "import numpy as np\n\nclass HybridFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.2  # Firefly attractiveness coefficient\n        self.beta_min = 0.2  # Minimum mutation step size\n        self.beta_max = 1.0  # Maximum mutation step size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if fitness[j] < fitness[i]:  # Firefly attraction phase\n                        attractive_force = self.alpha / (1 + np.linalg.norm(population[i] - population[j]))\n                        population[i] += attractive_force * (population[j] - population[i])\n\n                # Mutation phase\n                beta = self.beta_min + (self.beta_max - self.beta_min) * np.random.rand()\n                mutant = population[i] + beta * np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutant_fitness = func(mutant)\n\n                if mutant_fitness < fitness[i]:  # Acceptance criterion\n                    population[i] = mutant\n                    fitness[i] = mutant_fitness\n\n            best_idx = np.argmin(fitness)\n            if fitness[best_idx] < best_fitness:\n                best_solution = population[best_idx]\n                best_fitness = fitness[best_idx]\n\n        return best_solution", "name": "HybridFireflyAlgorithm", "description": "Utilizing a Hybrid Firefly Algorithm (HFA) that integrates firefly communication and mutation strategies to explore the search space efficiently while adapting to dynamic changes for improved convergence performance.", "configspace": "", "generation": 87, "fitness": 0.09144843562834938, "feedback": "The algorithm HybridFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "9b6650ba-00d6-4664-853e-83790df7de0e", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "8d38ec36-91c3-40ab-8ce1-9955b87ea5c3", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "e47fee07-f803-4b07-8436-0cd9b8ec2e07", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "41a103dd-d6c8-447f-bed1-98893a8a2b0d", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "f760fc06-04d0-4884-8702-c11b03c9bb3a", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "2567c478-f811-4f2f-a9f4-70ef97540783", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "c93d2d35-ca2d-4f3f-9bd1-ec30fc0f2d13", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "883224e9-9869-4986-9843-515c7eef590f", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "764dc8cf-3f66-4ddb-92aa-189d916b8b26", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "01496eb4-bd92-4e18-8f3b-152ffe8b645d", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "35a52929-c92e-419a-b656-29abac8250bd", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
{"id": "ac60cc3d-0983-4eeb-be88-4dedbfed8cad", "solution": "import numpy as np\n\nclass EnhancedQuantumGravitationalOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        G = 6.67430e-11  # Gravitational constant\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.budget):\n                solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness = func(solution)\n                \n                if fitness < best_fitness:\n                    best_solution = solution\n                    best_fitness = fitness\n                else:\n                    # Quantum-inspired mechanism\n                    prob = np.random.uniform(0, 1)\n                    if prob < 0.5:\n                        quantum_solution = best_solution + np.random.normal(0, 1, self.dim)\n                        quantum_fitness = func(quantum_solution)\n                        if quantum_fitness < best_fitness:\n                            best_solution = quantum_solution\n                            best_fitness = quantum_fitness\n                    else:\n                        adapt_factor = np.random.uniform(0, 1)\n                        mutant = best_solution + adapt_factor * (best_solution - solution)\n                        mutant_fitness = func(mutant)\n                        if mutant_fitness < best_fitness:\n                            best_solution = mutant\n                            best_fitness = mutant_fitness\n        \n        return best_solution", "name": "EnhancedQuantumGravitationalOptimization", "description": "Enhancing Quantum Gravitational Optimization (EQGO) by incorporating a mutation strategy based on the best solution and a dynamic adaptation factor to improve convergence performance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fb3518d-4dc4-4d8f-b822-5770033e753a", "metadata": {"aucs": [0.322198779278315, 0.2900081036206782, 0.3483834461982147, 0.29191557450039385, 0.28857058683179737, 0.29349745088907075, 0.2565400643784178, 0.2714371942575694, 0.30232318032323036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09116860816548411, 0.08502592055401403, 0.086607296116197, 0.09700157404448018, 0.0775196661941403, 0.07175932316291145, 0.06831832288310669, 0.09650401595339486, 0.0778732381273266, 0.07047456666887553, 0.06963864795999375, 0.07638965507016382, 0.040579662826366825, 0.07468045056620742, 0.06414852042195074, 0.05606427244763634, 0.06489625272646404, 0.08825808381144629, 0.9974409167178306, 0.9954344370479825, 0.9987742136519246, 0.9950569380066067, 0.9912725423679064, 0.9954586448117816, 0.9726631733294994, 0.9993256746449408, 0.992448493613878, 0.1388932085805482, 0.18626727379134123, 0.1654236020483617, 0.16440493913151533, 0.16252752570452178, 0.16990503923214784, 0.17316959154644462, 0.18302692124619557, 0.2822130186870966, 0.24312846077352446, 0.2739055626183292, 0.20359266232976014, 0.29811233561427775, 0.1736569971525883, 0.19471439958193482, 0.19118821118897045, 0.22792275947482865, 0.2004612378489754, 0.1448733914216962, 0.16473894872974126, 0.08023256980860483, 0.02292390958489654, 0.09363649223326342, 0.0908815738092762, 0.08891467655874408, 0.19689042455538108, 0.11709437814960133, 0.1669117660352425, 0.11651047342712573, 0.11861259290454162, 0.11378362427852096, 0.12390210364348353, 0.11724501403892607, 0.1487552133957517, 0.11733539114777691, 0.11631671405609645, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344504434363629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0739214587289142, 0.13701441881291887, 0.08876185739267406, 0.0536934223288732, 0.11143965299729586, 0.05057510162123069, 0.07190827744474715, 0.06447438502133229, 0.04845450900596604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025357227306759933, 0.027689807233132857, 0.059902321634565436, 0.04973297317025094, 0.036045690789089924, 0.05841342610813083, 0.04278545717733173, 0.03467821260735959, 0.021706911398699402, 0.31873390076712804, 0.28042354161170446, 0.295427521555911, 0.3046857057331138, 0.321558374007355, 0.33760046458348403, 0.4183250983194865, 0.32103207211775964, 0.3033623271139503, 0.06517241047666344, 0.08893577919457296, 0.09027722704135377, 0.09698997219863381, 0.12268602693224706, 0.09910752467342476, 0.08041632041333091, 0.07940749787458445, 0.06133356412314006, 0.14613633206472165, 0.19223954908326724, 0.16235216600314084, 0.151266034470938, 0.1943604579811986, 0.15309759629427422, 0.18407981432936005, 0.1334781472757972, 0.13964866226011596, 0.16531680002158156, 0.20289886115275868, 0.21988135122434127, 0.18945796929284175, 0.19491305864416897, 0.24174769777573424, 0.22523786396717582, 0.2234581556671864, 0.22615403891796582, 0.14599263021333786, 0.17559346245978047, 0.20572987207843163, 0.1721259290468541, 0.18244743379049344, 0.16703079509678698, 0.15403162307666207, 0.1651883463498185, 0.17874813354633512, 0.16748565243563407, 0.19643372246963164, 0.19093230516805992, 0.17887375477609913, 0.19099749614387473, 0.18844465079056028, 0.18261218115605216, 0.1646620807554986, 0.1892297155246322, 0.17496526518183197, 0.16395403295868805, 0.1800966257583535, 0.1700231823668451, 0.181080412067965, 0.19215119638469658, 0.18294702099777216, 0.18160574194529733, 0.18065765089532926, 0.35873051433350434, 0.18373835804369743, 0.18128012123599901, 0.5235077502612593, 0.18747190714281636, 0.18857893793202896, 0.16468039760570663, 0.18521315434586394, 0.4938613681768972, 0.335012672578172, 0.1918824809170364, 0.1961678763798136, 0.2859826614341222, 0.18443722432281107, 0.16665864941640574, 0.2098873175513215, 0.1492021656126108, 0.3197733996759289, 0.18295414907227692, 0.1866976868919823, 0.17538234243251793, 0.2089748693623622, 0.20927153285766154, 0.19382834624945888, 0.17559368374277673, 0.20328386522169983, 0.19338348526794358, 0.06399614468665726, 0.06864381678821574, 0.06567544162162975, 0.07276913634214377, 0.07907616560686292, 0.05741573678396761, 0.08004961912261899, 0.06491912681078027, 0.06936137819406119]}, "mutation_prompt": null}
