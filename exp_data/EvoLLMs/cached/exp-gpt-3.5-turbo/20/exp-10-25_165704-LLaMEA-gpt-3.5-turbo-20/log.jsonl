{"id": "1837001b-23fe-4376-96fb-7d83caf702ee", "solution": "import numpy as np\n\nclass DEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + self.f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "DEOppositionOptimization", "description": "Differential Evolution with Opposition-Based Learning for Black Box Optimization", "configspace": "", "generation": 0, "fitness": 0.018956175275881892, "feedback": "The algorithm DEOppositionOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.05.", "error": "", "parent_id": null, "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02183662710677059, 0.02150737329982222, 0.021598759428102854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1746823296993365, 0.17490142229611194, 0.16259939038230442, 0.13569659102496157, 0.14818428980067788, 0.13414966873667744, 0.17912706674105117, 0.1916882543541325, 0.1755855416670753, 0.056181148867001096, 0.05626703083632345, 0.05532707350808763, 0.08280740316111956, 0.08282681677202985, 0.08224628531117784, 0.09108398593686884, 0.09185800612433759, 0.08931955372173639, 0.00010689441946121203, 9.999999999998899e-05, 9.999999999998899e-05, 0.019719755451474308, 0.020750494462011382, 0.0194713752838106, 0.036966524373094556, 0.0362902389209665, 0.03494892603541955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020386394465717994, 0.020221451845540694, 0.019271192923911995, 0.006468109207519945, 0.006372285433605018, 0.0062174278500704006, 0.008987220461424084, 0.008779926469922983, 0.008602381948231264, 0.006245884525428513, 0.0061522664811695105, 0.006005836862124858, 0.008645415064490791, 0.00837655388744063, 0.008254200665681277, 0.006238612190024639, 0.006149079578787631, 0.006003382063940577, 0.18090382187348208, 0.16942764419541112, 0.16483920495740934, 0.16532800663802738, 0.16032326402815722, 0.16881923206509908, 0.16524570691097396, 0.1606419364704812, 0.17779859280447163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "6709ec95-86ed-489d-9747-eb9163e870fa", "solution": "import numpy as np\n\nclass DEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + self.f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "DEOppositionOptimization", "description": "Differential Evolution with Opposition-Based Learning for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02183662710677059, 0.02150737329982222, 0.021598759428102854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1746823296993365, 0.17490142229611194, 0.16259939038230442, 0.13569659102496157, 0.14818428980067788, 0.13414966873667744, 0.17912706674105117, 0.1916882543541325, 0.1755855416670753, 0.056181148867001096, 0.05626703083632345, 0.05532707350808763, 0.08280740316111956, 0.08282681677202985, 0.08224628531117784, 0.09108398593686884, 0.09185800612433759, 0.08931955372173639, 0.00010689441946121203, 9.999999999998899e-05, 9.999999999998899e-05, 0.019719755451474308, 0.020750494462011382, 0.0194713752838106, 0.036966524373094556, 0.0362902389209665, 0.03494892603541955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020386394465717994, 0.020221451845540694, 0.019271192923911995, 0.006468109207519945, 0.006372285433605018, 0.0062174278500704006, 0.008987220461424084, 0.008779926469922983, 0.008602381948231264, 0.006245884525428513, 0.0061522664811695105, 0.006005836862124858, 0.008645415064490791, 0.00837655388744063, 0.008254200665681277, 0.006238612190024639, 0.006149079578787631, 0.006003382063940577, 0.18090382187348208, 0.16942764419541112, 0.16483920495740934, 0.16532800663802738, 0.16032326402815722, 0.16881923206509908, 0.16524570691097396, 0.1606419364704812, 0.17779859280447163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "ebb385e5-f15d-414e-8172-998c14297c29", "solution": "import numpy as np\n\nclass HybridDEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, restart_prob=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.restart_prob = restart_prob\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + self.f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n            if np.random.rand() < self.restart_prob:\n                population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n                op_population = opp_position(population)\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "HybridDEOppositionOptimization", "description": "Utilizing a hybrid approach combining Differential Evolution with Opposition-Based Learning and Random Restart strategy for enhanced exploration in Black Box Optimization.", "configspace": "", "generation": 2, "fitness": 0.012910182248107261, "feedback": "The algorithm HybridDEOppositionOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.01 with standard deviation 0.03.", "error": "", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02154683583120154, 0.019619372725544815, 0.020195560374474564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0657726418609107, 0.0919003775482492, 0.06698576464953554, 0.06450371460623228, 0.0754889462966245, 0.0767412554479483, 0.06432828210845731, 0.08797768978952591, 0.09151338285974997, 0.04266398581728226, 0.04711540688626137, 0.04598934864503568, 0.07054436904993677, 0.07318331681084034, 0.07437471096448267, 0.08210672915466799, 0.08809133355072285, 0.08158337897550172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005255015068507007, 0.009579139532043146, 0.008438495015742453, 0.01763264642199569, 0.03464303908793209, 0.026425893463423944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015601105033193785, 0.013773685432203586, 0.014537585898312555, 0.005582544026316638, 0.0063962118915278365, 0.005620170420220005, 0.007149739147106482, 0.008827852196604535, 0.007278581673492379, 0.0053847458415450244, 0.006212607780716639, 0.005413696365566989, 0.006420562974841615, 0.008418166414156492, 0.007014001086059984, 0.005384530876579086, 0.006212878541781874, 0.005406334294916104, 0.1137732509765419, 0.1593105414615671, 0.1177646928763948, 0.11906647613799759, 0.12910182580122842, 0.12239179017398094, 0.16203949160795894, 0.13735792372687006, 0.11675774039065834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "67441938-94ca-4474-ae9f-6dfb400a127c", "solution": "import numpy as np\n\nclass DEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + self.f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "DEOppositionOptimization", "description": "Differential Evolution with Opposition-Based Learning for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02183662710677059, 0.02150737329982222, 0.021598759428102854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1746823296993365, 0.17490142229611194, 0.16259939038230442, 0.13569659102496157, 0.14818428980067788, 0.13414966873667744, 0.17912706674105117, 0.1916882543541325, 0.1755855416670753, 0.056181148867001096, 0.05626703083632345, 0.05532707350808763, 0.08280740316111956, 0.08282681677202985, 0.08224628531117784, 0.09108398593686884, 0.09185800612433759, 0.08931955372173639, 0.00010689441946121203, 9.999999999998899e-05, 9.999999999998899e-05, 0.019719755451474308, 0.020750494462011382, 0.0194713752838106, 0.036966524373094556, 0.0362902389209665, 0.03494892603541955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020386394465717994, 0.020221451845540694, 0.019271192923911995, 0.006468109207519945, 0.006372285433605018, 0.0062174278500704006, 0.008987220461424084, 0.008779926469922983, 0.008602381948231264, 0.006245884525428513, 0.0061522664811695105, 0.006005836862124858, 0.008645415064490791, 0.00837655388744063, 0.008254200665681277, 0.006238612190024639, 0.006149079578787631, 0.006003382063940577, 0.18090382187348208, 0.16942764419541112, 0.16483920495740934, 0.16532800663802738, 0.16032326402815722, 0.16881923206509908, 0.16524570691097396, 0.1606419364704812, 0.17779859280447163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "ed0eeec6-4b23-4547-83e8-7509f32f2dde", "solution": "import numpy as np\n\nclass HybridFireflyOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, alpha=0.1, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def move_fireflies(firefly, target_firefly):\n            r = np.linalg.norm(firefly - target_firefly)\n            beta = self.beta0 * np.exp(-self.gamma * r**2)\n            new_firefly = firefly + beta * (target_firefly - firefly) + self.alpha * np.random.uniform(-1, 1, self.dim)\n            return np.clip(new_firefly, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                for j in range(self.pop_size):\n                    if func(op_population[j]) < func(op_population[i]):\n                        population[i] = move_fireflies(population[i], population[j])\n                        op_population[i] = opp_position(population[i])\n\n            best_solution = op_population[np.argmin(evaluate(op_population))]\n\n        return best_solution", "name": "HybridFireflyOppositionOptimization", "description": "Implementing a Hybrid Firefly Algorithm with Opposition-Based Learning for Black Box Optimization", "configspace": "", "generation": 4, "fitness": 0.006878033034750663, "feedback": "The algorithm HybridFireflyOppositionOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.01 with standard deviation 0.02.", "error": "", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04641764295283224, 0.03150943392793781, 0.03108253534944161, 0.027040439629197333, 0.04293964004606132, 0.04988163636450882, 0.0593115476507825, 0.026818661447202463, 0.03888854633062311, 0.0060088321160530755, 9.999999999998899e-05, 0.008481052461301597, 0.06585710822680102, 0.05610364482833996, 0.03832411339614861, 0.049340830162630245, 0.012712580659515194, 0.02691818315049277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09615334024831368, 0.09112615440931715, 0.09945112670002276, 0.08781435869875276, 0.09232286747680751, 0.10078579808147026, 0.07988979202305468, 0.09724617088228427, 0.10422909828625249, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "7046ac20-b201-4ab6-9168-055f062f0927", "solution": "import numpy as np\n\nclass EnhancedDEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + self.f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "EnhancedDEOppositionOptimization", "description": "Enhanced Differential Evolution with Opposition-Based Learning for Black Box Optimization using a probability-driven refinement strategy.", "configspace": "", "generation": 5, "fitness": 0.018956175275881892, "feedback": "The algorithm EnhancedDEOppositionOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.05.", "error": "", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02183662710677059, 0.02150737329982222, 0.021598759428102854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1746823296993365, 0.17490142229611194, 0.16259939038230442, 0.13569659102496157, 0.14818428980067788, 0.13414966873667744, 0.17912706674105117, 0.1916882543541325, 0.1755855416670753, 0.056181148867001096, 0.05626703083632345, 0.05532707350808763, 0.08280740316111956, 0.08282681677202985, 0.08224628531117784, 0.09108398593686884, 0.09185800612433759, 0.08931955372173639, 0.00010689441946121203, 9.999999999998899e-05, 9.999999999998899e-05, 0.019719755451474308, 0.020750494462011382, 0.0194713752838106, 0.036966524373094556, 0.0362902389209665, 0.03494892603541955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020386394465717994, 0.020221451845540694, 0.019271192923911995, 0.006468109207519945, 0.006372285433605018, 0.0062174278500704006, 0.008987220461424084, 0.008779926469922983, 0.008602381948231264, 0.006245884525428513, 0.0061522664811695105, 0.006005836862124858, 0.008645415064490791, 0.00837655388744063, 0.008254200665681277, 0.006238612190024639, 0.006149079578787631, 0.006003382063940577, 0.18090382187348208, 0.16942764419541112, 0.16483920495740934, 0.16532800663802738, 0.16032326402815722, 0.16881923206509908, 0.16524570691097396, 0.1606419364704812, 0.17779859280447163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "395d796b-a9c9-481b-80cc-c41936414dff", "solution": "import numpy as np\n\nclass DEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + self.f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "DEOppositionOptimization", "description": "Differential Evolution with Opposition-Based Learning for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02183662710677059, 0.02150737329982222, 0.021598759428102854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1746823296993365, 0.17490142229611194, 0.16259939038230442, 0.13569659102496157, 0.14818428980067788, 0.13414966873667744, 0.17912706674105117, 0.1916882543541325, 0.1755855416670753, 0.056181148867001096, 0.05626703083632345, 0.05532707350808763, 0.08280740316111956, 0.08282681677202985, 0.08224628531117784, 0.09108398593686884, 0.09185800612433759, 0.08931955372173639, 0.00010689441946121203, 9.999999999998899e-05, 9.999999999998899e-05, 0.019719755451474308, 0.020750494462011382, 0.0194713752838106, 0.036966524373094556, 0.0362902389209665, 0.03494892603541955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020386394465717994, 0.020221451845540694, 0.019271192923911995, 0.006468109207519945, 0.006372285433605018, 0.0062174278500704006, 0.008987220461424084, 0.008779926469922983, 0.008602381948231264, 0.006245884525428513, 0.0061522664811695105, 0.006005836862124858, 0.008645415064490791, 0.00837655388744063, 0.008254200665681277, 0.006238612190024639, 0.006149079578787631, 0.006003382063940577, 0.18090382187348208, 0.16942764419541112, 0.16483920495740934, 0.16532800663802738, 0.16032326402815722, 0.16881923206509908, 0.16524570691097396, 0.1606419364704812, 0.17779859280447163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "b869df3e-bf9f-4f9c-ac17-a8af91191750", "solution": "import numpy as np\n\nclass DEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + self.f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "DEOppositionOptimization", "description": "Differential Evolution with Opposition-Based Learning for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02183662710677059, 0.02150737329982222, 0.021598759428102854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1746823296993365, 0.17490142229611194, 0.16259939038230442, 0.13569659102496157, 0.14818428980067788, 0.13414966873667744, 0.17912706674105117, 0.1916882543541325, 0.1755855416670753, 0.056181148867001096, 0.05626703083632345, 0.05532707350808763, 0.08280740316111956, 0.08282681677202985, 0.08224628531117784, 0.09108398593686884, 0.09185800612433759, 0.08931955372173639, 0.00010689441946121203, 9.999999999998899e-05, 9.999999999998899e-05, 0.019719755451474308, 0.020750494462011382, 0.0194713752838106, 0.036966524373094556, 0.0362902389209665, 0.03494892603541955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020386394465717994, 0.020221451845540694, 0.019271192923911995, 0.006468109207519945, 0.006372285433605018, 0.0062174278500704006, 0.008987220461424084, 0.008779926469922983, 0.008602381948231264, 0.006245884525428513, 0.0061522664811695105, 0.006005836862124858, 0.008645415064490791, 0.00837655388744063, 0.008254200665681277, 0.006238612190024639, 0.006149079578787631, 0.006003382063940577, 0.18090382187348208, 0.16942764419541112, 0.16483920495740934, 0.16532800663802738, 0.16032326402815722, 0.16881923206509908, 0.16524570691097396, 0.1606419364704812, 0.17779859280447163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "dd9ec5e0-b8a3-4ee8-94a3-308e449847b2", "solution": "import numpy as np\n\nclass HybridDEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + self.f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "HybridDEOppositionOptimization", "description": "Utilizing a Hybrid Differential Evolution with Opposition-Based Learning strategy to enhance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 8, "fitness": 0.018956175275881892, "feedback": "The algorithm HybridDEOppositionOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.05.", "error": "", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02183662710677059, 0.02150737329982222, 0.021598759428102854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1746823296993365, 0.17490142229611194, 0.16259939038230442, 0.13569659102496157, 0.14818428980067788, 0.13414966873667744, 0.17912706674105117, 0.1916882543541325, 0.1755855416670753, 0.056181148867001096, 0.05626703083632345, 0.05532707350808763, 0.08280740316111956, 0.08282681677202985, 0.08224628531117784, 0.09108398593686884, 0.09185800612433759, 0.08931955372173639, 0.00010689441946121203, 9.999999999998899e-05, 9.999999999998899e-05, 0.019719755451474308, 0.020750494462011382, 0.0194713752838106, 0.036966524373094556, 0.0362902389209665, 0.03494892603541955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020386394465717994, 0.020221451845540694, 0.019271192923911995, 0.006468109207519945, 0.006372285433605018, 0.0062174278500704006, 0.008987220461424084, 0.008779926469922983, 0.008602381948231264, 0.006245884525428513, 0.0061522664811695105, 0.006005836862124858, 0.008645415064490791, 0.00837655388744063, 0.008254200665681277, 0.006238612190024639, 0.006149079578787631, 0.006003382063940577, 0.18090382187348208, 0.16942764419541112, 0.16483920495740934, 0.16532800663802738, 0.16032326402815722, 0.16881923206509908, 0.16524570691097396, 0.1606419364704812, 0.17779859280447163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "bf37a4f6-757c-4eb2-b21f-90b08842b3ab", "solution": "import numpy as np\n\nclass DEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + self.f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "DEOppositionOptimization", "description": "Differential Evolution with Opposition-Based Learning for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02183662710677059, 0.02150737329982222, 0.021598759428102854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1746823296993365, 0.17490142229611194, 0.16259939038230442, 0.13569659102496157, 0.14818428980067788, 0.13414966873667744, 0.17912706674105117, 0.1916882543541325, 0.1755855416670753, 0.056181148867001096, 0.05626703083632345, 0.05532707350808763, 0.08280740316111956, 0.08282681677202985, 0.08224628531117784, 0.09108398593686884, 0.09185800612433759, 0.08931955372173639, 0.00010689441946121203, 9.999999999998899e-05, 9.999999999998899e-05, 0.019719755451474308, 0.020750494462011382, 0.0194713752838106, 0.036966524373094556, 0.0362902389209665, 0.03494892603541955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020386394465717994, 0.020221451845540694, 0.019271192923911995, 0.006468109207519945, 0.006372285433605018, 0.0062174278500704006, 0.008987220461424084, 0.008779926469922983, 0.008602381948231264, 0.006245884525428513, 0.0061522664811695105, 0.006005836862124858, 0.008645415064490791, 0.00837655388744063, 0.008254200665681277, 0.006238612190024639, 0.006149079578787631, 0.006003382063940577, 0.18090382187348208, 0.16942764419541112, 0.16483920495740934, 0.16532800663802738, 0.16032326402815722, 0.16881923206509908, 0.16524570691097396, 0.1606419364704812, 0.17779859280447163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "5c582e95-9464-4f04-b56d-e1fb7dcf203f", "solution": "import numpy as np\n\nclass DEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + self.f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "DEOppositionOptimization", "description": "Differential Evolution with Opposition-Based Learning for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02183662710677059, 0.02150737329982222, 0.021598759428102854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1746823296993365, 0.17490142229611194, 0.16259939038230442, 0.13569659102496157, 0.14818428980067788, 0.13414966873667744, 0.17912706674105117, 0.1916882543541325, 0.1755855416670753, 0.056181148867001096, 0.05626703083632345, 0.05532707350808763, 0.08280740316111956, 0.08282681677202985, 0.08224628531117784, 0.09108398593686884, 0.09185800612433759, 0.08931955372173639, 0.00010689441946121203, 9.999999999998899e-05, 9.999999999998899e-05, 0.019719755451474308, 0.020750494462011382, 0.0194713752838106, 0.036966524373094556, 0.0362902389209665, 0.03494892603541955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020386394465717994, 0.020221451845540694, 0.019271192923911995, 0.006468109207519945, 0.006372285433605018, 0.0062174278500704006, 0.008987220461424084, 0.008779926469922983, 0.008602381948231264, 0.006245884525428513, 0.0061522664811695105, 0.006005836862124858, 0.008645415064490791, 0.00837655388744063, 0.008254200665681277, 0.006238612190024639, 0.006149079578787631, 0.006003382063940577, 0.18090382187348208, 0.16942764419541112, 0.16483920495740934, 0.16532800663802738, 0.16032326402815722, 0.16881923206509908, 0.16524570691097396, 0.1606419364704812, 0.17779859280447163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "22ae775b-6127-4f33-b984-ada94c509897", "solution": "import numpy as np\n\nclass EnhancedDEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + self.f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n            # Adaptive parameter adjustments\n            self.f = max(0.1, min(0.9, self.f + np.random.normal(0, 0.1)))\n            self.cr = max(0.1, min(0.9, self.cr + np.random.normal(0, 0.1))\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "EnhancedDEOppositionOptimization", "description": "Enhancing Differential Evolution with Opposition-Based Learning through adaptive parameter adjustments for better exploration and exploitation balance.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 46, 9, '        best_solution = op_population[np.argmin(evaluate(op_population))]\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 46, 9, '        best_solution = op_population[np.argmin(evaluate(op_population))]\\n'))", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {}, "mutation_prompt": null}
{"id": "391a42d0-b575-43ad-b6a2-f28a10f96313", "solution": "import numpy as np\n\nclass DEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + self.f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "DEOppositionOptimization", "description": "Differential Evolution with Opposition-Based Learning for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02183662710677059, 0.02150737329982222, 0.021598759428102854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1746823296993365, 0.17490142229611194, 0.16259939038230442, 0.13569659102496157, 0.14818428980067788, 0.13414966873667744, 0.17912706674105117, 0.1916882543541325, 0.1755855416670753, 0.056181148867001096, 0.05626703083632345, 0.05532707350808763, 0.08280740316111956, 0.08282681677202985, 0.08224628531117784, 0.09108398593686884, 0.09185800612433759, 0.08931955372173639, 0.00010689441946121203, 9.999999999998899e-05, 9.999999999998899e-05, 0.019719755451474308, 0.020750494462011382, 0.0194713752838106, 0.036966524373094556, 0.0362902389209665, 0.03494892603541955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020386394465717994, 0.020221451845540694, 0.019271192923911995, 0.006468109207519945, 0.006372285433605018, 0.0062174278500704006, 0.008987220461424084, 0.008779926469922983, 0.008602381948231264, 0.006245884525428513, 0.0061522664811695105, 0.006005836862124858, 0.008645415064490791, 0.00837655388744063, 0.008254200665681277, 0.006238612190024639, 0.006149079578787631, 0.006003382063940577, 0.18090382187348208, 0.16942764419541112, 0.16483920495740934, 0.16532800663802738, 0.16032326402815722, 0.16881923206509908, 0.16524570691097396, 0.1606419364704812, 0.17779859280447163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "8a8626ad-4595-4091-96ae-a56af44de7d6", "solution": "import numpy as np\n\nclass ImprovedDEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n            adapt_f = np.random.normal(self.f, 0.1)  # Adaptive mutation factor\n            adapt_cr = np.random.normal(self.cr, 0.1)  # Adaptive crossover rate\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + adapt_f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < adapt_cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "ImprovedDEOppositionOptimization", "description": "Enhancing Differential Evolution with Opposition-Based Learning through adaptive mutation and crossover probabilities for improved exploration-exploitation balance.", "configspace": "", "generation": 13, "fitness": 0.01853881154531245, "feedback": "The algorithm ImprovedDEOppositionOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.05.", "error": "", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021763615793564894, 0.0211977544726466, 0.0212890403288013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15125204537372305, 0.14405672188844532, 0.1753929873354234, 0.1351281947119123, 0.15341020711537112, 0.13618100927073595, 0.15089675438303352, 0.17125689381274933, 0.16496461239562288, 0.05513456342656864, 0.05499102975181469, 0.05545417282008025, 0.08082027129810232, 0.08061102437270784, 0.08178439685494254, 0.08980663058173521, 0.09034171307957373, 0.09239887876266106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01860626978164115, 0.018670089827061753, 0.02047309819984744, 0.03557950898140794, 0.0343550560760878, 0.035888958121580106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020008757128080812, 0.019834324335073816, 0.020384584203196887, 0.006226046693686982, 0.006252512320899739, 0.006262578696434651, 0.008638821078757242, 0.008668336032351176, 0.008640901748680152, 0.0060156727927090925, 0.006031757388270664, 0.006055470233955584, 0.008356305857959656, 0.008272441613774162, 0.008267134973649615, 0.00599913884349057, 0.006029006409765669, 0.006052275489942471, 0.1555760104337558, 0.15934772803410646, 0.1935888166182489, 0.1648784095592033, 0.17513153460809772, 0.17354096248813, 0.17460580500843703, 0.1564058075582485, 0.17740665482074292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "81fedba7-3a9e-4ea3-860c-b0f5d91bc8f5", "solution": "import numpy as np\n\nclass DEOppositionOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def opp_position(population):\n            return 10.0 - population\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        def bound_check(individual):\n            return np.clip(individual, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        op_population = opp_position(population)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = bound_check(population[a] + self.f * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                op_trial = opp_position(trial)\n\n                if func(op_trial) < func(op_population[i]):\n                    new_population[i] = trial\n                    op_population[i] = op_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = op_population[np.argmin(evaluate(op_population))]\n        return best_solution", "name": "DEOppositionOptimization", "description": "Differential Evolution with Opposition-Based Learning for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02183662710677059, 0.02150737329982222, 0.021598759428102854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1746823296993365, 0.17490142229611194, 0.16259939038230442, 0.13569659102496157, 0.14818428980067788, 0.13414966873667744, 0.17912706674105117, 0.1916882543541325, 0.1755855416670753, 0.056181148867001096, 0.05626703083632345, 0.05532707350808763, 0.08280740316111956, 0.08282681677202985, 0.08224628531117784, 0.09108398593686884, 0.09185800612433759, 0.08931955372173639, 0.00010689441946121203, 9.999999999998899e-05, 9.999999999998899e-05, 0.019719755451474308, 0.020750494462011382, 0.0194713752838106, 0.036966524373094556, 0.0362902389209665, 0.03494892603541955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020386394465717994, 0.020221451845540694, 0.019271192923911995, 0.006468109207519945, 0.006372285433605018, 0.0062174278500704006, 0.008987220461424084, 0.008779926469922983, 0.008602381948231264, 0.006245884525428513, 0.0061522664811695105, 0.006005836862124858, 0.008645415064490791, 0.00837655388744063, 0.008254200665681277, 0.006238612190024639, 0.006149079578787631, 0.006003382063940577, 0.18090382187348208, 0.16942764419541112, 0.16483920495740934, 0.16532800663802738, 0.16032326402815722, 0.16881923206509908, 0.16524570691097396, 0.1606419364704812, 0.17779859280447163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "solution": "import numpy as np\n\nclass HybridDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual):\n            return np.clip(individual + np.random.normal(0, self.sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial)\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "HybridDEGaussianOptimization", "description": "Hybrid Differential Evolution with Gaussian Mutation for Black Box Optimization", "configspace": "", "generation": 15, "fitness": 0.20972150069252044, "feedback": "The algorithm HybridDEGaussianOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "1837001b-23fe-4376-96fb-7d83caf702ee", "metadata": {"aucs": [0.42277686242099666, 0.40807483944642875, 0.4196101260442724, 0.40506646431934035, 0.41035383150425186, 0.394402654729453, 0.4311702970975688, 0.421671997528951, 0.3914034333715335, 0.04815075591079587, 0.055561651930536526, 0.030802594506479042, 0.03939192192266783, 0.03758064628524349, 0.030496771912297493, 0.03260146351849236, 0.037979580184863915, 0.06930097937382795, 0.0992053249056406, 0.10113968128179218, 0.0984632103186519, 0.09337367410984898, 0.09249168117796147, 0.10078445158129812, 0.10206632334103993, 0.10997933046490782, 0.09972067343348667, 0.09018843911071128, 0.09713435913317625, 0.08568434608898257, 0.08998915562530851, 0.07949112598460739, 0.08060187991636614, 0.0813921195967452, 0.08941411965697355, 0.09013098361106675, 0.8342616208890457, 0.755529659171358, 0.814043334114043, 0.8088694867703572, 0.8439678547820249, 0.8243311144801717, 0.7727632346964453, 0.8354909112792136, 0.831643825228024, 0.23624189159218512, 0.2557875351336202, 0.2500281733566798, 0.2596616510417451, 0.27400209234558015, 0.25094727230957037, 0.23081545176794493, 0.25984726438372996, 0.2499722706024522, 0.3344886680638195, 0.51187301127279, 0.5098814316175793, 0.3316178093667679, 0.31604524981314075, 0.31497640526639226, 0.3096123057695267, 0.3082702754091544, 0.3321273168890866, 0.14107649496913377, 0.1577124022064843, 0.1503016649166744, 0.14661359488900594, 0.14519257945729447, 0.12960703300857224, 0.14649769574890126, 0.14896288641416955, 0.14910080724222607, 0.1675464337958823, 0.15878707453796292, 0.1594107237373883, 0.15894878241857147, 0.15490732601391988, 0.1334389521558501, 0.12969438577825787, 0.1243977317593914, 0.14727930311537785, 0.01298170087753292, 0.02474603669530262, 0.005976497222138777, 0.01971855872885009, 0.012372021772717345, 0.025996879540060913, 0.015679630004583722, 0.014264596983566857, 0.00790125531866015, 0.10171594868750977, 0.07830762969675886, 0.08814997293661031, 0.1065754140700832, 0.06786320965604553, 0.10038129610285684, 0.16389484586908087, 0.0896047572129679, 0.09283736810552434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1031835804750677, 0.10930519954402806, 0.10537888833844677, 0.09860432130176833, 0.10053516495961778, 0.09759225922496173, 0.10446538965463492, 0.09980707091796448, 0.08020458246812145, 0.3977778678460291, 0.38611372094632346, 0.38100232508552945, 0.3838095695069945, 0.37708783412426694, 0.38021609905176124, 0.37707508598905815, 0.39495191710145616, 0.38779593570782056, 0.08495686485797538, 0.09791114247310473, 0.08907108106135786, 0.09153359451090348, 0.10769146743819147, 0.0883875326569249, 0.09594695336441872, 0.08327642540324398, 0.12283669973717948, 0.16599947619843047, 0.15418570219644012, 0.1424906871053796, 0.18163209360675658, 0.12509912169977944, 0.13344106866607108, 0.19719959791409225, 0.14750279071758765, 0.12345611322171568, 0.2697841365162511, 0.27044704268163144, 0.2727327598026411, 0.27469174725623324, 0.27133259296862566, 0.26817863811024745, 0.2869531823986857, 0.28877464136949416, 0.27102534134465606, 0.19420276785403945, 0.2106466483460333, 0.21609924553771886, 0.21865936866137115, 0.19942336325620613, 0.19992818874600515, 0.22012165266345995, 0.22047129251430908, 0.20264144394272843, 0.17846078304779545, 0.1670919486164204, 0.16948772177759397, 0.19789079487707772, 0.18739602891890272, 0.21248436430173734, 0.19680854691757366, 0.19347136104646756, 0.1996117624171143, 0.19157302908462193, 0.1795031124774974, 0.16748422674454322, 0.17485696335076772, 0.1674521025277338, 0.17864613860966239, 0.17405394585348788, 0.17287212898819704, 0.20918327772970524, 0.49351638612785065, 0.5177784133978938, 0.5018181354268495, 0.4411766774670386, 0.5363201119893296, 0.25352080073520933, 0.34431626211432054, 0.34290195823388314, 0.4197046084253888, 0.5176154810768474, 0.19829373069700906, 0.4460857881805007, 0.20316280306458157, 0.19402136445714402, 0.19581106550708438, 0.19723481931062292, 0.4052405331599702, 0.19999901508909101, 0.18244585976171768, 0.18787549271750603, 0.18793360143793192, 0.18288564613383895, 0.16587993267820256, 0.17247988765627564, 0.17864908377637367, 0.181015626488224, 0.18171765228272063, 0.07843538768256075, 0.07390688801020728, 0.07619973229891419, 0.08141340609310643, 0.08166124478834558, 0.07118041419326815, 0.07869950331220732, 0.07425819666944666, 0.07863276240738337]}, "mutation_prompt": null}
{"id": "42c3fc71-6777-4c78-827f-8de6564fa08a", "solution": "import numpy as np\n\nclass PSOGaussianOptimization:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual):\n            return np.clip(individual + np.random.normal(0, self.sigma, self.dim), -5.0, 5.0)\n\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros_like(swarm)\n\n        global_best = swarm[np.argmin([func(ind) for ind in swarm])]\n\n        for _ in range(self.budget):\n            new_swarm = np.zeros_like(swarm)\n\n            for i in range(self.swarm_size):\n                r_p = np.random.rand(self.dim)\n                r_g = np.random.rand(self.dim)\n\n                velocities[i] = self.omega * velocities[i] + self.phi_p * r_p * (swarm[i] - swarm[i]) + self.phi_g * r_g * (global_best - swarm[i])\n                new_position = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                mutated_position = gaussian_mutation(new_position)\n\n                if func(mutated_position) < func(swarm[i]):\n                    new_swarm[i] = mutated_position\n                else:\n                    new_swarm[i] = swarm[i]\n\n            swarm = new_swarm\n            current_best = swarm[np.argmin([func(ind) for ind in swarm])]\n            if func(current_best) < func(global_best):\n                global_best = current_best\n\n        return global_best", "name": "PSOGaussianOptimization", "description": "Metaheuristic Algorithm with Particle Swarm Optimization and Gaussian Mutation for Black Box Optimization", "configspace": "", "generation": 16, "fitness": 0.1690307722181107, "feedback": "The algorithm PSOGaussianOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.13.", "error": "", "parent_id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "metadata": {"aucs": [0.44687980900170154, 0.43006347605074013, 0.4531862174411412, 0.4072638699634208, 0.39824545557957225, 0.47128321384234007, 0.4322070328725919, 0.46346615324689944, 0.461391240989512, 0.005027984301982591, 0.000573635303205644, 0.06159188200402821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007938046826771794, 9.999999999998899e-05, 0.08109938586685717, 0.11924635625434021, 0.09347626744317783, 0.1096689645702269, 0.10694247986241912, 0.1383377256268501, 0.0983078747365651, 0.10870598948383137, 0.09390741128714308, 0.06811954316136648, 0.08594929920145589, 0.07572257388700088, 0.10326886034305749, 0.06947242486736704, 0.08662002793310108, 0.05651944208078308, 0.05904432568140894, 0.045534015539289596, 0.317591178559101, 0.3844366780048103, 0.5393952748579718, 0.11887190888672738, 0.10888065883674625, 0.1362125024011488, 0.5695086265847252, 0.4078234903898127, 0.4141678558224119, 0.23595659531688484, 0.25426742609864317, 0.2649469637957179, 0.3002582059229547, 0.26907341519531625, 0.3349555954304113, 0.2965952430478651, 0.21588272902057426, 0.29364912192986603, 0.216260678278142, 0.18149214010029946, 0.13058335862292203, 0.21697423399616422, 0.29375700613970046, 0.19001668542910122, 0.12397980895051919, 0.177864427316474, 0.13566629068275504, 0.19807604296260917, 0.14265375931793423, 0.10435442011697615, 0.15290611130011988, 0.16372129860003848, 0.10727198433524099, 0.12447517540719077, 0.12692501224186958, 0.14331754458266277, 0.13848382146110438, 0.05760402830893896, 0.1755692490716103, 0.13191700619664537, 0.14375464665747617, 0.14749461378797335, 0.1716160225180129, 0.09288192710087007, 0.14439623741715168, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013689186225949945, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010004703933441661, 9.999999999998899e-05, 0.0008589712473778821, 0.06825633829074251, 0.03513844007762923, 0.0750240419376983, 0.07280613820003456, 0.008840546288998441, 0.009582196778483376, 0.14893655558808316, 0.07655501830714462, 0.10690583547934185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00408251918375846, 9.999999999998899e-05, 0.10789445124163999, 0.08478668962224711, 0.11042394233940811, 0.056725960034841094, 0.0777463852873338, 0.08046907483878063, 0.08092993299020113, 0.09970902230948198, 0.08314439505653304, 0.42394821549702666, 0.40456120489411196, 0.41727919318030726, 0.41382524273557475, 0.38954949621149615, 0.3951685204486809, 0.432537801141583, 0.4173105220343817, 0.3972410492668563, 0.0560787218287182, 0.08081266448068203, 0.03491637533396241, 0.09507139151343291, 0.0480517472570553, 0.10351280289521003, 0.07179513569460283, 0.05791723223207357, 0.06821337186091947, 0.15598370349491253, 0.1621747456455479, 0.1797378489885939, 0.23715468943776075, 0.24272541040885232, 0.17572098423751736, 0.15904781847079807, 0.20839720385713056, 0.16414228892849747, 0.27725026351676074, 0.21554163725060693, 0.2944339285490679, 0.30340429253307344, 0.24958800592439512, 0.29814042736650104, 0.2378116994538042, 0.29754365203141064, 0.23829622742401435, 0.18856399427683668, 0.08961607014905404, 0.2221055999503736, 0.19325715108783503, 0.17086726689496068, 0.1970203346071444, 0.19670679150211523, 0.23640503820246284, 0.16562747722329207, 0.2082757245079626, 0.1801606825848463, 0.19907769408792997, 0.1605678799118414, 0.23474329791323612, 0.20182548461630567, 0.1834444883827414, 0.2013448035690819, 0.17321532578168464, 0.18496337840195065, 0.17921029890587892, 0.17545529063836507, 0.21464421843410164, 0.21078746748269994, 0.1887550341753047, 0.19650363167469387, 0.23516373943816538, 0.1790308474881469, 0.18527478203371162, 0.18416863288173313, 0.15927900741892298, 0.17156951241388818, 0.19945660643459306, 0.5256339254532948, 0.09907646158061745, 0.1662371697887406, 0.16578384286250147, 0.4549446293201239, 0.1547304834302271, 0.4276054808591906, 0.20225030444187386, 0.14314058071349356, 0.20053988716826954, 0.31688515771389947, 0.10381820145609977, 0.24312462068655227, 0.16715105999352053, 0.17801688835965657, 0.17151728130462107, 0.1732906964240596, 0.17367640678487095, 0.17411888488388116, 0.16750490416629105, 0.17973464009654982, 0.17867063019105267, 0.07079879465904737, 0.0645377296622417, 0.05474844576855942, 0.05695469240824391, 0.07344201876592737, 0.06928156009174258, 0.07680010204785448, 0.09635090270816093, 0.06825367160558049]}, "mutation_prompt": null}
{"id": "3e474d8d-e507-4114-9c4b-cd321a1ae19e", "solution": "import numpy as np\n\nclass HybridDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual):\n            return np.clip(individual + np.random.normal(0, self.sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial)\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "HybridDEGaussianOptimization", "description": "Hybrid Differential Evolution with Gaussian Mutation for Black Box Optimization", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "metadata": {"aucs": [0.42277686242099666, 0.40807483944642875, 0.4196101260442724, 0.40506646431934035, 0.41035383150425186, 0.394402654729453, 0.4311702970975688, 0.421671997528951, 0.3914034333715335, 0.04815075591079587, 0.055561651930536526, 0.030802594506479042, 0.03939192192266783, 0.03758064628524349, 0.030496771912297493, 0.03260146351849236, 0.037979580184863915, 0.06930097937382795, 0.0992053249056406, 0.10113968128179218, 0.0984632103186519, 0.09337367410984898, 0.09249168117796147, 0.10078445158129812, 0.10206632334103993, 0.10997933046490782, 0.09972067343348667, 0.09018843911071128, 0.09713435913317625, 0.08568434608898257, 0.08998915562530851, 0.07949112598460739, 0.08060187991636614, 0.0813921195967452, 0.08941411965697355, 0.09013098361106675, 0.8342616208890457, 0.755529659171358, 0.814043334114043, 0.8088694867703572, 0.8439678547820249, 0.8243311144801717, 0.7727632346964453, 0.8354909112792136, 0.831643825228024, 0.23624189159218512, 0.2557875351336202, 0.2500281733566798, 0.2596616510417451, 0.27400209234558015, 0.25094727230957037, 0.23081545176794493, 0.25984726438372996, 0.2499722706024522, 0.3344886680638195, 0.51187301127279, 0.5098814316175793, 0.3316178093667679, 0.31604524981314075, 0.31497640526639226, 0.3096123057695267, 0.3082702754091544, 0.3321273168890866, 0.14107649496913377, 0.1577124022064843, 0.1503016649166744, 0.14661359488900594, 0.14519257945729447, 0.12960703300857224, 0.14649769574890126, 0.14896288641416955, 0.14910080724222607, 0.1675464337958823, 0.15878707453796292, 0.1594107237373883, 0.15894878241857147, 0.15490732601391988, 0.1334389521558501, 0.12969438577825787, 0.1243977317593914, 0.14727930311537785, 0.01298170087753292, 0.02474603669530262, 0.005976497222138777, 0.01971855872885009, 0.012372021772717345, 0.025996879540060913, 0.015679630004583722, 0.014264596983566857, 0.00790125531866015, 0.10171594868750977, 0.07830762969675886, 0.08814997293661031, 0.1065754140700832, 0.06786320965604553, 0.10038129610285684, 0.16389484586908087, 0.0896047572129679, 0.09283736810552434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1031835804750677, 0.10930519954402806, 0.10537888833844677, 0.09860432130176833, 0.10053516495961778, 0.09759225922496173, 0.10446538965463492, 0.09980707091796448, 0.08020458246812145, 0.3977778678460291, 0.38611372094632346, 0.38100232508552945, 0.3838095695069945, 0.37708783412426694, 0.38021609905176124, 0.37707508598905815, 0.39495191710145616, 0.38779593570782056, 0.08495686485797538, 0.09791114247310473, 0.08907108106135786, 0.09153359451090348, 0.10769146743819147, 0.0883875326569249, 0.09594695336441872, 0.08327642540324398, 0.12283669973717948, 0.16599947619843047, 0.15418570219644012, 0.1424906871053796, 0.18163209360675658, 0.12509912169977944, 0.13344106866607108, 0.19719959791409225, 0.14750279071758765, 0.12345611322171568, 0.2697841365162511, 0.27044704268163144, 0.2727327598026411, 0.27469174725623324, 0.27133259296862566, 0.26817863811024745, 0.2869531823986857, 0.28877464136949416, 0.27102534134465606, 0.19420276785403945, 0.2106466483460333, 0.21609924553771886, 0.21865936866137115, 0.19942336325620613, 0.19992818874600515, 0.22012165266345995, 0.22047129251430908, 0.20264144394272843, 0.17846078304779545, 0.1670919486164204, 0.16948772177759397, 0.19789079487707772, 0.18739602891890272, 0.21248436430173734, 0.19680854691757366, 0.19347136104646756, 0.1996117624171143, 0.19157302908462193, 0.1795031124774974, 0.16748422674454322, 0.17485696335076772, 0.1674521025277338, 0.17864613860966239, 0.17405394585348788, 0.17287212898819704, 0.20918327772970524, 0.49351638612785065, 0.5177784133978938, 0.5018181354268495, 0.4411766774670386, 0.5363201119893296, 0.25352080073520933, 0.34431626211432054, 0.34290195823388314, 0.4197046084253888, 0.5176154810768474, 0.19829373069700906, 0.4460857881805007, 0.20316280306458157, 0.19402136445714402, 0.19581106550708438, 0.19723481931062292, 0.4052405331599702, 0.19999901508909101, 0.18244585976171768, 0.18787549271750603, 0.18793360143793192, 0.18288564613383895, 0.16587993267820256, 0.17247988765627564, 0.17864908377637367, 0.181015626488224, 0.18171765228272063, 0.07843538768256075, 0.07390688801020728, 0.07619973229891419, 0.08141340609310643, 0.08166124478834558, 0.07118041419326815, 0.07869950331220732, 0.07425819666944666, 0.07863276240738337]}, "mutation_prompt": null}
{"id": "f41f9192-659c-4d85-a209-60231efa807e", "solution": "import numpy as np\n\nclass HybridDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual):\n            return np.clip(individual + np.random.normal(0, self.sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial)\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "HybridDEGaussianOptimization", "description": "Hybrid Differential Evolution with Gaussian Mutation for Black Box Optimization", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "metadata": {"aucs": [0.42277686242099666, 0.40807483944642875, 0.4196101260442724, 0.40506646431934035, 0.41035383150425186, 0.394402654729453, 0.4311702970975688, 0.421671997528951, 0.3914034333715335, 0.04815075591079587, 0.055561651930536526, 0.030802594506479042, 0.03939192192266783, 0.03758064628524349, 0.030496771912297493, 0.03260146351849236, 0.037979580184863915, 0.06930097937382795, 0.0992053249056406, 0.10113968128179218, 0.0984632103186519, 0.09337367410984898, 0.09249168117796147, 0.10078445158129812, 0.10206632334103993, 0.10997933046490782, 0.09972067343348667, 0.09018843911071128, 0.09713435913317625, 0.08568434608898257, 0.08998915562530851, 0.07949112598460739, 0.08060187991636614, 0.0813921195967452, 0.08941411965697355, 0.09013098361106675, 0.8342616208890457, 0.755529659171358, 0.814043334114043, 0.8088694867703572, 0.8439678547820249, 0.8243311144801717, 0.7727632346964453, 0.8354909112792136, 0.831643825228024, 0.23624189159218512, 0.2557875351336202, 0.2500281733566798, 0.2596616510417451, 0.27400209234558015, 0.25094727230957037, 0.23081545176794493, 0.25984726438372996, 0.2499722706024522, 0.3344886680638195, 0.51187301127279, 0.5098814316175793, 0.3316178093667679, 0.31604524981314075, 0.31497640526639226, 0.3096123057695267, 0.3082702754091544, 0.3321273168890866, 0.14107649496913377, 0.1577124022064843, 0.1503016649166744, 0.14661359488900594, 0.14519257945729447, 0.12960703300857224, 0.14649769574890126, 0.14896288641416955, 0.14910080724222607, 0.1675464337958823, 0.15878707453796292, 0.1594107237373883, 0.15894878241857147, 0.15490732601391988, 0.1334389521558501, 0.12969438577825787, 0.1243977317593914, 0.14727930311537785, 0.01298170087753292, 0.02474603669530262, 0.005976497222138777, 0.01971855872885009, 0.012372021772717345, 0.025996879540060913, 0.015679630004583722, 0.014264596983566857, 0.00790125531866015, 0.10171594868750977, 0.07830762969675886, 0.08814997293661031, 0.1065754140700832, 0.06786320965604553, 0.10038129610285684, 0.16389484586908087, 0.0896047572129679, 0.09283736810552434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1031835804750677, 0.10930519954402806, 0.10537888833844677, 0.09860432130176833, 0.10053516495961778, 0.09759225922496173, 0.10446538965463492, 0.09980707091796448, 0.08020458246812145, 0.3977778678460291, 0.38611372094632346, 0.38100232508552945, 0.3838095695069945, 0.37708783412426694, 0.38021609905176124, 0.37707508598905815, 0.39495191710145616, 0.38779593570782056, 0.08495686485797538, 0.09791114247310473, 0.08907108106135786, 0.09153359451090348, 0.10769146743819147, 0.0883875326569249, 0.09594695336441872, 0.08327642540324398, 0.12283669973717948, 0.16599947619843047, 0.15418570219644012, 0.1424906871053796, 0.18163209360675658, 0.12509912169977944, 0.13344106866607108, 0.19719959791409225, 0.14750279071758765, 0.12345611322171568, 0.2697841365162511, 0.27044704268163144, 0.2727327598026411, 0.27469174725623324, 0.27133259296862566, 0.26817863811024745, 0.2869531823986857, 0.28877464136949416, 0.27102534134465606, 0.19420276785403945, 0.2106466483460333, 0.21609924553771886, 0.21865936866137115, 0.19942336325620613, 0.19992818874600515, 0.22012165266345995, 0.22047129251430908, 0.20264144394272843, 0.17846078304779545, 0.1670919486164204, 0.16948772177759397, 0.19789079487707772, 0.18739602891890272, 0.21248436430173734, 0.19680854691757366, 0.19347136104646756, 0.1996117624171143, 0.19157302908462193, 0.1795031124774974, 0.16748422674454322, 0.17485696335076772, 0.1674521025277338, 0.17864613860966239, 0.17405394585348788, 0.17287212898819704, 0.20918327772970524, 0.49351638612785065, 0.5177784133978938, 0.5018181354268495, 0.4411766774670386, 0.5363201119893296, 0.25352080073520933, 0.34431626211432054, 0.34290195823388314, 0.4197046084253888, 0.5176154810768474, 0.19829373069700906, 0.4460857881805007, 0.20316280306458157, 0.19402136445714402, 0.19581106550708438, 0.19723481931062292, 0.4052405331599702, 0.19999901508909101, 0.18244585976171768, 0.18787549271750603, 0.18793360143793192, 0.18288564613383895, 0.16587993267820256, 0.17247988765627564, 0.17864908377637367, 0.181015626488224, 0.18171765228272063, 0.07843538768256075, 0.07390688801020728, 0.07619973229891419, 0.08141340609310643, 0.08166124478834558, 0.07118041419326815, 0.07869950331220732, 0.07425819666944666, 0.07863276240738337]}, "mutation_prompt": null}
{"id": "8ea54d13-c2ff-40be-b311-62067ae408e6", "solution": "import numpy as np\n\nclass EnhancedHybridDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n        self.adaptive_sigma = 0.1  # initial mutation step size\n\n    def __call__(self, func):\n        def adaptive_gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = adaptive_gaussian_mutation(trial, self.adaptive_sigma)\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    self.adaptive_sigma *= 0.9  # decrease mutation step size if improvement\n                else:\n                    new_population[i] = population[i]\n                    self.adaptive_sigma *= 1.1  # increase mutation step size if no improvement\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EnhancedHybridDEGaussianOptimization", "description": "Enhanced Hybrid Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating adaptive mutation strategy", "configspace": "", "generation": 19, "fitness": 0.10199969092909998, "feedback": "The algorithm EnhancedHybridDEGaussianOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "metadata": {"aucs": [0.16278109935540253, 0.1465427065611018, 0.12225340298362952, 0.13154307623176087, 0.20021792681908956, 0.12832240539427053, 0.14064330472734232, 0.16275547654780897, 0.11884126850613519, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010306362149683279, 0.029663295664030365, 0.026359968547684187, 0.044217827935551623, 0.044777104776695165, 0.0229758523711322, 0.019514947798979665, 0.03344793757573061, 0.021680986326171325, 0.017684957098195064, 9.999999999998899e-05, 0.004806566866393913, 0.019837245668504533, 0.01947372877918807, 0.0115477953481804, 0.01881029919236521, 9.999999999998899e-05, 0.01459552295751565, 0.9316476428152634, 0.9487172156017706, 0.9396068659873712, 0.9384108158984155, 0.9528873891920165, 0.9098262600243001, 0.9391707150607478, 0.9524375674787441, 0.9305109193121642, 0.026597419761196228, 0.0503259939283065, 0.03630317630607238, 0.0640366097098255, 0.04214320794523152, 0.03919566636846061, 0.03715325827394356, 0.08993317373817022, 9.999999999998899e-05, 0.10021945114218322, 0.14106019968298023, 0.06341080277019662, 0.14896009727063808, 0.07435083957765021, 0.13628553412400202, 0.06964901204775165, 0.08838441155589682, 0.08187229295061993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010773995230470623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12776795169879118, 9.999999999998899e-05, 9.999999999998899e-05, 0.009955268065401257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033775866270208676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009426508565604674, 9.999999999998899e-05, 9.999999999998899e-05, 0.015661871774459324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17636086616895386, 0.1696011265370595, 0.14837203508527586, 0.15110477652471932, 0.1603221416944416, 0.17553344544741156, 0.17649567914941577, 0.16465476211852914, 0.16340415780675122, 0.023526489857028543, 0.05139134662407063, 0.038111789021862075, 0.02257696524839814, 0.0368779514793065, 0.030372513824352576, 0.032606061476003756, 0.015473237804594642, 0.02675766679738989, 0.09235132881901242, 0.10218339538388355, 0.1023015580520572, 0.09853387230302302, 0.10846971231796576, 0.09588644297558058, 0.11325467233369313, 0.11713344455042463, 0.07724840576714909, 0.136806732679153, 0.13254728872869714, 0.14415188258611145, 0.16974999283728032, 0.12451309908979546, 0.1249771702925686, 0.14762045828729387, 0.17365553241598441, 0.12899645707411544, 0.06850986424692618, 0.05213481082740057, 0.06013959805881963, 0.10627433937782749, 0.07613142292476915, 0.06339043166318259, 0.17723195956172622, 0.09971238713157837, 0.08122091407877774, 0.13162473766292337, 0.12663557518432167, 0.13339123429062527, 0.13734139368482634, 0.11636989339430615, 0.10973701864266228, 0.14284187689857464, 0.14210498403445504, 0.13127553240817325, 0.13833221719388744, 0.15203515977823479, 9.999999999998899e-05, 0.1405967707232859, 9.999999999998899e-05, 0.09385164548043012, 0.14735359158363626, 0.1516377380763997, 0.12975439401779298, 0.0822498868623559, 0.11006124938121542, 0.09702877064467608, 0.13945906900860028, 0.1207717246757668, 0.11317817378408868, 0.09389572016265502, 0.1089171506897677, 0.10742411278061936, 0.11019488864463178, 0.10048988128823944, 0.08695415770371251, 0.0900657230995714, 0.1453176240523657, 0.05079168758334762, 0.10975396952568739, 0.05224710996302073, 0.09303993660432519, 0.15260056855637083, 0.16511823903794087, 0.15067926586015323, 0.1567289535658556, 0.18421332039363314, 0.14968994560405058, 0.14960665264729045, 0.1513102102244076, 0.14999962478879603, 0.030157444643160836, 0.02268949512810503, 0.03516415491104197, 0.04249315387175845, 0.03944675321005142, 0.05473408690461545, 0.029455564129396095, 0.041976233023769405, 0.030215721334257095]}, "mutation_prompt": null}
{"id": "3881635c-862a-4812-83bf-f68b78c67d51", "solution": "import numpy as np\n\nclass HybridDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual):\n            return np.clip(individual + np.random.normal(0, self.sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial)\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "HybridDEGaussianOptimization", "description": "Hybrid Differential Evolution with Gaussian Mutation for Black Box Optimization", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "metadata": {"aucs": [0.42277686242099666, 0.40807483944642875, 0.4196101260442724, 0.40506646431934035, 0.41035383150425186, 0.394402654729453, 0.4311702970975688, 0.421671997528951, 0.3914034333715335, 0.04815075591079587, 0.055561651930536526, 0.030802594506479042, 0.03939192192266783, 0.03758064628524349, 0.030496771912297493, 0.03260146351849236, 0.037979580184863915, 0.06930097937382795, 0.0992053249056406, 0.10113968128179218, 0.0984632103186519, 0.09337367410984898, 0.09249168117796147, 0.10078445158129812, 0.10206632334103993, 0.10997933046490782, 0.09972067343348667, 0.09018843911071128, 0.09713435913317625, 0.08568434608898257, 0.08998915562530851, 0.07949112598460739, 0.08060187991636614, 0.0813921195967452, 0.08941411965697355, 0.09013098361106675, 0.8342616208890457, 0.755529659171358, 0.814043334114043, 0.8088694867703572, 0.8439678547820249, 0.8243311144801717, 0.7727632346964453, 0.8354909112792136, 0.831643825228024, 0.23624189159218512, 0.2557875351336202, 0.2500281733566798, 0.2596616510417451, 0.27400209234558015, 0.25094727230957037, 0.23081545176794493, 0.25984726438372996, 0.2499722706024522, 0.3344886680638195, 0.51187301127279, 0.5098814316175793, 0.3316178093667679, 0.31604524981314075, 0.31497640526639226, 0.3096123057695267, 0.3082702754091544, 0.3321273168890866, 0.14107649496913377, 0.1577124022064843, 0.1503016649166744, 0.14661359488900594, 0.14519257945729447, 0.12960703300857224, 0.14649769574890126, 0.14896288641416955, 0.14910080724222607, 0.1675464337958823, 0.15878707453796292, 0.1594107237373883, 0.15894878241857147, 0.15490732601391988, 0.1334389521558501, 0.12969438577825787, 0.1243977317593914, 0.14727930311537785, 0.01298170087753292, 0.02474603669530262, 0.005976497222138777, 0.01971855872885009, 0.012372021772717345, 0.025996879540060913, 0.015679630004583722, 0.014264596983566857, 0.00790125531866015, 0.10171594868750977, 0.07830762969675886, 0.08814997293661031, 0.1065754140700832, 0.06786320965604553, 0.10038129610285684, 0.16389484586908087, 0.0896047572129679, 0.09283736810552434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1031835804750677, 0.10930519954402806, 0.10537888833844677, 0.09860432130176833, 0.10053516495961778, 0.09759225922496173, 0.10446538965463492, 0.09980707091796448, 0.08020458246812145, 0.3977778678460291, 0.38611372094632346, 0.38100232508552945, 0.3838095695069945, 0.37708783412426694, 0.38021609905176124, 0.37707508598905815, 0.39495191710145616, 0.38779593570782056, 0.08495686485797538, 0.09791114247310473, 0.08907108106135786, 0.09153359451090348, 0.10769146743819147, 0.0883875326569249, 0.09594695336441872, 0.08327642540324398, 0.12283669973717948, 0.16599947619843047, 0.15418570219644012, 0.1424906871053796, 0.18163209360675658, 0.12509912169977944, 0.13344106866607108, 0.19719959791409225, 0.14750279071758765, 0.12345611322171568, 0.2697841365162511, 0.27044704268163144, 0.2727327598026411, 0.27469174725623324, 0.27133259296862566, 0.26817863811024745, 0.2869531823986857, 0.28877464136949416, 0.27102534134465606, 0.19420276785403945, 0.2106466483460333, 0.21609924553771886, 0.21865936866137115, 0.19942336325620613, 0.19992818874600515, 0.22012165266345995, 0.22047129251430908, 0.20264144394272843, 0.17846078304779545, 0.1670919486164204, 0.16948772177759397, 0.19789079487707772, 0.18739602891890272, 0.21248436430173734, 0.19680854691757366, 0.19347136104646756, 0.1996117624171143, 0.19157302908462193, 0.1795031124774974, 0.16748422674454322, 0.17485696335076772, 0.1674521025277338, 0.17864613860966239, 0.17405394585348788, 0.17287212898819704, 0.20918327772970524, 0.49351638612785065, 0.5177784133978938, 0.5018181354268495, 0.4411766774670386, 0.5363201119893296, 0.25352080073520933, 0.34431626211432054, 0.34290195823388314, 0.4197046084253888, 0.5176154810768474, 0.19829373069700906, 0.4460857881805007, 0.20316280306458157, 0.19402136445714402, 0.19581106550708438, 0.19723481931062292, 0.4052405331599702, 0.19999901508909101, 0.18244585976171768, 0.18787549271750603, 0.18793360143793192, 0.18288564613383895, 0.16587993267820256, 0.17247988765627564, 0.17864908377637367, 0.181015626488224, 0.18171765228272063, 0.07843538768256075, 0.07390688801020728, 0.07619973229891419, 0.08141340609310643, 0.08166124478834558, 0.07118041419326815, 0.07869950331220732, 0.07425819666944666, 0.07863276240738337]}, "mutation_prompt": null}
{"id": "fe32e91b-aa36-4f7e-8307-519578ca69b8", "solution": "import numpy as np\n\nclass HybridDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual):\n            return np.clip(individual + np.random.normal(0, self.sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial)\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "HybridDEGaussianOptimization", "description": "Hybrid Differential Evolution with Gaussian Mutation for Black Box Optimization", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "metadata": {"aucs": [0.42277686242099666, 0.40807483944642875, 0.4196101260442724, 0.40506646431934035, 0.41035383150425186, 0.394402654729453, 0.4311702970975688, 0.421671997528951, 0.3914034333715335, 0.04815075591079587, 0.055561651930536526, 0.030802594506479042, 0.03939192192266783, 0.03758064628524349, 0.030496771912297493, 0.03260146351849236, 0.037979580184863915, 0.06930097937382795, 0.0992053249056406, 0.10113968128179218, 0.0984632103186519, 0.09337367410984898, 0.09249168117796147, 0.10078445158129812, 0.10206632334103993, 0.10997933046490782, 0.09972067343348667, 0.09018843911071128, 0.09713435913317625, 0.08568434608898257, 0.08998915562530851, 0.07949112598460739, 0.08060187991636614, 0.0813921195967452, 0.08941411965697355, 0.09013098361106675, 0.8342616208890457, 0.755529659171358, 0.814043334114043, 0.8088694867703572, 0.8439678547820249, 0.8243311144801717, 0.7727632346964453, 0.8354909112792136, 0.831643825228024, 0.23624189159218512, 0.2557875351336202, 0.2500281733566798, 0.2596616510417451, 0.27400209234558015, 0.25094727230957037, 0.23081545176794493, 0.25984726438372996, 0.2499722706024522, 0.3344886680638195, 0.51187301127279, 0.5098814316175793, 0.3316178093667679, 0.31604524981314075, 0.31497640526639226, 0.3096123057695267, 0.3082702754091544, 0.3321273168890866, 0.14107649496913377, 0.1577124022064843, 0.1503016649166744, 0.14661359488900594, 0.14519257945729447, 0.12960703300857224, 0.14649769574890126, 0.14896288641416955, 0.14910080724222607, 0.1675464337958823, 0.15878707453796292, 0.1594107237373883, 0.15894878241857147, 0.15490732601391988, 0.1334389521558501, 0.12969438577825787, 0.1243977317593914, 0.14727930311537785, 0.01298170087753292, 0.02474603669530262, 0.005976497222138777, 0.01971855872885009, 0.012372021772717345, 0.025996879540060913, 0.015679630004583722, 0.014264596983566857, 0.00790125531866015, 0.10171594868750977, 0.07830762969675886, 0.08814997293661031, 0.1065754140700832, 0.06786320965604553, 0.10038129610285684, 0.16389484586908087, 0.0896047572129679, 0.09283736810552434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1031835804750677, 0.10930519954402806, 0.10537888833844677, 0.09860432130176833, 0.10053516495961778, 0.09759225922496173, 0.10446538965463492, 0.09980707091796448, 0.08020458246812145, 0.3977778678460291, 0.38611372094632346, 0.38100232508552945, 0.3838095695069945, 0.37708783412426694, 0.38021609905176124, 0.37707508598905815, 0.39495191710145616, 0.38779593570782056, 0.08495686485797538, 0.09791114247310473, 0.08907108106135786, 0.09153359451090348, 0.10769146743819147, 0.0883875326569249, 0.09594695336441872, 0.08327642540324398, 0.12283669973717948, 0.16599947619843047, 0.15418570219644012, 0.1424906871053796, 0.18163209360675658, 0.12509912169977944, 0.13344106866607108, 0.19719959791409225, 0.14750279071758765, 0.12345611322171568, 0.2697841365162511, 0.27044704268163144, 0.2727327598026411, 0.27469174725623324, 0.27133259296862566, 0.26817863811024745, 0.2869531823986857, 0.28877464136949416, 0.27102534134465606, 0.19420276785403945, 0.2106466483460333, 0.21609924553771886, 0.21865936866137115, 0.19942336325620613, 0.19992818874600515, 0.22012165266345995, 0.22047129251430908, 0.20264144394272843, 0.17846078304779545, 0.1670919486164204, 0.16948772177759397, 0.19789079487707772, 0.18739602891890272, 0.21248436430173734, 0.19680854691757366, 0.19347136104646756, 0.1996117624171143, 0.19157302908462193, 0.1795031124774974, 0.16748422674454322, 0.17485696335076772, 0.1674521025277338, 0.17864613860966239, 0.17405394585348788, 0.17287212898819704, 0.20918327772970524, 0.49351638612785065, 0.5177784133978938, 0.5018181354268495, 0.4411766774670386, 0.5363201119893296, 0.25352080073520933, 0.34431626211432054, 0.34290195823388314, 0.4197046084253888, 0.5176154810768474, 0.19829373069700906, 0.4460857881805007, 0.20316280306458157, 0.19402136445714402, 0.19581106550708438, 0.19723481931062292, 0.4052405331599702, 0.19999901508909101, 0.18244585976171768, 0.18787549271750603, 0.18793360143793192, 0.18288564613383895, 0.16587993267820256, 0.17247988765627564, 0.17864908377637367, 0.181015626488224, 0.18171765228272063, 0.07843538768256075, 0.07390688801020728, 0.07619973229891419, 0.08141340609310643, 0.08166124478834558, 0.07118041419326815, 0.07869950331220732, 0.07425819666944666, 0.07863276240738337]}, "mutation_prompt": null}
{"id": "c73dd4aa-f038-468b-9bd9-d362b849267a", "solution": "import numpy as np\n\nclass RefinedHybridDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1, beta=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n        self.beta = beta\n\n    def __call__(self, func):\n        def gaussian_mutation(individual):\n            return np.clip(individual + np.random.normal(0, self.sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial)\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                else:\n                    if np.random.rand() < self.beta:\n                        new_population[i] = mutated_trial\n                    else:\n                        new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "RefinedHybridDEGaussianOptimization", "description": "Hybrid Differential Evolution with Gaussian Mutation for Black Box Optimization enhanced with refined mutation strategy and adaptive control parameters.", "configspace": "", "generation": 22, "fitness": 0.08059381628180501, "feedback": "The algorithm RefinedHybridDEGaussianOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "metadata": {"aucs": [0.14649597787373425, 0.15035975642376853, 0.15678940520489681, 0.14602383413587117, 0.16140101669192541, 0.1467372427780359, 0.13523243423499898, 0.15434960541057408, 0.1708654643848787, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03120362410133526, 0.03798859739770466, 0.03370946756852322, 0.047049035630486236, 0.029631611940988845, 0.03827649288793089, 0.03435017489115011, 0.03728671947731621, 0.02212341376940208, 0.04672392129868863, 0.0198076441909123, 0.0258851738357202, 0.026033913407145892, 0.013715943952941956, 0.01600988197156561, 0.02769405390189783, 0.02630778104754694, 0.0173610357660815, 0.13189369973959242, 0.13716955236500017, 0.11062712283935383, 0.15283409254012692, 0.18552662017019883, 0.14355221123908746, 0.14336498733906466, 0.15342741385170944, 0.14224524297781937, 0.07881683869815514, 0.053240075990007796, 0.07429833950057141, 0.052705223893342534, 0.03848623142618979, 0.0680764108458185, 0.054612840378814864, 0.04821322649235649, 0.053162191498917544, 0.10140637366848437, 0.09335762893444266, 0.12389839415537185, 0.10866054714742857, 0.09721410411403708, 0.13324116465517, 0.0934179557715541, 0.09741790986087906, 0.10070835622069207, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006040294565214932, 9.999999999998899e-05, 0.00023056419353473245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028147392363386814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017866475478345856, 0.029359337820371922, 0.053684301137086554, 0.06060698260889641, 0.052980869427699195, 0.04806585356263293, 0.03792039511193923, 0.028436293741754493, 0.0727709507540738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00702828274820444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18358584223667318, 0.1649042001603429, 0.1876435568886189, 0.17318928355327223, 0.18076521678750546, 0.1767707556258682, 0.2108156606696996, 0.169704029382573, 0.16915934518675657, 0.05588517342425481, 0.033051083292102934, 0.047854846821163255, 0.029442247404008248, 0.025994877643562342, 0.0330917939387988, 0.029167932785847173, 0.04686059369209883, 0.026864443183428954, 0.12985751748840046, 0.14116357732906581, 0.1314326158479704, 0.16459995452289855, 0.13574287406812113, 0.10986842632302196, 0.11733786264750601, 0.1181631144844143, 0.11304821700402268, 0.16334441070328298, 0.1703314313352734, 0.1536893489835085, 0.15298595574412632, 0.164655705406197, 0.1454387398018112, 0.15336554888713816, 0.17364167555110122, 0.1516996726596117, 0.09831121327988601, 0.08864174925651291, 0.10140413097273071, 0.10113080935636731, 0.10067263568819906, 0.09727019976994311, 0.10540151943756682, 0.0996982124446335, 0.09265773662118915, 0.13655443908276554, 0.13242465898256983, 0.15129217381636195, 0.14723312041732128, 0.1311495604029127, 0.1383723789210335, 0.16422509789552042, 0.1462189095579921, 0.15204354478219428, 0.14830532744087344, 0.1362642865240914, 0.13860857590882225, 0.12506759393862354, 0.1273121799272975, 0.13662998841773566, 0.15298100091015765, 0.08009689785961038, 0.13727993367836022, 0.13065780862613918, 0.149043549180236, 0.12783911684170635, 0.11556652521491195, 0.1560222335046696, 0.12227344224610914, 0.15032053633182896, 0.15207209854112103, 0.12269768647814927, 0.16679822102156328, 0.1269557897738357, 0.1360856308899283, 0.13779397027083817, 0.14501211209400766, 0.11016013785702472, 0.1073748185479837, 0.12478449968932148, 0.12576609119160498, 0.18157447028624274, 0.18602957547673293, 0.17100317512857433, 0.1805535921798881, 0.17337951076332958, 0.18762758988778216, 0.17755616898450644, 0.1786547065676698, 0.17987721921522093, 0.050363651987315294, 0.04263772282106948, 0.04045758516995024, 0.04010900545678231, 0.04782162901442566, 0.04010485682166687, 0.049877436358522376, 0.033828282725353875, 0.05139467251364638]}, "mutation_prompt": null}
{"id": "2d77e449-0c1e-4fd3-aff6-030d7a4c66a9", "solution": "import numpy as np\n\nclass EvoOrthogonalCauchyOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, cauchy_scale=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.cauchy_scale = cauchy_scale\n\n    def __call__(self, func):\n        def cauchy_mutation(individual):\n            return np.clip(individual + self.cauchy_scale * np.tan(np.pi * (np.random.rand(self.dim) - 0.5)), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                orthogonal_vector = np.linalg.qr(np.random.randn(self.dim, self.dim))[0][:, 0]\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = cauchy_mutation(trial)\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvoOrthogonalCauchyOptimization", "description": "Evolutionary Algorithm with Orthogonal Crossover and Cauchy Mutation for Black Box Optimization", "configspace": "", "generation": 23, "fitness": 0.18487597083012391, "feedback": "The algorithm EvoOrthogonalCauchyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "metadata": {"aucs": [0.3675461380956856, 0.3564115423315043, 0.38189802772001435, 0.3548112588331236, 0.40846893580664556, 0.39740756864716953, 0.39681711997587976, 0.3468192668109964, 0.3958405086503636, 0.025857027607436245, 0.014224312205420198, 0.019167658425320422, 0.024070143080963335, 0.013902651860844717, 0.018239987347498543, 0.015376041363331039, 0.011561680258598384, 0.028274311013566922, 0.08757172670137991, 0.08964785010844878, 0.09573165926591898, 0.08635343053724032, 0.08504088319859171, 0.08298015393613623, 0.08544081338173637, 0.0870897280579126, 0.08600949841193506, 0.08540781875072678, 0.07909017981531452, 0.08456527827423399, 0.08810559183867261, 0.08545231680852539, 0.08691160284094313, 0.0810286682527811, 0.08359250265166174, 0.07790425619110741, 0.9199277077982673, 0.8504078778265356, 0.9152044737946259, 0.8307971313596293, 0.8370572310759933, 0.8721162991844298, 0.8233798344806806, 0.8685477843701214, 0.8802351015788212, 0.21307028859921073, 0.20285138296611183, 0.209794268096552, 0.19940222515497164, 0.17163433383360438, 0.20571962904398766, 0.19440866047932148, 0.1949907677280297, 0.19267574983692592, 0.25535745168156265, 0.2638600733744556, 0.26429395524559185, 0.2711357152046845, 0.2770673722255276, 0.260846946948075, 0.2995359475625824, 0.2531192035937876, 0.25773197538795733, 0.11922698206861582, 0.10573622116269488, 0.11470075421062198, 0.11719749100491406, 0.11154815667402596, 0.12019173104345682, 0.13048135622874613, 0.12198264017801264, 0.12487179327523479, 0.1385879024573996, 0.11585006206716153, 0.12493679087026843, 0.13679273936749736, 0.12105378476524242, 0.12764136128740267, 0.1284465941650762, 0.1267353168779073, 0.12250095035826158, 0.0007663147597964937, 0.015023843530798109, 0.03342276768051555, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011556713815702446, 0.001990041150650157, 9.999999999998899e-05, 9.999999999998899e-05, 0.07858172335986313, 0.09740823965130785, 0.1281756959292577, 0.05732645474441145, 0.08029706062115927, 0.03720814643400405, 0.08502065744055365, 0.06008960224381099, 0.07243439561197096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061153468287568624, 0.0738529688698143, 0.0813586550621117, 0.0713914174860798, 0.0832347248834221, 0.06226328470618281, 0.06453685112831375, 0.07652468208259611, 0.06660883903673243, 0.3775734422895123, 0.35363273639518533, 0.3424064654460186, 0.34644791889777393, 0.3323763929760718, 0.3871211518310209, 0.3496395447905022, 0.3597380623988998, 0.33672724928828257, 0.07888308298784852, 0.08678191586783401, 0.07620814777189067, 0.07300803360394204, 0.11521309929528634, 0.07933527610219548, 0.08377796538848814, 0.08902443351558209, 0.09536031274653467, 0.11514536744846227, 0.1427108430075903, 0.1268432929961909, 0.11246836479124211, 0.1293218045866752, 0.14770521928772928, 0.1281261393779719, 0.11368014665561477, 0.13225256271095254, 0.2514386179392062, 0.24350084521319493, 0.24112789403005852, 0.2311307982617189, 0.2447988108821889, 0.25096996033480345, 0.25752107313734407, 0.252776383803495, 0.248451484112736, 0.19421236306110767, 0.1819189703175622, 0.16770550446561827, 0.1854254241382487, 0.19376088062357733, 0.18102880761669293, 0.18313204904754243, 0.1898824170861656, 0.19168222942655577, 0.199643805064588, 0.187109552037397, 0.18407811399666407, 0.17753356814105103, 0.19867774803127602, 0.1830796205700207, 0.18463196518809533, 0.17964937317512375, 0.17569205400787213, 0.17122656577862194, 0.1655751421675623, 0.16701943737225633, 0.17140822110151477, 0.16887688059987138, 0.17152416855523678, 0.17098915697403283, 0.17515133130331995, 0.1750310409544067, 0.44520556055081206, 0.40948618268946224, 0.1614004514820685, 0.44631371074161685, 0.1771648833793792, 0.4124998500206155, 0.37151119072860006, 0.213940903762035, 0.163077289095246, 0.400305389624554, 0.1602278412479622, 0.19176240162136904, 0.2874538241057879, 0.16176798686291582, 0.19787110981926748, 0.1520583692038674, 0.15208692885281927, 0.2041065697671396, 0.17544248132206408, 0.178286860762495, 0.18113611791653006, 0.17715459816080414, 0.19866706517462673, 0.1737910981461489, 0.19240483035793, 0.18673719554743673, 0.18347624574573684, 0.07392768189915622, 0.06471056496873895, 0.08180725140698086, 0.0753818731388981, 0.07532326343723794, 0.06730084086060217, 0.07473340622680158, 0.09068849931583611, 0.06573248875648818]}, "mutation_prompt": null}
{"id": "b7445e1d-4d82-480c-ac03-e45c4df91e89", "solution": "import numpy as np\n\nclass HybridDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual):\n            return np.clip(individual + np.random.normal(0, self.sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial)\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "HybridDEGaussianOptimization", "description": "Hybrid Differential Evolution with Gaussian Mutation for Black Box Optimization", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "metadata": {"aucs": [0.42277686242099666, 0.40807483944642875, 0.4196101260442724, 0.40506646431934035, 0.41035383150425186, 0.394402654729453, 0.4311702970975688, 0.421671997528951, 0.3914034333715335, 0.04815075591079587, 0.055561651930536526, 0.030802594506479042, 0.03939192192266783, 0.03758064628524349, 0.030496771912297493, 0.03260146351849236, 0.037979580184863915, 0.06930097937382795, 0.0992053249056406, 0.10113968128179218, 0.0984632103186519, 0.09337367410984898, 0.09249168117796147, 0.10078445158129812, 0.10206632334103993, 0.10997933046490782, 0.09972067343348667, 0.09018843911071128, 0.09713435913317625, 0.08568434608898257, 0.08998915562530851, 0.07949112598460739, 0.08060187991636614, 0.0813921195967452, 0.08941411965697355, 0.09013098361106675, 0.8342616208890457, 0.755529659171358, 0.814043334114043, 0.8088694867703572, 0.8439678547820249, 0.8243311144801717, 0.7727632346964453, 0.8354909112792136, 0.831643825228024, 0.23624189159218512, 0.2557875351336202, 0.2500281733566798, 0.2596616510417451, 0.27400209234558015, 0.25094727230957037, 0.23081545176794493, 0.25984726438372996, 0.2499722706024522, 0.3344886680638195, 0.51187301127279, 0.5098814316175793, 0.3316178093667679, 0.31604524981314075, 0.31497640526639226, 0.3096123057695267, 0.3082702754091544, 0.3321273168890866, 0.14107649496913377, 0.1577124022064843, 0.1503016649166744, 0.14661359488900594, 0.14519257945729447, 0.12960703300857224, 0.14649769574890126, 0.14896288641416955, 0.14910080724222607, 0.1675464337958823, 0.15878707453796292, 0.1594107237373883, 0.15894878241857147, 0.15490732601391988, 0.1334389521558501, 0.12969438577825787, 0.1243977317593914, 0.14727930311537785, 0.01298170087753292, 0.02474603669530262, 0.005976497222138777, 0.01971855872885009, 0.012372021772717345, 0.025996879540060913, 0.015679630004583722, 0.014264596983566857, 0.00790125531866015, 0.10171594868750977, 0.07830762969675886, 0.08814997293661031, 0.1065754140700832, 0.06786320965604553, 0.10038129610285684, 0.16389484586908087, 0.0896047572129679, 0.09283736810552434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1031835804750677, 0.10930519954402806, 0.10537888833844677, 0.09860432130176833, 0.10053516495961778, 0.09759225922496173, 0.10446538965463492, 0.09980707091796448, 0.08020458246812145, 0.3977778678460291, 0.38611372094632346, 0.38100232508552945, 0.3838095695069945, 0.37708783412426694, 0.38021609905176124, 0.37707508598905815, 0.39495191710145616, 0.38779593570782056, 0.08495686485797538, 0.09791114247310473, 0.08907108106135786, 0.09153359451090348, 0.10769146743819147, 0.0883875326569249, 0.09594695336441872, 0.08327642540324398, 0.12283669973717948, 0.16599947619843047, 0.15418570219644012, 0.1424906871053796, 0.18163209360675658, 0.12509912169977944, 0.13344106866607108, 0.19719959791409225, 0.14750279071758765, 0.12345611322171568, 0.2697841365162511, 0.27044704268163144, 0.2727327598026411, 0.27469174725623324, 0.27133259296862566, 0.26817863811024745, 0.2869531823986857, 0.28877464136949416, 0.27102534134465606, 0.19420276785403945, 0.2106466483460333, 0.21609924553771886, 0.21865936866137115, 0.19942336325620613, 0.19992818874600515, 0.22012165266345995, 0.22047129251430908, 0.20264144394272843, 0.17846078304779545, 0.1670919486164204, 0.16948772177759397, 0.19789079487707772, 0.18739602891890272, 0.21248436430173734, 0.19680854691757366, 0.19347136104646756, 0.1996117624171143, 0.19157302908462193, 0.1795031124774974, 0.16748422674454322, 0.17485696335076772, 0.1674521025277338, 0.17864613860966239, 0.17405394585348788, 0.17287212898819704, 0.20918327772970524, 0.49351638612785065, 0.5177784133978938, 0.5018181354268495, 0.4411766774670386, 0.5363201119893296, 0.25352080073520933, 0.34431626211432054, 0.34290195823388314, 0.4197046084253888, 0.5176154810768474, 0.19829373069700906, 0.4460857881805007, 0.20316280306458157, 0.19402136445714402, 0.19581106550708438, 0.19723481931062292, 0.4052405331599702, 0.19999901508909101, 0.18244585976171768, 0.18787549271750603, 0.18793360143793192, 0.18288564613383895, 0.16587993267820256, 0.17247988765627564, 0.17864908377637367, 0.181015626488224, 0.18171765228272063, 0.07843538768256075, 0.07390688801020728, 0.07619973229891419, 0.08141340609310643, 0.08166124478834558, 0.07118041419326815, 0.07869950331220732, 0.07425819666944666, 0.07863276240738337]}, "mutation_prompt": null}
{"id": "47d4af7a-96d7-4413-8d1c-7323748acad9", "solution": "import numpy as np\n\nclass EnhancedHybridDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual):\n            return np.clip(individual + np.random.normal(0, self.sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial)\n\n                new_population[i] = mutated_trial if func(mutated_trial) < func(population[i]) else population[i]\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EnhancedHybridDEGaussianOptimization", "description": "Enhancing Hybrid Differential Evolution with Gaussian Mutation for Black Box Optimization through individual line refinement.", "configspace": "", "generation": 25, "fitness": 0.20972150069252044, "feedback": "The algorithm EnhancedHybridDEGaussianOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "metadata": {"aucs": [0.42277686242099666, 0.40807483944642875, 0.4196101260442724, 0.40506646431934035, 0.41035383150425186, 0.394402654729453, 0.4311702970975688, 0.421671997528951, 0.3914034333715335, 0.04815075591079587, 0.055561651930536526, 0.030802594506479042, 0.03939192192266783, 0.03758064628524349, 0.030496771912297493, 0.03260146351849236, 0.037979580184863915, 0.06930097937382795, 0.0992053249056406, 0.10113968128179218, 0.0984632103186519, 0.09337367410984898, 0.09249168117796147, 0.10078445158129812, 0.10206632334103993, 0.10997933046490782, 0.09972067343348667, 0.09018843911071128, 0.09713435913317625, 0.08568434608898257, 0.08998915562530851, 0.07949112598460739, 0.08060187991636614, 0.0813921195967452, 0.08941411965697355, 0.09013098361106675, 0.8342616208890457, 0.755529659171358, 0.814043334114043, 0.8088694867703572, 0.8439678547820249, 0.8243311144801717, 0.7727632346964453, 0.8354909112792136, 0.831643825228024, 0.23624189159218512, 0.2557875351336202, 0.2500281733566798, 0.2596616510417451, 0.27400209234558015, 0.25094727230957037, 0.23081545176794493, 0.25984726438372996, 0.2499722706024522, 0.3344886680638195, 0.51187301127279, 0.5098814316175793, 0.3316178093667679, 0.31604524981314075, 0.31497640526639226, 0.3096123057695267, 0.3082702754091544, 0.3321273168890866, 0.14107649496913377, 0.1577124022064843, 0.1503016649166744, 0.14661359488900594, 0.14519257945729447, 0.12960703300857224, 0.14649769574890126, 0.14896288641416955, 0.14910080724222607, 0.1675464337958823, 0.15878707453796292, 0.1594107237373883, 0.15894878241857147, 0.15490732601391988, 0.1334389521558501, 0.12969438577825787, 0.1243977317593914, 0.14727930311537785, 0.01298170087753292, 0.02474603669530262, 0.005976497222138777, 0.01971855872885009, 0.012372021772717345, 0.025996879540060913, 0.015679630004583722, 0.014264596983566857, 0.00790125531866015, 0.10171594868750977, 0.07830762969675886, 0.08814997293661031, 0.1065754140700832, 0.06786320965604553, 0.10038129610285684, 0.16389484586908087, 0.0896047572129679, 0.09283736810552434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1031835804750677, 0.10930519954402806, 0.10537888833844677, 0.09860432130176833, 0.10053516495961778, 0.09759225922496173, 0.10446538965463492, 0.09980707091796448, 0.08020458246812145, 0.3977778678460291, 0.38611372094632346, 0.38100232508552945, 0.3838095695069945, 0.37708783412426694, 0.38021609905176124, 0.37707508598905815, 0.39495191710145616, 0.38779593570782056, 0.08495686485797538, 0.09791114247310473, 0.08907108106135786, 0.09153359451090348, 0.10769146743819147, 0.0883875326569249, 0.09594695336441872, 0.08327642540324398, 0.12283669973717948, 0.16599947619843047, 0.15418570219644012, 0.1424906871053796, 0.18163209360675658, 0.12509912169977944, 0.13344106866607108, 0.19719959791409225, 0.14750279071758765, 0.12345611322171568, 0.2697841365162511, 0.27044704268163144, 0.2727327598026411, 0.27469174725623324, 0.27133259296862566, 0.26817863811024745, 0.2869531823986857, 0.28877464136949416, 0.27102534134465606, 0.19420276785403945, 0.2106466483460333, 0.21609924553771886, 0.21865936866137115, 0.19942336325620613, 0.19992818874600515, 0.22012165266345995, 0.22047129251430908, 0.20264144394272843, 0.17846078304779545, 0.1670919486164204, 0.16948772177759397, 0.19789079487707772, 0.18739602891890272, 0.21248436430173734, 0.19680854691757366, 0.19347136104646756, 0.1996117624171143, 0.19157302908462193, 0.1795031124774974, 0.16748422674454322, 0.17485696335076772, 0.1674521025277338, 0.17864613860966239, 0.17405394585348788, 0.17287212898819704, 0.20918327772970524, 0.49351638612785065, 0.5177784133978938, 0.5018181354268495, 0.4411766774670386, 0.5363201119893296, 0.25352080073520933, 0.34431626211432054, 0.34290195823388314, 0.4197046084253888, 0.5176154810768474, 0.19829373069700906, 0.4460857881805007, 0.20316280306458157, 0.19402136445714402, 0.19581106550708438, 0.19723481931062292, 0.4052405331599702, 0.19999901508909101, 0.18244585976171768, 0.18787549271750603, 0.18793360143793192, 0.18288564613383895, 0.16587993267820256, 0.17247988765627564, 0.17864908377637367, 0.181015626488224, 0.18171765228272063, 0.07843538768256075, 0.07390688801020728, 0.07619973229891419, 0.08141340609310643, 0.08166124478834558, 0.07118041419326815, 0.07869950331220732, 0.07425819666944666, 0.07863276240738337]}, "mutation_prompt": null}
{"id": "67f370b7-ca86-4f34-b681-4986438b0b0f", "solution": "import numpy as np\n\nclass HybridDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual):\n            return np.clip(individual + np.random.normal(0, self.sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial)\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "HybridDEGaussianOptimization", "description": "Hybrid Differential Evolution with Gaussian Mutation for Black Box Optimization", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "metadata": {"aucs": [0.42277686242099666, 0.40807483944642875, 0.4196101260442724, 0.40506646431934035, 0.41035383150425186, 0.394402654729453, 0.4311702970975688, 0.421671997528951, 0.3914034333715335, 0.04815075591079587, 0.055561651930536526, 0.030802594506479042, 0.03939192192266783, 0.03758064628524349, 0.030496771912297493, 0.03260146351849236, 0.037979580184863915, 0.06930097937382795, 0.0992053249056406, 0.10113968128179218, 0.0984632103186519, 0.09337367410984898, 0.09249168117796147, 0.10078445158129812, 0.10206632334103993, 0.10997933046490782, 0.09972067343348667, 0.09018843911071128, 0.09713435913317625, 0.08568434608898257, 0.08998915562530851, 0.07949112598460739, 0.08060187991636614, 0.0813921195967452, 0.08941411965697355, 0.09013098361106675, 0.8342616208890457, 0.755529659171358, 0.814043334114043, 0.8088694867703572, 0.8439678547820249, 0.8243311144801717, 0.7727632346964453, 0.8354909112792136, 0.831643825228024, 0.23624189159218512, 0.2557875351336202, 0.2500281733566798, 0.2596616510417451, 0.27400209234558015, 0.25094727230957037, 0.23081545176794493, 0.25984726438372996, 0.2499722706024522, 0.3344886680638195, 0.51187301127279, 0.5098814316175793, 0.3316178093667679, 0.31604524981314075, 0.31497640526639226, 0.3096123057695267, 0.3082702754091544, 0.3321273168890866, 0.14107649496913377, 0.1577124022064843, 0.1503016649166744, 0.14661359488900594, 0.14519257945729447, 0.12960703300857224, 0.14649769574890126, 0.14896288641416955, 0.14910080724222607, 0.1675464337958823, 0.15878707453796292, 0.1594107237373883, 0.15894878241857147, 0.15490732601391988, 0.1334389521558501, 0.12969438577825787, 0.1243977317593914, 0.14727930311537785, 0.01298170087753292, 0.02474603669530262, 0.005976497222138777, 0.01971855872885009, 0.012372021772717345, 0.025996879540060913, 0.015679630004583722, 0.014264596983566857, 0.00790125531866015, 0.10171594868750977, 0.07830762969675886, 0.08814997293661031, 0.1065754140700832, 0.06786320965604553, 0.10038129610285684, 0.16389484586908087, 0.0896047572129679, 0.09283736810552434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1031835804750677, 0.10930519954402806, 0.10537888833844677, 0.09860432130176833, 0.10053516495961778, 0.09759225922496173, 0.10446538965463492, 0.09980707091796448, 0.08020458246812145, 0.3977778678460291, 0.38611372094632346, 0.38100232508552945, 0.3838095695069945, 0.37708783412426694, 0.38021609905176124, 0.37707508598905815, 0.39495191710145616, 0.38779593570782056, 0.08495686485797538, 0.09791114247310473, 0.08907108106135786, 0.09153359451090348, 0.10769146743819147, 0.0883875326569249, 0.09594695336441872, 0.08327642540324398, 0.12283669973717948, 0.16599947619843047, 0.15418570219644012, 0.1424906871053796, 0.18163209360675658, 0.12509912169977944, 0.13344106866607108, 0.19719959791409225, 0.14750279071758765, 0.12345611322171568, 0.2697841365162511, 0.27044704268163144, 0.2727327598026411, 0.27469174725623324, 0.27133259296862566, 0.26817863811024745, 0.2869531823986857, 0.28877464136949416, 0.27102534134465606, 0.19420276785403945, 0.2106466483460333, 0.21609924553771886, 0.21865936866137115, 0.19942336325620613, 0.19992818874600515, 0.22012165266345995, 0.22047129251430908, 0.20264144394272843, 0.17846078304779545, 0.1670919486164204, 0.16948772177759397, 0.19789079487707772, 0.18739602891890272, 0.21248436430173734, 0.19680854691757366, 0.19347136104646756, 0.1996117624171143, 0.19157302908462193, 0.1795031124774974, 0.16748422674454322, 0.17485696335076772, 0.1674521025277338, 0.17864613860966239, 0.17405394585348788, 0.17287212898819704, 0.20918327772970524, 0.49351638612785065, 0.5177784133978938, 0.5018181354268495, 0.4411766774670386, 0.5363201119893296, 0.25352080073520933, 0.34431626211432054, 0.34290195823388314, 0.4197046084253888, 0.5176154810768474, 0.19829373069700906, 0.4460857881805007, 0.20316280306458157, 0.19402136445714402, 0.19581106550708438, 0.19723481931062292, 0.4052405331599702, 0.19999901508909101, 0.18244585976171768, 0.18787549271750603, 0.18793360143793192, 0.18288564613383895, 0.16587993267820256, 0.17247988765627564, 0.17864908377637367, 0.181015626488224, 0.18171765228272063, 0.07843538768256075, 0.07390688801020728, 0.07619973229891419, 0.08141340609310643, 0.08166124478834558, 0.07118041419326815, 0.07869950331220732, 0.07425819666944666, 0.07863276240738337]}, "mutation_prompt": null}
{"id": "882171e9-1ff0-42b8-986f-41c461c9d1ac", "solution": "import numpy as np\n\nclass HybridDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual):\n            return np.clip(individual + np.random.normal(0, self.sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial)\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                else:\n                    new_population[i] = population[i]\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "HybridDEGaussianOptimization", "description": "Hybrid Differential Evolution with Gaussian Mutation for Black Box Optimization", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "metadata": {"aucs": [0.42277686242099666, 0.40807483944642875, 0.4196101260442724, 0.40506646431934035, 0.41035383150425186, 0.394402654729453, 0.4311702970975688, 0.421671997528951, 0.3914034333715335, 0.04815075591079587, 0.055561651930536526, 0.030802594506479042, 0.03939192192266783, 0.03758064628524349, 0.030496771912297493, 0.03260146351849236, 0.037979580184863915, 0.06930097937382795, 0.0992053249056406, 0.10113968128179218, 0.0984632103186519, 0.09337367410984898, 0.09249168117796147, 0.10078445158129812, 0.10206632334103993, 0.10997933046490782, 0.09972067343348667, 0.09018843911071128, 0.09713435913317625, 0.08568434608898257, 0.08998915562530851, 0.07949112598460739, 0.08060187991636614, 0.0813921195967452, 0.08941411965697355, 0.09013098361106675, 0.8342616208890457, 0.755529659171358, 0.814043334114043, 0.8088694867703572, 0.8439678547820249, 0.8243311144801717, 0.7727632346964453, 0.8354909112792136, 0.831643825228024, 0.23624189159218512, 0.2557875351336202, 0.2500281733566798, 0.2596616510417451, 0.27400209234558015, 0.25094727230957037, 0.23081545176794493, 0.25984726438372996, 0.2499722706024522, 0.3344886680638195, 0.51187301127279, 0.5098814316175793, 0.3316178093667679, 0.31604524981314075, 0.31497640526639226, 0.3096123057695267, 0.3082702754091544, 0.3321273168890866, 0.14107649496913377, 0.1577124022064843, 0.1503016649166744, 0.14661359488900594, 0.14519257945729447, 0.12960703300857224, 0.14649769574890126, 0.14896288641416955, 0.14910080724222607, 0.1675464337958823, 0.15878707453796292, 0.1594107237373883, 0.15894878241857147, 0.15490732601391988, 0.1334389521558501, 0.12969438577825787, 0.1243977317593914, 0.14727930311537785, 0.01298170087753292, 0.02474603669530262, 0.005976497222138777, 0.01971855872885009, 0.012372021772717345, 0.025996879540060913, 0.015679630004583722, 0.014264596983566857, 0.00790125531866015, 0.10171594868750977, 0.07830762969675886, 0.08814997293661031, 0.1065754140700832, 0.06786320965604553, 0.10038129610285684, 0.16389484586908087, 0.0896047572129679, 0.09283736810552434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1031835804750677, 0.10930519954402806, 0.10537888833844677, 0.09860432130176833, 0.10053516495961778, 0.09759225922496173, 0.10446538965463492, 0.09980707091796448, 0.08020458246812145, 0.3977778678460291, 0.38611372094632346, 0.38100232508552945, 0.3838095695069945, 0.37708783412426694, 0.38021609905176124, 0.37707508598905815, 0.39495191710145616, 0.38779593570782056, 0.08495686485797538, 0.09791114247310473, 0.08907108106135786, 0.09153359451090348, 0.10769146743819147, 0.0883875326569249, 0.09594695336441872, 0.08327642540324398, 0.12283669973717948, 0.16599947619843047, 0.15418570219644012, 0.1424906871053796, 0.18163209360675658, 0.12509912169977944, 0.13344106866607108, 0.19719959791409225, 0.14750279071758765, 0.12345611322171568, 0.2697841365162511, 0.27044704268163144, 0.2727327598026411, 0.27469174725623324, 0.27133259296862566, 0.26817863811024745, 0.2869531823986857, 0.28877464136949416, 0.27102534134465606, 0.19420276785403945, 0.2106466483460333, 0.21609924553771886, 0.21865936866137115, 0.19942336325620613, 0.19992818874600515, 0.22012165266345995, 0.22047129251430908, 0.20264144394272843, 0.17846078304779545, 0.1670919486164204, 0.16948772177759397, 0.19789079487707772, 0.18739602891890272, 0.21248436430173734, 0.19680854691757366, 0.19347136104646756, 0.1996117624171143, 0.19157302908462193, 0.1795031124774974, 0.16748422674454322, 0.17485696335076772, 0.1674521025277338, 0.17864613860966239, 0.17405394585348788, 0.17287212898819704, 0.20918327772970524, 0.49351638612785065, 0.5177784133978938, 0.5018181354268495, 0.4411766774670386, 0.5363201119893296, 0.25352080073520933, 0.34431626211432054, 0.34290195823388314, 0.4197046084253888, 0.5176154810768474, 0.19829373069700906, 0.4460857881805007, 0.20316280306458157, 0.19402136445714402, 0.19581106550708438, 0.19723481931062292, 0.4052405331599702, 0.19999901508909101, 0.18244585976171768, 0.18787549271750603, 0.18793360143793192, 0.18288564613383895, 0.16587993267820256, 0.17247988765627564, 0.17864908377637367, 0.181015626488224, 0.18171765228272063, 0.07843538768256075, 0.07390688801020728, 0.07619973229891419, 0.08141340609310643, 0.08166124478834558, 0.07118041419326815, 0.07869950331220732, 0.07425819666944666, 0.07863276240738337]}, "mutation_prompt": null}
{"id": "478eff31-aee0-4852-8304-9970849cae2f", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 28, "fitness": 0.23415503407999771, "feedback": "The algorithm EvolvingDEGaussianOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "0cd2413a-8c5f-4573-ac3b-ecd7ea3172b2", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "230e16e2-9acf-4316-a787-1c1f929f4d2e", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "2dc598ce-d2a2-4326-9ebb-9b1d9f1570a7", "solution": "import numpy as np\n\nclass AdaptiveDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "AdaptiveDEGaussianOptimization", "description": "Evolutionary Algorithm with Gaussian Mutation and Adaptive Rates for Black Box Optimization utilizing Differential Evolution strategy.", "configspace": "", "generation": 30, "fitness": 0.23415503407999771, "feedback": "The algorithm AdaptiveDEGaussianOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "87d19aed-9188-468c-ad05-1213bcc3cc27", "solution": "import numpy as np\n\nclass EnhancedEvolvingDE:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EnhancedEvolvingDE", "description": "Enhancing Evolving Differential Evolution by incorporating a dynamic self-adaptive mutation strategy based on individual performance.", "configspace": "", "generation": 31, "fitness": 0.23415503407999771, "feedback": "The algorithm EnhancedEvolvingDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "b36676fa-a4f9-420c-a3fe-79fee33788c9", "solution": "import numpy as np\n\nclass EnhancedDELevyFlightOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def levy_flight_mutation(individual, sigma):\n            beta = 1.5\n            levy = np.random.standard_cauchy(self.dim) / np.power(np.random.gamma(1 + beta, 1.0/beta), 1/beta)\n            return np.clip(individual + sigma * levy, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = levy_flight_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EnhancedDELevyFlightOptimization", "description": "Enhancing Differential Evolution with Levy Flight Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 32, "fitness": 0.21589064095923646, "feedback": "The algorithm EnhancedDELevyFlightOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.18.", "error": "", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.4608303466778704, 0.47162749637887047, 0.43744596393453905, 0.4474291675527392, 0.4523691556633228, 0.4240790336065725, 0.45457620534156773, 0.4528251272307896, 0.44633404024965295, 0.07358308733345931, 0.0973163455335192, 0.08781187010400515, 0.08803414482001226, 0.08334688354170505, 0.06527516312771808, 0.07609829888560493, 0.0843769206337951, 0.07266388723283068, 0.0852005492878739, 0.08769967182226479, 0.12201364338332188, 0.09481764309687513, 0.10851618724021084, 0.1240821943247038, 0.10031405280575822, 0.10606685400085558, 0.10385412853492726, 0.077819937539234, 0.08461332283685641, 0.08189730886482993, 0.0939840775930163, 0.07707641805116328, 0.09326196241229534, 0.08767543459410754, 0.07791436159682963, 0.09926394949151796, 0.8045627488467144, 0.8209149389636121, 0.8160363931138594, 0.8334202368254473, 0.837090506022129, 0.832684729938528, 0.8981746611389724, 0.880792314926269, 0.8338428015343902, 0.25640968377147566, 0.24507096430111652, 0.25164917779232043, 0.28304413728386313, 0.22571324096167478, 0.26739811561437754, 0.23571879336563106, 0.24327516768242585, 0.24291680862454545, 0.46056900371081233, 0.38932802379000053, 0.34605099151167296, 0.4224366496035944, 0.5014059042394325, 0.43277693468404344, 0.4662653817557989, 0.47849142879167317, 0.5214172030428978, 0.14898894806055596, 0.15341006705700333, 0.14200023848249999, 0.1456304282591513, 0.14924748747997796, 0.15097293359548025, 0.13558625117248613, 0.15929475170035023, 0.1393377364202455, 0.1512431330328634, 0.1477315372976542, 0.15889982588017737, 0.17750313921304073, 0.16542756901828393, 0.12934992335664808, 0.15036303813901597, 0.12525618459321974, 0.15495133811075124, 0.03315650117030111, 0.03673771671166326, 0.043100922922192364, 0.040012839632387665, 0.044320281994450816, 0.03722195871766121, 0.06206653958057318, 0.04312915285219421, 0.025879440215477945, 0.13573136547722076, 0.1214964688221557, 0.1610286388236296, 0.08481751193670006, 0.08409293581445165, 0.10220370107534149, 0.11264548914149852, 0.12155403055483716, 0.14728985087271207, 0.0004803641924013835, 0.0012486515655224517, 0.006733670647676937, 0.013044409181844685, 0.002286520701017647, 0.003025078045529539, 0.005202248361988349, 0.0014486752131398495, 0.0012575579221154598, 0.10559306768821952, 0.09495672277215361, 0.10269596970930361, 0.1046675804945637, 0.10414874537935703, 0.119053197656659, 0.10759202955607639, 0.1085266572995075, 0.10305599370249297, 0.39987256130211213, 0.3964463492360111, 0.40209440790073137, 0.3987195259137668, 0.3924650285536645, 0.3902044953599567, 0.39755606149445544, 0.4007390450526983, 0.3881688309940491, 0.08897826329353409, 0.09578515103225449, 0.1530179886748989, 0.08953376146098802, 0.08409099861547908, 0.0979182431360629, 0.081638634556643, 0.0816949024027086, 0.08750373683009582, 0.1501084808797325, 0.17311774544751368, 0.13659268028482552, 0.13618275762262366, 0.1294209304593935, 0.15249275429179465, 0.12887575564379328, 0.12802658899584785, 0.1268799039631351, 0.2734654321863842, 0.27952518927618875, 0.26741095920192004, 0.28473830149841184, 0.2768696296745188, 0.27861279358319746, 0.28816958935052595, 0.28757916660706884, 0.27482188049865386, 0.2006101672331254, 0.20503562123786567, 0.22719362069187732, 0.21048957193073503, 0.2113432679839431, 0.20492950775646868, 0.20431780961828994, 0.2297233951250255, 0.20302708182632279, 0.23102624071945044, 0.18770652301318835, 0.19637007357334602, 0.18126778844927505, 0.21394864467528452, 0.16550438595722605, 0.18709405896066122, 0.19371757380187993, 0.22473051499047414, 0.21132826397287163, 0.19692832799028204, 0.18736202002191105, 0.18033909672810822, 0.18038224996102703, 0.18179080761700495, 0.1691554244934088, 0.18123743305759366, 0.179485118989966, 0.618138416046761, 0.1982520886682646, 0.14838466825751107, 0.6047752501434089, 0.17010312664537486, 0.4360713518318938, 0.17583863224309915, 0.34903139259026605, 0.44448900065809227, 0.4492266610722271, 0.30887233864487584, 0.184415560753739, 0.412631330199563, 0.20039534319889518, 0.26278209154555765, 0.1515883996591718, 0.14696935228472197, 0.20527885320789307, 0.1805287188185466, 0.17884651754725822, 0.1688419020031986, 0.16725697497404923, 0.17000352930277496, 0.16345143311502253, 0.1791424078576802, 0.17718662904122262, 0.1676098072720884, 0.07282096406400418, 0.06839315443475147, 0.06861881270264858, 0.07057117217304076, 0.0678887497805517, 0.0755318722116517, 0.07521981600030159, 0.06986805088343773, 0.0817421672723534]}, "mutation_prompt": null}
{"id": "767a8f06-07e7-41db-883b-12187a06f298", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "e71780cc-fc10-4bf1-a8b9-01765d4f17c6", "solution": "import numpy as np\n\nclass EnhancedEvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                        self.f = min(0.9, self.f + 0.05)  # Increase crossover probability\n                        self.cr = min(0.9, self.cr + 0.05)  # Increase mutation probability\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n                        self.f = max(0.5, self.f - 0.05)  # Decrease crossover probability\n                        self.cr = max(0.5, self.cr - 0.05)  # Decrease mutation probability\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EnhancedEvolvingDEGaussianOptimization", "description": "Enhancing Evolving Differential Evolution with Gaussian Mutation incorporating adaptive mutation rates by incorporating a dynamic control for crossover and mutation probabilities.", "configspace": "", "generation": 34, "fitness": 0.1998167432674503, "feedback": "The algorithm EnhancedEvolvingDEGaussianOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.4811700495667024, 0.4951022934926187, 0.48938423208247994, 0.48700981492335516, 0.481472042887101, 0.4835985671795958, 0.48065687541860747, 0.4828928960010792, 0.47261425100430876, 0.06723156817258236, 0.06180027560388002, 0.08432386544214299, 0.0798065530700216, 0.08392355917293737, 0.08230907072864879, 0.07457272961232264, 0.0883895740809918, 0.09102621241199826, 0.138484442810208, 0.12381985176782495, 0.15302718415907657, 0.13538455498185153, 0.1351361826915055, 0.12598543883462188, 0.14433134491096022, 0.13637184449098527, 0.15434572437201644, 0.12990289584896908, 0.12111404903246026, 0.12447620443391838, 0.10366073055005964, 0.11879825959424739, 0.11229852092295134, 0.11880145476597137, 0.10419126046039107, 0.11113235837140378, 0.8923799908813781, 0.853464352695716, 0.8200319445899572, 0.8904589688829972, 0.878894700954213, 0.8087754994674256, 0.8061229691768972, 0.8244411845022497, 0.8766904480398535, 0.25345660742096465, 0.2155516266992259, 0.24223705253862216, 0.23908803000259915, 0.2390109778235886, 0.25322772013723616, 0.20935931986911915, 0.2541652737278254, 0.22943764515745357, 0.22579699225379812, 0.24128723752891035, 0.19985932619629443, 0.289322124688404, 0.2864322886562777, 0.2215372890264784, 0.24061960224207612, 0.2369101561152398, 0.2505019219601202, 0.10936678592583016, 0.1525250595407739, 0.1658246767381104, 0.13877567148073267, 0.13393063253267645, 0.13319140759600467, 0.1364652643686335, 0.134058333856653, 0.11902983446216164, 0.11569384924064252, 0.09876678531830707, 0.13624242082080296, 0.14643383409722122, 0.13724782667901603, 0.14040718341995218, 0.1254336255489369, 0.1294505568040698, 0.1263113875229266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008625413926586556, 0.06765917315527459, 0.08794451641361889, 0.07277404085391115, 0.048875027002866944, 0.05439807029334043, 0.08113913734712208, 0.07398616695024907, 0.09657196773617838, 0.08886289990125096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09408984412623578, 0.08754386609680931, 0.09163078100238675, 0.10895601568907809, 0.09989632526552927, 0.09323567188069504, 0.09114948325772365, 0.09880121797574537, 0.0881684431380545, 0.42451791498693237, 0.4198547654090008, 0.4011755985988873, 0.40610656760585384, 0.3999413561398947, 0.40282700226461177, 0.42814159535092144, 0.4309914511164087, 0.4063213968938729, 0.08469950266718174, 0.09248243694879388, 0.09853598485473847, 0.0990265219894334, 0.0923559249797874, 0.09134490158872555, 0.0896315727160456, 0.09482695066370839, 0.09239120188419148, 0.14915766985658352, 0.14944918726382916, 0.12735013595414657, 0.13126505655163967, 0.14487315570547765, 0.15801328737708353, 0.1446981978130759, 0.15212097471850516, 0.16089638005452578, 0.23945933547360176, 0.2651808892139579, 0.26487578173077486, 0.2456403733492475, 0.26360110802055214, 0.279196498633286, 0.27265185343004295, 0.28402755529375745, 0.2806462681826539, 0.17315522521100468, 0.19605996031892203, 0.16640026368806216, 0.17620665601589502, 0.18212453307642695, 0.16938599106662133, 0.21259714646157069, 0.20632465877653772, 0.17774988521091784, 0.189113311337889, 0.187302774389964, 0.24561128410429645, 0.1774864709442593, 0.19344355344672237, 0.17874291555158228, 0.1870439543949357, 0.17686925303683454, 0.17633287116169416, 0.2404486755956582, 0.19845512967257828, 0.2058292496157711, 0.1930086551782202, 0.21081863776366272, 0.21063004682872666, 0.19496540900556036, 0.22326980738509006, 0.22580455723190263, 0.16629180332148896, 0.1689600086918397, 0.20716792620399238, 0.3927911907049647, 0.17490866006484684, 0.5636806202162752, 0.187198794276206, 0.16032525086929528, 0.21308419445177107, 0.16014571473794492, 0.18127817737457652, 0.14472053183802602, 0.20139841522637414, 0.2027477167538697, 0.21520585844677365, 0.1808506211733546, 0.24191664965489446, 0.2590637373466772, 0.1877592762357495, 0.17175213253495059, 0.17442863489553473, 0.1701939356436062, 0.21144095572001353, 0.16710802469505526, 0.18876232561353068, 0.17906231139965545, 0.19910579026303477, 0.07836739439879925, 0.0751579647673758, 0.0822178669208341, 0.0768637331880685, 0.0620662687530239, 0.0775779706227917, 0.08671651205202213, 0.07219483466825005, 0.08167632723894058]}, "mutation_prompt": null}
{"id": "d55cedcd-23c8-4c30-9814-c24dabdad2e3", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "a173b05e-226d-4f02-b122-4b0b8dbaad7f", "solution": "import numpy as np\n\nclass EnhancedEvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1, levy_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n        self.levy_rate = levy_rate\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / (np.abs(v) ** (1 / beta))\n            return step\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]) + self.levy_rate * levy_flight(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EnhancedEvolvingDEGaussianOptimization", "description": "Enhancing EvolvingDEGaussianOptimization by incorporating Levy flight for increased exploration capability.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {}, "mutation_prompt": null}
{"id": "e5f62541-7683-4a3b-9d8b-336c5817c299", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "6d537d0c-e346-4eb0-93b6-ee567b55238d", "solution": "import numpy as np\n\nclass DynamicMutationADE:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "DynamicMutationADE", "description": "Enhancing Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization by incorporating a dynamic strategy adaptation approach to optimize mutation rates during the search process.", "configspace": "", "generation": 38, "fitness": 0.23415503407999771, "feedback": "The algorithm DynamicMutationADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "22d17a94-95b1-4cce-8401-d3033c660908", "solution": "import numpy as np\n\nclass FireflyAlgorithmOptimization:\n    def __init__(self, budget, dim, alpha=0.5, beta0=1.0, gamma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return self.beta0 * np.exp(-self.gamma * distance**2)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                for j in range(self.pop_size):\n                    if func(population[j]) < func(population[i]):\n                        distance = np.linalg.norm(population[j] - population[i])\n                        attractiveness_factor = attractiveness(distance)\n                        new_population[i] += attractiveness_factor * (population[j] - population[i])\n\n            for i in range(self.pop_size):\n                new_population[i] += self.alpha * np.random.uniform(-1, 1, self.dim)\n                new_population[i] = np.clip(new_population[i], -5.0, 5.0)\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "FireflyAlgorithmOptimization", "description": "Implementing Firefly Algorithm for Black Box Optimization with dynamic attraction coefficient and light absorption rate.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'FireflyAlgorithmOptimization' object has no attribute 'pop_size'\").", "error": "AttributeError(\"'FireflyAlgorithmOptimization' object has no attribute 'pop_size'\")", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {}, "mutation_prompt": null}
{"id": "5281ae8e-e86c-4254-804d-ab379953a847", "solution": "import numpy as np\n\nclass EnhancedDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EnhancedDEGaussianOptimization", "description": "Enhanced Differential Evolution with Adaptive Gaussian Mutation for Black Box Optimization improving mutation rate adaptation and solution refinement.", "configspace": "", "generation": 40, "fitness": 0.23415503407999771, "feedback": "The algorithm EnhancedDEGaussianOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "dc22ffdf-b8f4-4c1f-b0c5-a0f331207bd4", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "a3f00f74-8aa4-44a3-94e4-5bad7c6e0cfe", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "17878398-197a-414a-a1ae-95d600c47ab7", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "632cd14c-f085-4adf-8539-618d4c0c9666", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "4171a11f-6177-4b27-bfa6-00d6f8233145", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "ebc59fe2-6efe-4849-9155-21dae04e22d6", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "e781cf92-6875-4e94-92bf-5ad79020ae6b", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "e7e9c7b9-cb58-468a-b6a4-fa5e40782b68", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "6ec08c30-8922-4c02-94f1-7347ca775d10", "solution": "import numpy as np\n\nclass MyMetaheuristicAlgorithm:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "MyMetaheuristicAlgorithm", "description": "A Novel Metaheuristic Algorithm for Black Box Optimization using Hybrid Differential Evolution with Gaussian Mutation and Dynamic Mutation Rates.", "configspace": "", "generation": 49, "fitness": 0.23415503407999771, "feedback": "The algorithm MyMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "2f1b8eb3-2b00-4903-9e6b-7f737800fb8f", "solution": "import numpy as np\n\nclass AdaptiveDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "AdaptiveDEGaussianOptimization", "description": "Enhancing Differential Evolution with Adaptive Gaussian Mutation for Black Box Optimization through dynamic mutation rate adjustments based on individual performance.", "configspace": "", "generation": 50, "fitness": 0.23415503407999771, "feedback": "The algorithm AdaptiveDEGaussianOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "ed4a1e6d-d984-409a-a689-ac4f09cb0666", "solution": "import numpy as np\n\nclass EnhancedDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= np.random.choice([1.1, 0.9])  # Probabilistic mutation rate update\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= np.random.choice([1.1, 0.9])  # Probabilistic mutation rate update\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EnhancedDEGaussianOptimization", "description": "Enhanced Differential Evolution with Adaptive Gaussian Mutation for Black Box Optimization using probabilistic mutation rate adaptation and self-adaptive strategies.", "configspace": "", "generation": 51, "fitness": 0.20956270917983535, "feedback": "The algorithm EnhancedDEGaussianOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.44655770542104445, 0.4216935383376552, 0.4317376337132094, 0.43011860724908124, 0.4188541851792231, 0.42071187642703967, 0.43714208326756765, 0.42294275306222484, 0.41065648286550427, 0.047452278786499824, 0.05936221639387662, 0.04319936164145166, 0.04671226833418218, 0.029703242394124252, 0.018715194001763802, 0.05637037121034316, 0.060611939680017324, 0.024149118602597053, 0.13047400216469085, 0.09901423880247862, 0.10466727305623114, 0.10860051873420928, 0.1205446851340819, 0.09127860932464715, 0.08374788653515985, 0.09284003257702511, 0.1069758569361886, 0.07861822364496673, 0.08530462568569241, 0.0915443367357699, 0.09644215821204383, 0.07910976158967464, 0.0948489985169676, 0.09080896188905574, 0.08770891868203667, 0.08908668756521532, 0.9016381676834736, 0.828864840102427, 0.8614856403037583, 0.806090818073108, 0.8194475409816308, 0.831718021677644, 0.8252030422236991, 0.7821410297070119, 0.823784027353371, 0.26063467138631147, 0.25967187879990583, 0.21219202539219673, 0.2694323427752834, 0.2511025921447886, 0.2534919864865506, 0.25722656838734403, 0.24620101673248973, 0.25550364322781616, 0.25072620465191187, 0.32058538709475803, 0.3327424053578064, 0.3530729265897272, 0.3613255726578003, 0.5453696067492082, 0.3140732201758054, 0.3222537348131529, 0.32718049875666744, 0.1736369572046157, 0.1505964922235149, 0.14226715739844753, 0.1495441993589267, 0.1499199318449922, 0.1467944182923615, 0.16886414086361823, 0.14475165945704083, 0.14717231123805374, 0.1445202896416471, 0.1322711766708855, 0.13919054738791825, 0.15327285756039677, 0.14507314039504615, 0.1485852407363133, 0.13517509545277862, 0.14152476477654585, 0.1527016705310985, 0.024392818072086042, 0.014280978940580114, 0.007532280967178284, 0.013483942696281725, 0.028226729069670053, 0.02359214176048885, 0.03622660945108014, 0.011540991162594771, 0.022391799348971286, 0.09952153778496253, 0.10412510527695373, 0.09443210276086356, 0.09237794053217063, 0.05195078738973169, 0.09906418836768649, 0.09795190241536988, 0.09101115849168129, 0.09727287250433059, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13390526015901782, 0.10781172201578304, 0.0863222278575888, 0.10601748601691452, 0.10715416763028729, 0.10213230887665448, 0.10377833954089422, 0.09350534111210418, 0.09357923683994163, 0.4100445481375893, 0.3775585968915207, 0.3781708784643548, 0.38986076945179104, 0.38667536580102146, 0.3725624484146516, 0.3967753828297106, 0.38236740865453644, 0.39688024181034376, 0.10310896775630041, 0.08662162943777185, 0.08411363088899126, 0.0817429242697203, 0.07512773986720878, 0.09912809684844637, 0.08537368467189821, 0.08824315853608755, 0.10836652059483787, 0.1306309095172774, 0.1282556385459961, 0.17469347940922797, 0.12299983077268861, 0.1715816019912847, 0.13608485509271084, 0.1799983049345003, 0.12899051106487713, 0.12331875804212411, 0.27479080271705736, 0.28200588403618465, 0.26625134590966726, 0.27841077352922283, 0.26539821197920166, 0.26221397621007514, 0.2739853087658005, 0.2871497945005994, 0.2737715135307035, 0.20824351478195302, 0.21510118027816105, 0.21574221598541632, 0.1979472677352827, 0.20030799171964686, 0.22515458593288196, 0.21414849459568963, 0.2166590638257564, 0.2045808108784185, 0.18042002703610194, 0.18522640459559936, 0.1806644754316863, 0.22470252032432325, 0.19083949127252453, 0.1899940428810919, 0.222940655538442, 0.16700206871658263, 0.17575254482135239, 0.18474548840551153, 0.1709233981543894, 0.20939116156768667, 0.18390130203438548, 0.1845934875205445, 0.17400079158965742, 0.18284842617434338, 0.18166923118485712, 0.18569758801899938, 0.17538958445385266, 0.5126582417435244, 0.145987435063185, 0.5634999555728887, 0.5359161017739482, 0.5093191272811579, 0.5263180149930861, 0.1693930078729332, 0.5112453398069806, 0.16585205821302684, 0.2000665404480495, 0.4302030924139528, 0.36436672971580475, 0.44811441623654846, 0.16535433737398164, 0.12411880057230484, 0.46717472202052535, 0.1998078979977317, 0.18365418932797706, 0.1731742738298755, 0.17427931859533052, 0.17303593183559973, 0.1721045664724261, 0.1705523529752101, 0.17738385688087654, 0.16870906781067985, 0.18465386914463877, 0.08220942406693499, 0.09107645304191414, 0.06148450622144919, 0.07140152584864479, 0.08074269291760283, 0.07938400011092894, 0.08820413400142857, 0.07099507562874785, 0.06945274498816012]}, "mutation_prompt": null}
{"id": "36271792-b540-4163-877f-46bf30345c33", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "9fdd03df-bb82-439e-adb2-1124824ab29a", "solution": "import numpy as np\n\nclass DynamicPopSizeEvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            # Dynamic population size control\n            if np.random.rand() < 0.2:\n                self.pop_size = max(2, min(100, int(1.1 * self.pop_size)))  # Adjust population size dynamically\n\n            new_population = np.vstack((new_population, np.random.uniform(-5.0, 5.0, (self.pop_size - new_population.shape[0], self.dim))))\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "DynamicPopSizeEvolvingDEGaussianOptimization", "description": "Enhancing Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization by introducing a dynamic population size control mechanism.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 30 is out of bounds for axis 0 with size 30').", "error": "IndexError('index 30 is out of bounds for axis 0 with size 30')", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {}, "mutation_prompt": null}
{"id": "89a78fbe-a0de-4fcf-b585-5a12568122ae", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "3b43ccde-c6f7-49b0-a414-5c01b9fab711", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "5f18ddc2-038c-4a6a-8788-8f813b7e20c1", "solution": "import numpy as np\n\nclass EvolvingDEGaussianOptimization:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def gaussian_mutation(individual, sigma):\n            return np.clip(individual + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        mutation_rates = np.full(self.pop_size, self.sigma)\n\n        for _ in range(self.budget):\n            new_population = np.zeros_like(population)\n\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(population[a] + self.f * (population[b] - population[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                mutated_trial = gaussian_mutation(trial, mutation_rates[i])\n\n                if func(mutated_trial) < func(population[i]):\n                    new_population[i] = mutated_trial\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 1.1  # Increase mutation rate\n                else:\n                    new_population[i] = population[i]\n                    if np.random.rand() < 0.2:\n                        mutation_rates[i] *= 0.9  # Decrease mutation rate\n\n            population = new_population\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EvolvingDEGaussianOptimization", "description": "Evolving Differential Evolution with Gaussian Mutation for Black Box Optimization incorporating self-adaptive mutation rates.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5096944794086276, 0.49514449122998117, 0.49955340133741233, 0.4826353202190088, 0.48584805077781645, 0.5121791349369141, 0.5039849510603005, 0.4926628212852352, 0.4793908869431943, 0.08608523886090758, 0.10322393774191152, 0.08454739630470032, 0.06230926451884056, 0.061247956099792056, 0.08632873646994943, 0.0940274651529458, 0.08868879863003876, 0.08942411071023726, 0.09793587207339183, 0.10700975829374382, 0.09590334843889792, 0.08905094601112051, 0.11043147299773848, 0.08566802343344482, 0.1142968589410921, 0.10636773975015434, 0.09340473537817873, 0.09108702154995174, 0.08944654856632317, 0.08343795846265434, 0.09900897399181519, 0.10215007676365462, 0.09394673803532383, 0.09279292658159577, 0.09867158673724497, 0.08251999912747687, 0.7920861037510025, 0.8342691666951617, 0.8204185487836674, 0.8319040463608546, 0.8186515948268426, 0.7965906592604693, 0.8087485877760211, 0.7738903066220002, 0.7855773810926155, 0.30124160059135574, 0.2984155963915712, 0.2701026909707306, 0.2803924065793806, 0.2581099358154817, 0.3044222238313491, 0.277146096564554, 0.2727111537181778, 0.2893768531176384, 0.6675387304751517, 0.5381015761117642, 0.5138905091154031, 0.6059070157988047, 0.562674695568399, 0.6656109215918179, 0.6516056986485235, 0.6495339287408202, 0.4631458738773262, 0.1848425004376063, 0.16282706539933045, 0.17252320443196967, 0.18198521086126418, 0.16298851267918657, 0.2091093002389266, 0.1584198792705218, 0.19000464504281922, 0.17887508938749053, 0.16895199710699527, 0.17690878724314174, 0.21513700843658978, 0.16275712305515533, 0.14770670224008176, 0.17140488623362293, 0.16919744544835125, 0.18543114850578946, 0.1684630749156193, 0.07859561395530512, 0.10166176952522388, 0.03849782690661108, 0.11235506999058709, 0.06391714992350717, 0.046398439467051356, 0.053349566424739314, 0.07153828466821766, 0.08721948614686736, 0.1361530903452256, 0.13536316608278753, 0.1505049195261685, 0.06497828252073923, 0.13467629234841605, 0.07503993303927714, 0.13097961077309006, 0.11652205559025008, 0.13981131615591258, 0.007576857330842124, 0.018503527469322933, 0.015457009690989953, 0.011644636327599933, 0.010249549719531181, 0.0068770264518766, 0.0115701567610913, 0.004282727993543678, 0.01567037515845171, 0.12829248930333192, 0.12046213128575656, 0.12766797545974806, 0.14221485289977776, 0.13057980543958292, 0.12806088704235408, 0.1318063412695778, 0.1286843274502022, 0.1161904544695681, 0.420324236310057, 0.4385105656374426, 0.42723984022460915, 0.43649664074012895, 0.4292151280019443, 0.42867181816250755, 0.4408028823694512, 0.4310902688315139, 0.4429604262443423, 0.08321958161340604, 0.0909369921026697, 0.08537445563226664, 0.09857238382987565, 0.10182603000458057, 0.09675542790703728, 0.10307717782330983, 0.10480935078941367, 0.10895003152320804, 0.13330795701423503, 0.14133033859896282, 0.1438930373392694, 0.1776541507791346, 0.18403408442138114, 0.13155826009588711, 0.16669434937386796, 0.12403329333085389, 0.14204892586134066, 0.28518846816803245, 0.3013789947404857, 0.29076718664148027, 0.2951256960746015, 0.2961366158388896, 0.30023591710064745, 0.29710218447195147, 0.30733381411915994, 0.2945782323980095, 0.23097002461415972, 0.23183893403660627, 0.243858857248743, 0.2295097993261357, 0.2471480052965952, 0.22004301678118432, 0.24484867159272505, 0.23734959690979718, 0.23534496463505628, 0.19254289849318484, 0.17922179782617864, 0.18890899757428847, 0.18347464545233305, 0.1887740067197543, 0.17570067154448965, 0.1786360680047988, 0.18393425407488495, 0.1918819520701005, 0.23103156546774284, 0.17970130121841799, 0.1909664453041271, 0.21265548312592086, 0.1808563148597273, 0.19291163731971706, 0.18814828367487524, 0.183901130504879, 0.19355949557878716, 0.1619457796699476, 0.1608057249659861, 0.1810320564467247, 0.6625630694431026, 0.5353564708494676, 0.5566202582389851, 0.16282806120002802, 0.6718943863633215, 0.6607882686340101, 0.615737402747493, 0.19736745462199157, 0.16171198561928046, 0.15769091153442583, 0.16369845152357598, 0.14206400476940417, 0.19958855066839754, 0.12360084380151348, 0.20693217503629036, 0.18657723740832233, 0.19506354391812997, 0.18325964909914383, 0.17758792267120516, 0.1723478039914197, 0.16692771350336932, 0.17470454366748633, 0.173102272457198, 0.17612958890190078, 0.08192625938033793, 0.07029690538609523, 0.07338491748753184, 0.07550699220915613, 0.07580405829508707, 0.07830312917701177, 0.07218884990033059, 0.07925474018861167, 0.08088429878596981]}, "mutation_prompt": null}
{"id": "619e9872-c178-4240-ab5a-1969d71e6198", "solution": "import numpy as np\n\nclass HybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Levy flight exploration\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.2:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "HybridPSOLevyOptimization", "description": "Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization incorporating dynamic mutation rates.", "configspace": "", "generation": 57, "fitness": 0.2494831273209603, "feedback": "The algorithm HybridPSOLevyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "478eff31-aee0-4852-8304-9970849cae2f", "metadata": {"aucs": [0.5560408972199651, 0.5864867002807006, 0.5271899926851582, 0.5543915584463839, 0.5646871598350898, 0.6028150752928252, 0.575036025484134, 0.5425848000578485, 0.5658537676058959, 0.10406092148716395, 0.07559580928649556, 0.12295179843306325, 0.07346559002665509, 0.04322056949167308, 0.12259360298270094, 0.14600110014441092, 0.17878642628739594, 0.10785457004598853, 0.1387600341825861, 0.16860052520276736, 0.21409878850301056, 0.18254262041818659, 0.11706929818025069, 0.13576037500761085, 0.20800499132307382, 0.138236851212601, 0.13929040161782869, 0.11570039925231701, 0.142614187133841, 0.14184598330958775, 0.14517341196966338, 0.10039197730374416, 0.12538297594121628, 0.10925155746454018, 0.13650613538106082, 0.13148856737536885, 0.981374839244097, 0.9862020128683999, 0.9862178982162048, 0.9699568255555538, 0.9665365747056506, 0.9722707568000786, 0.9808027492775703, 0.9774687009111032, 0.9697506060668544, 0.3902701475488042, 0.3755279602657734, 0.3623213782025221, 0.3737165072809847, 0.40262684612664756, 0.339693855856092, 0.3533747943558647, 0.34479208683477214, 0.36316416234365523, 0.7264592965731745, 0.22728133240498305, 0.7130611429315503, 0.19283614908043334, 0.2098832750742543, 0.19268677951422664, 0.19642119163177607, 0.1517747531081186, 0.6160435204624379, 0.186540210949092, 0.0962258403037235, 0.1581243381109061, 0.1627506882973503, 0.16995122430226417, 0.15133476777051547, 0.12227900765800348, 0.154934487458799, 0.17045788627938085, 0.1913686264654978, 0.1134028888592038, 0.1892049979934899, 0.12982520902612993, 0.13979368160194028, 0.1657391656712609, 0.19774294254292135, 0.09396209332467298, 0.23125903379868618, 9.999999999998899e-05, 0.006019563704619979, 0.0014019915447450737, 0.05008593560965857, 9.999999999998899e-05, 0.03332293354598481, 9.999999999998899e-05, 9.999999999998899e-05, 0.13469844710133416, 0.028626322336063437, 0.04998731003961043, 0.05767358698844327, 0.07365271482286773, 9.999999999998899e-05, 0.10569280007633952, 0.11313538346357055, 0.1332332532384013, 0.04697597136813236, 0.04261461201453731, 0.023349408347359546, 0.02192386295372617, 0.04025367636656496, 0.02957312805491097, 0.06891368171928403, 0.057757395872413686, 0.07347442040284058, 0.028785745410277785, 0.0420137328705219, 0.041515350990724786, 0.1620449826246566, 0.0386460651155357, 0.020981826521162872, 0.10481914686497207, 0.1611771423404751, 0.08145816318836319, 0.08058339231773493, 0.47297513879765285, 0.43357162705855967, 0.45475626546602466, 0.5453783143322684, 0.46550333814476375, 0.48176885358615895, 0.46951578650069903, 0.48268635801327653, 0.47631902370737755, 0.10221058013543793, 0.06717950523091099, 0.057362655064088, 0.13876199250074606, 0.13182455808942417, 0.09603151110266939, 0.1598093548000752, 0.11055600693560697, 0.0956329528503087, 0.16914548076768754, 0.17075970204628887, 0.3195407608482784, 0.24136551666380124, 0.38102166842140506, 0.1887290166402742, 0.26796967805369454, 0.24071428388904859, 0.22921061989791924, 0.2998902611246467, 0.3690917460714054, 0.35049752872661954, 0.283109493137089, 0.3285709863260826, 0.33975154574190203, 0.33216313944469555, 0.36194022940544723, 0.3379071890435681, 0.20229928092262095, 0.26388336982406013, 0.258310611318082, 0.1464436517542823, 0.22804113232938816, 0.2650633663018067, 0.19172341998913167, 0.24358553738284627, 0.26964784260519103, 0.20793523569565708, 0.1631183283403116, 0.2276301900961868, 0.20136718590477753, 0.20231785803177393, 0.1984313777302279, 0.2769924945230946, 0.21755689075311702, 0.22837625774896186, 0.2424685062496974, 0.2149382740406165, 0.1970610889614064, 0.2972251742277878, 0.24263825872258715, 0.24312826807438526, 0.23077931652078565, 0.20737287623778633, 0.21535888756881505, 0.8259515815905455, 0.46763230432335634, 0.11290559467101391, 0.8454584060608393, 0.20058684592393572, 0.19963549112964896, 0.09971668389825605, 0.17026486279214914, 0.8947990159254364, 0.5533109105370011, 0.15614007397569896, 0.5252426169244742, 0.20196470593889626, 0.1691536411514244, 0.2095190587748179, 0.10462750939777254, 0.10467587725912542, 0.209325547030621, 0.24214741973999476, 0.18388318304876594, 0.17528528459806147, 0.2011257028982837, 0.18522655641486085, 0.17986953910384018, 0.19344699297060752, 0.18495475632382707, 0.17389552111607443, 0.08493363696482426, 0.09492685848168736, 0.09544443069407971, 0.08293470866075747, 0.0915069431851755, 0.08512871564462621, 0.12761598635449167, 0.09152875651598258, 0.08403180354112261]}, "mutation_prompt": null}
{"id": "e8d9d28b-9000-4e9a-9e62-ff307277cd39", "solution": "import numpy as np\n\nclass HybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Levy flight exploration\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.2:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "HybridPSOLevyOptimization", "description": "Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization incorporating dynamic mutation rates.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "619e9872-c178-4240-ab5a-1969d71e6198", "metadata": {"aucs": [0.5560408972199651, 0.5864867002807006, 0.5271899926851582, 0.5543915584463839, 0.5646871598350898, 0.6028150752928252, 0.575036025484134, 0.5425848000578485, 0.5658537676058959, 0.10406092148716395, 0.07559580928649556, 0.12295179843306325, 0.07346559002665509, 0.04322056949167308, 0.12259360298270094, 0.14600110014441092, 0.17878642628739594, 0.10785457004598853, 0.1387600341825861, 0.16860052520276736, 0.21409878850301056, 0.18254262041818659, 0.11706929818025069, 0.13576037500761085, 0.20800499132307382, 0.138236851212601, 0.13929040161782869, 0.11570039925231701, 0.142614187133841, 0.14184598330958775, 0.14517341196966338, 0.10039197730374416, 0.12538297594121628, 0.10925155746454018, 0.13650613538106082, 0.13148856737536885, 0.981374839244097, 0.9862020128683999, 0.9862178982162048, 0.9699568255555538, 0.9665365747056506, 0.9722707568000786, 0.9808027492775703, 0.9774687009111032, 0.9697506060668544, 0.3902701475488042, 0.3755279602657734, 0.3623213782025221, 0.3737165072809847, 0.40262684612664756, 0.339693855856092, 0.3533747943558647, 0.34479208683477214, 0.36316416234365523, 0.7264592965731745, 0.22728133240498305, 0.7130611429315503, 0.19283614908043334, 0.2098832750742543, 0.19268677951422664, 0.19642119163177607, 0.1517747531081186, 0.6160435204624379, 0.186540210949092, 0.0962258403037235, 0.1581243381109061, 0.1627506882973503, 0.16995122430226417, 0.15133476777051547, 0.12227900765800348, 0.154934487458799, 0.17045788627938085, 0.1913686264654978, 0.1134028888592038, 0.1892049979934899, 0.12982520902612993, 0.13979368160194028, 0.1657391656712609, 0.19774294254292135, 0.09396209332467298, 0.23125903379868618, 9.999999999998899e-05, 0.006019563704619979, 0.0014019915447450737, 0.05008593560965857, 9.999999999998899e-05, 0.03332293354598481, 9.999999999998899e-05, 9.999999999998899e-05, 0.13469844710133416, 0.028626322336063437, 0.04998731003961043, 0.05767358698844327, 0.07365271482286773, 9.999999999998899e-05, 0.10569280007633952, 0.11313538346357055, 0.1332332532384013, 0.04697597136813236, 0.04261461201453731, 0.023349408347359546, 0.02192386295372617, 0.04025367636656496, 0.02957312805491097, 0.06891368171928403, 0.057757395872413686, 0.07347442040284058, 0.028785745410277785, 0.0420137328705219, 0.041515350990724786, 0.1620449826246566, 0.0386460651155357, 0.020981826521162872, 0.10481914686497207, 0.1611771423404751, 0.08145816318836319, 0.08058339231773493, 0.47297513879765285, 0.43357162705855967, 0.45475626546602466, 0.5453783143322684, 0.46550333814476375, 0.48176885358615895, 0.46951578650069903, 0.48268635801327653, 0.47631902370737755, 0.10221058013543793, 0.06717950523091099, 0.057362655064088, 0.13876199250074606, 0.13182455808942417, 0.09603151110266939, 0.1598093548000752, 0.11055600693560697, 0.0956329528503087, 0.16914548076768754, 0.17075970204628887, 0.3195407608482784, 0.24136551666380124, 0.38102166842140506, 0.1887290166402742, 0.26796967805369454, 0.24071428388904859, 0.22921061989791924, 0.2998902611246467, 0.3690917460714054, 0.35049752872661954, 0.283109493137089, 0.3285709863260826, 0.33975154574190203, 0.33216313944469555, 0.36194022940544723, 0.3379071890435681, 0.20229928092262095, 0.26388336982406013, 0.258310611318082, 0.1464436517542823, 0.22804113232938816, 0.2650633663018067, 0.19172341998913167, 0.24358553738284627, 0.26964784260519103, 0.20793523569565708, 0.1631183283403116, 0.2276301900961868, 0.20136718590477753, 0.20231785803177393, 0.1984313777302279, 0.2769924945230946, 0.21755689075311702, 0.22837625774896186, 0.2424685062496974, 0.2149382740406165, 0.1970610889614064, 0.2972251742277878, 0.24263825872258715, 0.24312826807438526, 0.23077931652078565, 0.20737287623778633, 0.21535888756881505, 0.8259515815905455, 0.46763230432335634, 0.11290559467101391, 0.8454584060608393, 0.20058684592393572, 0.19963549112964896, 0.09971668389825605, 0.17026486279214914, 0.8947990159254364, 0.5533109105370011, 0.15614007397569896, 0.5252426169244742, 0.20196470593889626, 0.1691536411514244, 0.2095190587748179, 0.10462750939777254, 0.10467587725912542, 0.209325547030621, 0.24214741973999476, 0.18388318304876594, 0.17528528459806147, 0.2011257028982837, 0.18522655641486085, 0.17986953910384018, 0.19344699297060752, 0.18495475632382707, 0.17389552111607443, 0.08493363696482426, 0.09492685848168736, 0.09544443069407971, 0.08293470866075747, 0.0915069431851755, 0.08512871564462621, 0.12761598635449167, 0.09152875651598258, 0.08403180354112261]}, "mutation_prompt": null}
{"id": "fe6cc6d9-3fb4-4db1-bb02-28c0491540dc", "solution": "import numpy as np\n\nclass HybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Levy flight exploration\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.2:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "HybridPSOLevyOptimization", "description": "Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization incorporating dynamic mutation rates.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "619e9872-c178-4240-ab5a-1969d71e6198", "metadata": {"aucs": [0.5560408972199651, 0.5864867002807006, 0.5271899926851582, 0.5543915584463839, 0.5646871598350898, 0.6028150752928252, 0.575036025484134, 0.5425848000578485, 0.5658537676058959, 0.10406092148716395, 0.07559580928649556, 0.12295179843306325, 0.07346559002665509, 0.04322056949167308, 0.12259360298270094, 0.14600110014441092, 0.17878642628739594, 0.10785457004598853, 0.1387600341825861, 0.16860052520276736, 0.21409878850301056, 0.18254262041818659, 0.11706929818025069, 0.13576037500761085, 0.20800499132307382, 0.138236851212601, 0.13929040161782869, 0.11570039925231701, 0.142614187133841, 0.14184598330958775, 0.14517341196966338, 0.10039197730374416, 0.12538297594121628, 0.10925155746454018, 0.13650613538106082, 0.13148856737536885, 0.981374839244097, 0.9862020128683999, 0.9862178982162048, 0.9699568255555538, 0.9665365747056506, 0.9722707568000786, 0.9808027492775703, 0.9774687009111032, 0.9697506060668544, 0.3902701475488042, 0.3755279602657734, 0.3623213782025221, 0.3737165072809847, 0.40262684612664756, 0.339693855856092, 0.3533747943558647, 0.34479208683477214, 0.36316416234365523, 0.7264592965731745, 0.22728133240498305, 0.7130611429315503, 0.19283614908043334, 0.2098832750742543, 0.19268677951422664, 0.19642119163177607, 0.1517747531081186, 0.6160435204624379, 0.186540210949092, 0.0962258403037235, 0.1581243381109061, 0.1627506882973503, 0.16995122430226417, 0.15133476777051547, 0.12227900765800348, 0.154934487458799, 0.17045788627938085, 0.1913686264654978, 0.1134028888592038, 0.1892049979934899, 0.12982520902612993, 0.13979368160194028, 0.1657391656712609, 0.19774294254292135, 0.09396209332467298, 0.23125903379868618, 9.999999999998899e-05, 0.006019563704619979, 0.0014019915447450737, 0.05008593560965857, 9.999999999998899e-05, 0.03332293354598481, 9.999999999998899e-05, 9.999999999998899e-05, 0.13469844710133416, 0.028626322336063437, 0.04998731003961043, 0.05767358698844327, 0.07365271482286773, 9.999999999998899e-05, 0.10569280007633952, 0.11313538346357055, 0.1332332532384013, 0.04697597136813236, 0.04261461201453731, 0.023349408347359546, 0.02192386295372617, 0.04025367636656496, 0.02957312805491097, 0.06891368171928403, 0.057757395872413686, 0.07347442040284058, 0.028785745410277785, 0.0420137328705219, 0.041515350990724786, 0.1620449826246566, 0.0386460651155357, 0.020981826521162872, 0.10481914686497207, 0.1611771423404751, 0.08145816318836319, 0.08058339231773493, 0.47297513879765285, 0.43357162705855967, 0.45475626546602466, 0.5453783143322684, 0.46550333814476375, 0.48176885358615895, 0.46951578650069903, 0.48268635801327653, 0.47631902370737755, 0.10221058013543793, 0.06717950523091099, 0.057362655064088, 0.13876199250074606, 0.13182455808942417, 0.09603151110266939, 0.1598093548000752, 0.11055600693560697, 0.0956329528503087, 0.16914548076768754, 0.17075970204628887, 0.3195407608482784, 0.24136551666380124, 0.38102166842140506, 0.1887290166402742, 0.26796967805369454, 0.24071428388904859, 0.22921061989791924, 0.2998902611246467, 0.3690917460714054, 0.35049752872661954, 0.283109493137089, 0.3285709863260826, 0.33975154574190203, 0.33216313944469555, 0.36194022940544723, 0.3379071890435681, 0.20229928092262095, 0.26388336982406013, 0.258310611318082, 0.1464436517542823, 0.22804113232938816, 0.2650633663018067, 0.19172341998913167, 0.24358553738284627, 0.26964784260519103, 0.20793523569565708, 0.1631183283403116, 0.2276301900961868, 0.20136718590477753, 0.20231785803177393, 0.1984313777302279, 0.2769924945230946, 0.21755689075311702, 0.22837625774896186, 0.2424685062496974, 0.2149382740406165, 0.1970610889614064, 0.2972251742277878, 0.24263825872258715, 0.24312826807438526, 0.23077931652078565, 0.20737287623778633, 0.21535888756881505, 0.8259515815905455, 0.46763230432335634, 0.11290559467101391, 0.8454584060608393, 0.20058684592393572, 0.19963549112964896, 0.09971668389825605, 0.17026486279214914, 0.8947990159254364, 0.5533109105370011, 0.15614007397569896, 0.5252426169244742, 0.20196470593889626, 0.1691536411514244, 0.2095190587748179, 0.10462750939777254, 0.10467587725912542, 0.209325547030621, 0.24214741973999476, 0.18388318304876594, 0.17528528459806147, 0.2011257028982837, 0.18522655641486085, 0.17986953910384018, 0.19344699297060752, 0.18495475632382707, 0.17389552111607443, 0.08493363696482426, 0.09492685848168736, 0.09544443069407971, 0.08293470866075747, 0.0915069431851755, 0.08512871564462621, 0.12761598635449167, 0.09152875651598258, 0.08403180354112261]}, "mutation_prompt": null}
{"id": "ee691738-fc25-421a-87c6-a8a9e4a0633d", "solution": "import numpy as np\n\nclass HybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Levy flight exploration\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.2:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "HybridPSOLevyOptimization", "description": "Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization incorporating dynamic mutation rates.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "619e9872-c178-4240-ab5a-1969d71e6198", "metadata": {"aucs": [0.5560408972199651, 0.5864867002807006, 0.5271899926851582, 0.5543915584463839, 0.5646871598350898, 0.6028150752928252, 0.575036025484134, 0.5425848000578485, 0.5658537676058959, 0.10406092148716395, 0.07559580928649556, 0.12295179843306325, 0.07346559002665509, 0.04322056949167308, 0.12259360298270094, 0.14600110014441092, 0.17878642628739594, 0.10785457004598853, 0.1387600341825861, 0.16860052520276736, 0.21409878850301056, 0.18254262041818659, 0.11706929818025069, 0.13576037500761085, 0.20800499132307382, 0.138236851212601, 0.13929040161782869, 0.11570039925231701, 0.142614187133841, 0.14184598330958775, 0.14517341196966338, 0.10039197730374416, 0.12538297594121628, 0.10925155746454018, 0.13650613538106082, 0.13148856737536885, 0.981374839244097, 0.9862020128683999, 0.9862178982162048, 0.9699568255555538, 0.9665365747056506, 0.9722707568000786, 0.9808027492775703, 0.9774687009111032, 0.9697506060668544, 0.3902701475488042, 0.3755279602657734, 0.3623213782025221, 0.3737165072809847, 0.40262684612664756, 0.339693855856092, 0.3533747943558647, 0.34479208683477214, 0.36316416234365523, 0.7264592965731745, 0.22728133240498305, 0.7130611429315503, 0.19283614908043334, 0.2098832750742543, 0.19268677951422664, 0.19642119163177607, 0.1517747531081186, 0.6160435204624379, 0.186540210949092, 0.0962258403037235, 0.1581243381109061, 0.1627506882973503, 0.16995122430226417, 0.15133476777051547, 0.12227900765800348, 0.154934487458799, 0.17045788627938085, 0.1913686264654978, 0.1134028888592038, 0.1892049979934899, 0.12982520902612993, 0.13979368160194028, 0.1657391656712609, 0.19774294254292135, 0.09396209332467298, 0.23125903379868618, 9.999999999998899e-05, 0.006019563704619979, 0.0014019915447450737, 0.05008593560965857, 9.999999999998899e-05, 0.03332293354598481, 9.999999999998899e-05, 9.999999999998899e-05, 0.13469844710133416, 0.028626322336063437, 0.04998731003961043, 0.05767358698844327, 0.07365271482286773, 9.999999999998899e-05, 0.10569280007633952, 0.11313538346357055, 0.1332332532384013, 0.04697597136813236, 0.04261461201453731, 0.023349408347359546, 0.02192386295372617, 0.04025367636656496, 0.02957312805491097, 0.06891368171928403, 0.057757395872413686, 0.07347442040284058, 0.028785745410277785, 0.0420137328705219, 0.041515350990724786, 0.1620449826246566, 0.0386460651155357, 0.020981826521162872, 0.10481914686497207, 0.1611771423404751, 0.08145816318836319, 0.08058339231773493, 0.47297513879765285, 0.43357162705855967, 0.45475626546602466, 0.5453783143322684, 0.46550333814476375, 0.48176885358615895, 0.46951578650069903, 0.48268635801327653, 0.47631902370737755, 0.10221058013543793, 0.06717950523091099, 0.057362655064088, 0.13876199250074606, 0.13182455808942417, 0.09603151110266939, 0.1598093548000752, 0.11055600693560697, 0.0956329528503087, 0.16914548076768754, 0.17075970204628887, 0.3195407608482784, 0.24136551666380124, 0.38102166842140506, 0.1887290166402742, 0.26796967805369454, 0.24071428388904859, 0.22921061989791924, 0.2998902611246467, 0.3690917460714054, 0.35049752872661954, 0.283109493137089, 0.3285709863260826, 0.33975154574190203, 0.33216313944469555, 0.36194022940544723, 0.3379071890435681, 0.20229928092262095, 0.26388336982406013, 0.258310611318082, 0.1464436517542823, 0.22804113232938816, 0.2650633663018067, 0.19172341998913167, 0.24358553738284627, 0.26964784260519103, 0.20793523569565708, 0.1631183283403116, 0.2276301900961868, 0.20136718590477753, 0.20231785803177393, 0.1984313777302279, 0.2769924945230946, 0.21755689075311702, 0.22837625774896186, 0.2424685062496974, 0.2149382740406165, 0.1970610889614064, 0.2972251742277878, 0.24263825872258715, 0.24312826807438526, 0.23077931652078565, 0.20737287623778633, 0.21535888756881505, 0.8259515815905455, 0.46763230432335634, 0.11290559467101391, 0.8454584060608393, 0.20058684592393572, 0.19963549112964896, 0.09971668389825605, 0.17026486279214914, 0.8947990159254364, 0.5533109105370011, 0.15614007397569896, 0.5252426169244742, 0.20196470593889626, 0.1691536411514244, 0.2095190587748179, 0.10462750939777254, 0.10467587725912542, 0.209325547030621, 0.24214741973999476, 0.18388318304876594, 0.17528528459806147, 0.2011257028982837, 0.18522655641486085, 0.17986953910384018, 0.19344699297060752, 0.18495475632382707, 0.17389552111607443, 0.08493363696482426, 0.09492685848168736, 0.09544443069407971, 0.08293470866075747, 0.0915069431851755, 0.08512871564462621, 0.12761598635449167, 0.09152875651598258, 0.08403180354112261]}, "mutation_prompt": null}
{"id": "b26c98b5-95f7-49b5-8143-3b65d420aa56", "solution": "import numpy as np\n\nclass HybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Levy flight exploration\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.2:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "HybridPSOLevyOptimization", "description": "Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization incorporating dynamic mutation rates.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "619e9872-c178-4240-ab5a-1969d71e6198", "metadata": {"aucs": [0.5560408972199651, 0.5864867002807006, 0.5271899926851582, 0.5543915584463839, 0.5646871598350898, 0.6028150752928252, 0.575036025484134, 0.5425848000578485, 0.5658537676058959, 0.10406092148716395, 0.07559580928649556, 0.12295179843306325, 0.07346559002665509, 0.04322056949167308, 0.12259360298270094, 0.14600110014441092, 0.17878642628739594, 0.10785457004598853, 0.1387600341825861, 0.16860052520276736, 0.21409878850301056, 0.18254262041818659, 0.11706929818025069, 0.13576037500761085, 0.20800499132307382, 0.138236851212601, 0.13929040161782869, 0.11570039925231701, 0.142614187133841, 0.14184598330958775, 0.14517341196966338, 0.10039197730374416, 0.12538297594121628, 0.10925155746454018, 0.13650613538106082, 0.13148856737536885, 0.981374839244097, 0.9862020128683999, 0.9862178982162048, 0.9699568255555538, 0.9665365747056506, 0.9722707568000786, 0.9808027492775703, 0.9774687009111032, 0.9697506060668544, 0.3902701475488042, 0.3755279602657734, 0.3623213782025221, 0.3737165072809847, 0.40262684612664756, 0.339693855856092, 0.3533747943558647, 0.34479208683477214, 0.36316416234365523, 0.7264592965731745, 0.22728133240498305, 0.7130611429315503, 0.19283614908043334, 0.2098832750742543, 0.19268677951422664, 0.19642119163177607, 0.1517747531081186, 0.6160435204624379, 0.186540210949092, 0.0962258403037235, 0.1581243381109061, 0.1627506882973503, 0.16995122430226417, 0.15133476777051547, 0.12227900765800348, 0.154934487458799, 0.17045788627938085, 0.1913686264654978, 0.1134028888592038, 0.1892049979934899, 0.12982520902612993, 0.13979368160194028, 0.1657391656712609, 0.19774294254292135, 0.09396209332467298, 0.23125903379868618, 9.999999999998899e-05, 0.006019563704619979, 0.0014019915447450737, 0.05008593560965857, 9.999999999998899e-05, 0.03332293354598481, 9.999999999998899e-05, 9.999999999998899e-05, 0.13469844710133416, 0.028626322336063437, 0.04998731003961043, 0.05767358698844327, 0.07365271482286773, 9.999999999998899e-05, 0.10569280007633952, 0.11313538346357055, 0.1332332532384013, 0.04697597136813236, 0.04261461201453731, 0.023349408347359546, 0.02192386295372617, 0.04025367636656496, 0.02957312805491097, 0.06891368171928403, 0.057757395872413686, 0.07347442040284058, 0.028785745410277785, 0.0420137328705219, 0.041515350990724786, 0.1620449826246566, 0.0386460651155357, 0.020981826521162872, 0.10481914686497207, 0.1611771423404751, 0.08145816318836319, 0.08058339231773493, 0.47297513879765285, 0.43357162705855967, 0.45475626546602466, 0.5453783143322684, 0.46550333814476375, 0.48176885358615895, 0.46951578650069903, 0.48268635801327653, 0.47631902370737755, 0.10221058013543793, 0.06717950523091099, 0.057362655064088, 0.13876199250074606, 0.13182455808942417, 0.09603151110266939, 0.1598093548000752, 0.11055600693560697, 0.0956329528503087, 0.16914548076768754, 0.17075970204628887, 0.3195407608482784, 0.24136551666380124, 0.38102166842140506, 0.1887290166402742, 0.26796967805369454, 0.24071428388904859, 0.22921061989791924, 0.2998902611246467, 0.3690917460714054, 0.35049752872661954, 0.283109493137089, 0.3285709863260826, 0.33975154574190203, 0.33216313944469555, 0.36194022940544723, 0.3379071890435681, 0.20229928092262095, 0.26388336982406013, 0.258310611318082, 0.1464436517542823, 0.22804113232938816, 0.2650633663018067, 0.19172341998913167, 0.24358553738284627, 0.26964784260519103, 0.20793523569565708, 0.1631183283403116, 0.2276301900961868, 0.20136718590477753, 0.20231785803177393, 0.1984313777302279, 0.2769924945230946, 0.21755689075311702, 0.22837625774896186, 0.2424685062496974, 0.2149382740406165, 0.1970610889614064, 0.2972251742277878, 0.24263825872258715, 0.24312826807438526, 0.23077931652078565, 0.20737287623778633, 0.21535888756881505, 0.8259515815905455, 0.46763230432335634, 0.11290559467101391, 0.8454584060608393, 0.20058684592393572, 0.19963549112964896, 0.09971668389825605, 0.17026486279214914, 0.8947990159254364, 0.5533109105370011, 0.15614007397569896, 0.5252426169244742, 0.20196470593889626, 0.1691536411514244, 0.2095190587748179, 0.10462750939777254, 0.10467587725912542, 0.209325547030621, 0.24214741973999476, 0.18388318304876594, 0.17528528459806147, 0.2011257028982837, 0.18522655641486085, 0.17986953910384018, 0.19344699297060752, 0.18495475632382707, 0.17389552111607443, 0.08493363696482426, 0.09492685848168736, 0.09544443069407971, 0.08293470866075747, 0.0915069431851755, 0.08512871564462621, 0.12761598635449167, 0.09152875651598258, 0.08403180354112261]}, "mutation_prompt": null}
{"id": "e1f560a8-ddef-42c9-9951-c77c226f4971", "solution": "import numpy as np\n\nclass AdaptiveMutationHybridPSOLevyOptimization(HybridPSOLevyOptimization):\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.2):\n        super().__init__(budget, dim, pop_size, c1, c2, w, alpha, beta)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Levy flight exploration\n            for i in range(self.pop_size):\n                if np.random.rand() < self.mutation_prob:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "AdaptiveMutationHybridPSOLevyOptimization", "description": "Incorporating a dynamic adaptive mutation mechanism based on previous function evaluations for an enhanced exploration-exploitation balance in Hybrid Particle Swarm Optimization with Levy Flight.", "configspace": "", "generation": 62, "fitness": 0.2494831273209603, "feedback": "The algorithm AdaptiveMutationHybridPSOLevyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "619e9872-c178-4240-ab5a-1969d71e6198", "metadata": {"aucs": [0.5560408972199651, 0.5864867002807006, 0.5271899926851582, 0.5543915584463839, 0.5646871598350898, 0.6028150752928252, 0.575036025484134, 0.5425848000578485, 0.5658537676058959, 0.10406092148716395, 0.07559580928649556, 0.12295179843306325, 0.07346559002665509, 0.04322056949167308, 0.12259360298270094, 0.14600110014441092, 0.17878642628739594, 0.10785457004598853, 0.1387600341825861, 0.16860052520276736, 0.21409878850301056, 0.18254262041818659, 0.11706929818025069, 0.13576037500761085, 0.20800499132307382, 0.138236851212601, 0.13929040161782869, 0.11570039925231701, 0.142614187133841, 0.14184598330958775, 0.14517341196966338, 0.10039197730374416, 0.12538297594121628, 0.10925155746454018, 0.13650613538106082, 0.13148856737536885, 0.981374839244097, 0.9862020128683999, 0.9862178982162048, 0.9699568255555538, 0.9665365747056506, 0.9722707568000786, 0.9808027492775703, 0.9774687009111032, 0.9697506060668544, 0.3902701475488042, 0.3755279602657734, 0.3623213782025221, 0.3737165072809847, 0.40262684612664756, 0.339693855856092, 0.3533747943558647, 0.34479208683477214, 0.36316416234365523, 0.7264592965731745, 0.22728133240498305, 0.7130611429315503, 0.19283614908043334, 0.2098832750742543, 0.19268677951422664, 0.19642119163177607, 0.1517747531081186, 0.6160435204624379, 0.186540210949092, 0.0962258403037235, 0.1581243381109061, 0.1627506882973503, 0.16995122430226417, 0.15133476777051547, 0.12227900765800348, 0.154934487458799, 0.17045788627938085, 0.1913686264654978, 0.1134028888592038, 0.1892049979934899, 0.12982520902612993, 0.13979368160194028, 0.1657391656712609, 0.19774294254292135, 0.09396209332467298, 0.23125903379868618, 9.999999999998899e-05, 0.006019563704619979, 0.0014019915447450737, 0.05008593560965857, 9.999999999998899e-05, 0.03332293354598481, 9.999999999998899e-05, 9.999999999998899e-05, 0.13469844710133416, 0.028626322336063437, 0.04998731003961043, 0.05767358698844327, 0.07365271482286773, 9.999999999998899e-05, 0.10569280007633952, 0.11313538346357055, 0.1332332532384013, 0.04697597136813236, 0.04261461201453731, 0.023349408347359546, 0.02192386295372617, 0.04025367636656496, 0.02957312805491097, 0.06891368171928403, 0.057757395872413686, 0.07347442040284058, 0.028785745410277785, 0.0420137328705219, 0.041515350990724786, 0.1620449826246566, 0.0386460651155357, 0.020981826521162872, 0.10481914686497207, 0.1611771423404751, 0.08145816318836319, 0.08058339231773493, 0.47297513879765285, 0.43357162705855967, 0.45475626546602466, 0.5453783143322684, 0.46550333814476375, 0.48176885358615895, 0.46951578650069903, 0.48268635801327653, 0.47631902370737755, 0.10221058013543793, 0.06717950523091099, 0.057362655064088, 0.13876199250074606, 0.13182455808942417, 0.09603151110266939, 0.1598093548000752, 0.11055600693560697, 0.0956329528503087, 0.16914548076768754, 0.17075970204628887, 0.3195407608482784, 0.24136551666380124, 0.38102166842140506, 0.1887290166402742, 0.26796967805369454, 0.24071428388904859, 0.22921061989791924, 0.2998902611246467, 0.3690917460714054, 0.35049752872661954, 0.283109493137089, 0.3285709863260826, 0.33975154574190203, 0.33216313944469555, 0.36194022940544723, 0.3379071890435681, 0.20229928092262095, 0.26388336982406013, 0.258310611318082, 0.1464436517542823, 0.22804113232938816, 0.2650633663018067, 0.19172341998913167, 0.24358553738284627, 0.26964784260519103, 0.20793523569565708, 0.1631183283403116, 0.2276301900961868, 0.20136718590477753, 0.20231785803177393, 0.1984313777302279, 0.2769924945230946, 0.21755689075311702, 0.22837625774896186, 0.2424685062496974, 0.2149382740406165, 0.1970610889614064, 0.2972251742277878, 0.24263825872258715, 0.24312826807438526, 0.23077931652078565, 0.20737287623778633, 0.21535888756881505, 0.8259515815905455, 0.46763230432335634, 0.11290559467101391, 0.8454584060608393, 0.20058684592393572, 0.19963549112964896, 0.09971668389825605, 0.17026486279214914, 0.8947990159254364, 0.5533109105370011, 0.15614007397569896, 0.5252426169244742, 0.20196470593889626, 0.1691536411514244, 0.2095190587748179, 0.10462750939777254, 0.10467587725912542, 0.209325547030621, 0.24214741973999476, 0.18388318304876594, 0.17528528459806147, 0.2011257028982837, 0.18522655641486085, 0.17986953910384018, 0.19344699297060752, 0.18495475632382707, 0.17389552111607443, 0.08493363696482426, 0.09492685848168736, 0.09544443069407971, 0.08293470866075747, 0.0915069431851755, 0.08512871564462621, 0.12761598635449167, 0.09152875651598258, 0.08403180354112261]}, "mutation_prompt": null}
{"id": "e258faed-e037-4cd9-aaf6-891fbda616d4", "solution": "import numpy as np\n\nclass HybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Levy flight exploration\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.2:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "HybridPSOLevyOptimization", "description": "Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization incorporating dynamic mutation rates.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "619e9872-c178-4240-ab5a-1969d71e6198", "metadata": {"aucs": [0.5560408972199651, 0.5864867002807006, 0.5271899926851582, 0.5543915584463839, 0.5646871598350898, 0.6028150752928252, 0.575036025484134, 0.5425848000578485, 0.5658537676058959, 0.10406092148716395, 0.07559580928649556, 0.12295179843306325, 0.07346559002665509, 0.04322056949167308, 0.12259360298270094, 0.14600110014441092, 0.17878642628739594, 0.10785457004598853, 0.1387600341825861, 0.16860052520276736, 0.21409878850301056, 0.18254262041818659, 0.11706929818025069, 0.13576037500761085, 0.20800499132307382, 0.138236851212601, 0.13929040161782869, 0.11570039925231701, 0.142614187133841, 0.14184598330958775, 0.14517341196966338, 0.10039197730374416, 0.12538297594121628, 0.10925155746454018, 0.13650613538106082, 0.13148856737536885, 0.981374839244097, 0.9862020128683999, 0.9862178982162048, 0.9699568255555538, 0.9665365747056506, 0.9722707568000786, 0.9808027492775703, 0.9774687009111032, 0.9697506060668544, 0.3902701475488042, 0.3755279602657734, 0.3623213782025221, 0.3737165072809847, 0.40262684612664756, 0.339693855856092, 0.3533747943558647, 0.34479208683477214, 0.36316416234365523, 0.7264592965731745, 0.22728133240498305, 0.7130611429315503, 0.19283614908043334, 0.2098832750742543, 0.19268677951422664, 0.19642119163177607, 0.1517747531081186, 0.6160435204624379, 0.186540210949092, 0.0962258403037235, 0.1581243381109061, 0.1627506882973503, 0.16995122430226417, 0.15133476777051547, 0.12227900765800348, 0.154934487458799, 0.17045788627938085, 0.1913686264654978, 0.1134028888592038, 0.1892049979934899, 0.12982520902612993, 0.13979368160194028, 0.1657391656712609, 0.19774294254292135, 0.09396209332467298, 0.23125903379868618, 9.999999999998899e-05, 0.006019563704619979, 0.0014019915447450737, 0.05008593560965857, 9.999999999998899e-05, 0.03332293354598481, 9.999999999998899e-05, 9.999999999998899e-05, 0.13469844710133416, 0.028626322336063437, 0.04998731003961043, 0.05767358698844327, 0.07365271482286773, 9.999999999998899e-05, 0.10569280007633952, 0.11313538346357055, 0.1332332532384013, 0.04697597136813236, 0.04261461201453731, 0.023349408347359546, 0.02192386295372617, 0.04025367636656496, 0.02957312805491097, 0.06891368171928403, 0.057757395872413686, 0.07347442040284058, 0.028785745410277785, 0.0420137328705219, 0.041515350990724786, 0.1620449826246566, 0.0386460651155357, 0.020981826521162872, 0.10481914686497207, 0.1611771423404751, 0.08145816318836319, 0.08058339231773493, 0.47297513879765285, 0.43357162705855967, 0.45475626546602466, 0.5453783143322684, 0.46550333814476375, 0.48176885358615895, 0.46951578650069903, 0.48268635801327653, 0.47631902370737755, 0.10221058013543793, 0.06717950523091099, 0.057362655064088, 0.13876199250074606, 0.13182455808942417, 0.09603151110266939, 0.1598093548000752, 0.11055600693560697, 0.0956329528503087, 0.16914548076768754, 0.17075970204628887, 0.3195407608482784, 0.24136551666380124, 0.38102166842140506, 0.1887290166402742, 0.26796967805369454, 0.24071428388904859, 0.22921061989791924, 0.2998902611246467, 0.3690917460714054, 0.35049752872661954, 0.283109493137089, 0.3285709863260826, 0.33975154574190203, 0.33216313944469555, 0.36194022940544723, 0.3379071890435681, 0.20229928092262095, 0.26388336982406013, 0.258310611318082, 0.1464436517542823, 0.22804113232938816, 0.2650633663018067, 0.19172341998913167, 0.24358553738284627, 0.26964784260519103, 0.20793523569565708, 0.1631183283403116, 0.2276301900961868, 0.20136718590477753, 0.20231785803177393, 0.1984313777302279, 0.2769924945230946, 0.21755689075311702, 0.22837625774896186, 0.2424685062496974, 0.2149382740406165, 0.1970610889614064, 0.2972251742277878, 0.24263825872258715, 0.24312826807438526, 0.23077931652078565, 0.20737287623778633, 0.21535888756881505, 0.8259515815905455, 0.46763230432335634, 0.11290559467101391, 0.8454584060608393, 0.20058684592393572, 0.19963549112964896, 0.09971668389825605, 0.17026486279214914, 0.8947990159254364, 0.5533109105370011, 0.15614007397569896, 0.5252426169244742, 0.20196470593889626, 0.1691536411514244, 0.2095190587748179, 0.10462750939777254, 0.10467587725912542, 0.209325547030621, 0.24214741973999476, 0.18388318304876594, 0.17528528459806147, 0.2011257028982837, 0.18522655641486085, 0.17986953910384018, 0.19344699297060752, 0.18495475632382707, 0.17389552111607443, 0.08493363696482426, 0.09492685848168736, 0.09544443069407971, 0.08293470866075747, 0.0915069431851755, 0.08512871564462621, 0.12761598635449167, 0.09152875651598258, 0.08403180354112261]}, "mutation_prompt": null}
{"id": "1733549e-33bb-4ffb-97ef-2af7600168e6", "solution": "import numpy as np\n\nclass AdaptiveHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.2, mutation_step=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n        self.mutation_step = mutation_step\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates with Levy flight exploration\n            for i in range(self.pop_size):\n                if np.random.rand() < self.mutation_prob:\n                    population[i] += self.mutation_step * levy_flight()\n\n        return gbest", "name": "AdaptiveHybridPSOLevyOptimization", "description": "Introducing Adaptive Mutation Rates in Hybrid PSO with Levy Flight for Enhanced Convergence in Black Box Optimization", "configspace": "", "generation": 64, "fitness": 0.2494831273209603, "feedback": "The algorithm AdaptiveHybridPSOLevyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "619e9872-c178-4240-ab5a-1969d71e6198", "metadata": {"aucs": [0.5560408972199651, 0.5864867002807006, 0.5271899926851582, 0.5543915584463839, 0.5646871598350898, 0.6028150752928252, 0.575036025484134, 0.5425848000578485, 0.5658537676058959, 0.10406092148716395, 0.07559580928649556, 0.12295179843306325, 0.07346559002665509, 0.04322056949167308, 0.12259360298270094, 0.14600110014441092, 0.17878642628739594, 0.10785457004598853, 0.1387600341825861, 0.16860052520276736, 0.21409878850301056, 0.18254262041818659, 0.11706929818025069, 0.13576037500761085, 0.20800499132307382, 0.138236851212601, 0.13929040161782869, 0.11570039925231701, 0.142614187133841, 0.14184598330958775, 0.14517341196966338, 0.10039197730374416, 0.12538297594121628, 0.10925155746454018, 0.13650613538106082, 0.13148856737536885, 0.981374839244097, 0.9862020128683999, 0.9862178982162048, 0.9699568255555538, 0.9665365747056506, 0.9722707568000786, 0.9808027492775703, 0.9774687009111032, 0.9697506060668544, 0.3902701475488042, 0.3755279602657734, 0.3623213782025221, 0.3737165072809847, 0.40262684612664756, 0.339693855856092, 0.3533747943558647, 0.34479208683477214, 0.36316416234365523, 0.7264592965731745, 0.22728133240498305, 0.7130611429315503, 0.19283614908043334, 0.2098832750742543, 0.19268677951422664, 0.19642119163177607, 0.1517747531081186, 0.6160435204624379, 0.186540210949092, 0.0962258403037235, 0.1581243381109061, 0.1627506882973503, 0.16995122430226417, 0.15133476777051547, 0.12227900765800348, 0.154934487458799, 0.17045788627938085, 0.1913686264654978, 0.1134028888592038, 0.1892049979934899, 0.12982520902612993, 0.13979368160194028, 0.1657391656712609, 0.19774294254292135, 0.09396209332467298, 0.23125903379868618, 9.999999999998899e-05, 0.006019563704619979, 0.0014019915447450737, 0.05008593560965857, 9.999999999998899e-05, 0.03332293354598481, 9.999999999998899e-05, 9.999999999998899e-05, 0.13469844710133416, 0.028626322336063437, 0.04998731003961043, 0.05767358698844327, 0.07365271482286773, 9.999999999998899e-05, 0.10569280007633952, 0.11313538346357055, 0.1332332532384013, 0.04697597136813236, 0.04261461201453731, 0.023349408347359546, 0.02192386295372617, 0.04025367636656496, 0.02957312805491097, 0.06891368171928403, 0.057757395872413686, 0.07347442040284058, 0.028785745410277785, 0.0420137328705219, 0.041515350990724786, 0.1620449826246566, 0.0386460651155357, 0.020981826521162872, 0.10481914686497207, 0.1611771423404751, 0.08145816318836319, 0.08058339231773493, 0.47297513879765285, 0.43357162705855967, 0.45475626546602466, 0.5453783143322684, 0.46550333814476375, 0.48176885358615895, 0.46951578650069903, 0.48268635801327653, 0.47631902370737755, 0.10221058013543793, 0.06717950523091099, 0.057362655064088, 0.13876199250074606, 0.13182455808942417, 0.09603151110266939, 0.1598093548000752, 0.11055600693560697, 0.0956329528503087, 0.16914548076768754, 0.17075970204628887, 0.3195407608482784, 0.24136551666380124, 0.38102166842140506, 0.1887290166402742, 0.26796967805369454, 0.24071428388904859, 0.22921061989791924, 0.2998902611246467, 0.3690917460714054, 0.35049752872661954, 0.283109493137089, 0.3285709863260826, 0.33975154574190203, 0.33216313944469555, 0.36194022940544723, 0.3379071890435681, 0.20229928092262095, 0.26388336982406013, 0.258310611318082, 0.1464436517542823, 0.22804113232938816, 0.2650633663018067, 0.19172341998913167, 0.24358553738284627, 0.26964784260519103, 0.20793523569565708, 0.1631183283403116, 0.2276301900961868, 0.20136718590477753, 0.20231785803177393, 0.1984313777302279, 0.2769924945230946, 0.21755689075311702, 0.22837625774896186, 0.2424685062496974, 0.2149382740406165, 0.1970610889614064, 0.2972251742277878, 0.24263825872258715, 0.24312826807438526, 0.23077931652078565, 0.20737287623778633, 0.21535888756881505, 0.8259515815905455, 0.46763230432335634, 0.11290559467101391, 0.8454584060608393, 0.20058684592393572, 0.19963549112964896, 0.09971668389825605, 0.17026486279214914, 0.8947990159254364, 0.5533109105370011, 0.15614007397569896, 0.5252426169244742, 0.20196470593889626, 0.1691536411514244, 0.2095190587748179, 0.10462750939777254, 0.10467587725912542, 0.209325547030621, 0.24214741973999476, 0.18388318304876594, 0.17528528459806147, 0.2011257028982837, 0.18522655641486085, 0.17986953910384018, 0.19344699297060752, 0.18495475632382707, 0.17389552111607443, 0.08493363696482426, 0.09492685848168736, 0.09544443069407971, 0.08293470866075747, 0.0915069431851755, 0.08512871564462621, 0.12761598635449167, 0.09152875651598258, 0.08403180354112261]}, "mutation_prompt": null}
{"id": "47e8f9da-aa76-4e06-9edb-9890ed04003c", "solution": "import numpy as np\n\nclass HybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Levy flight exploration\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.2:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "HybridPSOLevyOptimization", "description": "Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization incorporating dynamic mutation rates.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "619e9872-c178-4240-ab5a-1969d71e6198", "metadata": {"aucs": [0.5560408972199651, 0.5864867002807006, 0.5271899926851582, 0.5543915584463839, 0.5646871598350898, 0.6028150752928252, 0.575036025484134, 0.5425848000578485, 0.5658537676058959, 0.10406092148716395, 0.07559580928649556, 0.12295179843306325, 0.07346559002665509, 0.04322056949167308, 0.12259360298270094, 0.14600110014441092, 0.17878642628739594, 0.10785457004598853, 0.1387600341825861, 0.16860052520276736, 0.21409878850301056, 0.18254262041818659, 0.11706929818025069, 0.13576037500761085, 0.20800499132307382, 0.138236851212601, 0.13929040161782869, 0.11570039925231701, 0.142614187133841, 0.14184598330958775, 0.14517341196966338, 0.10039197730374416, 0.12538297594121628, 0.10925155746454018, 0.13650613538106082, 0.13148856737536885, 0.981374839244097, 0.9862020128683999, 0.9862178982162048, 0.9699568255555538, 0.9665365747056506, 0.9722707568000786, 0.9808027492775703, 0.9774687009111032, 0.9697506060668544, 0.3902701475488042, 0.3755279602657734, 0.3623213782025221, 0.3737165072809847, 0.40262684612664756, 0.339693855856092, 0.3533747943558647, 0.34479208683477214, 0.36316416234365523, 0.7264592965731745, 0.22728133240498305, 0.7130611429315503, 0.19283614908043334, 0.2098832750742543, 0.19268677951422664, 0.19642119163177607, 0.1517747531081186, 0.6160435204624379, 0.186540210949092, 0.0962258403037235, 0.1581243381109061, 0.1627506882973503, 0.16995122430226417, 0.15133476777051547, 0.12227900765800348, 0.154934487458799, 0.17045788627938085, 0.1913686264654978, 0.1134028888592038, 0.1892049979934899, 0.12982520902612993, 0.13979368160194028, 0.1657391656712609, 0.19774294254292135, 0.09396209332467298, 0.23125903379868618, 9.999999999998899e-05, 0.006019563704619979, 0.0014019915447450737, 0.05008593560965857, 9.999999999998899e-05, 0.03332293354598481, 9.999999999998899e-05, 9.999999999998899e-05, 0.13469844710133416, 0.028626322336063437, 0.04998731003961043, 0.05767358698844327, 0.07365271482286773, 9.999999999998899e-05, 0.10569280007633952, 0.11313538346357055, 0.1332332532384013, 0.04697597136813236, 0.04261461201453731, 0.023349408347359546, 0.02192386295372617, 0.04025367636656496, 0.02957312805491097, 0.06891368171928403, 0.057757395872413686, 0.07347442040284058, 0.028785745410277785, 0.0420137328705219, 0.041515350990724786, 0.1620449826246566, 0.0386460651155357, 0.020981826521162872, 0.10481914686497207, 0.1611771423404751, 0.08145816318836319, 0.08058339231773493, 0.47297513879765285, 0.43357162705855967, 0.45475626546602466, 0.5453783143322684, 0.46550333814476375, 0.48176885358615895, 0.46951578650069903, 0.48268635801327653, 0.47631902370737755, 0.10221058013543793, 0.06717950523091099, 0.057362655064088, 0.13876199250074606, 0.13182455808942417, 0.09603151110266939, 0.1598093548000752, 0.11055600693560697, 0.0956329528503087, 0.16914548076768754, 0.17075970204628887, 0.3195407608482784, 0.24136551666380124, 0.38102166842140506, 0.1887290166402742, 0.26796967805369454, 0.24071428388904859, 0.22921061989791924, 0.2998902611246467, 0.3690917460714054, 0.35049752872661954, 0.283109493137089, 0.3285709863260826, 0.33975154574190203, 0.33216313944469555, 0.36194022940544723, 0.3379071890435681, 0.20229928092262095, 0.26388336982406013, 0.258310611318082, 0.1464436517542823, 0.22804113232938816, 0.2650633663018067, 0.19172341998913167, 0.24358553738284627, 0.26964784260519103, 0.20793523569565708, 0.1631183283403116, 0.2276301900961868, 0.20136718590477753, 0.20231785803177393, 0.1984313777302279, 0.2769924945230946, 0.21755689075311702, 0.22837625774896186, 0.2424685062496974, 0.2149382740406165, 0.1970610889614064, 0.2972251742277878, 0.24263825872258715, 0.24312826807438526, 0.23077931652078565, 0.20737287623778633, 0.21535888756881505, 0.8259515815905455, 0.46763230432335634, 0.11290559467101391, 0.8454584060608393, 0.20058684592393572, 0.19963549112964896, 0.09971668389825605, 0.17026486279214914, 0.8947990159254364, 0.5533109105370011, 0.15614007397569896, 0.5252426169244742, 0.20196470593889626, 0.1691536411514244, 0.2095190587748179, 0.10462750939777254, 0.10467587725912542, 0.209325547030621, 0.24214741973999476, 0.18388318304876594, 0.17528528459806147, 0.2011257028982837, 0.18522655641486085, 0.17986953910384018, 0.19344699297060752, 0.18495475632382707, 0.17389552111607443, 0.08493363696482426, 0.09492685848168736, 0.09544443069407971, 0.08293470866075747, 0.0915069431851755, 0.08512871564462621, 0.12761598635449167, 0.09152875651598258, 0.08403180354112261]}, "mutation_prompt": null}
{"id": "d07035b1-3edb-492c-8872-c9a895d67542", "solution": "import numpy as np\n\nclass HybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Levy flight exploration\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.2:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "HybridPSOLevyOptimization", "description": "Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization incorporating dynamic mutation rates.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "619e9872-c178-4240-ab5a-1969d71e6198", "metadata": {"aucs": [0.5560408972199651, 0.5864867002807006, 0.5271899926851582, 0.5543915584463839, 0.5646871598350898, 0.6028150752928252, 0.575036025484134, 0.5425848000578485, 0.5658537676058959, 0.10406092148716395, 0.07559580928649556, 0.12295179843306325, 0.07346559002665509, 0.04322056949167308, 0.12259360298270094, 0.14600110014441092, 0.17878642628739594, 0.10785457004598853, 0.1387600341825861, 0.16860052520276736, 0.21409878850301056, 0.18254262041818659, 0.11706929818025069, 0.13576037500761085, 0.20800499132307382, 0.138236851212601, 0.13929040161782869, 0.11570039925231701, 0.142614187133841, 0.14184598330958775, 0.14517341196966338, 0.10039197730374416, 0.12538297594121628, 0.10925155746454018, 0.13650613538106082, 0.13148856737536885, 0.981374839244097, 0.9862020128683999, 0.9862178982162048, 0.9699568255555538, 0.9665365747056506, 0.9722707568000786, 0.9808027492775703, 0.9774687009111032, 0.9697506060668544, 0.3902701475488042, 0.3755279602657734, 0.3623213782025221, 0.3737165072809847, 0.40262684612664756, 0.339693855856092, 0.3533747943558647, 0.34479208683477214, 0.36316416234365523, 0.7264592965731745, 0.22728133240498305, 0.7130611429315503, 0.19283614908043334, 0.2098832750742543, 0.19268677951422664, 0.19642119163177607, 0.1517747531081186, 0.6160435204624379, 0.186540210949092, 0.0962258403037235, 0.1581243381109061, 0.1627506882973503, 0.16995122430226417, 0.15133476777051547, 0.12227900765800348, 0.154934487458799, 0.17045788627938085, 0.1913686264654978, 0.1134028888592038, 0.1892049979934899, 0.12982520902612993, 0.13979368160194028, 0.1657391656712609, 0.19774294254292135, 0.09396209332467298, 0.23125903379868618, 9.999999999998899e-05, 0.006019563704619979, 0.0014019915447450737, 0.05008593560965857, 9.999999999998899e-05, 0.03332293354598481, 9.999999999998899e-05, 9.999999999998899e-05, 0.13469844710133416, 0.028626322336063437, 0.04998731003961043, 0.05767358698844327, 0.07365271482286773, 9.999999999998899e-05, 0.10569280007633952, 0.11313538346357055, 0.1332332532384013, 0.04697597136813236, 0.04261461201453731, 0.023349408347359546, 0.02192386295372617, 0.04025367636656496, 0.02957312805491097, 0.06891368171928403, 0.057757395872413686, 0.07347442040284058, 0.028785745410277785, 0.0420137328705219, 0.041515350990724786, 0.1620449826246566, 0.0386460651155357, 0.020981826521162872, 0.10481914686497207, 0.1611771423404751, 0.08145816318836319, 0.08058339231773493, 0.47297513879765285, 0.43357162705855967, 0.45475626546602466, 0.5453783143322684, 0.46550333814476375, 0.48176885358615895, 0.46951578650069903, 0.48268635801327653, 0.47631902370737755, 0.10221058013543793, 0.06717950523091099, 0.057362655064088, 0.13876199250074606, 0.13182455808942417, 0.09603151110266939, 0.1598093548000752, 0.11055600693560697, 0.0956329528503087, 0.16914548076768754, 0.17075970204628887, 0.3195407608482784, 0.24136551666380124, 0.38102166842140506, 0.1887290166402742, 0.26796967805369454, 0.24071428388904859, 0.22921061989791924, 0.2998902611246467, 0.3690917460714054, 0.35049752872661954, 0.283109493137089, 0.3285709863260826, 0.33975154574190203, 0.33216313944469555, 0.36194022940544723, 0.3379071890435681, 0.20229928092262095, 0.26388336982406013, 0.258310611318082, 0.1464436517542823, 0.22804113232938816, 0.2650633663018067, 0.19172341998913167, 0.24358553738284627, 0.26964784260519103, 0.20793523569565708, 0.1631183283403116, 0.2276301900961868, 0.20136718590477753, 0.20231785803177393, 0.1984313777302279, 0.2769924945230946, 0.21755689075311702, 0.22837625774896186, 0.2424685062496974, 0.2149382740406165, 0.1970610889614064, 0.2972251742277878, 0.24263825872258715, 0.24312826807438526, 0.23077931652078565, 0.20737287623778633, 0.21535888756881505, 0.8259515815905455, 0.46763230432335634, 0.11290559467101391, 0.8454584060608393, 0.20058684592393572, 0.19963549112964896, 0.09971668389825605, 0.17026486279214914, 0.8947990159254364, 0.5533109105370011, 0.15614007397569896, 0.5252426169244742, 0.20196470593889626, 0.1691536411514244, 0.2095190587748179, 0.10462750939777254, 0.10467587725912542, 0.209325547030621, 0.24214741973999476, 0.18388318304876594, 0.17528528459806147, 0.2011257028982837, 0.18522655641486085, 0.17986953910384018, 0.19344699297060752, 0.18495475632382707, 0.17389552111607443, 0.08493363696482426, 0.09492685848168736, 0.09544443069407971, 0.08293470866075747, 0.0915069431851755, 0.08512871564462621, 0.12761598635449167, 0.09152875651598258, 0.08403180354112261]}, "mutation_prompt": null}
{"id": "d14d7c16-db94-479c-881f-e7278fd57902", "solution": "import numpy as np\n\nclass DynamicBoundaryHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    if np.any(population[i] < -5.0):\n                        population[i][population[i] < -5.0] = -5.0\n                    if np.any(population[i] > 5.0):\n                        population[i][population[i] > 5.0] = 5.0\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Levy flight exploration\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.2:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "DynamicBoundaryHybridPSOLevyOptimization", "description": "Introducing Dynamic Boundary Handling Strategy to Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization", "configspace": "", "generation": 67, "fitness": 0.2494831273209603, "feedback": "The algorithm DynamicBoundaryHybridPSOLevyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "619e9872-c178-4240-ab5a-1969d71e6198", "metadata": {"aucs": [0.5560408972199651, 0.5864867002807006, 0.5271899926851582, 0.5543915584463839, 0.5646871598350898, 0.6028150752928252, 0.575036025484134, 0.5425848000578485, 0.5658537676058959, 0.10406092148716395, 0.07559580928649556, 0.12295179843306325, 0.07346559002665509, 0.04322056949167308, 0.12259360298270094, 0.14600110014441092, 0.17878642628739594, 0.10785457004598853, 0.1387600341825861, 0.16860052520276736, 0.21409878850301056, 0.18254262041818659, 0.11706929818025069, 0.13576037500761085, 0.20800499132307382, 0.138236851212601, 0.13929040161782869, 0.11570039925231701, 0.142614187133841, 0.14184598330958775, 0.14517341196966338, 0.10039197730374416, 0.12538297594121628, 0.10925155746454018, 0.13650613538106082, 0.13148856737536885, 0.981374839244097, 0.9862020128683999, 0.9862178982162048, 0.9699568255555538, 0.9665365747056506, 0.9722707568000786, 0.9808027492775703, 0.9774687009111032, 0.9697506060668544, 0.3902701475488042, 0.3755279602657734, 0.3623213782025221, 0.3737165072809847, 0.40262684612664756, 0.339693855856092, 0.3533747943558647, 0.34479208683477214, 0.36316416234365523, 0.7264592965731745, 0.22728133240498305, 0.7130611429315503, 0.19283614908043334, 0.2098832750742543, 0.19268677951422664, 0.19642119163177607, 0.1517747531081186, 0.6160435204624379, 0.186540210949092, 0.0962258403037235, 0.1581243381109061, 0.1627506882973503, 0.16995122430226417, 0.15133476777051547, 0.12227900765800348, 0.154934487458799, 0.17045788627938085, 0.1913686264654978, 0.1134028888592038, 0.1892049979934899, 0.12982520902612993, 0.13979368160194028, 0.1657391656712609, 0.19774294254292135, 0.09396209332467298, 0.23125903379868618, 9.999999999998899e-05, 0.006019563704619979, 0.0014019915447450737, 0.05008593560965857, 9.999999999998899e-05, 0.03332293354598481, 9.999999999998899e-05, 9.999999999998899e-05, 0.13469844710133416, 0.028626322336063437, 0.04998731003961043, 0.05767358698844327, 0.07365271482286773, 9.999999999998899e-05, 0.10569280007633952, 0.11313538346357055, 0.1332332532384013, 0.04697597136813236, 0.04261461201453731, 0.023349408347359546, 0.02192386295372617, 0.04025367636656496, 0.02957312805491097, 0.06891368171928403, 0.057757395872413686, 0.07347442040284058, 0.028785745410277785, 0.0420137328705219, 0.041515350990724786, 0.1620449826246566, 0.0386460651155357, 0.020981826521162872, 0.10481914686497207, 0.1611771423404751, 0.08145816318836319, 0.08058339231773493, 0.47297513879765285, 0.43357162705855967, 0.45475626546602466, 0.5453783143322684, 0.46550333814476375, 0.48176885358615895, 0.46951578650069903, 0.48268635801327653, 0.47631902370737755, 0.10221058013543793, 0.06717950523091099, 0.057362655064088, 0.13876199250074606, 0.13182455808942417, 0.09603151110266939, 0.1598093548000752, 0.11055600693560697, 0.0956329528503087, 0.16914548076768754, 0.17075970204628887, 0.3195407608482784, 0.24136551666380124, 0.38102166842140506, 0.1887290166402742, 0.26796967805369454, 0.24071428388904859, 0.22921061989791924, 0.2998902611246467, 0.3690917460714054, 0.35049752872661954, 0.283109493137089, 0.3285709863260826, 0.33975154574190203, 0.33216313944469555, 0.36194022940544723, 0.3379071890435681, 0.20229928092262095, 0.26388336982406013, 0.258310611318082, 0.1464436517542823, 0.22804113232938816, 0.2650633663018067, 0.19172341998913167, 0.24358553738284627, 0.26964784260519103, 0.20793523569565708, 0.1631183283403116, 0.2276301900961868, 0.20136718590477753, 0.20231785803177393, 0.1984313777302279, 0.2769924945230946, 0.21755689075311702, 0.22837625774896186, 0.2424685062496974, 0.2149382740406165, 0.1970610889614064, 0.2972251742277878, 0.24263825872258715, 0.24312826807438526, 0.23077931652078565, 0.20737287623778633, 0.21535888756881505, 0.8259515815905455, 0.46763230432335634, 0.11290559467101391, 0.8454584060608393, 0.20058684592393572, 0.19963549112964896, 0.09971668389825605, 0.17026486279214914, 0.8947990159254364, 0.5533109105370011, 0.15614007397569896, 0.5252426169244742, 0.20196470593889626, 0.1691536411514244, 0.2095190587748179, 0.10462750939777254, 0.10467587725912542, 0.209325547030621, 0.24214741973999476, 0.18388318304876594, 0.17528528459806147, 0.2011257028982837, 0.18522655641486085, 0.17986953910384018, 0.19344699297060752, 0.18495475632382707, 0.17389552111607443, 0.08493363696482426, 0.09492685848168736, 0.09544443069407971, 0.08293470866075747, 0.0915069431851755, 0.08512871564462621, 0.12761598635449167, 0.09152875651598258, 0.08403180354112261]}, "mutation_prompt": null}
{"id": "33f9559d-facf-48b4-92db-f3d462d63449", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, levy_prob=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.levy_prob = levy_prob\n\n    def __call__(self, func):\n        def enhanced_levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Enhanced Levy flight exploration\n            for i in range(self.pop_size):\n                if np.random.rand() < self.levy_prob:\n                    population[i] += 0.01 * enhanced_levy_flight()\n\n        return gbest", "name": "EnhancedHybridPSOLevyOptimization", "description": "Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization with enhanced levy flight exploration probability.", "configspace": "", "generation": 68, "fitness": 0.2494831273209603, "feedback": "The algorithm EnhancedHybridPSOLevyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "619e9872-c178-4240-ab5a-1969d71e6198", "metadata": {"aucs": [0.5560408972199651, 0.5864867002807006, 0.5271899926851582, 0.5543915584463839, 0.5646871598350898, 0.6028150752928252, 0.575036025484134, 0.5425848000578485, 0.5658537676058959, 0.10406092148716395, 0.07559580928649556, 0.12295179843306325, 0.07346559002665509, 0.04322056949167308, 0.12259360298270094, 0.14600110014441092, 0.17878642628739594, 0.10785457004598853, 0.1387600341825861, 0.16860052520276736, 0.21409878850301056, 0.18254262041818659, 0.11706929818025069, 0.13576037500761085, 0.20800499132307382, 0.138236851212601, 0.13929040161782869, 0.11570039925231701, 0.142614187133841, 0.14184598330958775, 0.14517341196966338, 0.10039197730374416, 0.12538297594121628, 0.10925155746454018, 0.13650613538106082, 0.13148856737536885, 0.981374839244097, 0.9862020128683999, 0.9862178982162048, 0.9699568255555538, 0.9665365747056506, 0.9722707568000786, 0.9808027492775703, 0.9774687009111032, 0.9697506060668544, 0.3902701475488042, 0.3755279602657734, 0.3623213782025221, 0.3737165072809847, 0.40262684612664756, 0.339693855856092, 0.3533747943558647, 0.34479208683477214, 0.36316416234365523, 0.7264592965731745, 0.22728133240498305, 0.7130611429315503, 0.19283614908043334, 0.2098832750742543, 0.19268677951422664, 0.19642119163177607, 0.1517747531081186, 0.6160435204624379, 0.186540210949092, 0.0962258403037235, 0.1581243381109061, 0.1627506882973503, 0.16995122430226417, 0.15133476777051547, 0.12227900765800348, 0.154934487458799, 0.17045788627938085, 0.1913686264654978, 0.1134028888592038, 0.1892049979934899, 0.12982520902612993, 0.13979368160194028, 0.1657391656712609, 0.19774294254292135, 0.09396209332467298, 0.23125903379868618, 9.999999999998899e-05, 0.006019563704619979, 0.0014019915447450737, 0.05008593560965857, 9.999999999998899e-05, 0.03332293354598481, 9.999999999998899e-05, 9.999999999998899e-05, 0.13469844710133416, 0.028626322336063437, 0.04998731003961043, 0.05767358698844327, 0.07365271482286773, 9.999999999998899e-05, 0.10569280007633952, 0.11313538346357055, 0.1332332532384013, 0.04697597136813236, 0.04261461201453731, 0.023349408347359546, 0.02192386295372617, 0.04025367636656496, 0.02957312805491097, 0.06891368171928403, 0.057757395872413686, 0.07347442040284058, 0.028785745410277785, 0.0420137328705219, 0.041515350990724786, 0.1620449826246566, 0.0386460651155357, 0.020981826521162872, 0.10481914686497207, 0.1611771423404751, 0.08145816318836319, 0.08058339231773493, 0.47297513879765285, 0.43357162705855967, 0.45475626546602466, 0.5453783143322684, 0.46550333814476375, 0.48176885358615895, 0.46951578650069903, 0.48268635801327653, 0.47631902370737755, 0.10221058013543793, 0.06717950523091099, 0.057362655064088, 0.13876199250074606, 0.13182455808942417, 0.09603151110266939, 0.1598093548000752, 0.11055600693560697, 0.0956329528503087, 0.16914548076768754, 0.17075970204628887, 0.3195407608482784, 0.24136551666380124, 0.38102166842140506, 0.1887290166402742, 0.26796967805369454, 0.24071428388904859, 0.22921061989791924, 0.2998902611246467, 0.3690917460714054, 0.35049752872661954, 0.283109493137089, 0.3285709863260826, 0.33975154574190203, 0.33216313944469555, 0.36194022940544723, 0.3379071890435681, 0.20229928092262095, 0.26388336982406013, 0.258310611318082, 0.1464436517542823, 0.22804113232938816, 0.2650633663018067, 0.19172341998913167, 0.24358553738284627, 0.26964784260519103, 0.20793523569565708, 0.1631183283403116, 0.2276301900961868, 0.20136718590477753, 0.20231785803177393, 0.1984313777302279, 0.2769924945230946, 0.21755689075311702, 0.22837625774896186, 0.2424685062496974, 0.2149382740406165, 0.1970610889614064, 0.2972251742277878, 0.24263825872258715, 0.24312826807438526, 0.23077931652078565, 0.20737287623778633, 0.21535888756881505, 0.8259515815905455, 0.46763230432335634, 0.11290559467101391, 0.8454584060608393, 0.20058684592393572, 0.19963549112964896, 0.09971668389825605, 0.17026486279214914, 0.8947990159254364, 0.5533109105370011, 0.15614007397569896, 0.5252426169244742, 0.20196470593889626, 0.1691536411514244, 0.2095190587748179, 0.10462750939777254, 0.10467587725912542, 0.209325547030621, 0.24214741973999476, 0.18388318304876594, 0.17528528459806147, 0.2011257028982837, 0.18522655641486085, 0.17986953910384018, 0.19344699297060752, 0.18495475632382707, 0.17389552111607443, 0.08493363696482426, 0.09492685848168736, 0.09544443069407971, 0.08293470866075747, 0.0915069431851755, 0.08512871564462621, 0.12761598635449167, 0.09152875651598258, 0.08403180354112261]}, "mutation_prompt": null}
{"id": "abf797a8-b394-4155-a3a2-c7436015ff3b", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            update_mutation_rates = np.random.binomial(1, self.mutation_prob, self.pop_size)\n            for i in range(self.pop_size):\n                if update_mutation_rates[i]:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "EnhancedHybridPSOLevyOptimization", "description": "Implement an Enhanced Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization by introducing adaptive mutation rates and diversity preservation mechanisms.", "configspace": "", "generation": 69, "fitness": 0.2687279353812435, "feedback": "The algorithm EnhancedHybridPSOLevyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "619e9872-c178-4240-ab5a-1969d71e6198", "metadata": {"aucs": [0.7142402016086978, 0.7007193011820012, 0.666081862655885, 0.6753188692101239, 0.7028022617829164, 0.6716872722437198, 0.68348418341009, 0.6898449515814451, 0.6697188552690458, 0.1428168918437145, 0.3382753282788692, 0.19336569571092144, 0.2878289905436344, 0.045591281980020715, 0.23491446220134848, 0.0480896758863637, 0.22802455323137782, 0.2709475861784565, 0.16566270824648077, 0.16290875853181874, 0.14961963903015607, 0.2808763558252194, 0.17304661868394744, 0.18734553948712374, 0.15039427431957741, 0.10376732645784736, 0.146101303724126, 0.11629348647033677, 0.14627785668772408, 0.11008674211192193, 0.129746887965126, 0.14673123190955717, 0.1215677624275513, 0.11501431071488111, 0.16379258625042148, 0.16359214664028954, 0.9810848093346731, 0.9861172822051606, 0.9814261593385959, 0.9750952957987052, 0.9682201516828866, 0.976206384985872, 0.9857839595277029, 0.9784183421052384, 0.976087967693994, 0.4363970639321767, 0.41977375354376445, 0.4114165304978903, 0.3966223399375629, 0.3967321594942793, 0.3944974970137497, 0.3964846275031516, 0.42880698603925005, 0.3749048460106794, 0.2297800869327421, 0.2487499603189245, 0.22372400187473018, 0.19365802473296345, 0.8231536920675275, 0.3753970584387144, 0.16189225459143164, 0.16299763013029733, 0.23472140757626248, 0.31089149023049745, 0.1771131881150808, 0.16428221941146837, 0.13047877406759945, 0.12767069536608378, 0.17515712303866182, 0.24264958749506826, 0.2571355909328148, 0.1674161532461158, 0.20647339823023503, 0.11168888016549772, 0.1502103284118499, 0.18733336834161818, 0.23431673511563722, 0.19796525625726835, 0.19892475184746305, 0.09457667232499711, 0.11665247422635039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03940020524404986, 0.061789375289941884, 0.00953778441240083, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004082624897783216, 0.07977904700780691, 0.08204807697375216, 0.09037968291096043, 0.05637058307563658, 0.006602477673077756, 0.006603161117244238, 0.1647044917505628, 0.11523276873853572, 0.04693655558478427, 0.04220234891528796, 0.031135572491733154, 0.08109699020267014, 0.07499408105770833, 0.07891180121051733, 0.07351575305465852, 0.0971903368437077, 0.09613294340995782, 0.04818428182846424, 0.07271505045175541, 0.04332607514063924, 0.1258374934671136, 0.2192281110187313, 0.01391922602805118, 0.05262582229812651, 0.05485154405286763, 0.08148862773851306, 0.0834890626847038, 0.4873304778584596, 0.5013717923493697, 0.5035349733930687, 0.5383282927138513, 0.4501452476808512, 0.4603597111407862, 0.5049832189550398, 0.5368391320097091, 0.49967529440057457, 0.13101123029272932, 0.07368550359776982, 0.0876175617640258, 0.11586981296948229, 0.09047838970917876, 0.10365769866104313, 0.11335202396427813, 0.1182738874802044, 0.11063772647357151, 0.32029700795466465, 0.3616035336419754, 0.254937008589764, 0.36470621054301444, 0.34844082662345677, 0.16172620577938646, 0.21242259064062297, 0.2136272866067448, 0.29874969048257494, 0.2723417535074478, 0.3791859437002548, 0.2906504515967637, 0.30722949577428715, 0.26312059766035933, 0.3748174663236553, 0.28017014998088485, 0.4124025466860246, 0.27594772925185396, 0.22561354790189447, 0.26828769192673385, 0.2541812010191328, 0.255958542015426, 0.21685017291780428, 0.3463183382391206, 0.3165405206517843, 0.2771528824846655, 0.24841493712802853, 0.20892071887293084, 0.13737544987601924, 0.20654386005148861, 0.19030989064086368, 0.2104533849435699, 0.24596766324482433, 0.23834442206463624, 0.31361480821904464, 0.2243380633827604, 0.19671520151910005, 0.21342019962655145, 0.39001268029560376, 0.20604968577467309, 0.20632239882186731, 0.20826852545358232, 0.2505830672246099, 0.2278472327436698, 0.2409093333115634, 0.7936282154013976, 0.14121247924934144, 0.15099787418031807, 0.8912204863331057, 0.19952868096969378, 0.20030388044370062, 0.1171488376246822, 0.16938777836420904, 0.8713710214749509, 0.6648325800378816, 0.15690777152248736, 0.209183626200236, 0.4928739073261741, 0.33476596936777714, 0.5210070135732505, 0.20999678754219997, 0.20919743888642128, 0.5234957028853058, 0.18962145305520584, 0.1870846621212835, 0.20765931479637734, 0.1857847085187656, 0.22410369275460473, 0.1960054244039945, 0.207887796949634, 0.18494728588183307, 0.222850106327244, 0.10133784826684133, 0.0931522937035586, 0.09462945109055543, 0.08021595832456974, 0.08407682450843534, 0.08394475965422477, 0.12701424782428838, 0.08965076745602307, 0.08656218963863704]}, "mutation_prompt": null}
{"id": "b98e36ae-ce00-4295-b22d-58088be979f9", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            update_mutation_rates = np.random.binomial(1, self.mutation_prob, self.pop_size)\n            for i in range(self.pop_size):\n                if update_mutation_rates[i]:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "EnhancedHybridPSOLevyOptimization", "description": "Implement an Enhanced Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization by introducing adaptive mutation rates and diversity preservation mechanisms.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf797a8-b394-4155-a3a2-c7436015ff3b", "metadata": {"aucs": [0.7142402016086978, 0.7007193011820012, 0.666081862655885, 0.6753188692101239, 0.7028022617829164, 0.6716872722437198, 0.68348418341009, 0.6898449515814451, 0.6697188552690458, 0.1428168918437145, 0.3382753282788692, 0.19336569571092144, 0.2878289905436344, 0.045591281980020715, 0.23491446220134848, 0.0480896758863637, 0.22802455323137782, 0.2709475861784565, 0.16566270824648077, 0.16290875853181874, 0.14961963903015607, 0.2808763558252194, 0.17304661868394744, 0.18734553948712374, 0.15039427431957741, 0.10376732645784736, 0.146101303724126, 0.11629348647033677, 0.14627785668772408, 0.11008674211192193, 0.129746887965126, 0.14673123190955717, 0.1215677624275513, 0.11501431071488111, 0.16379258625042148, 0.16359214664028954, 0.9810848093346731, 0.9861172822051606, 0.9814261593385959, 0.9750952957987052, 0.9682201516828866, 0.976206384985872, 0.9857839595277029, 0.9784183421052384, 0.976087967693994, 0.4363970639321767, 0.41977375354376445, 0.4114165304978903, 0.3966223399375629, 0.3967321594942793, 0.3944974970137497, 0.3964846275031516, 0.42880698603925005, 0.3749048460106794, 0.2297800869327421, 0.2487499603189245, 0.22372400187473018, 0.19365802473296345, 0.8231536920675275, 0.3753970584387144, 0.16189225459143164, 0.16299763013029733, 0.23472140757626248, 0.31089149023049745, 0.1771131881150808, 0.16428221941146837, 0.13047877406759945, 0.12767069536608378, 0.17515712303866182, 0.24264958749506826, 0.2571355909328148, 0.1674161532461158, 0.20647339823023503, 0.11168888016549772, 0.1502103284118499, 0.18733336834161818, 0.23431673511563722, 0.19796525625726835, 0.19892475184746305, 0.09457667232499711, 0.11665247422635039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03940020524404986, 0.061789375289941884, 0.00953778441240083, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004082624897783216, 0.07977904700780691, 0.08204807697375216, 0.09037968291096043, 0.05637058307563658, 0.006602477673077756, 0.006603161117244238, 0.1647044917505628, 0.11523276873853572, 0.04693655558478427, 0.04220234891528796, 0.031135572491733154, 0.08109699020267014, 0.07499408105770833, 0.07891180121051733, 0.07351575305465852, 0.0971903368437077, 0.09613294340995782, 0.04818428182846424, 0.07271505045175541, 0.04332607514063924, 0.1258374934671136, 0.2192281110187313, 0.01391922602805118, 0.05262582229812651, 0.05485154405286763, 0.08148862773851306, 0.0834890626847038, 0.4873304778584596, 0.5013717923493697, 0.5035349733930687, 0.5383282927138513, 0.4501452476808512, 0.4603597111407862, 0.5049832189550398, 0.5368391320097091, 0.49967529440057457, 0.13101123029272932, 0.07368550359776982, 0.0876175617640258, 0.11586981296948229, 0.09047838970917876, 0.10365769866104313, 0.11335202396427813, 0.1182738874802044, 0.11063772647357151, 0.32029700795466465, 0.3616035336419754, 0.254937008589764, 0.36470621054301444, 0.34844082662345677, 0.16172620577938646, 0.21242259064062297, 0.2136272866067448, 0.29874969048257494, 0.2723417535074478, 0.3791859437002548, 0.2906504515967637, 0.30722949577428715, 0.26312059766035933, 0.3748174663236553, 0.28017014998088485, 0.4124025466860246, 0.27594772925185396, 0.22561354790189447, 0.26828769192673385, 0.2541812010191328, 0.255958542015426, 0.21685017291780428, 0.3463183382391206, 0.3165405206517843, 0.2771528824846655, 0.24841493712802853, 0.20892071887293084, 0.13737544987601924, 0.20654386005148861, 0.19030989064086368, 0.2104533849435699, 0.24596766324482433, 0.23834442206463624, 0.31361480821904464, 0.2243380633827604, 0.19671520151910005, 0.21342019962655145, 0.39001268029560376, 0.20604968577467309, 0.20632239882186731, 0.20826852545358232, 0.2505830672246099, 0.2278472327436698, 0.2409093333115634, 0.7936282154013976, 0.14121247924934144, 0.15099787418031807, 0.8912204863331057, 0.19952868096969378, 0.20030388044370062, 0.1171488376246822, 0.16938777836420904, 0.8713710214749509, 0.6648325800378816, 0.15690777152248736, 0.209183626200236, 0.4928739073261741, 0.33476596936777714, 0.5210070135732505, 0.20999678754219997, 0.20919743888642128, 0.5234957028853058, 0.18962145305520584, 0.1870846621212835, 0.20765931479637734, 0.1857847085187656, 0.22410369275460473, 0.1960054244039945, 0.207887796949634, 0.18494728588183307, 0.222850106327244, 0.10133784826684133, 0.0931522937035586, 0.09462945109055543, 0.08021595832456974, 0.08407682450843534, 0.08394475965422477, 0.12701424782428838, 0.08965076745602307, 0.08656218963863704]}, "mutation_prompt": null}
{"id": "7bac7765-52e0-48c2-a59a-fb5d9202c5d5", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            update_mutation_rates = np.random.binomial(1, self.mutation_prob, self.pop_size)\n            for i in range(self.pop_size):\n                if update_mutation_rates[i]:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "EnhancedHybridPSOLevyOptimization", "description": "Implement an Enhanced Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization by introducing adaptive mutation rates and diversity preservation mechanisms.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf797a8-b394-4155-a3a2-c7436015ff3b", "metadata": {"aucs": [0.7142402016086978, 0.7007193011820012, 0.666081862655885, 0.6753188692101239, 0.7028022617829164, 0.6716872722437198, 0.68348418341009, 0.6898449515814451, 0.6697188552690458, 0.1428168918437145, 0.3382753282788692, 0.19336569571092144, 0.2878289905436344, 0.045591281980020715, 0.23491446220134848, 0.0480896758863637, 0.22802455323137782, 0.2709475861784565, 0.16566270824648077, 0.16290875853181874, 0.14961963903015607, 0.2808763558252194, 0.17304661868394744, 0.18734553948712374, 0.15039427431957741, 0.10376732645784736, 0.146101303724126, 0.11629348647033677, 0.14627785668772408, 0.11008674211192193, 0.129746887965126, 0.14673123190955717, 0.1215677624275513, 0.11501431071488111, 0.16379258625042148, 0.16359214664028954, 0.9810848093346731, 0.9861172822051606, 0.9814261593385959, 0.9750952957987052, 0.9682201516828866, 0.976206384985872, 0.9857839595277029, 0.9784183421052384, 0.976087967693994, 0.4363970639321767, 0.41977375354376445, 0.4114165304978903, 0.3966223399375629, 0.3967321594942793, 0.3944974970137497, 0.3964846275031516, 0.42880698603925005, 0.3749048460106794, 0.2297800869327421, 0.2487499603189245, 0.22372400187473018, 0.19365802473296345, 0.8231536920675275, 0.3753970584387144, 0.16189225459143164, 0.16299763013029733, 0.23472140757626248, 0.31089149023049745, 0.1771131881150808, 0.16428221941146837, 0.13047877406759945, 0.12767069536608378, 0.17515712303866182, 0.24264958749506826, 0.2571355909328148, 0.1674161532461158, 0.20647339823023503, 0.11168888016549772, 0.1502103284118499, 0.18733336834161818, 0.23431673511563722, 0.19796525625726835, 0.19892475184746305, 0.09457667232499711, 0.11665247422635039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03940020524404986, 0.061789375289941884, 0.00953778441240083, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004082624897783216, 0.07977904700780691, 0.08204807697375216, 0.09037968291096043, 0.05637058307563658, 0.006602477673077756, 0.006603161117244238, 0.1647044917505628, 0.11523276873853572, 0.04693655558478427, 0.04220234891528796, 0.031135572491733154, 0.08109699020267014, 0.07499408105770833, 0.07891180121051733, 0.07351575305465852, 0.0971903368437077, 0.09613294340995782, 0.04818428182846424, 0.07271505045175541, 0.04332607514063924, 0.1258374934671136, 0.2192281110187313, 0.01391922602805118, 0.05262582229812651, 0.05485154405286763, 0.08148862773851306, 0.0834890626847038, 0.4873304778584596, 0.5013717923493697, 0.5035349733930687, 0.5383282927138513, 0.4501452476808512, 0.4603597111407862, 0.5049832189550398, 0.5368391320097091, 0.49967529440057457, 0.13101123029272932, 0.07368550359776982, 0.0876175617640258, 0.11586981296948229, 0.09047838970917876, 0.10365769866104313, 0.11335202396427813, 0.1182738874802044, 0.11063772647357151, 0.32029700795466465, 0.3616035336419754, 0.254937008589764, 0.36470621054301444, 0.34844082662345677, 0.16172620577938646, 0.21242259064062297, 0.2136272866067448, 0.29874969048257494, 0.2723417535074478, 0.3791859437002548, 0.2906504515967637, 0.30722949577428715, 0.26312059766035933, 0.3748174663236553, 0.28017014998088485, 0.4124025466860246, 0.27594772925185396, 0.22561354790189447, 0.26828769192673385, 0.2541812010191328, 0.255958542015426, 0.21685017291780428, 0.3463183382391206, 0.3165405206517843, 0.2771528824846655, 0.24841493712802853, 0.20892071887293084, 0.13737544987601924, 0.20654386005148861, 0.19030989064086368, 0.2104533849435699, 0.24596766324482433, 0.23834442206463624, 0.31361480821904464, 0.2243380633827604, 0.19671520151910005, 0.21342019962655145, 0.39001268029560376, 0.20604968577467309, 0.20632239882186731, 0.20826852545358232, 0.2505830672246099, 0.2278472327436698, 0.2409093333115634, 0.7936282154013976, 0.14121247924934144, 0.15099787418031807, 0.8912204863331057, 0.19952868096969378, 0.20030388044370062, 0.1171488376246822, 0.16938777836420904, 0.8713710214749509, 0.6648325800378816, 0.15690777152248736, 0.209183626200236, 0.4928739073261741, 0.33476596936777714, 0.5210070135732505, 0.20999678754219997, 0.20919743888642128, 0.5234957028853058, 0.18962145305520584, 0.1870846621212835, 0.20765931479637734, 0.1857847085187656, 0.22410369275460473, 0.1960054244039945, 0.207887796949634, 0.18494728588183307, 0.222850106327244, 0.10133784826684133, 0.0931522937035586, 0.09462945109055543, 0.08021595832456974, 0.08407682450843534, 0.08394475965422477, 0.12701424782428838, 0.08965076745602307, 0.08656218963863704]}, "mutation_prompt": null}
{"id": "6a1c2a0e-f411-489d-bde6-4cf6cfb13f22", "solution": "import numpy as np\n\nclass DynamicPopSizeAdaptationEHPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            update_mutation_rates = np.random.binomial(1, self.mutation_prob, self.pop_size)\n            for i in range(self.pop_size):\n                if update_mutation_rates[i]:\n                    population[i] += 0.01 * levy_flight()\n\n            # Dynamic population size adaptation\n            if np.random.rand() < 0.2:\n                self.pop_size = int(np.clip(self.pop_size + np.random.normal(0, 1), 5, 100))\n                population = np.vstack([population, np.random.uniform(-5.0, 5.0, (self.pop_size - len(population), self.dim))])\n                velocities = np.vstack([velocities, np.zeros((self.pop_size - len(velocities), self.dim)])\n                pbest = np.vstack([pbest, population[-(self.pop_size - len(pbest)):]])\n                pbest_vals = np.append(pbest_vals, [func(ind) for ind in population[-(self.pop_size - len(pbest)):]])\n\n        return gbest", "name": "DynamicPopSizeAdaptationEHPSOLevyOptimization", "description": "Implement a variant of Enhanced Hybrid Particle Swarm Optimization with Levy Flight Exploration by incorporating dynamic population size adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ']' does not match opening parenthesis '('\", ('<string>', 56, 105, '                velocities = np.vstack([velocities, np.zeros((self.pop_size - len(velocities), self.dim)])')).", "error": "SyntaxError(\"closing parenthesis ']' does not match opening parenthesis '('\", ('<string>', 56, 105, '                velocities = np.vstack([velocities, np.zeros((self.pop_size - len(velocities), self.dim)])'))", "parent_id": "abf797a8-b394-4155-a3a2-c7436015ff3b", "metadata": {}, "mutation_prompt": null}
{"id": "88f613ec-9529-479c-83d6-7fbfa5f60595", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            update_mutation_rates = np.random.binomial(1, self.mutation_prob, self.pop_size)\n            for i in range(self.pop_size):\n                if update_mutation_rates[i]:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "EnhancedHybridPSOLevyOptimization", "description": "Implement an Enhanced Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization by introducing adaptive mutation rates and diversity preservation mechanisms.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf797a8-b394-4155-a3a2-c7436015ff3b", "metadata": {"aucs": [0.7142402016086978, 0.7007193011820012, 0.666081862655885, 0.6753188692101239, 0.7028022617829164, 0.6716872722437198, 0.68348418341009, 0.6898449515814451, 0.6697188552690458, 0.1428168918437145, 0.3382753282788692, 0.19336569571092144, 0.2878289905436344, 0.045591281980020715, 0.23491446220134848, 0.0480896758863637, 0.22802455323137782, 0.2709475861784565, 0.16566270824648077, 0.16290875853181874, 0.14961963903015607, 0.2808763558252194, 0.17304661868394744, 0.18734553948712374, 0.15039427431957741, 0.10376732645784736, 0.146101303724126, 0.11629348647033677, 0.14627785668772408, 0.11008674211192193, 0.129746887965126, 0.14673123190955717, 0.1215677624275513, 0.11501431071488111, 0.16379258625042148, 0.16359214664028954, 0.9810848093346731, 0.9861172822051606, 0.9814261593385959, 0.9750952957987052, 0.9682201516828866, 0.976206384985872, 0.9857839595277029, 0.9784183421052384, 0.976087967693994, 0.4363970639321767, 0.41977375354376445, 0.4114165304978903, 0.3966223399375629, 0.3967321594942793, 0.3944974970137497, 0.3964846275031516, 0.42880698603925005, 0.3749048460106794, 0.2297800869327421, 0.2487499603189245, 0.22372400187473018, 0.19365802473296345, 0.8231536920675275, 0.3753970584387144, 0.16189225459143164, 0.16299763013029733, 0.23472140757626248, 0.31089149023049745, 0.1771131881150808, 0.16428221941146837, 0.13047877406759945, 0.12767069536608378, 0.17515712303866182, 0.24264958749506826, 0.2571355909328148, 0.1674161532461158, 0.20647339823023503, 0.11168888016549772, 0.1502103284118499, 0.18733336834161818, 0.23431673511563722, 0.19796525625726835, 0.19892475184746305, 0.09457667232499711, 0.11665247422635039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03940020524404986, 0.061789375289941884, 0.00953778441240083, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004082624897783216, 0.07977904700780691, 0.08204807697375216, 0.09037968291096043, 0.05637058307563658, 0.006602477673077756, 0.006603161117244238, 0.1647044917505628, 0.11523276873853572, 0.04693655558478427, 0.04220234891528796, 0.031135572491733154, 0.08109699020267014, 0.07499408105770833, 0.07891180121051733, 0.07351575305465852, 0.0971903368437077, 0.09613294340995782, 0.04818428182846424, 0.07271505045175541, 0.04332607514063924, 0.1258374934671136, 0.2192281110187313, 0.01391922602805118, 0.05262582229812651, 0.05485154405286763, 0.08148862773851306, 0.0834890626847038, 0.4873304778584596, 0.5013717923493697, 0.5035349733930687, 0.5383282927138513, 0.4501452476808512, 0.4603597111407862, 0.5049832189550398, 0.5368391320097091, 0.49967529440057457, 0.13101123029272932, 0.07368550359776982, 0.0876175617640258, 0.11586981296948229, 0.09047838970917876, 0.10365769866104313, 0.11335202396427813, 0.1182738874802044, 0.11063772647357151, 0.32029700795466465, 0.3616035336419754, 0.254937008589764, 0.36470621054301444, 0.34844082662345677, 0.16172620577938646, 0.21242259064062297, 0.2136272866067448, 0.29874969048257494, 0.2723417535074478, 0.3791859437002548, 0.2906504515967637, 0.30722949577428715, 0.26312059766035933, 0.3748174663236553, 0.28017014998088485, 0.4124025466860246, 0.27594772925185396, 0.22561354790189447, 0.26828769192673385, 0.2541812010191328, 0.255958542015426, 0.21685017291780428, 0.3463183382391206, 0.3165405206517843, 0.2771528824846655, 0.24841493712802853, 0.20892071887293084, 0.13737544987601924, 0.20654386005148861, 0.19030989064086368, 0.2104533849435699, 0.24596766324482433, 0.23834442206463624, 0.31361480821904464, 0.2243380633827604, 0.19671520151910005, 0.21342019962655145, 0.39001268029560376, 0.20604968577467309, 0.20632239882186731, 0.20826852545358232, 0.2505830672246099, 0.2278472327436698, 0.2409093333115634, 0.7936282154013976, 0.14121247924934144, 0.15099787418031807, 0.8912204863331057, 0.19952868096969378, 0.20030388044370062, 0.1171488376246822, 0.16938777836420904, 0.8713710214749509, 0.6648325800378816, 0.15690777152248736, 0.209183626200236, 0.4928739073261741, 0.33476596936777714, 0.5210070135732505, 0.20999678754219997, 0.20919743888642128, 0.5234957028853058, 0.18962145305520584, 0.1870846621212835, 0.20765931479637734, 0.1857847085187656, 0.22410369275460473, 0.1960054244039945, 0.207887796949634, 0.18494728588183307, 0.222850106327244, 0.10133784826684133, 0.0931522937035586, 0.09462945109055543, 0.08021595832456974, 0.08407682450843534, 0.08394475965422477, 0.12701424782428838, 0.08965076745602307, 0.08656218963863704]}, "mutation_prompt": null}
{"id": "919549f2-a59f-4499-a814-c8610c74de0f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            update_mutation_rates = np.random.binomial(1, self.mutation_prob, self.pop_size)\n            for i in range(self.pop_size):\n                if update_mutation_rates[i]:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "EnhancedHybridPSOLevyOptimization", "description": "Implement an Enhanced Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization by introducing adaptive mutation rates and diversity preservation mechanisms.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf797a8-b394-4155-a3a2-c7436015ff3b", "metadata": {"aucs": [0.7142402016086978, 0.7007193011820012, 0.666081862655885, 0.6753188692101239, 0.7028022617829164, 0.6716872722437198, 0.68348418341009, 0.6898449515814451, 0.6697188552690458, 0.1428168918437145, 0.3382753282788692, 0.19336569571092144, 0.2878289905436344, 0.045591281980020715, 0.23491446220134848, 0.0480896758863637, 0.22802455323137782, 0.2709475861784565, 0.16566270824648077, 0.16290875853181874, 0.14961963903015607, 0.2808763558252194, 0.17304661868394744, 0.18734553948712374, 0.15039427431957741, 0.10376732645784736, 0.146101303724126, 0.11629348647033677, 0.14627785668772408, 0.11008674211192193, 0.129746887965126, 0.14673123190955717, 0.1215677624275513, 0.11501431071488111, 0.16379258625042148, 0.16359214664028954, 0.9810848093346731, 0.9861172822051606, 0.9814261593385959, 0.9750952957987052, 0.9682201516828866, 0.976206384985872, 0.9857839595277029, 0.9784183421052384, 0.976087967693994, 0.4363970639321767, 0.41977375354376445, 0.4114165304978903, 0.3966223399375629, 0.3967321594942793, 0.3944974970137497, 0.3964846275031516, 0.42880698603925005, 0.3749048460106794, 0.2297800869327421, 0.2487499603189245, 0.22372400187473018, 0.19365802473296345, 0.8231536920675275, 0.3753970584387144, 0.16189225459143164, 0.16299763013029733, 0.23472140757626248, 0.31089149023049745, 0.1771131881150808, 0.16428221941146837, 0.13047877406759945, 0.12767069536608378, 0.17515712303866182, 0.24264958749506826, 0.2571355909328148, 0.1674161532461158, 0.20647339823023503, 0.11168888016549772, 0.1502103284118499, 0.18733336834161818, 0.23431673511563722, 0.19796525625726835, 0.19892475184746305, 0.09457667232499711, 0.11665247422635039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03940020524404986, 0.061789375289941884, 0.00953778441240083, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004082624897783216, 0.07977904700780691, 0.08204807697375216, 0.09037968291096043, 0.05637058307563658, 0.006602477673077756, 0.006603161117244238, 0.1647044917505628, 0.11523276873853572, 0.04693655558478427, 0.04220234891528796, 0.031135572491733154, 0.08109699020267014, 0.07499408105770833, 0.07891180121051733, 0.07351575305465852, 0.0971903368437077, 0.09613294340995782, 0.04818428182846424, 0.07271505045175541, 0.04332607514063924, 0.1258374934671136, 0.2192281110187313, 0.01391922602805118, 0.05262582229812651, 0.05485154405286763, 0.08148862773851306, 0.0834890626847038, 0.4873304778584596, 0.5013717923493697, 0.5035349733930687, 0.5383282927138513, 0.4501452476808512, 0.4603597111407862, 0.5049832189550398, 0.5368391320097091, 0.49967529440057457, 0.13101123029272932, 0.07368550359776982, 0.0876175617640258, 0.11586981296948229, 0.09047838970917876, 0.10365769866104313, 0.11335202396427813, 0.1182738874802044, 0.11063772647357151, 0.32029700795466465, 0.3616035336419754, 0.254937008589764, 0.36470621054301444, 0.34844082662345677, 0.16172620577938646, 0.21242259064062297, 0.2136272866067448, 0.29874969048257494, 0.2723417535074478, 0.3791859437002548, 0.2906504515967637, 0.30722949577428715, 0.26312059766035933, 0.3748174663236553, 0.28017014998088485, 0.4124025466860246, 0.27594772925185396, 0.22561354790189447, 0.26828769192673385, 0.2541812010191328, 0.255958542015426, 0.21685017291780428, 0.3463183382391206, 0.3165405206517843, 0.2771528824846655, 0.24841493712802853, 0.20892071887293084, 0.13737544987601924, 0.20654386005148861, 0.19030989064086368, 0.2104533849435699, 0.24596766324482433, 0.23834442206463624, 0.31361480821904464, 0.2243380633827604, 0.19671520151910005, 0.21342019962655145, 0.39001268029560376, 0.20604968577467309, 0.20632239882186731, 0.20826852545358232, 0.2505830672246099, 0.2278472327436698, 0.2409093333115634, 0.7936282154013976, 0.14121247924934144, 0.15099787418031807, 0.8912204863331057, 0.19952868096969378, 0.20030388044370062, 0.1171488376246822, 0.16938777836420904, 0.8713710214749509, 0.6648325800378816, 0.15690777152248736, 0.209183626200236, 0.4928739073261741, 0.33476596936777714, 0.5210070135732505, 0.20999678754219997, 0.20919743888642128, 0.5234957028853058, 0.18962145305520584, 0.1870846621212835, 0.20765931479637734, 0.1857847085187656, 0.22410369275460473, 0.1960054244039945, 0.207887796949634, 0.18494728588183307, 0.222850106327244, 0.10133784826684133, 0.0931522937035586, 0.09462945109055543, 0.08021595832456974, 0.08407682450843534, 0.08394475965422477, 0.12701424782428838, 0.08965076745602307, 0.08656218963863704]}, "mutation_prompt": null}
{"id": "e29ebc69-2f76-45f1-a342-9eeae9fb03e8", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            update_mutation_rates = np.random.binomial(1, self.mutation_prob, self.pop_size)\n            for i in range(self.pop_size):\n                if update_mutation_rates[i]:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "EnhancedHybridPSOLevyOptimization", "description": "Implement an Enhanced Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization by introducing adaptive mutation rates and diversity preservation mechanisms.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf797a8-b394-4155-a3a2-c7436015ff3b", "metadata": {"aucs": [0.7142402016086978, 0.7007193011820012, 0.666081862655885, 0.6753188692101239, 0.7028022617829164, 0.6716872722437198, 0.68348418341009, 0.6898449515814451, 0.6697188552690458, 0.1428168918437145, 0.3382753282788692, 0.19336569571092144, 0.2878289905436344, 0.045591281980020715, 0.23491446220134848, 0.0480896758863637, 0.22802455323137782, 0.2709475861784565, 0.16566270824648077, 0.16290875853181874, 0.14961963903015607, 0.2808763558252194, 0.17304661868394744, 0.18734553948712374, 0.15039427431957741, 0.10376732645784736, 0.146101303724126, 0.11629348647033677, 0.14627785668772408, 0.11008674211192193, 0.129746887965126, 0.14673123190955717, 0.1215677624275513, 0.11501431071488111, 0.16379258625042148, 0.16359214664028954, 0.9810848093346731, 0.9861172822051606, 0.9814261593385959, 0.9750952957987052, 0.9682201516828866, 0.976206384985872, 0.9857839595277029, 0.9784183421052384, 0.976087967693994, 0.4363970639321767, 0.41977375354376445, 0.4114165304978903, 0.3966223399375629, 0.3967321594942793, 0.3944974970137497, 0.3964846275031516, 0.42880698603925005, 0.3749048460106794, 0.2297800869327421, 0.2487499603189245, 0.22372400187473018, 0.19365802473296345, 0.8231536920675275, 0.3753970584387144, 0.16189225459143164, 0.16299763013029733, 0.23472140757626248, 0.31089149023049745, 0.1771131881150808, 0.16428221941146837, 0.13047877406759945, 0.12767069536608378, 0.17515712303866182, 0.24264958749506826, 0.2571355909328148, 0.1674161532461158, 0.20647339823023503, 0.11168888016549772, 0.1502103284118499, 0.18733336834161818, 0.23431673511563722, 0.19796525625726835, 0.19892475184746305, 0.09457667232499711, 0.11665247422635039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03940020524404986, 0.061789375289941884, 0.00953778441240083, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004082624897783216, 0.07977904700780691, 0.08204807697375216, 0.09037968291096043, 0.05637058307563658, 0.006602477673077756, 0.006603161117244238, 0.1647044917505628, 0.11523276873853572, 0.04693655558478427, 0.04220234891528796, 0.031135572491733154, 0.08109699020267014, 0.07499408105770833, 0.07891180121051733, 0.07351575305465852, 0.0971903368437077, 0.09613294340995782, 0.04818428182846424, 0.07271505045175541, 0.04332607514063924, 0.1258374934671136, 0.2192281110187313, 0.01391922602805118, 0.05262582229812651, 0.05485154405286763, 0.08148862773851306, 0.0834890626847038, 0.4873304778584596, 0.5013717923493697, 0.5035349733930687, 0.5383282927138513, 0.4501452476808512, 0.4603597111407862, 0.5049832189550398, 0.5368391320097091, 0.49967529440057457, 0.13101123029272932, 0.07368550359776982, 0.0876175617640258, 0.11586981296948229, 0.09047838970917876, 0.10365769866104313, 0.11335202396427813, 0.1182738874802044, 0.11063772647357151, 0.32029700795466465, 0.3616035336419754, 0.254937008589764, 0.36470621054301444, 0.34844082662345677, 0.16172620577938646, 0.21242259064062297, 0.2136272866067448, 0.29874969048257494, 0.2723417535074478, 0.3791859437002548, 0.2906504515967637, 0.30722949577428715, 0.26312059766035933, 0.3748174663236553, 0.28017014998088485, 0.4124025466860246, 0.27594772925185396, 0.22561354790189447, 0.26828769192673385, 0.2541812010191328, 0.255958542015426, 0.21685017291780428, 0.3463183382391206, 0.3165405206517843, 0.2771528824846655, 0.24841493712802853, 0.20892071887293084, 0.13737544987601924, 0.20654386005148861, 0.19030989064086368, 0.2104533849435699, 0.24596766324482433, 0.23834442206463624, 0.31361480821904464, 0.2243380633827604, 0.19671520151910005, 0.21342019962655145, 0.39001268029560376, 0.20604968577467309, 0.20632239882186731, 0.20826852545358232, 0.2505830672246099, 0.2278472327436698, 0.2409093333115634, 0.7936282154013976, 0.14121247924934144, 0.15099787418031807, 0.8912204863331057, 0.19952868096969378, 0.20030388044370062, 0.1171488376246822, 0.16938777836420904, 0.8713710214749509, 0.6648325800378816, 0.15690777152248736, 0.209183626200236, 0.4928739073261741, 0.33476596936777714, 0.5210070135732505, 0.20999678754219997, 0.20919743888642128, 0.5234957028853058, 0.18962145305520584, 0.1870846621212835, 0.20765931479637734, 0.1857847085187656, 0.22410369275460473, 0.1960054244039945, 0.207887796949634, 0.18494728588183307, 0.222850106327244, 0.10133784826684133, 0.0931522937035586, 0.09462945109055543, 0.08021595832456974, 0.08407682450843534, 0.08394475965422477, 0.12701424782428838, 0.08965076745602307, 0.08656218963863704]}, "mutation_prompt": null}
{"id": "e60ad03e-4129-46a6-bba4-d0f41f479412", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            update_mutation_rates = np.random.binomial(1, self.mutation_prob, self.pop_size)\n            for i in range(self.pop_size):\n                if update_mutation_rates[i]:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "EnhancedHybridPSOLevyOptimization", "description": "Implement an Enhanced Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization by introducing adaptive mutation rates and diversity preservation mechanisms.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf797a8-b394-4155-a3a2-c7436015ff3b", "metadata": {"aucs": [0.7142402016086978, 0.7007193011820012, 0.666081862655885, 0.6753188692101239, 0.7028022617829164, 0.6716872722437198, 0.68348418341009, 0.6898449515814451, 0.6697188552690458, 0.1428168918437145, 0.3382753282788692, 0.19336569571092144, 0.2878289905436344, 0.045591281980020715, 0.23491446220134848, 0.0480896758863637, 0.22802455323137782, 0.2709475861784565, 0.16566270824648077, 0.16290875853181874, 0.14961963903015607, 0.2808763558252194, 0.17304661868394744, 0.18734553948712374, 0.15039427431957741, 0.10376732645784736, 0.146101303724126, 0.11629348647033677, 0.14627785668772408, 0.11008674211192193, 0.129746887965126, 0.14673123190955717, 0.1215677624275513, 0.11501431071488111, 0.16379258625042148, 0.16359214664028954, 0.9810848093346731, 0.9861172822051606, 0.9814261593385959, 0.9750952957987052, 0.9682201516828866, 0.976206384985872, 0.9857839595277029, 0.9784183421052384, 0.976087967693994, 0.4363970639321767, 0.41977375354376445, 0.4114165304978903, 0.3966223399375629, 0.3967321594942793, 0.3944974970137497, 0.3964846275031516, 0.42880698603925005, 0.3749048460106794, 0.2297800869327421, 0.2487499603189245, 0.22372400187473018, 0.19365802473296345, 0.8231536920675275, 0.3753970584387144, 0.16189225459143164, 0.16299763013029733, 0.23472140757626248, 0.31089149023049745, 0.1771131881150808, 0.16428221941146837, 0.13047877406759945, 0.12767069536608378, 0.17515712303866182, 0.24264958749506826, 0.2571355909328148, 0.1674161532461158, 0.20647339823023503, 0.11168888016549772, 0.1502103284118499, 0.18733336834161818, 0.23431673511563722, 0.19796525625726835, 0.19892475184746305, 0.09457667232499711, 0.11665247422635039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03940020524404986, 0.061789375289941884, 0.00953778441240083, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004082624897783216, 0.07977904700780691, 0.08204807697375216, 0.09037968291096043, 0.05637058307563658, 0.006602477673077756, 0.006603161117244238, 0.1647044917505628, 0.11523276873853572, 0.04693655558478427, 0.04220234891528796, 0.031135572491733154, 0.08109699020267014, 0.07499408105770833, 0.07891180121051733, 0.07351575305465852, 0.0971903368437077, 0.09613294340995782, 0.04818428182846424, 0.07271505045175541, 0.04332607514063924, 0.1258374934671136, 0.2192281110187313, 0.01391922602805118, 0.05262582229812651, 0.05485154405286763, 0.08148862773851306, 0.0834890626847038, 0.4873304778584596, 0.5013717923493697, 0.5035349733930687, 0.5383282927138513, 0.4501452476808512, 0.4603597111407862, 0.5049832189550398, 0.5368391320097091, 0.49967529440057457, 0.13101123029272932, 0.07368550359776982, 0.0876175617640258, 0.11586981296948229, 0.09047838970917876, 0.10365769866104313, 0.11335202396427813, 0.1182738874802044, 0.11063772647357151, 0.32029700795466465, 0.3616035336419754, 0.254937008589764, 0.36470621054301444, 0.34844082662345677, 0.16172620577938646, 0.21242259064062297, 0.2136272866067448, 0.29874969048257494, 0.2723417535074478, 0.3791859437002548, 0.2906504515967637, 0.30722949577428715, 0.26312059766035933, 0.3748174663236553, 0.28017014998088485, 0.4124025466860246, 0.27594772925185396, 0.22561354790189447, 0.26828769192673385, 0.2541812010191328, 0.255958542015426, 0.21685017291780428, 0.3463183382391206, 0.3165405206517843, 0.2771528824846655, 0.24841493712802853, 0.20892071887293084, 0.13737544987601924, 0.20654386005148861, 0.19030989064086368, 0.2104533849435699, 0.24596766324482433, 0.23834442206463624, 0.31361480821904464, 0.2243380633827604, 0.19671520151910005, 0.21342019962655145, 0.39001268029560376, 0.20604968577467309, 0.20632239882186731, 0.20826852545358232, 0.2505830672246099, 0.2278472327436698, 0.2409093333115634, 0.7936282154013976, 0.14121247924934144, 0.15099787418031807, 0.8912204863331057, 0.19952868096969378, 0.20030388044370062, 0.1171488376246822, 0.16938777836420904, 0.8713710214749509, 0.6648325800378816, 0.15690777152248736, 0.209183626200236, 0.4928739073261741, 0.33476596936777714, 0.5210070135732505, 0.20999678754219997, 0.20919743888642128, 0.5234957028853058, 0.18962145305520584, 0.1870846621212835, 0.20765931479637734, 0.1857847085187656, 0.22410369275460473, 0.1960054244039945, 0.207887796949634, 0.18494728588183307, 0.222850106327244, 0.10133784826684133, 0.0931522937035586, 0.09462945109055543, 0.08021595832456974, 0.08407682450843534, 0.08394475965422477, 0.12701424782428838, 0.08965076745602307, 0.08656218963863704]}, "mutation_prompt": null}
{"id": "6c8b609f-773c-4d68-a4e7-c13cbfa5f375", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            update_mutation_rates = np.random.binomial(1, self.mutation_prob, self.pop_size)\n            for i in range(self.pop_size):\n                if update_mutation_rates[i]:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "EnhancedHybridPSOLevyOptimization", "description": "Implement an Enhanced Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization by introducing adaptive mutation rates and diversity preservation mechanisms.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf797a8-b394-4155-a3a2-c7436015ff3b", "metadata": {"aucs": [0.7142402016086978, 0.7007193011820012, 0.666081862655885, 0.6753188692101239, 0.7028022617829164, 0.6716872722437198, 0.68348418341009, 0.6898449515814451, 0.6697188552690458, 0.1428168918437145, 0.3382753282788692, 0.19336569571092144, 0.2878289905436344, 0.045591281980020715, 0.23491446220134848, 0.0480896758863637, 0.22802455323137782, 0.2709475861784565, 0.16566270824648077, 0.16290875853181874, 0.14961963903015607, 0.2808763558252194, 0.17304661868394744, 0.18734553948712374, 0.15039427431957741, 0.10376732645784736, 0.146101303724126, 0.11629348647033677, 0.14627785668772408, 0.11008674211192193, 0.129746887965126, 0.14673123190955717, 0.1215677624275513, 0.11501431071488111, 0.16379258625042148, 0.16359214664028954, 0.9810848093346731, 0.9861172822051606, 0.9814261593385959, 0.9750952957987052, 0.9682201516828866, 0.976206384985872, 0.9857839595277029, 0.9784183421052384, 0.976087967693994, 0.4363970639321767, 0.41977375354376445, 0.4114165304978903, 0.3966223399375629, 0.3967321594942793, 0.3944974970137497, 0.3964846275031516, 0.42880698603925005, 0.3749048460106794, 0.2297800869327421, 0.2487499603189245, 0.22372400187473018, 0.19365802473296345, 0.8231536920675275, 0.3753970584387144, 0.16189225459143164, 0.16299763013029733, 0.23472140757626248, 0.31089149023049745, 0.1771131881150808, 0.16428221941146837, 0.13047877406759945, 0.12767069536608378, 0.17515712303866182, 0.24264958749506826, 0.2571355909328148, 0.1674161532461158, 0.20647339823023503, 0.11168888016549772, 0.1502103284118499, 0.18733336834161818, 0.23431673511563722, 0.19796525625726835, 0.19892475184746305, 0.09457667232499711, 0.11665247422635039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03940020524404986, 0.061789375289941884, 0.00953778441240083, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004082624897783216, 0.07977904700780691, 0.08204807697375216, 0.09037968291096043, 0.05637058307563658, 0.006602477673077756, 0.006603161117244238, 0.1647044917505628, 0.11523276873853572, 0.04693655558478427, 0.04220234891528796, 0.031135572491733154, 0.08109699020267014, 0.07499408105770833, 0.07891180121051733, 0.07351575305465852, 0.0971903368437077, 0.09613294340995782, 0.04818428182846424, 0.07271505045175541, 0.04332607514063924, 0.1258374934671136, 0.2192281110187313, 0.01391922602805118, 0.05262582229812651, 0.05485154405286763, 0.08148862773851306, 0.0834890626847038, 0.4873304778584596, 0.5013717923493697, 0.5035349733930687, 0.5383282927138513, 0.4501452476808512, 0.4603597111407862, 0.5049832189550398, 0.5368391320097091, 0.49967529440057457, 0.13101123029272932, 0.07368550359776982, 0.0876175617640258, 0.11586981296948229, 0.09047838970917876, 0.10365769866104313, 0.11335202396427813, 0.1182738874802044, 0.11063772647357151, 0.32029700795466465, 0.3616035336419754, 0.254937008589764, 0.36470621054301444, 0.34844082662345677, 0.16172620577938646, 0.21242259064062297, 0.2136272866067448, 0.29874969048257494, 0.2723417535074478, 0.3791859437002548, 0.2906504515967637, 0.30722949577428715, 0.26312059766035933, 0.3748174663236553, 0.28017014998088485, 0.4124025466860246, 0.27594772925185396, 0.22561354790189447, 0.26828769192673385, 0.2541812010191328, 0.255958542015426, 0.21685017291780428, 0.3463183382391206, 0.3165405206517843, 0.2771528824846655, 0.24841493712802853, 0.20892071887293084, 0.13737544987601924, 0.20654386005148861, 0.19030989064086368, 0.2104533849435699, 0.24596766324482433, 0.23834442206463624, 0.31361480821904464, 0.2243380633827604, 0.19671520151910005, 0.21342019962655145, 0.39001268029560376, 0.20604968577467309, 0.20632239882186731, 0.20826852545358232, 0.2505830672246099, 0.2278472327436698, 0.2409093333115634, 0.7936282154013976, 0.14121247924934144, 0.15099787418031807, 0.8912204863331057, 0.19952868096969378, 0.20030388044370062, 0.1171488376246822, 0.16938777836420904, 0.8713710214749509, 0.6648325800378816, 0.15690777152248736, 0.209183626200236, 0.4928739073261741, 0.33476596936777714, 0.5210070135732505, 0.20999678754219997, 0.20919743888642128, 0.5234957028853058, 0.18962145305520584, 0.1870846621212835, 0.20765931479637734, 0.1857847085187656, 0.22410369275460473, 0.1960054244039945, 0.207887796949634, 0.18494728588183307, 0.222850106327244, 0.10133784826684133, 0.0931522937035586, 0.09462945109055543, 0.08021595832456974, 0.08407682450843534, 0.08394475965422477, 0.12701424782428838, 0.08965076745602307, 0.08656218963863704]}, "mutation_prompt": null}
{"id": "cb3c692a-31b6-4205-a823-65e1671e0a70", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLevyOptimizationMutationUpdate:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.1, mutation_step=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n        self.mutation_step = mutation_step\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates with variable step size\n            update_mutation_rates = np.random.binomial(1, self.mutation_prob, self.pop_size)\n            for i in range(self.pop_size):\n                if update_mutation_rates[i]:\n                    population[i] += self.mutation_step * levy_flight()\n\n        return gbest", "name": "EnhancedHybridPSOLevyOptimizationMutationUpdate", "description": "Enhancing the Enhanced Hybrid PSO with Levy Flight by dynamically adjusting the mutation step size based on individual performance.", "configspace": "", "generation": 78, "fitness": 0.2687279353812435, "feedback": "The algorithm EnhancedHybridPSOLevyOptimizationMutationUpdate got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "abf797a8-b394-4155-a3a2-c7436015ff3b", "metadata": {"aucs": [0.7142402016086978, 0.7007193011820012, 0.666081862655885, 0.6753188692101239, 0.7028022617829164, 0.6716872722437198, 0.68348418341009, 0.6898449515814451, 0.6697188552690458, 0.1428168918437145, 0.3382753282788692, 0.19336569571092144, 0.2878289905436344, 0.045591281980020715, 0.23491446220134848, 0.0480896758863637, 0.22802455323137782, 0.2709475861784565, 0.16566270824648077, 0.16290875853181874, 0.14961963903015607, 0.2808763558252194, 0.17304661868394744, 0.18734553948712374, 0.15039427431957741, 0.10376732645784736, 0.146101303724126, 0.11629348647033677, 0.14627785668772408, 0.11008674211192193, 0.129746887965126, 0.14673123190955717, 0.1215677624275513, 0.11501431071488111, 0.16379258625042148, 0.16359214664028954, 0.9810848093346731, 0.9861172822051606, 0.9814261593385959, 0.9750952957987052, 0.9682201516828866, 0.976206384985872, 0.9857839595277029, 0.9784183421052384, 0.976087967693994, 0.4363970639321767, 0.41977375354376445, 0.4114165304978903, 0.3966223399375629, 0.3967321594942793, 0.3944974970137497, 0.3964846275031516, 0.42880698603925005, 0.3749048460106794, 0.2297800869327421, 0.2487499603189245, 0.22372400187473018, 0.19365802473296345, 0.8231536920675275, 0.3753970584387144, 0.16189225459143164, 0.16299763013029733, 0.23472140757626248, 0.31089149023049745, 0.1771131881150808, 0.16428221941146837, 0.13047877406759945, 0.12767069536608378, 0.17515712303866182, 0.24264958749506826, 0.2571355909328148, 0.1674161532461158, 0.20647339823023503, 0.11168888016549772, 0.1502103284118499, 0.18733336834161818, 0.23431673511563722, 0.19796525625726835, 0.19892475184746305, 0.09457667232499711, 0.11665247422635039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03940020524404986, 0.061789375289941884, 0.00953778441240083, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004082624897783216, 0.07977904700780691, 0.08204807697375216, 0.09037968291096043, 0.05637058307563658, 0.006602477673077756, 0.006603161117244238, 0.1647044917505628, 0.11523276873853572, 0.04693655558478427, 0.04220234891528796, 0.031135572491733154, 0.08109699020267014, 0.07499408105770833, 0.07891180121051733, 0.07351575305465852, 0.0971903368437077, 0.09613294340995782, 0.04818428182846424, 0.07271505045175541, 0.04332607514063924, 0.1258374934671136, 0.2192281110187313, 0.01391922602805118, 0.05262582229812651, 0.05485154405286763, 0.08148862773851306, 0.0834890626847038, 0.4873304778584596, 0.5013717923493697, 0.5035349733930687, 0.5383282927138513, 0.4501452476808512, 0.4603597111407862, 0.5049832189550398, 0.5368391320097091, 0.49967529440057457, 0.13101123029272932, 0.07368550359776982, 0.0876175617640258, 0.11586981296948229, 0.09047838970917876, 0.10365769866104313, 0.11335202396427813, 0.1182738874802044, 0.11063772647357151, 0.32029700795466465, 0.3616035336419754, 0.254937008589764, 0.36470621054301444, 0.34844082662345677, 0.16172620577938646, 0.21242259064062297, 0.2136272866067448, 0.29874969048257494, 0.2723417535074478, 0.3791859437002548, 0.2906504515967637, 0.30722949577428715, 0.26312059766035933, 0.3748174663236553, 0.28017014998088485, 0.4124025466860246, 0.27594772925185396, 0.22561354790189447, 0.26828769192673385, 0.2541812010191328, 0.255958542015426, 0.21685017291780428, 0.3463183382391206, 0.3165405206517843, 0.2771528824846655, 0.24841493712802853, 0.20892071887293084, 0.13737544987601924, 0.20654386005148861, 0.19030989064086368, 0.2104533849435699, 0.24596766324482433, 0.23834442206463624, 0.31361480821904464, 0.2243380633827604, 0.19671520151910005, 0.21342019962655145, 0.39001268029560376, 0.20604968577467309, 0.20632239882186731, 0.20826852545358232, 0.2505830672246099, 0.2278472327436698, 0.2409093333115634, 0.7936282154013976, 0.14121247924934144, 0.15099787418031807, 0.8912204863331057, 0.19952868096969378, 0.20030388044370062, 0.1171488376246822, 0.16938777836420904, 0.8713710214749509, 0.6648325800378816, 0.15690777152248736, 0.209183626200236, 0.4928739073261741, 0.33476596936777714, 0.5210070135732505, 0.20999678754219997, 0.20919743888642128, 0.5234957028853058, 0.18962145305520584, 0.1870846621212835, 0.20765931479637734, 0.1857847085187656, 0.22410369275460473, 0.1960054244039945, 0.207887796949634, 0.18494728588183307, 0.222850106327244, 0.10133784826684133, 0.0931522937035586, 0.09462945109055543, 0.08021595832456974, 0.08407682450843534, 0.08394475965422477, 0.12701424782428838, 0.08965076745602307, 0.08656218963863704]}, "mutation_prompt": null}
{"id": "b537a716-de92-4782-b852-c2611ee7d4dc", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            update_mutation_rates = np.random.binomial(1, self.mutation_prob, self.pop_size)\n            for i in range(self.pop_size):\n                if update_mutation_rates[i]:\n                    population[i] += 0.01 * levy_flight()\n\n        return gbest", "name": "EnhancedHybridPSOLevyOptimization", "description": "Implement an Enhanced Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization by introducing adaptive mutation rates and diversity preservation mechanisms.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf797a8-b394-4155-a3a2-c7436015ff3b", "metadata": {"aucs": [0.7142402016086978, 0.7007193011820012, 0.666081862655885, 0.6753188692101239, 0.7028022617829164, 0.6716872722437198, 0.68348418341009, 0.6898449515814451, 0.6697188552690458, 0.1428168918437145, 0.3382753282788692, 0.19336569571092144, 0.2878289905436344, 0.045591281980020715, 0.23491446220134848, 0.0480896758863637, 0.22802455323137782, 0.2709475861784565, 0.16566270824648077, 0.16290875853181874, 0.14961963903015607, 0.2808763558252194, 0.17304661868394744, 0.18734553948712374, 0.15039427431957741, 0.10376732645784736, 0.146101303724126, 0.11629348647033677, 0.14627785668772408, 0.11008674211192193, 0.129746887965126, 0.14673123190955717, 0.1215677624275513, 0.11501431071488111, 0.16379258625042148, 0.16359214664028954, 0.9810848093346731, 0.9861172822051606, 0.9814261593385959, 0.9750952957987052, 0.9682201516828866, 0.976206384985872, 0.9857839595277029, 0.9784183421052384, 0.976087967693994, 0.4363970639321767, 0.41977375354376445, 0.4114165304978903, 0.3966223399375629, 0.3967321594942793, 0.3944974970137497, 0.3964846275031516, 0.42880698603925005, 0.3749048460106794, 0.2297800869327421, 0.2487499603189245, 0.22372400187473018, 0.19365802473296345, 0.8231536920675275, 0.3753970584387144, 0.16189225459143164, 0.16299763013029733, 0.23472140757626248, 0.31089149023049745, 0.1771131881150808, 0.16428221941146837, 0.13047877406759945, 0.12767069536608378, 0.17515712303866182, 0.24264958749506826, 0.2571355909328148, 0.1674161532461158, 0.20647339823023503, 0.11168888016549772, 0.1502103284118499, 0.18733336834161818, 0.23431673511563722, 0.19796525625726835, 0.19892475184746305, 0.09457667232499711, 0.11665247422635039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03940020524404986, 0.061789375289941884, 0.00953778441240083, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004082624897783216, 0.07977904700780691, 0.08204807697375216, 0.09037968291096043, 0.05637058307563658, 0.006602477673077756, 0.006603161117244238, 0.1647044917505628, 0.11523276873853572, 0.04693655558478427, 0.04220234891528796, 0.031135572491733154, 0.08109699020267014, 0.07499408105770833, 0.07891180121051733, 0.07351575305465852, 0.0971903368437077, 0.09613294340995782, 0.04818428182846424, 0.07271505045175541, 0.04332607514063924, 0.1258374934671136, 0.2192281110187313, 0.01391922602805118, 0.05262582229812651, 0.05485154405286763, 0.08148862773851306, 0.0834890626847038, 0.4873304778584596, 0.5013717923493697, 0.5035349733930687, 0.5383282927138513, 0.4501452476808512, 0.4603597111407862, 0.5049832189550398, 0.5368391320097091, 0.49967529440057457, 0.13101123029272932, 0.07368550359776982, 0.0876175617640258, 0.11586981296948229, 0.09047838970917876, 0.10365769866104313, 0.11335202396427813, 0.1182738874802044, 0.11063772647357151, 0.32029700795466465, 0.3616035336419754, 0.254937008589764, 0.36470621054301444, 0.34844082662345677, 0.16172620577938646, 0.21242259064062297, 0.2136272866067448, 0.29874969048257494, 0.2723417535074478, 0.3791859437002548, 0.2906504515967637, 0.30722949577428715, 0.26312059766035933, 0.3748174663236553, 0.28017014998088485, 0.4124025466860246, 0.27594772925185396, 0.22561354790189447, 0.26828769192673385, 0.2541812010191328, 0.255958542015426, 0.21685017291780428, 0.3463183382391206, 0.3165405206517843, 0.2771528824846655, 0.24841493712802853, 0.20892071887293084, 0.13737544987601924, 0.20654386005148861, 0.19030989064086368, 0.2104533849435699, 0.24596766324482433, 0.23834442206463624, 0.31361480821904464, 0.2243380633827604, 0.19671520151910005, 0.21342019962655145, 0.39001268029560376, 0.20604968577467309, 0.20632239882186731, 0.20826852545358232, 0.2505830672246099, 0.2278472327436698, 0.2409093333115634, 0.7936282154013976, 0.14121247924934144, 0.15099787418031807, 0.8912204863331057, 0.19952868096969378, 0.20030388044370062, 0.1171488376246822, 0.16938777836420904, 0.8713710214749509, 0.6648325800378816, 0.15690777152248736, 0.209183626200236, 0.4928739073261741, 0.33476596936777714, 0.5210070135732505, 0.20999678754219997, 0.20919743888642128, 0.5234957028853058, 0.18962145305520584, 0.1870846621212835, 0.20765931479637734, 0.1857847085187656, 0.22410369275460473, 0.1960054244039945, 0.207887796949634, 0.18494728588183307, 0.222850106327244, 0.10133784826684133, 0.0931522937035586, 0.09462945109055543, 0.08021595832456974, 0.08407682450843534, 0.08394475965422477, 0.12701424782428838, 0.08965076745602307, 0.08656218963863704]}, "mutation_prompt": null}
{"id": "a80538a6-2576-465f-b8c0-ba8ce6babe6b", "solution": "import numpy as np\n\nclass DynamicEnhancedHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            update_mutation_rates = np.random.binomial(1, self.mutation_prob, self.pop_size)\n            for i in range(self.pop_size):\n                if update_mutation_rates[i]:\n                    mutation_step = 0.01 * levy_flight() if np.random.rand() < 0.2 else 0.001 * levy_flight()\n                    population[i] += mutation_step\n\n        return gbest", "name": "DynamicEnhancedHybridPSOLevyOptimization", "description": "Implement an Enhanced Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization by introducing adaptive mutation rates, diversity preservation mechanisms, and a dynamic strategy for mutation step sizes.", "configspace": "", "generation": 80, "fitness": 0.28099624140182783, "feedback": "The algorithm DynamicEnhancedHybridPSOLevyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "abf797a8-b394-4155-a3a2-c7436015ff3b", "metadata": {"aucs": [0.7564315389064653, 0.7957214038928824, 0.7292030727424299, 0.7871835212617198, 0.6680894913845545, 0.765942943959693, 0.80554067480842, 0.7638467611240922, 0.7764082712336757, 0.1954833667887489, 0.28813573861572006, 0.3687315981356307, 0.34708543391196345, 0.17538087833875238, 0.3437069075159206, 0.34113325685407625, 0.35115971354731546, 0.3664032109209996, 0.1481445392105094, 0.14570099244700574, 0.22977451096789647, 0.25303107689452986, 0.19081288920788708, 0.14491046071516134, 0.25554255793080016, 0.15422681480480738, 0.24626968497934743, 0.12163818583045483, 0.14468246776216476, 0.11904750593457047, 0.1311515143456683, 0.10669444030041164, 0.09413337131346655, 0.17119591878767892, 0.1332181221648543, 0.12887441409507794, 0.9842824422270948, 0.9861251462921631, 0.9812805888581543, 0.9756518453695828, 0.9752738023983927, 0.9702493915743581, 0.9813023544794133, 0.9799045574813476, 0.9611253508506448, 0.4645713789563527, 0.4386986839102871, 0.4800896341045868, 0.37433642185965166, 0.4295037230818216, 0.3700768608544125, 0.39798994721370307, 0.40244912069220995, 0.40614488870358756, 0.16710710503082793, 0.22034981271108212, 0.22465872653443963, 0.22212041186704945, 0.8605417189703115, 0.19414197588852522, 0.6835150782826369, 0.157650525504195, 0.21804390674006857, 0.18025682925926645, 0.1784618718126867, 0.18536183435785403, 0.17691642702840105, 0.1249804851156201, 0.18106558135305117, 0.1846927768659684, 0.24448176957303092, 0.18378433466593191, 0.20366799985391637, 0.11005726993414389, 0.19173860142374888, 0.17758514648981383, 0.17982671853046073, 0.12908183034232767, 0.19488376798371798, 0.09579570809496074, 0.1176946807008793, 0.006079008742709502, 9.999999999998899e-05, 9.999999999998899e-05, 0.04721095708412015, 0.028339371568079863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061798893261044596, 0.08833292003675597, 0.04551292948210084, 0.11262782429867113, 0.026055584094826, 0.028383731020158454, 0.14000450432736367, 0.10258751221074358, 0.030604526307887903, 0.2256813352782292, 0.032659893687757346, 0.06282976044651989, 0.1131063747146025, 0.07995987381315917, 0.07546596922510995, 0.10405949991813668, 0.18942687518350054, 0.1298544152109875, 0.1477388783060185, 0.041203124150631654, 0.25711770203685935, 0.0699517251723315, 0.03727562743242829, 0.21032222354543728, 0.05543686194030084, 0.08227977958676835, 0.08265414339482469, 0.5564007192377474, 0.5167961898955997, 0.5296160994331925, 0.5380641391242964, 0.5380973226423358, 0.5074918687825374, 0.5222919373553576, 0.5425802065943439, 0.5483137022952288, 0.10113826977493556, 0.06511173612201948, 0.07009462561587498, 0.11750049690745323, 0.147591626398359, 0.1409587038441914, 0.13105127648343584, 0.0993350741151704, 0.14024715186047254, 0.2915643778274666, 0.39590923495832864, 0.23126297216085112, 0.2503607527958991, 0.3143690716820682, 0.13870207341093133, 0.20687773471147008, 0.13828734869403525, 0.36655212677399673, 0.39929529332629865, 0.21623251248033903, 0.4109244930188144, 0.22616357430721468, 0.3826813503999834, 0.4109229833961816, 0.429922642415832, 0.41359799129100927, 0.39081749964735213, 0.16684972623906236, 0.27578853082565946, 0.2289158380934434, 0.1605727224874196, 0.2995247261013171, 0.22341576424469545, 0.20679606191639022, 0.3003813982914303, 0.2202399700782265, 0.21330532031413263, 0.14207071761376533, 0.3899803451861267, 0.20255207295505206, 0.20960816494606693, 0.22990610723832605, 0.22711868789885425, 0.2136377571696365, 0.22270815822944845, 0.27780830363883746, 0.23942575017342282, 0.2222255080244122, 0.5646325081716124, 0.241672240476152, 0.20251364406186345, 0.22905806849409605, 0.22214078974216944, 0.20499724415470633, 0.8620131909901461, 0.1764538316186579, 0.14914521349376753, 0.8548112548906148, 0.19973468298329689, 0.1997135430561966, 0.16178373685789993, 0.16974100437787087, 0.8752771912006737, 0.573528433984552, 0.15435511943399682, 0.11209188306084839, 0.209246976584045, 0.4228090142800185, 0.2097800194164423, 0.2110915470943031, 0.10468491734482832, 0.6138814176291706, 0.2158428745990031, 0.22952990258856665, 0.21378308224463005, 0.20636826400649844, 0.19376966847959742, 0.18730984998139288, 0.2261969602131909, 0.20505389135887375, 0.21745064619929289, 0.08971696214673097, 0.08845605072156448, 0.0852788494623059, 0.08066024992970466, 0.08266688731500049, 0.08219144633996789, 0.09637561851581777, 0.07087067733615227, 0.09123386557614377]}, "mutation_prompt": null}
{"id": "3743e410-ba91-4394-b4bc-ade4496c7a93", "solution": "import numpy as np\n\nclass DynamicEnhancedHybridPSOLevyOptimization:\n    def __init__(self, budget, dim, pop_size=30, c1=1.496, c2=1.496, w=0.729, alpha=1.5, beta=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.alpha = alpha\n        self.beta = beta\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def levy_flight():\n            return np.random.standard_cauchy(self.dim) / (np.random.gamma(self.alpha, 1/self.beta, self.dim) ** (1/self.beta))\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.pop_size):\n                if np.any(population[i] < -5.0) or np.any(population[i] > 5.0):\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n\n            for i in range(self.pop_size):\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            update_mutation_rates = np.random.binomial(1, self.mutation_prob, self.pop_size)\n            for i in range(self.pop_size):\n                if update_mutation_rates[i]:\n                    mutation_step = 0.01 * levy_flight() if np.random.rand() < 0.2 else 0.001 * levy_flight()\n                    population[i] += mutation_step\n\n        return gbest", "name": "DynamicEnhancedHybridPSOLevyOptimization", "description": "Implement an Enhanced Hybrid Particle Swarm Optimization with Levy Flight Exploration for Black Box Optimization by introducing adaptive mutation rates, diversity preservation mechanisms, and a dynamic strategy for mutation step sizes.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a80538a6-2576-465f-b8c0-ba8ce6babe6b", "metadata": {"aucs": [0.7564315389064653, 0.7957214038928824, 0.7292030727424299, 0.7871835212617198, 0.6680894913845545, 0.765942943959693, 0.80554067480842, 0.7638467611240922, 0.7764082712336757, 0.1954833667887489, 0.28813573861572006, 0.3687315981356307, 0.34708543391196345, 0.17538087833875238, 0.3437069075159206, 0.34113325685407625, 0.35115971354731546, 0.3664032109209996, 0.1481445392105094, 0.14570099244700574, 0.22977451096789647, 0.25303107689452986, 0.19081288920788708, 0.14491046071516134, 0.25554255793080016, 0.15422681480480738, 0.24626968497934743, 0.12163818583045483, 0.14468246776216476, 0.11904750593457047, 0.1311515143456683, 0.10669444030041164, 0.09413337131346655, 0.17119591878767892, 0.1332181221648543, 0.12887441409507794, 0.9842824422270948, 0.9861251462921631, 0.9812805888581543, 0.9756518453695828, 0.9752738023983927, 0.9702493915743581, 0.9813023544794133, 0.9799045574813476, 0.9611253508506448, 0.4645713789563527, 0.4386986839102871, 0.4800896341045868, 0.37433642185965166, 0.4295037230818216, 0.3700768608544125, 0.39798994721370307, 0.40244912069220995, 0.40614488870358756, 0.16710710503082793, 0.22034981271108212, 0.22465872653443963, 0.22212041186704945, 0.8605417189703115, 0.19414197588852522, 0.6835150782826369, 0.157650525504195, 0.21804390674006857, 0.18025682925926645, 0.1784618718126867, 0.18536183435785403, 0.17691642702840105, 0.1249804851156201, 0.18106558135305117, 0.1846927768659684, 0.24448176957303092, 0.18378433466593191, 0.20366799985391637, 0.11005726993414389, 0.19173860142374888, 0.17758514648981383, 0.17982671853046073, 0.12908183034232767, 0.19488376798371798, 0.09579570809496074, 0.1176946807008793, 0.006079008742709502, 9.999999999998899e-05, 9.999999999998899e-05, 0.04721095708412015, 0.028339371568079863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061798893261044596, 0.08833292003675597, 0.04551292948210084, 0.11262782429867113, 0.026055584094826, 0.028383731020158454, 0.14000450432736367, 0.10258751221074358, 0.030604526307887903, 0.2256813352782292, 0.032659893687757346, 0.06282976044651989, 0.1131063747146025, 0.07995987381315917, 0.07546596922510995, 0.10405949991813668, 0.18942687518350054, 0.1298544152109875, 0.1477388783060185, 0.041203124150631654, 0.25711770203685935, 0.0699517251723315, 0.03727562743242829, 0.21032222354543728, 0.05543686194030084, 0.08227977958676835, 0.08265414339482469, 0.5564007192377474, 0.5167961898955997, 0.5296160994331925, 0.5380641391242964, 0.5380973226423358, 0.5074918687825374, 0.5222919373553576, 0.5425802065943439, 0.5483137022952288, 0.10113826977493556, 0.06511173612201948, 0.07009462561587498, 0.11750049690745323, 0.147591626398359, 0.1409587038441914, 0.13105127648343584, 0.0993350741151704, 0.14024715186047254, 0.2915643778274666, 0.39590923495832864, 0.23126297216085112, 0.2503607527958991, 0.3143690716820682, 0.13870207341093133, 0.20687773471147008, 0.13828734869403525, 0.36655212677399673, 0.39929529332629865, 0.21623251248033903, 0.4109244930188144, 0.22616357430721468, 0.3826813503999834, 0.4109229833961816, 0.429922642415832, 0.41359799129100927, 0.39081749964735213, 0.16684972623906236, 0.27578853082565946, 0.2289158380934434, 0.1605727224874196, 0.2995247261013171, 0.22341576424469545, 0.20679606191639022, 0.3003813982914303, 0.2202399700782265, 0.21330532031413263, 0.14207071761376533, 0.3899803451861267, 0.20255207295505206, 0.20960816494606693, 0.22990610723832605, 0.22711868789885425, 0.2136377571696365, 0.22270815822944845, 0.27780830363883746, 0.23942575017342282, 0.2222255080244122, 0.5646325081716124, 0.241672240476152, 0.20251364406186345, 0.22905806849409605, 0.22214078974216944, 0.20499724415470633, 0.8620131909901461, 0.1764538316186579, 0.14914521349376753, 0.8548112548906148, 0.19973468298329689, 0.1997135430561966, 0.16178373685789993, 0.16974100437787087, 0.8752771912006737, 0.573528433984552, 0.15435511943399682, 0.11209188306084839, 0.209246976584045, 0.4228090142800185, 0.2097800194164423, 0.2110915470943031, 0.10468491734482832, 0.6138814176291706, 0.2158428745990031, 0.22952990258856665, 0.21378308224463005, 0.20636826400649844, 0.19376966847959742, 0.18730984998139288, 0.2261969602131909, 0.20505389135887375, 0.21745064619929289, 0.08971696214673097, 0.08845605072156448, 0.0852788494623059, 0.08066024992970466, 0.08266688731500049, 0.08219144633996789, 0.09637561851581777, 0.07087067733615227, 0.09123386557614377]}, "mutation_prompt": null}
{"id": "21420843-024e-4d6f-9105-82df78f447b2", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 82, "fitness": 0.35186144899811683, "feedback": "The algorithm DynamicDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "a80538a6-2576-465f-b8c0-ba8ce6babe6b", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "e991c214-5edd-4257-a071-8cf235d7a6c2", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "77f96c63-4d87-41ec-b633-79cee574ce7b", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "5480c39d-53de-4779-8a44-2d082d824c97", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "50801caf-8615-430e-8020-b4c43bb90618", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "f3e0d2b1-7283-4cdd-960b-507347c61d22", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "a2eaa34e-1f01-4d4e-bb95-1c51ca0a0035", "solution": "import numpy as np\n\nclass NovelAdaptiveMetaheuristicAlgorithm:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates and strategies based on optimization progress\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "NovelAdaptiveMetaheuristicAlgorithm", "description": "Implement a Novel Adaptive Metaheuristic Algorithm (NAMA) that dynamically adjusts mutation rates and strategies based on the optimization progress for black box optimization tasks.", "configspace": "", "generation": 88, "fitness": 0.35186144899811683, "feedback": "The algorithm NovelAdaptiveMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "278167f6-989c-4425-ba41-e4a64ee3d9f4", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "a27c4127-9752-4bc3-9778-46f30b0bc9ad", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "b50970e4-0044-4c8f-aaa1-6cf5b9e2ea40", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "8acfe0c6-0049-4408-8059-9d7ae0ee37ce", "solution": "import numpy as np\n\nclass AdaptiveParticleSwarmOptimization:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=2.0, c2=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = self.w * velocities[i] + self.c1 * r1 * (pbest[i] - population[i]) + self.c2 * r2 * (gbest - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive inertia weight\n            self.w = 1 / (1 + np.exp(-np.random.normal(0.5, 0.1)))\n\n            # Dynamic cognitive and social parameters\n            self.c1 = 1.5 if np.random.rand() < 0.2 else 2.0\n            self.c2 = 1.5 if np.random.rand() < 0.2 else 2.0\n\n        return gbest", "name": "AdaptiveParticleSwarmOptimization", "description": "Implement a Particle Swarm Optimization (PSO) algorithm with adaptive inertia weight and dynamic update of particle positions and velocities based on personal and global best positions.", "configspace": "", "generation": 92, "fitness": 0.2951225092823685, "feedback": "The algorithm AdaptiveParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8151443525011084, 0.839353937848341, 0.8624284394144055, 0.18322064209056366, 0.7936903771159766, 0.8646017468206888, 0.8240119252340519, 0.8172139098700362, 0.806492526620133, 0.3479713649211681, 0.4576134507358963, 9.999999999998899e-05, 0.1647074192298602, 0.03755512683215201, 0.03454852207256176, 0.5459260303976747, 0.5386290357026219, 0.5354286129858101, 0.0801520331019141, 0.0917873114725467, 0.11676217301332692, 0.07078950637157544, 0.06399751780182361, 0.08066780482788694, 0.08786558899532715, 0.07470165824769215, 0.10178185010386531, 0.10747159998360512, 0.10560395564653968, 0.075988434632835, 0.08755680187779957, 0.08061047687597134, 0.05975479580388021, 0.12240918441804316, 0.03705350134253971, 0.07727008793077783, 0.9869328194889077, 0.9929808061047275, 0.9915449474833601, 0.0997367042719528, 0.9861833862796795, 0.9754982365482834, 0.9911617149618104, 0.9887839106078365, 0.9835672269237754, 0.41114348446621884, 0.5349558431995709, 0.32582635123919923, 0.4048603086462028, 0.15126385789857666, 0.1516935867362479, 0.3318088571673329, 0.34758409874718477, 9.999999999998899e-05, 0.16638597518135045, 0.32816120781126135, 0.1406195543662787, 0.21586327098660207, 0.3835109326241042, 0.19472715108417238, 0.22364977967352473, 0.11635099733913246, 0.3573399427099564, 0.5266335001764579, 0.4313785175127205, 0.533891387191815, 0.13039172425155887, 0.33022353559966866, 9.999999999998899e-05, 0.13155379810432566, 0.11388481178944498, 0.5777636879558775, 0.4445666937394067, 0.21212157057097336, 0.5351890647100814, 0.6078434930323966, 0.621580248868365, 0.5847074053525336, 0.30749632306839525, 0.13470377983860893, 0.09954336334739577, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000663444742047048, 0.10613398896948134, 0.06803281692119889, 0.3296320713400229, 0.006269027538877148, 0.2642329250978297, 0.3844454639403233, 0.2560270354568456, 0.41176005791704984, 0.4649902874693307, 0.0442996756833991, 0.05181559376445044, 0.2826937524468688, 0.37107675745786106, 0.05468344591694563, 0.11755629874993101, 0.1433414116549393, 0.2095223222095699, 0.2531628519377763, 0.07539257825890877, 0.07596511501074932, 0.1609068635113048, 0.06919996353443525, 0.07110304401048084, 0.14114574142416803, 0.3072923765550637, 0.21487205498396567, 0.40485884716087606, 9.999999999998899e-05, 0.21987458831757412, 0.08134616091890623, 9.999999999998899e-05, 0.08392203034487333, 0.7336291060291531, 0.6403475658725977, 0.7036552115889041, 0.6852420624009381, 0.6393572538934287, 0.6541128696687017, 0.7722060414166996, 0.6405222473452277, 0.7472685711331062, 0.08654037913092194, 0.06936238823309027, 0.06027705584548859, 0.08289087697400688, 0.10822049048206661, 0.11671058143950663, 0.07520394948502906, 0.0937408678805598, 0.09589402713984785, 0.1778470320388258, 0.42122469135867135, 0.19772333987790291, 0.15968844389230985, 0.26791964596239426, 0.1422071175734021, 0.22916559355920618, 0.17371077272877067, 0.22404450432403877, 0.15521605926906268, 0.328837109360295, 0.41313503804710805, 0.29334289962719196, 0.21988467869774553, 0.2661009977807034, 0.2638628165276028, 0.27582461712508277, 0.38382611873017336, 0.20042527557881962, 0.21265127383669669, 0.28486388119985906, 0.21781460024128885, 0.2374143633142467, 0.21991257224464, 0.17041147359639908, 0.25224353669855404, 0.30904921289249865, 0.19513748886378157, 0.21567914435697932, 0.17010893667913474, 0.18602889810491652, 0.1999653677506873, 0.20201975849438936, 0.24299379324694914, 0.2324860772803481, 0.22698098557297308, 0.2296435282993543, 0.20493284431746195, 0.17173554815303083, 0.19666114662087608, 0.1891953602821943, 0.2092969096275884, 0.19949863838678206, 0.17698779133699905, 0.20712398550048172, 0.9033448654317464, 0.1680992707197081, 0.15420360779355924, 0.1689138802677349, 0.20158775875962487, 0.20051798973462154, 0.09048191026013297, 0.16986849694382888, 0.8791685878553587, 0.870361853142394, 0.15747870990696644, 0.8343172471926185, 0.7641151848010288, 0.1674721577957352, 0.21143123831006327, 0.18873235452010018, 0.8264789754847905, 0.8176996146320533, 0.2156705502149029, 0.22883928415900923, 0.19438641497418707, 0.22696849851374545, 0.27261398852007646, 0.19029547287320514, 0.23970527019210242, 0.21705152027044283, 0.21302411282483846, 0.07503906107769964, 0.10267525992946414, 0.08090499581581911, 0.09469752494344796, 0.09357710094025151, 0.09663200382807013, 0.0986655688772311, 0.06267399591403577, 0.08537410890897845]}, "mutation_prompt": null}
{"id": "9d6d2212-fd85-4fab-8faf-6cde97853d01", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "4cf96392-8188-4c89-ab1e-872109a7e735", "solution": "import numpy as np\n\nclass FireflyDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9, alpha=0.5, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                for j in range(self.pop_size):\n                    if func(population[j]) < func(population[i]):\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        population[i] += beta * (population[j] - population[i])\n\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive parameters\n            self.f = np.clip(self.f + self.alpha * np.random.randn(), 0.1, 0.9)\n            self.cr = np.clip(self.cr + self.alpha * np.random.randn(), 0.1, 0.9)\n\n        return gbest", "name": "FireflyDifferentialEvolution", "description": "Implement a Novel Hybrid Firefly Differential Evolution algorithm integrating the collective behavior of fireflies with DE for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 94, "fitness": 0.050390626467305445, "feedback": "The algorithm FireflyDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.08883443927132828, 0.10726967371399221, 0.10985630873405894, 0.09243768788735707, 0.12768559775357202, 0.11098050028426265, 0.10954161650424521, 0.10716299410633323, 0.1741752245374406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004205890385822197, 0.016556475296506168, 0.01546695719724267, 0.010643411704069683, 0.005467882780505695, 0.01644933740728216, 0.018248263482334326, 0.02659188512578259, 0.012110957182869031, 9.999999999998899e-05, 0.002345678759137493, 9.999999999998899e-05, 0.01959972157639278, 0.0011371462482393513, 0.0042338867739240005, 0.010686414193859628, 9.999999999998899e-05, 0.0013193637649441259, 0.061862275843653114, 0.05888675112225972, 0.0839704363945315, 0.06213937370480216, 0.06501588784400514, 0.0849689107435333, 0.0638860334912611, 0.06478624503120667, 0.07578466319801991, 0.0027166706053479706, 0.021308315898254326, 0.05843056578113226, 0.048347630751177206, 0.02561815014819313, 0.04962829834046756, 9.999999999998899e-05, 0.026993995038594787, 9.999999999998899e-05, 0.10027683525177622, 0.04987537931449404, 0.052233822106523387, 0.0667108215001172, 0.02725496812965944, 0.05474414902804381, 0.04342449133083903, 0.05931056463008866, 0.053800442840265306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011128843011452783, 9.999999999998899e-05, 0.0015492072660872047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12788455115693342, 0.13879659513922615, 0.14871976401994103, 0.11863841837761357, 0.10149056971951909, 0.10589158636460183, 0.16112956940342849, 0.11029212570286562, 0.13421810346630647, 0.010220943686380046, 0.008397602606219468, 0.019655162304998197, 0.008666790251154133, 0.005915814082482207, 0.01759993274736349, 0.014039239858688601, 0.007303656766747935, 0.028302283223189395, 0.08908094813739464, 0.08609370886951495, 0.06920999796256877, 0.10655157072920063, 0.1132338558508702, 0.07697637009249825, 0.09157905207684125, 0.08174174118597788, 0.07726393575557644, 0.11739663529218847, 0.10297441267170215, 0.14352810184653642, 0.13800672315110074, 0.11661423899449996, 0.1200146095571214, 0.14755678096689373, 0.17377774300845283, 0.1341322466131487, 0.06832583860230557, 0.05247344423765421, 0.07727409897067705, 0.06141101504976709, 0.06406947898089654, 0.0688833986510412, 0.0837317855149382, 0.0997711199450243, 0.08057353110366128, 0.13137763578067785, 0.10311343194769396, 0.13345086981233123, 0.11503914970292772, 0.10280160192899168, 0.10590796226911903, 0.12245976138762271, 0.09797063612042423, 0.1261963614278906, 0.05038849121554234, 9.999999999998899e-05, 0.06717799524877921, 9.999999999998899e-05, 9.999999999998899e-05, 0.017366679491849557, 0.11464221469778135, 9.999999999998899e-05, 0.09696956222812136, 0.11358184996871767, 0.08701846660339985, 0.10023618280555346, 0.085223326464958, 0.1207914665021157, 0.09242695944683188, 0.07245568600050101, 0.09643604708838482, 0.08055402939247391, 0.1109155827491004, 0.10051730792859848, 0.060118421509274045, 0.057203633319015346, 0.06462407170278472, 0.07293283833884656, 0.0608814844963792, 0.04066120430303799, 0.06582874609208156, 0.14031391755357214, 0.14491269790726202, 0.14811175080150463, 0.13059469720303585, 0.13043990587865306, 0.13900765836234696, 0.14969714796693134, 0.13131874553096445, 0.14689007985489466, 0.019465404937674458, 0.023088299835617776, 0.04080257890669836, 0.027015293023570086, 0.03425093938292756, 0.02963756092263725, 0.018689538955322105, 0.04947240146408605, 0.029326904765471173]}, "mutation_prompt": null}
{"id": "abdab12d-9a50-49b4-981a-dbe616eea5e5", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "e155e0bc-67df-4944-b10b-61d414018165", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "04e8786f-2f76-45f1-97ea-e7b9fd766e3d", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "001ac242-fee2-4dbe-a7dc-4ade4b563cb0", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
{"id": "2572d082-3819-497f-bd0e-c90a55ff642d", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=30, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pbest = population.copy()\n        pbest_vals = np.array([func(ind) for ind in pbest])\n        gbest = pbest[np.argmin(pbest_vals)]\n        gbest_val = np.min(pbest_vals)\n\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                candidates = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                trial = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < self.cr\n                population[i] = np.where(crossover, trial, population[i])\n\n                if func(population[i]) < pbest_vals[i]:\n                    pbest[i] = population[i]\n                    pbest_vals[i] = func(population[i])\n\n            new_gbest_val = np.min(pbest_vals)\n            if new_gbest_val < gbest_val:\n                gbest = pbest[np.argmin(pbest_vals)]\n                gbest_val = new_gbest_val\n\n            # Adaptive mutation rates\n            self.f = 0.1 if np.random.rand() < 0.2 else 0.5\n            self.cr = 0.1 if np.random.rand() < 0.2 else 0.9\n\n        return gbest", "name": "DynamicDifferentialEvolution", "description": "Implement a Differential Evolution algorithm with adaptive mutation rates and dynamic strategies for population initialization, mutation, and selection.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21420843-024e-4d6f-9105-82df78f447b2", "metadata": {"aucs": [0.8150682015926745, 0.7998830223534661, 0.8281236528176337, 0.8341509233182297, 0.7813458870000852, 0.8300898742016612, 0.322171533520197, 0.8116233955722564, 0.8220390660029286, 0.6671419128005388, 0.6613783617046979, 0.6867821600446078, 0.6775165855196063, 0.2401688499783582, 0.6830175055952155, 0.5276030008796708, 0.6694682645109027, 0.7348463715568943, 0.1432662142000578, 0.11495926394839295, 0.5003010087321544, 0.16794193580254446, 0.4270520581038767, 0.4342849726292477, 0.15497243382859338, 0.14942331158931033, 0.16348347993931633, 0.11716895904032498, 0.13468983279271673, 0.14157802551966958, 0.13045225008239647, 0.13640677020517356, 0.12990388470537728, 0.1304599861366763, 0.1047022023582096, 0.15909522789087605, 0.7847849338346398, 0.9053864675612578, 0.9581961635224155, 0.7545264790399322, 0.9233347861349048, 0.8508665721110811, 0.9185309568377307, 0.9027874193191275, 0.8700770043176751, 0.12032282752155132, 0.3750914789026377, 0.310172628116515, 0.28992239954071886, 0.4542836514435483, 0.38014544804268025, 0.3385697932990367, 0.32660271058996104, 0.32550202731274636, 0.37741988311380203, 0.8499388972914173, 0.2449335920033754, 0.27289723106711894, 0.8422094357022696, 0.8353314198556581, 0.8683489973753139, 0.7842033305950122, 0.8383877960116228, 0.18124745286208077, 0.1548435701484726, 0.19987379516752346, 0.15221648922695497, 0.1399491729145138, 0.20140545438957191, 0.17704734304843117, 0.12218025333851745, 0.14643622964135916, 0.15054074211713964, 0.16326748345518882, 0.15146550597320607, 0.15435605982254252, 0.413442329116006, 0.17475309872447886, 0.17837552880020247, 0.15177220329904373, 0.15092257269881615, 0.12280003905013348, 0.15352182092286837, 0.11080594614635098, 0.0084526823294373, 0.05840116375654614, 0.057187819144075225, 0.0700600842779251, 0.24904068411468994, 0.1084103218126391, 0.19042104606533883, 0.45536060660250366, 0.36514818722442166, 0.23637638571437636, 0.14438806159345063, 0.4081339105957358, 0.2528321885007706, 0.17582301027178893, 0.35718613741695704, 0.08796473688178263, 0.10587388381013974, 0.0723158230604859, 0.12350069386492635, 0.20878474063893593, 0.07512698121112205, 0.09867622115356278, 0.14207756913682557, 0.19006879424984202, 0.15578698020660997, 0.2842473776682968, 0.18536076424488734, 0.326045831803112, 0.3492664945216696, 0.34168987182172605, 0.2776656398010363, 0.2627457482380834, 0.15462356167657032, 0.42212470970456595, 0.6609347154056177, 0.6555106216479973, 0.5412073807866045, 0.5187241854009895, 0.4948621131285261, 0.7230314641671653, 0.729388995724395, 0.7299908638280415, 0.1185563044525123, 0.1414007880323337, 0.13552503809645822, 0.1345095168974786, 0.14908365975475668, 0.12109504049923214, 0.13011122515629647, 0.1343540975354015, 0.5239525259672104, 0.24915081644408887, 0.34706068310823024, 0.40621322402483195, 0.3265950165389888, 0.3870521514531361, 0.16107110909567457, 0.2513034522525185, 0.22641906583709415, 0.23691544557211963, 0.33952609000611933, 0.47600215801368173, 0.5191949695033151, 0.35777172896720166, 0.4572391061148283, 0.5638079605931771, 0.5448751074014254, 0.5201053358404933, 0.5167647237244348, 0.3624036989927708, 0.3091271606350995, 0.3647758918528733, 0.35135114669348566, 0.32897023707536777, 0.38251522581203, 0.21957636910937095, 0.4379769885632244, 0.4116796428846916, 0.2261256352113099, 0.20564726560298985, 0.25114563855845706, 0.22893977135652865, 0.2122487219172451, 0.1934926349477486, 0.22299692644572577, 0.19184007891261334, 0.2040560436683545, 0.20313464675657888, 0.22787749950461333, 0.2146551507040213, 0.6230903776122223, 0.216024674849702, 0.231888001934076, 0.2415730766800399, 0.24618412765992703, 0.6571652358847349, 0.8506314402403179, 0.78512626170897, 0.8916531108786789, 0.8656870601154903, 0.19753525748268463, 0.7804280424732631, 0.16478989228458518, 0.7344926309382069, 0.16378172002667069, 0.4911336684942418, 0.20887754969756422, 0.707057131067915, 0.20631983615538407, 0.5424716917598424, 0.8090000993625518, 0.11162148054136378, 0.16359265639705822, 0.20652271050767756, 0.19514650885557416, 0.18226143236774572, 0.18358722589746157, 0.19452235048161393, 0.19509626974733207, 0.18737299102526683, 0.19653976013645125, 0.19332023280300792, 0.18755109851935914, 0.09645082715809072, 0.11865327459990471, 0.091999790342572, 0.08010193742159721, 0.0913620412249686, 0.0814016181982643, 0.08789592813524483, 0.08586644350509542, 0.08872594132651679]}, "mutation_prompt": null}
