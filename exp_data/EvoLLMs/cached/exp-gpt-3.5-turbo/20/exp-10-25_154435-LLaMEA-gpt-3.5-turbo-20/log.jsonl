{"id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.219555390363044, "feedback": "The algorithm PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "d3f20097-9e6e-4699-a353-522c45f04c09", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "a9a09602-1361-4b72-93bc-c6631ce18477", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "1bd1c0b2-60a4-445c-839a-30cc3e107d87", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "5c0b39f8-94e1-4d8c-8152-13fe0d8351ce", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "0e57c04b-7d99-4e52-b4ad-f96f17427d9e", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "05bfdf9b-36bd-4311-a7ae-e9748c1cef52", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "15cd39c4-c957-4f44-9353-4bbcb83a31fb", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "beda4ecb-0d8e-4aa0-b2d6-07dabf98d16a", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "be71b319-05d9-489d-8eee-f9c8e1f799b2", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "7d1443a7-118a-4499-88f1-32b2f38e1ff4", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "61408b3e-63e0-4934-929e-9f924729d612", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "c8acb31b-8e77-4c86-b55e-6e923fc12703", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "19cf34f0-b354-4c2e-9eab-cb0dd509d288", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "c7c4c72e-6854-4534-b8f0-22da5bc79e9a", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "422c7d24-e04a-4d3a-9cf0-1cab9d05380a", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "73740a00-e3c9-482b-9470-e335522695f5", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "aa789a61-effe-49c3-910f-dbd0d3feb240", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "16a3eeed-2e8d-4f61-b771-d36fdd6da7ee", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "d1e8ef5f-4864-4e6a-8bb6-687fedf348b8", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "7a3325f2-208c-49a0-9b6d-fd17cde2e57f", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "5c70d6a6-e13c-4e6e-af83-c1e018d1550e", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "1eb968c2-d211-4ebc-a11d-32332e864a04", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "079d8e12-d8c1-464a-bfe2-5e6c4fc90511", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "0d8660d6-c6e5-4a53-97c9-5c8af4f9c52f", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "952e9cee-3a0a-48eb-b5c7-4931681b1c91", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "969f3c0c-fcb4-4d51-a418-e2c222effcfa", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "a5df0be7-8493-4b99-9cc7-2cac0144feb5", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "57cd20bd-1bda-4dd1-9635-1c28a97d0e86", "solution": "import numpy as np\n\nclass PSO_SA_Adaptive_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.cooling_rate = 0.99\n        self.inertia_weight = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = self.inertia_weight * velocities[i] + self.c1 * r1 * (p_best[i] - particles[i]) + self.c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= self.cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Adaptive_Optimizer", "description": "A hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) and including an adaptive parameter tuning mechanism for black box optimization.", "configspace": "", "generation": 28, "fitness": 0.219555390363044, "feedback": "The algorithm PSO_SA_Adaptive_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "16b50535-47cb-4a3d-af71-c5d3674a9aee", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        def local_search(solution, value):\n            new_solution = solution + np.random.normal(0, 0.05, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < value:\n                return new_solution, new_value\n            else:\n                return solution, value\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n                particles[i], _ = local_search(particles[i], func(particles[i]))\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "HybridOptimizer", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) and Local Search for black box optimization.", "configspace": "", "generation": 29, "fitness": 0.20268790165515707, "feedback": "The algorithm HybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.4661248564862024, 0.42806880597711106, 0.44892707772414164, 0.4055067963139565, 0.42598526527900105, 0.4809356237546374, 0.43279589393959605, 0.46898402417869445, 0.4315726778525092, 0.06999094094840608, 0.005412129781744657, 0.015549942931355143, 0.12252630378623308, 0.030562289109702045, 0.03220074911880799, 0.025853470108272214, 0.05692806701706976, 0.0037942119629000848, 0.08052590641687529, 0.09760033668383983, 0.08923026970575432, 0.07596314661173675, 0.08298005804907205, 0.08840517484123978, 0.12095561855456693, 0.1224330176427989, 0.1138379683008981, 0.09969685770518777, 0.0737695330415854, 0.059249712447695835, 0.08915931407480182, 0.0792491250716113, 0.0552836133369794, 0.09471090381824265, 0.0763647864345226, 0.08970081965854992, 0.943031862207738, 0.6910999242305308, 0.9794803688738606, 0.7179343597005212, 0.9435523359746203, 0.9068550898074256, 0.9658215669178972, 0.9726729538661185, 0.9281563960513511, 0.2512750375484635, 0.21896632776652403, 0.2129996246420197, 0.2772686056368998, 0.23684684917089505, 0.26532946190462525, 0.26971960696456243, 0.22659361751155116, 0.18718855564012982, 0.46929364084012437, 0.14457147015546068, 0.1789939644077322, 0.21248742952754074, 0.22207186889155395, 0.49184950169419495, 0.22657728130892285, 0.2208043977656028, 0.5434665299258017, 0.14287976560640636, 0.10588096714498241, 0.08470744496447091, 0.18620669858505257, 0.18065018487580542, 0.1471067484578683, 0.14892020820050222, 0.14681480054588825, 0.11983989304267817, 0.17571442709553542, 0.15834993928909158, 0.11547899557349173, 0.18636388360722766, 0.22494562683090957, 0.12340129284544943, 0.1439656430916233, 0.24964816366759335, 0.1002574984846617, 9.999999999998899e-05, 0.016452163023212618, 0.07446295537566272, 0.021548281662589708, 9.999999999998899e-05, 0.001849241744693808, 0.08013483705912838, 0.01899675808231005, 0.052624963857981655, 0.054715144320969245, 0.08337024433874818, 0.14005263239943455, 0.11238605276742497, 0.0038054338075851346, 0.04395046525578439, 0.15675605358641875, 0.0540567062217846, 0.04859996019530832, 0.0029421212352591652, 0.020926201227358776, 0.0016160052420389759, 0.008134861510895486, 0.03624739362855911, 0.004937600084205074, 9.999999999998899e-05, 9.999999999998899e-05, 0.015225661062755691, 0.09557552375858525, 0.11029454722436327, 0.10508829456757163, 0.08666826201933453, 0.09885763344406329, 0.09420936946626812, 0.08519470250689665, 0.09803725748797698, 0.10259701446776814, 0.4058471741924048, 0.42610316330796094, 0.39670549541038436, 0.41050204937331025, 0.38349038608115094, 0.38630432907235834, 0.4126090550047744, 0.40824139815628235, 0.42503592066146434, 0.09744129205570173, 0.06632520087262306, 0.0688009445936606, 0.09182808460099989, 0.09202112382675276, 0.11111594734887387, 0.08014977995539352, 0.09009714529662338, 0.08622494462449792, 0.23785913837037598, 0.2665157463667769, 0.23037752905969455, 0.188796941208614, 0.22825278708113927, 0.18742727539276238, 0.2961448635429196, 0.19907052919424129, 0.18502604377402465, 0.2543348021159879, 0.31131676220032145, 0.2646340643219255, 0.18637194732573725, 0.2870003914272167, 0.26271014236943124, 0.21610851082145888, 0.2944422934362285, 0.23964451248519558, 0.23966021312095986, 0.1776235976673184, 0.1615314934260912, 0.2179922029482565, 0.22307840162035042, 0.21908214667139236, 0.17285277125347653, 0.23359756329334924, 0.07573172265438277, 0.18634771087305235, 0.19148923984184263, 0.18506263244796706, 0.20887414617829925, 0.20830450768727582, 0.19474462426481143, 0.2404347602445427, 0.21303064054986665, 0.20844299761334883, 0.1973541835391357, 0.2013775962543508, 0.2120727885054755, 0.19007500152152712, 0.18658224598953288, 0.2005340981096072, 0.1864922127256058, 0.22207461460054123, 0.1639497975463462, 0.6060226236982872, 0.18296194917860586, 0.1478685693931635, 0.17122874844550073, 0.19595506954114406, 0.19481408693986257, 0.09915717438623228, 0.16723976865157342, 0.1601406991620985, 0.0854329602676196, 0.20502661449095105, 0.12167866684880568, 0.10091675413195211, 0.16237978119245622, 0.19936916427205564, 0.1048744435613822, 0.47772263339172927, 0.4912844653809407, 0.18279379494931247, 0.20058708298027328, 0.1721444082952025, 0.18293694668495497, 0.17255871098720488, 0.1739023802399453, 0.17269513134632908, 0.17637559158743277, 0.1913372047496913, 0.07456894395485791, 0.07582070358529092, 0.07339704336908215, 0.07166090946411441, 0.07577255114317683, 0.08593755276740123, 0.07260587190026091, 0.06553973127908319, 0.07501595707684083]}, "mutation_prompt": null}
{"id": "2a205d26-9363-47b4-b6a5-e214565d7872", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "621f0264-6991-425e-92d7-cbf7c5bb3c93", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "5593d508-c20e-4304-8040-978081736fdf", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "b783ba26-24ad-4c38-8bd9-2078b6e6548a", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "4cae4419-16c2-407a-934e-7503f1ca5e2f", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "99ce25a6-59c8-433a-b666-7c9573209a12", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "fac43d0d-9aaa-4a91-8729-321f76df9047", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "09332098-52c5-4d3a-ae92-b00bcb4f69d1", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "c1056b29-5b71-4f53-b26c-be093df0d4dd", "solution": "import numpy as np\n\nclass Refined_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Refined_PSO_SA_Optimizer", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization with refinement of key parameters.", "configspace": "", "generation": 38, "fitness": 0.219555390363044, "feedback": "The algorithm Refined_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "3eff4468-23c4-42b2-8a8e-ba50e6306e0b", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "ce72afe5-6208-4bb1-b976-44b0ebfba463", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "5d447a48-e0b0-4664-878b-083e6ad6e45f", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "485fa2ec-8429-43e3-a910-f7d74410b6af", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "a89bc14c-710f-4197-ba5f-2e370dd88d16", "solution": "import numpy as np\n\nclass AdaptivePSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def adaptive_pso_update(particles, velocities, p_best, g_best, inertia_weights):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                inertia_weight = inertia_weights[i]\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        inertia_weights = np.ones(self.num_particles) * 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            adaptive_pso_update(particles, velocities, p_best, g_best, inertia_weights)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n            # Adaptive update of inertia weights based on individual particle performance\n            for i in range(self.num_particles):\n                if func(particles[i]) < func(p_best[i]):\n                    inertia_weights[i] *= 1.1\n                else:\n                    inertia_weights[i] *= 0.9\n\n        return best_solution", "name": "AdaptivePSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a novel adaptive inertia weight update mechanism based on individual particle performance.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'simulated_annealing' is not defined\").", "error": "NameError(\"name 'simulated_annealing' is not defined\")", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {}, "mutation_prompt": null}
{"id": "b8cfcdd3-438d-4171-851e-a76f4b1ad92a", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "26c5870d-40c3-4253-9ae6-d27d00815d40", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "3915ab83-b8fc-4fe7-aa11-8e68166889cd", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "901aa49b-6e9a-4c6d-a6b8-59a5e8cf2fe0", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 25\n        self.max_iter = 120\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def enhanced_pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            enhanced_pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "A metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization, with enhanced diversity maintenance strategies.", "configspace": "", "generation": 47, "fitness": 0.19446032842231328, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.38641471562462915, 0.3741913087768971, 0.37095063539236994, 0.3798235390415464, 0.36394683322642685, 0.3684812268014531, 0.3725754925818625, 0.383050739733225, 0.39428611857927953, 9.999999999998899e-05, 0.00029917609077023677, 0.0049978453576250415, 9.999999999998899e-05, 0.00011718767778456929, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004902658031529117, 0.09769564508551287, 0.08587128526828824, 0.0936336482133433, 0.09307945355605607, 0.09552914439074955, 0.09087102521274226, 0.0952806822949227, 0.08920223176377362, 0.07904489996668307, 0.08707871704399672, 0.08038353183168123, 0.06884015465861071, 0.09159430543358427, 0.08521352018228368, 0.07415147099455355, 0.07563094397578629, 0.07211158933247297, 0.07964461124817956, 0.9739899570364292, 0.987952496367119, 0.9765878035135752, 0.8972424872115284, 0.9604769507307159, 0.934297873139993, 0.966844134955631, 0.9518532527110071, 0.9473107387921983, 0.2342264134532388, 0.22704930606503437, 0.22177201081114484, 0.2482768425707802, 0.25580870829845426, 0.2247723611245609, 0.23252236690901396, 0.2207727674824117, 0.17661409417758367, 0.2261230126622742, 0.25335182070604656, 0.27709783341304983, 0.2755573539599775, 0.2552073572755571, 0.23100369678396215, 0.20945992326047758, 0.24103024249706773, 0.3008930696320333, 0.11755230653100701, 0.11844788675062212, 0.11526859295191283, 0.1106853468088107, 0.12724481843688595, 0.11501492354932075, 0.16147848731069847, 0.13197686540502818, 0.1394251870083657, 0.13111881974102002, 0.1274392465532792, 0.143164565159982, 0.16205869550185892, 0.11485228001663439, 0.13759563737255198, 0.16166098952834274, 0.10781958124884894, 0.0932645295378206, 9.999999999998899e-05, 0.005279669834085676, 9.999999999998899e-05, 0.0031236382373425187, 9.999999999998899e-05, 0.006117538336977146, 0.0013875902869499024, 9.999999999998899e-05, 9.999999999998899e-05, 0.07228302193928315, 0.04077592951209241, 0.06248291958701324, 0.08373167312314655, 0.003999177354952921, 0.03588313339118743, 0.1853776211913104, 0.062294496293737955, 0.02590534254668042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08063188871001836, 0.06190501139709648, 0.06830796264251693, 0.07524694514335661, 0.06736027223508756, 0.0660935710025915, 0.05679392910642145, 0.0724087901933812, 0.0755507559741947, 0.3675686458777524, 0.3677133544488562, 0.39698894635287396, 0.36578175701477234, 0.35682935307193064, 0.382265590389252, 0.36251093476297924, 0.37652805937171996, 0.40893195809719496, 0.08382084335883278, 0.094967553600242, 0.08546809366402797, 0.10043015871502814, 0.10777507972185962, 0.08157083404897802, 0.08450859322091764, 0.09543841860637226, 0.06862352318139053, 0.14199339472571304, 0.2018577456255931, 0.174614411938402, 0.22689313719805038, 0.21876480025719802, 0.21008555400704354, 0.23670459988037662, 0.20685325959767975, 0.20499414986419628, 0.230691852086076, 0.1880863920029019, 0.26157560529872803, 0.27110796522326897, 0.2605284570310369, 0.2688596830581955, 0.26056485590864664, 0.2599346265864695, 0.27880758034515907, 0.18766234152357553, 0.19496341414616425, 0.20233888760124719, 0.2162009263817889, 0.17211503160519137, 0.20849763907739804, 0.19202549308003558, 0.20976586394410046, 0.24896337665355994, 0.1922755539387585, 0.1900654575454318, 0.19506497138539203, 0.20174200172376366, 0.17136607881748844, 0.20148852756708424, 0.20801741884992897, 0.20037964954846288, 0.19244287407285987, 0.18016878248855772, 0.177334959875879, 0.17700406201883956, 0.18885601712430888, 0.18763176511363366, 0.16979091782945865, 0.2086479170805675, 0.18566838195852553, 0.18489181870680826, 0.10331065821767371, 0.18639466235883884, 0.15099776890247918, 0.5585600926833548, 0.19778527730951356, 0.19691512972098157, 0.09939265717497803, 0.16764893737775488, 0.5278163256740056, 0.08187786423509291, 0.45892902692401505, 0.44645910277623024, 0.4440444564814958, 0.16495284624876438, 0.2056490942768211, 0.10338600598871106, 0.3120666541434495, 0.38871193206971666, 0.18346557860929302, 0.1886113848892681, 0.18980696974683475, 0.18203480171461095, 0.1750411824933371, 0.17210242625039096, 0.18433536605321654, 0.1703265494622057, 0.17471460770356684, 0.07542296753417299, 0.07290777425671457, 0.06644468218870847, 0.08249380991448907, 0.06574810026102751, 0.08056807337800764, 0.08094161522891319, 0.07932225307714036, 0.07033555573347117]}, "mutation_prompt": null}
{"id": "63d96880-e129-4277-8d33-a56ecac9c9dc", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "f2493f03-f6c1-4846-aa2c-c816f4ab4d0f", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "4d31105d-bcf9-44be-936e-fd1607f4d3a5", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "f4e4997f-94e8-4254-aeb0-c19706104397", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "dc9758c5-5dcd-4031-8c19-94f105f9ff10", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "15e4adea-f973-4c36-861e-082de6212fdc", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "5fd74789-8e66-41af-82d9-85056127888d", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "de285c3e-4c00-4d21-9d22-7daae86ca14a", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "ebf377ba-eeb1-4a1f-8d73-145135d77129", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "fc98ada8-9f61-478b-85d7-784222639d51", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "02c41fb0-861a-449a-99d0-da1d99932859", "solution": "import numpy as np\n\nclass Hybrid_SA_Dynamic_PSO_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Hybrid_SA_Dynamic_PSO_Optimizer", "description": "An innovative metaheuristic algorithm named Hybrid Simulated Annealing with Dynamic Particle Swarm Optimization for efficient black box optimization.", "configspace": "", "generation": 58, "fitness": 0.219555390363044, "feedback": "The algorithm Hybrid_SA_Dynamic_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "28b31570-a62e-49aa-a429-945272eeef18", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "b3eb4604-5f99-4970-981e-106315b0ba15", "solution": "import numpy as np\n\nclass Dynamic_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Dynamic_PSO_SA_Optimizer", "description": "An innovative hybrid optimization algorithm integrating Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization with dynamic adaptation.", "configspace": "", "generation": 60, "fitness": 0.219555390363044, "feedback": "The algorithm Dynamic_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "6ef5c3a7-2549-4863-a2e2-3eb2854c0262", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "ca87a7a4-2d52-472d-a0c1-4efad80bf939", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "19fc59ea-fa46-4a91-b336-66f9b5262119", "solution": "import numpy as np\n\nclass Refined_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Refined_PSO_SA_Optimizer", "description": "Combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization by refining the update strategies.", "configspace": "", "generation": 63, "fitness": 0.219555390363044, "feedback": "The algorithm Refined_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "6508c313-b3ee-4673-b921-9b611096799f", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "f5fb6d2b-3b4c-44e2-a06c-89abf5acd6fa", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "b6282e99-d2c9-40b8-93d4-6b0e1843149b", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "954a3e23-3e55-40ff-bd9a-ddcfeaf1187e", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "a174226c-fcd6-4101-a764-3f3e344bc795", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "d1ce2df3-2154-4c43-9625-532d6c451ecd", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "An enhanced hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for efficient black box optimization.", "configspace": "", "generation": 69, "fitness": 0.219555390363044, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.5409523706853789, 0.5006124120551747, 0.4727487083749973, 0.48572499383588075, 0.504626077184096, 0.4877856195752194, 0.495302842091338, 0.46603607469896446, 0.5044168436066236, 0.07424604386986644, 0.04108802178697768, 0.0, 0.06728594786141917, 0.018121728848311425, 0.014897772540997667, 0.05427250566479447, 0.09837580425600012, 0.03814359971978465, 0.11180063093283465, 0.07567405104903557, 0.08131716393061683, 0.0928047344468228, 0.10206855369068868, 0.12956427845999274, 0.10213276729522625, 0.08154513063514657, 0.0899864833893802, 0.07045998993462232, 0.08031150894030392, 0.09569136959861502, 0.10028193623754889, 0.06668262712768902, 0.08800451376175733, 0.09755003722456201, 0.09109597325624197, 0.045901578327145365, 0.9646017300910924, 0.9381048991021538, 0.9878659681941867, 0.9206200462042605, 0.9735063609528191, 0.9391794315165315, 0.9761306431869292, 0.9833063156259757, 0.9613885849473991, 0.2744798575111407, 0.2890103377803127, 0.25725133084138196, 0.3067654594348783, 0.282304623071286, 0.32528379510854943, 0.2760964404896844, 0.25842909892016963, 0.23060256644400334, 0.5510101723759493, 0.13114877448331885, 0.23016500081171665, 0.5834738558104182, 0.2069782906384926, 0.1338642676851376, 0.48404630103250323, 0.1298994106680682, 0.499438701731186, 0.18778818145087683, 0.11832470367947823, 0.1886126802751682, 0.20010779197863393, 0.15782588283997578, 0.1564840875503185, 0.1650118452652155, 0.16567241362802654, 0.12880093738129506, 0.15498514578671985, 0.1930968322125891, 0.12519683246167823, 0.17373476897764772, 0.29529677430945867, 0.1554463940961841, 0.1927606442554608, 0.2745272645595249, 0.10063324404037177, 0.013232374248701162, 0.0, 0.004183402658505475, 0.019247885271371, 0.015432306992870348, 0.00764739641176071, 0.03647910472387217, 0.022980633679717033, 0.1138671944494003, 0.05781903902559393, 0.05855742630695093, 0.11894486335692511, 0.10261294879401683, 0.020999889739907296, 0.04640220367333436, 0.20815960954300106, 0.061409080549987616, 0.1336384464458904, 0.03892440663592456, 0.012891286305738103, 0.058135410481506056, 0.024810715344657397, 0.007120722510318367, 0.025331243771726575, 0.03197163665147873, 0.006193835929506397, 0.0163242172517446, 0.13077413801914228, 0.09025202831612367, 0.1154460765115276, 0.09334652906762253, 0.10584073423794071, 0.0962120174606651, 0.10559624637601372, 0.0970938851189238, 0.11947593685275337, 0.43305412615547556, 0.444226855419369, 0.46010805576358105, 0.42663386719473806, 0.42138673232304635, 0.42771714441344644, 0.45296265682942194, 0.44777716348468066, 0.4345546231902295, 0.0729969246356561, 0.10638915178089503, 0.060054442550686926, 0.10719982587343146, 0.06592238082995516, 0.09618712090932635, 0.09674772831979628, 0.1091694727213609, 0.08580588138663059, 0.24678928488156393, 0.2643003344772724, 0.17993881942827206, 0.3222958328705552, 0.24796787023922562, 0.2881271039403521, 0.31011640386228156, 0.13979395342004808, 0.17241012875318595, 0.22388678761637237, 0.30119938645230426, 0.2444716293902981, 0.19572569895906677, 0.30473101702315986, 0.30007228823669796, 0.21912613756567711, 0.30404572174883493, 0.16299839867463528, 0.24428026388223678, 0.22308119769909285, 0.17913782011937152, 0.22816670266511885, 0.20743705691241832, 0.21536576622473136, 0.19162483900808158, 0.2715671259977973, 0.20194793885760332, 0.21328890450620241, 0.20222589351183118, 0.1949109000237923, 0.20144060060189783, 0.1780553850036074, 0.20947175339930857, 0.21786204157800426, 0.2110298170050019, 0.21231334140954028, 0.17050875464878845, 0.1711059608719272, 0.21030150478592946, 0.21158355922330452, 0.20619636069270153, 0.20077561487886697, 0.21588979437867073, 0.20481513241654037, 0.19982398992258144, 0.7282988477865425, 0.1859594799091563, 0.15268172399697855, 0.17116873661012555, 0.19891838041995258, 0.19878691767782175, 0.12189515286863861, 0.169326492429971, 0.15942273521346617, 0.08389232045020123, 0.2062242579853748, 0.12034692842220429, 0.19061109386470598, 0.16498521903260843, 0.20648926466237538, 0.10500269138182883, 0.5835912291564056, 0.6056321604697086, 0.18585686464979378, 0.18309993981502315, 0.1822175751381222, 0.1812746615793882, 0.2335512393554573, 0.1770217340679039, 0.1825467738405525, 0.1794701625831081, 0.17235956752163983, 0.07496302825325507, 0.08893881516092983, 0.0764566452628529, 0.08358894142649109, 0.07463531686536007, 0.08464573073900028, 0.06576395918176547, 0.08107107840848171, 0.07804542366648981]}, "mutation_prompt": null}
{"id": "1614ee32-d053-4683-b648-18bb1e2b456a", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 70, "fitness": 0.22850722633867632, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "b877503a-c6ab-4ed9-a1c0-fcbb60343b60", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "95e7ede4-e55b-4dff-9249-fc358a056f86", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "5f3afc12-3219-4ab6-b80b-286eccd8a00b", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "a6d572d8-af3b-42a8-bacb-adff1a8dcb34", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "2092fc35-9b16-4b42-9acc-65f6430c916c", "solution": "import numpy as np\n\nclass Refined_Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Refined_Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by combining Differential Evolution mutation for exploration, maintaining PSO and SA for exploitation with added individual refinement.", "configspace": "", "generation": 74, "fitness": 0.22850722633867632, "feedback": "The algorithm Refined_Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "4963b43e-5fe5-4a79-9b9d-a45dead64f7b", "solution": "# import numpy as np\n\nclass Novel_Hybrid_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Novel_Hybrid_Optimizer", "description": "Enhancing the PSO_SA_Optimizer with a hybrid strategy combining Differential Evolution (DE) mutation, Particle Swarm Optimization (PSO), and Simulated Annealing (SA) for global exploration, local exploitation, and solution refinement.", "configspace": "", "generation": 75, "fitness": 0.22850722633867632, "feedback": "The algorithm Novel_Hybrid_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "09ed3ceb-f379-4f41-a0a4-72fac0b127b5", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "59b274f1-acf7-407a-8a90-93a7ca04c378", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "5d0c80ba-318c-45d3-b16f-b26abc03f562", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "1625d015-dc61-4e01-8d04-3ae0ce425f28", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "520ce9fe-1a63-470a-9028-8ea0ed8ad155", "solution": "import numpy as np\n\nclass SelfAdaptive_PSOSA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = np.ones(self.num_particles) * 0.5\n\n    def __call__(self, func):\n        # Include your optimization algorithm here\n        pass", "name": "SelfAdaptive_PSOSA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer with a self-adaptive mutation factor to dynamically adjust the exploration-exploitation trade-off during the optimization process.", "configspace": "", "generation": 80, "fitness": 0.0, "feedback": "The algorithm SelfAdaptive_PSOSA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "0e6e5475-646c-4cc5-9c00-28f6c2cded3f", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "eeb4a963-58c4-4228-a431-e9a9446ae061", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "c3fa66e5-9ee0-41fa-bbd6-ddf6afd4cce0", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "0f4437a1-3132-4dcd-b256-0176eebafbfb", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "15c1b06e-1993-46c3-8b3c-11f99f38cfb2", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "d96c80f0-6724-4ad1-9287-5861d3bb3850", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "1b64624b-3a9b-4c8b-8828-72ad8faa190a", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "20a3c5b4-e3a7-4505-b43d-62962ebb4f78", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "55ee8189-bcff-4e35-ac77-7e4d6d4bb852", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "3a8a30c0-ba61-4ec4-b305-d98a82f473a3", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "c4b38e5e-bfef-45c7-8494-cd9a0ed8aeda", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "6d129cef-3bab-4b79-9c94-59b682bcb4c8", "solution": "# import numpy as np\n\nclass Adaptive_Mutation_Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = np.full(self.num_particles, 0.5)\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor[i] * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n                    self.mutation_factor[i] *= 1.1  # Adaptive mutation adjustment\n                else:\n                    self.mutation_factor[i] *= 0.9\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Adaptive_Mutation_Enhanced_PSO_SA_Optimizer", "description": "Improving the Enhanced_PSO_SA_Optimizer by incorporating a dynamic mutation strategy based on fitness values to adaptively adjust exploration capabilities for better optimization performance.", "configspace": "", "generation": 92, "fitness": 0.22546219210080112, "feedback": "The algorithm Adaptive_Mutation_Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.4779774072082774, 0.48288168102738616, 0.46038205755254513, 0.48413531422803024, 0.4316787893510192, 0.4775306806040224, 0.47519803015835516, 0.4577285307961041, 0.45590174037636266, 0.06674663652243162, 0.035233713411321865, 0.008666383259789523, 0.07221647553820221, 0.030307781598551853, 0.037616223571500074, 0.04707120247598051, 0.04266255034704358, 0.061910474941980875, 0.08680484317185966, 0.09181240051818695, 0.10553208327530317, 0.1078195954968807, 0.09450598416162281, 0.07468106607974656, 0.10922225112959405, 0.11118419705094551, 0.08094318869037054, 0.08544163417618089, 0.07032000860933407, 0.08746180838824547, 0.08087934247152317, 0.07725419661748334, 0.07366295412929524, 0.11610723290605074, 0.056356369775700244, 0.07939918570354387, 0.933712496086348, 0.9402075865501763, 0.9857344814811038, 0.9348753114344315, 0.9754464153837812, 0.8889477476261425, 0.9765567680183791, 0.9760807900613667, 0.9449952930393835, 0.28951819268017476, 0.3116524731364164, 0.2781308859108893, 0.2849438133312736, 0.2737876091462357, 0.28273165448140447, 0.2761001562176296, 0.27420082655991274, 0.2604956280064017, 0.6302504911607849, 0.438896197126585, 0.56443922944533, 0.18518059088862937, 0.6069241101892937, 0.23116057698805703, 0.4762968717517393, 0.41520492817947385, 0.6266726426729973, 0.15698301559149097, 0.18502174187188936, 0.19003794226618465, 0.19582289898036298, 0.14380818519032057, 0.11832746350764811, 0.16765666643617005, 0.11005917613083804, 0.14475686856513492, 0.16954550129015356, 0.20167264397459783, 0.12292262540825305, 0.16546522407159991, 0.17020356752332844, 0.12528979079942526, 0.125381106600008, 0.20037989278743185, 0.10438533716019993, 0.017250791524058173, 0.037027778075370055, 0.07163744249075321, 0.020009956237036386, 9.999999999998899e-05, 0.11064108785616067, 0.03882522995694848, 0.08796927614048677, 0.06525866800878344, 0.13891154115422055, 0.06883238793307755, 0.08656269372334702, 0.15698229575596256, 0.012993027260290502, 0.014467529656638, 0.20724905491237022, 0.06254531783997919, 0.09002131106756384, 0.0026938704499945842, 0.03078693008378397, 0.0030835677379538184, 0.04826159033211952, 0.0027044315293244248, 0.0037795848955918254, 0.01070038838406362, 0.010443556066267012, 9.999999999998899e-05, 0.06413280305303304, 0.12726319177011014, 0.11620901953551532, 0.09516077121781186, 0.10713879019049222, 0.1294538198046734, 0.14034888184394845, 0.12823323693530675, 0.07674990174282359, 0.44223518081002566, 0.4043500237095684, 0.4433611375595101, 0.458875310601503, 0.4302982893419286, 0.4362366629157495, 0.4170742308463573, 0.45206712731970233, 0.43057819404703757, 0.06775441636347479, 0.09062936524228826, 0.0902389521891479, 0.10704202874466029, 0.104867127898424, 0.09147584329657765, 0.07027036894494909, 0.0926993475218687, 0.08721383915741665, 0.24553707418180826, 0.17537649703701785, 0.14131176170910154, 0.2541376847757, 0.17213874576490984, 0.15383396372651204, 0.25913010704978856, 0.21412003550931424, 0.14435230762982987, 0.29178714362368496, 0.2835715761407437, 0.2867468615549026, 0.2740118317597263, 0.19968753367755154, 0.2267442229491291, 0.2559309061044419, 0.2907571157963553, 0.17210486571350625, 0.23321389689076366, 0.21787078198983723, 0.20906473337264975, 0.2197400512556804, 0.23524601876536655, 0.18902019859652475, 0.19790338676277908, 0.23343431735716746, 0.14933929017206193, 0.1803851012883444, 0.19570620166242825, 0.19694331137169807, 0.2100931297837756, 0.16258636272238747, 0.19643560878476907, 0.1864186541163696, 0.17932014758758674, 0.182388774602954, 0.1886189991649284, 0.20189637668039417, 0.200582298463286, 0.21496419488388463, 0.21638241382834, 0.19585478796992162, 0.18618625687919388, 0.20738695295065468, 0.18051109318760883, 0.724461684596915, 0.1644324242028189, 0.1529753378250005, 0.7336753987624789, 0.19650560448788934, 0.19466655057907323, 0.09921681591955744, 0.16674232771182307, 0.16303824093084263, 0.5434968752425609, 0.2078843640771062, 0.07156501666768311, 0.5747042451233795, 0.16614675189345185, 0.2029583668921403, 0.1048663564702037, 0.6054825646653272, 0.5611233895949079, 0.19539062673780805, 0.1733262920804578, 0.17379029286444925, 0.16788427647314952, 0.17143877546784458, 0.19010750610078364, 0.18493754433692033, 0.17371474887698346, 0.17691848779718544, 0.08091963039048056, 0.07626248567164262, 0.08000811814500741, 0.07194265309368708, 0.07499201025423752, 0.08578754590175464, 0.07853839710300403, 0.0780581812912351, 0.06520542704166599]}, "mutation_prompt": null}
{"id": "364ee179-4302-405b-90fc-69fd0a944cb6", "solution": "import numpy as np\n\nclass Dynamic_Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n            if _ % 10 == 0:\n                self.mutation_factor = max(0.1, min(1.0, self.mutation_factor * 0.9))\n                temperature = max(0.1, min(1.0, temperature * 0.9))\n\n        return best_solution", "name": "Dynamic_Enhanced_PSO_SA_Optimizer", "description": "Improving the Enhanced_PSO_SA_Optimizer by dynamically adjusting mutation factor and annealing temperature for better exploration and exploitation trade-off.", "configspace": "", "generation": 93, "fitness": 0.22850722633867632, "feedback": "The algorithm Dynamic_Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "8122fc9e-7a97-4b83-9e26-656931afa533", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "8c443d44-2e7f-4e10-b3a9-29cf4d655747", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "f5b3e443-b1f5-4359-b75d-a72bba6fe67a", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "a8ff91e5-cde4-4b9b-b146-f5557565e490", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "a3fdf584-e6bd-44f7-9219-17b5cde2a010", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
{"id": "5c963470-f630-4f3f-aeda-08fe2687c9ce", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20\n        self.max_iter = 100\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        def generate_initial_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n\n        def pso_update(particles, velocities, p_best, g_best):\n            inertia_weight = 0.5\n            c1 = 1.5\n            c2 = 1.5\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.random(), np.random.random()\n                velocities[i] = inertia_weight * velocities[i] + c1 * r1 * (p_best[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n        def de_mutation(particles, best_solution):\n            for i in range(self.num_particles):\n                idxs = np.arange(self.num_particles)\n                np.random.shuffle(idxs)\n                r1, r2, r3 = particles[idxs[0]], particles[idxs[1]], particles[idxs[2]]\n                mutant = particles[i] + self.mutation_factor * (r1 - r2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if func(mutant) < func(particles[i]):\n                    particles[i] = mutant\n\n        def simulated_annealing(current_solution, current_value, best_solution, best_value, temperature, cooling_rate):\n            new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_value = func(new_solution)\n\n            if new_value < current_value or np.random.rand() < np.exp((current_value - new_value) / temperature):\n                current_solution, current_value = new_solution, new_value\n\n            if new_value < best_value:\n                best_solution, best_value = new_solution, new_value\n\n            temperature *= cooling_rate\n\n            return current_solution, current_value, best_solution, best_value, temperature\n\n        particles = generate_initial_population()\n        velocities = np.zeros_like(particles)\n        p_best = particles.copy()\n        g_best = particles[np.argmin([func(p) for p in particles])]\n        best_solution = g_best\n        best_value = func(g_best)\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        for _ in range(self.max_iter):\n            pso_update(particles, velocities, p_best, g_best)\n            de_mutation(particles, best_solution)\n            for i in range(self.num_particles):\n                particles[i], _, p_best[i], _, temperature = simulated_annealing(particles[i], func(particles[i]), p_best[i], func(p_best[i]), temperature, cooling_rate)\n            \n            g_best = particles[np.argmin([func(p) for p in particles])]\n            if func(g_best) < best_value:\n                best_solution, best_value = g_best, func(g_best)\n\n        return best_solution", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing the PSO_SA_Optimizer by introducing a hybrid strategy combining Differential Evolution (DE) mutation for enhanced exploration capability within the population while maintaining the PSO and SA components for exploitation.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1614ee32-d053-4683-b648-18bb1e2b456a", "metadata": {"aucs": [0.46396803810703346, 0.43403491732157085, 0.46881390502518094, 0.46995971249906066, 0.46380903440063304, 0.4929312007886637, 0.4572052869001847, 0.446923134393879, 0.47595298784163964, 0.10428316498773404, 0.033773545305480934, 0.022612825678796966, 0.11690862171902605, 0.0338836205933396, 0.014972900496988184, 0.05164371172503435, 0.07342719882876825, 0.038278114528337626, 0.09413425224287897, 0.07825013506857381, 0.08937340327370025, 0.09373197583646764, 0.08586807310107092, 0.08642770741423378, 0.12188849498353305, 0.0932762895521222, 0.08316429646068968, 0.06516412171883834, 0.07890474915699341, 0.07078767064272085, 0.07958365690986446, 0.09018418612897838, 0.08976979989190381, 0.08254814535110766, 0.08536488020050381, 0.09674779130974986, 0.9520324384339713, 0.9397757184054735, 0.9857347081894665, 0.9425353479507808, 0.9753814202832208, 0.9447320775451866, 0.9764596087898005, 0.9759925488092757, 0.9540242440836368, 0.28007900490776516, 0.2832024750795026, 0.2712556844112244, 0.28017812028492095, 0.28662930770611506, 0.2640884467790454, 0.28060292500992845, 0.2899583569584445, 0.20417299248391918, 0.7300541107830186, 0.4627939524608733, 0.5728560365129975, 0.3202917218766216, 0.34582941310999527, 0.2075401982040309, 0.6696960591091068, 0.4208060761316429, 0.30433398198870953, 0.20287151238208445, 0.15709158565257098, 0.1448452289340023, 0.20354283496585046, 0.14500817291590706, 0.16762210870948946, 0.13836512980449256, 0.16481219964322358, 0.15322618199605986, 0.24359913987485637, 0.155735006710223, 0.24406045496428674, 0.2164391068070629, 0.20768364671482498, 0.12422791106857345, 0.19126962556190807, 0.18532499094219124, 0.10866107521598789, 0.031140851257156266, 0.006218923405996946, 0.054336133583932855, 0.018777982034083873, 0.013390565881917449, 0.005691842916385914, 0.05096285846285986, 0.0824491279247972, 0.03656000088420974, 0.060186590761199255, 0.07134659385584197, 0.1556624000761121, 0.13070503217396257, 0.01899531963358736, 0.028531409267129715, 0.19968569335626085, 0.10721564365231229, 0.10680700175652968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008121732097024159, 0.013634452423731958, 9.999999999998899e-05, 0.02610674907188837, 0.008065570319139792, 0.0014829135368470414, 0.09149774972258695, 0.12562821303847105, 0.12605022353988915, 0.11459810844239982, 0.12524262988263946, 0.10434916099527325, 0.11890372111827996, 0.10487615295989183, 0.09861807891713792, 0.430431180886247, 0.4069808625624197, 0.44069300290513025, 0.42606010534465233, 0.44083636709492435, 0.40264601034831404, 0.41950937966215696, 0.4156407070105058, 0.4352559504926695, 0.07019144546950429, 0.09666318475285829, 0.09206037460378724, 0.08713242870682136, 0.07599267790844166, 0.08251060384731645, 0.07055165886892045, 0.08560086026747271, 0.08855340649940358, 0.23617707212496453, 0.12734529928273075, 0.24348627798675537, 0.27560509581089176, 0.3074034339986772, 0.1620187756346182, 0.3039321654944228, 0.14473485181182755, 0.1734807283986063, 0.2384380453711641, 0.2990050282119686, 0.2957120164920246, 0.25831894788738474, 0.2425800214614121, 0.27930962179325625, 0.2052651976937735, 0.27064327970399116, 0.2041638030002101, 0.19637631824216162, 0.2092468936045755, 0.172544117867943, 0.2340273838576694, 0.20961018662605135, 0.20268189566834405, 0.2027096642484546, 0.2184630335665011, 0.19321422570582159, 0.174310316056406, 0.19721084411668666, 0.18227359571590795, 0.2025208282690597, 0.18625695685256283, 0.17914300569485508, 0.18259485518454965, 0.17579917271106515, 0.18293352675447339, 0.1879603520788773, 0.21692308483986888, 0.18942602118539942, 0.22636316454294025, 0.2160596032063018, 0.19580131951709734, 0.18389516528714844, 0.20785275534343584, 0.1848436260031976, 0.7045297457959929, 0.16556826332910546, 0.15300038614725053, 0.6941543543155064, 0.196802680179066, 0.19532108322599506, 0.09914403981692155, 0.16747563091570283, 0.1646568645997568, 0.5098526133454527, 0.20762318750948283, 0.5242246657271306, 0.5950413607896534, 0.16579882165120885, 0.20471875469099232, 0.10501723528556939, 0.6880623420564351, 0.6167184190677757, 0.18272617367000377, 0.19434957893812055, 0.17486822744160269, 0.19774552633576425, 0.18036847085754526, 0.1632295802369419, 0.1663643483095658, 0.17105265027538075, 0.18040601493206, 0.07666129717529202, 0.07049350763498163, 0.08056480596472959, 0.08081261135702111, 0.07134812527303824, 0.09586218850455519, 0.0757490064416525, 0.06801618354122585, 0.07304649519099404]}, "mutation_prompt": null}
