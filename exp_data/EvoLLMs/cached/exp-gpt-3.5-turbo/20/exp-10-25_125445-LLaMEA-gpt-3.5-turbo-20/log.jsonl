{"id": "94dc5e3b-c822-48c6-8e73-4045bd6da1f8", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "81d7eeb1-fa4d-4a7d-bd52-5de7c93c9aac", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "94dc5e3b-c822-48c6-8e73-4045bd6da1f8", "metadata": {}, "mutation_prompt": null}
{"id": "2f0552fe-4fc5-4630-9855-d84157acfec8", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "94dc5e3b-c822-48c6-8e73-4045bd6da1f8", "metadata": {}, "mutation_prompt": null}
{"id": "67053f9d-fd3b-488b-8a73-9d743bd2cd3d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n        return gbest['value']", "name": "HybridPSODE", "description": "Utilizing a hybrid metaheuristic combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 3, "fitness": 0.09257524888422473, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "94dc5e3b-c822-48c6-8e73-4045bd6da1f8", "metadata": {"aucs": [0.18660729582251612, 0.1935726131367923, 0.2160685569242693, 0.08442941448793795, 0.10473954559712306, 0.11484872271514979, 0.11001629132711, 0.1327302510998457, 0.1660831076442817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03989372581086281, 0.048058287554257006, 0.05391262094996052, 0.03453313719433404, 0.03548063967709836, 0.0239550077468762, 0.025228212978638975, 0.0381409145461572, 0.024699650050308608, 0.03354731521524701, 0.04865947997684161, 0.04040928825133194, 0.017436484197526858, 0.04323041883138812, 0.030921864164105473, 0.019220593221330073, 0.016463455855920572, 0.032362031703975336, 0.07074813946735925, 0.07981517896728307, 0.05522745314852984, 0.06422832458228345, 0.10081074555729297, 0.06051923184483676, 0.059936820908091604, 0.06778752942858324, 0.057907996672499906, 0.04107861041335015, 0.034514637689367356, 0.046353164785481016, 0.06255215040773199, 0.05663250018172494, 0.051402219634334334, 9.999999999998899e-05, 0.020557394784909366, 9.999999999998899e-05, 0.15226757496903975, 0.16842483875279324, 0.15011449890516537, 0.10106318467299391, 0.08573541877626889, 0.08323417065166128, 0.09499622846823386, 0.18004395684509478, 0.10238114243211616, 0.035709393751636176, 0.03873567412049983, 0.0191855173220028, 0.00017378582205851423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15065526926636374, 0.1298956641832214, 0.13394512154713645, 0.14025562383162837, 0.13542467340446895, 0.14715466151406054, 0.15522311321328564, 0.14627693335768255, 0.16107355027971748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08385109955222547, 0.0629294239811421, 0.06860564239371647, 0.026873240427569, 0.04080342605576048, 0.029515589800858666, 0.04647743907180213, 0.04524221230926617, 0.03739114049620362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20703554225661236, 0.19110220263838984, 0.17830206621444034, 0.16470740019258012, 0.18141621055211044, 0.20735114149793787, 0.23373593349916888, 0.19368352831113456, 0.1960747097764154, 0.0005740440054731177, 0.015518065088498068, 0.017080122642345263, 0.03964126384148148, 0.0247713237469801, 0.02689390036478967, 0.05337279055074973, 0.044649321295419764, 0.04360432103211609, 0.12120738028790712, 0.10316300571691062, 0.1350302884055734, 0.12279000640527815, 0.11592311023144464, 0.11948479071733087, 0.12416593193458991, 0.11841312278573402, 0.12648471761818147, 0.14017579095874466, 0.14688869311929997, 0.138845258689695, 0.20107202565318094, 0.18385796834634494, 0.20721401234911851, 0.13651998665511367, 0.14491592082664595, 0.15555724948920413, 0.0864827078864484, 0.0884684004984938, 0.07949256785220893, 0.12994601453429988, 0.13399527488607688, 0.13286377556178763, 0.08780857633972972, 0.11743847617891201, 0.10617525505553294, 0.27616021386599254, 0.30431299672533696, 0.2799190822253371, 0.28325238676443254, 0.2799449064355293, 0.275811815711689, 0.29415572484512187, 0.28766867949960584, 0.29747369567026394, 0.1525818962285017, 0.14518916781457392, 0.14994167122098245, 0.14490576918417097, 0.14213523311535115, 0.15230149549114302, 0.1371446801293692, 0.15053562185013758, 0.15176667775817076, 0.15567805886709463, 0.11237099544712159, 0.15443239145801124, 0.10708214691284335, 0.12248661604016431, 0.1236563380152198, 0.1492938574718945, 0.1429145800249294, 0.11984434656188137, 0.18881604193831314, 0.21492446159073297, 0.20326714683540992, 0.16967468546800213, 0.14936858053045632, 0.15608316378046072, 0.09831617531701231, 0.11536542760994695, 0.12864617894140007, 0.16471836696249864, 0.1808986102181913, 0.19264287663688207, 0.17841411361899517, 0.17158393356486923, 0.1917195074571627, 0.1785619249285666, 0.18177367642269948, 0.16993613154314735, 0.05787003163054194, 0.05883279360511984, 0.05359117528173296, 0.0589459011134581, 0.06573364457014508, 0.06341117935225282, 0.057177008154019715, 0.06466497943595262, 0.061180565328749936]}, "mutation_prompt": null}
{"id": "32740117-a817-47e6-87e2-ecb2b9135290", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 4, "fitness": 0.09360924592869029, "feedback": "The algorithm DynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "67053f9d-fd3b-488b-8a73-9d743bd2cd3d", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "fbd04dfe-ddde-4dfb-910b-9d8a8ef5dfe7", "solution": "import numpy as np\n\nclass AdaptivePSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "AdaptivePSODE", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) with adaptive parameter tuning based on individual and global performance for black box optimization.", "configspace": "", "generation": 5, "fitness": 0.09360924592869029, "feedback": "The algorithm AdaptivePSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "f1238a1a-43f1-4338-a4f9-a177f1207fbb", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "af9ac412-7f2f-4bcf-ae7c-665ed19d5ee2", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "AdaptiveHybridPSODE", "description": "Adapting parameters dynamically in PSO and DE hybrid algorithm to optimize black box functions efficiently with individual performance-based adjustments.", "configspace": "", "generation": 7, "fitness": 0.09360924592869029, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "e07192d2-5b69-4911-8b60-2d0571ae1d30", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "d79f834b-526a-4bdb-b354-249dd4b257c3", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "057c835d-c614-4fde-92dc-cc3c06fa31f1", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "1879c812-3bf8-4c0a-b396-06fb6baacdf1", "solution": "import numpy as np\n\nclass AdaptivePSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, swarm, func):\n        for i in range(self.population_size):\n            x, a, b, c = swarm[i]['position'], swarm[np.random.randint(self.population_size)]['position'], swarm[np.random.randint(self.population_size)]['position'], swarm[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                swarm[i]['position'] = trial.copy()\n        return swarm\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "AdaptivePSODE", "description": "Enhancing the PSO and DE algorithms by dynamically adapting their parameters based on the performance of the best solution found to optimize black box functions efficiently.", "configspace": "", "generation": 11, "fitness": 0.09360924592869029, "feedback": "The algorithm AdaptivePSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "cbf39eae-d897-421c-9533-1cfcd041d248", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "AdaptiveHybridPSODE", "description": "A metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) with adaptive parameter tuning based on individual performance to enhance convergence speed and solution quality.", "configspace": "", "generation": 12, "fitness": 0.09360924592869029, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "30ef359a-cf61-4a84-9fd4-b6d339effd41", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "e910e957-843a-47e0-b287-519bbfb42c3d", "solution": "# import numpy as np\n\nclass AdaptiveDynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "AdaptiveDynamicHybridPSODE", "description": "Dynamically adjusting PSO and DE parameters based on individual performance to optimize black box functions efficiently.", "configspace": "", "generation": 14, "fitness": 0.09360924592869029, "feedback": "The algorithm AdaptiveDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "13941d95-91e5-4274-987a-a388fdd9116e", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "bcc742d9-697a-4f16-82c0-b1651203125d", "solution": "import numpy as np\n\nclass ProbabilisticDynamicHybridPSODE(DynamicHybridPSODE):\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0, prob=0.2):\n        super().__init__(budget, dim, population_size, w, c1, c2, f, cr, min_w, max_w, min_c, max_c, min_f, max_f, min_cr, max_cr)\n        self.prob = prob\n\n    def probabilistic_adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < self.prob:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.probabilistic_adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "ProbabilisticDynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality with a 20% probability of changing individual lines for strategy refinement.", "configspace": "", "generation": 16, "fitness": 0.09360924592869029, "feedback": "The algorithm ProbabilisticDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "d585bc51-d917-4881-970c-b8c8259dbb6d", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "fb23e383-c9f5-437b-aabc-c8b80ef6fd0e", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "c8d83713-b780-438b-92f0-a025e90d382d", "solution": "# import numpy as np\n\nclass EnhancedDynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "EnhancedDynamicHybridPSODE", "description": "Enhancing HybridPSODE with adaptive parameters and a combination of PSO and DE for black box optimization.", "configspace": "", "generation": 19, "fitness": 0.09360924592869029, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "94df0682-1865-483e-bddd-1193349355dc", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "482ddd5c-ea1e-48c9-bbac-02095399ed29", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "4470d9d2-3ab4-4165-a1f7-360b996728fe", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "AdaptiveHybridPSODE", "description": "Enhancing the PSO and DE hybrid algorithm by adaptively modifying algorithm parameters and balancing exploration-exploitation to improve convergence speed and solution quality.", "configspace": "", "generation": 22, "fitness": 0.09360924592869029, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "d1a604b0-0298-4189-bc7e-ceec02a091db", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "4fbef07c-738e-42a9-ac55-2462fb45756a", "solution": "import numpy as np\n\nclass DynamicHybridPSODEVariant(DynamicHybridPSODE):\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        super().__init__(budget, dim, population_size, w, c1, c2, f, cr, min_w, max_w, min_c, max_c, min_f, max_f, min_cr, max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])  # Dynamically adjust algorithm parameters based on individual performance\n            # Insert any additional adaptations or refinements here with 20% probability\n        return gbest['value']", "name": "DynamicHybridPSODEVariant", "description": "Dynamically adjusting algorithm parameters in a DynamicHybridPSODE variant based on individual performance to enhance convergence speed and solution quality.", "configspace": "", "generation": 24, "fitness": 0.09360924592869029, "feedback": "The algorithm DynamicHybridPSODEVariant got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "98968e2e-6222-48ff-bfaf-57a39de38e75", "solution": "import numpy as np\n\nclass DynamicHybridPSODERefined(DynamicHybridPSODE):\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n            else:\n                self.w = np.clip(self.w * 0.9, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 0.9, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 0.9, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 0.9, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 0.9, self.min_cr, self.max_cr)", "name": "DynamicHybridPSODERefined", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality with a 20% probability of changing individual lines for refinement.", "configspace": "", "generation": 25, "fitness": 0.08342395459685562, "feedback": "The algorithm DynamicHybridPSODERefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.12549983988103308, 0.16956295707088997, 0.2160685569242693, 0.06367697584487964, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.004542907104953309, 0.03561820520235193, 0.02565740916914061, 0.0040748385740014825, 0.04194915317320613, 0.013775351223403454, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.009469065689418521, 0.028169142574253292, 0.02209557031738385, 0.0006725629554770185, 0.03798365992948782, 0.024640731450433995, 0.038132214619475246, 0.08064148634755641, 0.025504881677762437, 0.04165832998848851, 0.08945033337645658, 0.02589984156795233, 0.04160479391043137, 0.06320221515981916, 0.02415506264623346, 0.027016296183852817, 0.025106138614926055, 9.999999999998899e-05, 0.03327663543179682, 0.0757689807498988, 0.05082777070448863, 9.999999999998899e-05, 0.035351034571804996, 9.999999999998899e-05, 0.149952360248096, 0.1994180584668337, 0.14995467987696487, 0.011969770204473984, 0.05312924425381882, 0.08259569546506496, 0.038688207610842795, 0.08539313186364905, 0.10240800511693704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02264956105720961, 0.006356417867329434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09430961971923002, 0.08721352782656266, 0.09000452228943268, 0.12885276180474226, 0.12194228224158865, 0.08399926300241756, 0.11423945731413365, 0.13396360238432936, 0.11091299690879897, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009051469264260592, 0.05405267264731628, 0.04756863786426657, 0.03828155788499499, 0.04449997872804923, 0.056393121260345125, 0.031170898836937688, 0.04123928342149541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21394695547525722, 0.17067980152753548, 0.19987553901869493, 9.999999999998899e-05, 0.00639576058749558, 0.026209631021850144, 0.014217267079245755, 0.011393236142012264, 0.018017059293721327, 0.036856938754568414, 0.05115025100004822, 0.027673049109216974, 0.12781042317012237, 0.12369961390610684, 0.12661850069217617, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.12713680344990408, 0.1348007945234041, 0.13974146705376955, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.17749394627055282, 0.1676810805275154, 0.16424433617025957, 0.12574562867885475, 0.14712694178122743, 0.1492584512302807, 0.06477107952762196, 0.06577391487015793, 0.06817778987792877, 0.10768974324315206, 0.1143891428523428, 0.12318277439060188, 0.07184498535818407, 0.104736122480803, 0.09768385353250308, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.28797877585216414, 0.283127757697216, 0.27732880021236284, 0.2951751702697146, 0.27560880929780973, 0.2888016981707606, 0.149398358875394, 0.15545716651782182, 0.11494075746643606, 0.13714644053969294, 0.1441193012271237, 0.13799418279100906, 0.1438623159645782, 0.14792906084988067, 0.13815565754241366, 0.10966603307127065, 0.12132768523184911, 0.11009569197325841, 0.10076333289305317, 0.1040868874361851, 0.11307638997668823, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.11524844982023008, 0.14247164639318666, 0.1381235244673984, 0.13790849645625658, 0.1627058856649335, 0.10504679638527337, 0.17051227431566518, 0.17592209625328614, 0.17975392996815498, 0.17812017218157927, 0.17377980435809315, 0.17344369232259194, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.05897308152273195, 0.056133419081791924, 0.051376224928342484, 0.055110383245224326, 0.056219654329486723, 0.04757511154925209, 0.05248426497349157, 0.06297863427805583, 0.053636414505694674]}, "mutation_prompt": null}
{"id": "6f11e647-84e7-43d2-b654-44ec130c8585", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "4c4c1e21-2133-4855-a058-a447500d0881", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "42abddbe-0025-477b-8562-b51c7a092dbd", "solution": "import numpy as np\n\nclass DynamicHybridPSODERefined:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODERefined", "description": "Combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) with dynamically adapting algorithm parameters to enhance convergence speed and solution quality.", "configspace": "", "generation": 28, "fitness": 0.09360924592869029, "feedback": "The algorithm DynamicHybridPSODERefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "eab7f4a3-3293-4eac-8a56-6fdc7375731d", "solution": "import numpy as np\n\nclass AdaptiveDynamicHybridPSODE(DynamicHybridPSODE):\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n            else:\n                self.w = np.clip(self.w * 0.9, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 0.9, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 0.9, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 0.9, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 0.9, self.min_cr, self.max_cr)", "name": "AdaptiveDynamicHybridPSODE", "description": "Adapting the parameters of a DynamicHybridPSODE algorithm based on the individual performance to enhance convergence speed and solution quality.", "configspace": "", "generation": 29, "fitness": 0.08342395459685562, "feedback": "The algorithm AdaptiveDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.12549983988103308, 0.16956295707088997, 0.2160685569242693, 0.06367697584487964, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.004542907104953309, 0.03561820520235193, 0.02565740916914061, 0.0040748385740014825, 0.04194915317320613, 0.013775351223403454, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.009469065689418521, 0.028169142574253292, 0.02209557031738385, 0.0006725629554770185, 0.03798365992948782, 0.024640731450433995, 0.038132214619475246, 0.08064148634755641, 0.025504881677762437, 0.04165832998848851, 0.08945033337645658, 0.02589984156795233, 0.04160479391043137, 0.06320221515981916, 0.02415506264623346, 0.027016296183852817, 0.025106138614926055, 9.999999999998899e-05, 0.03327663543179682, 0.0757689807498988, 0.05082777070448863, 9.999999999998899e-05, 0.035351034571804996, 9.999999999998899e-05, 0.149952360248096, 0.1994180584668337, 0.14995467987696487, 0.011969770204473984, 0.05312924425381882, 0.08259569546506496, 0.038688207610842795, 0.08539313186364905, 0.10240800511693704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02264956105720961, 0.006356417867329434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09430961971923002, 0.08721352782656266, 0.09000452228943268, 0.12885276180474226, 0.12194228224158865, 0.08399926300241756, 0.11423945731413365, 0.13396360238432936, 0.11091299690879897, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009051469264260592, 0.05405267264731628, 0.04756863786426657, 0.03828155788499499, 0.04449997872804923, 0.056393121260345125, 0.031170898836937688, 0.04123928342149541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21394695547525722, 0.17067980152753548, 0.19987553901869493, 9.999999999998899e-05, 0.00639576058749558, 0.026209631021850144, 0.014217267079245755, 0.011393236142012264, 0.018017059293721327, 0.036856938754568414, 0.05115025100004822, 0.027673049109216974, 0.12781042317012237, 0.12369961390610684, 0.12661850069217617, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.12713680344990408, 0.1348007945234041, 0.13974146705376955, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.17749394627055282, 0.1676810805275154, 0.16424433617025957, 0.12574562867885475, 0.14712694178122743, 0.1492584512302807, 0.06477107952762196, 0.06577391487015793, 0.06817778987792877, 0.10768974324315206, 0.1143891428523428, 0.12318277439060188, 0.07184498535818407, 0.104736122480803, 0.09768385353250308, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.28797877585216414, 0.283127757697216, 0.27732880021236284, 0.2951751702697146, 0.27560880929780973, 0.2888016981707606, 0.149398358875394, 0.15545716651782182, 0.11494075746643606, 0.13714644053969294, 0.1441193012271237, 0.13799418279100906, 0.1438623159645782, 0.14792906084988067, 0.13815565754241366, 0.10966603307127065, 0.12132768523184911, 0.11009569197325841, 0.10076333289305317, 0.1040868874361851, 0.11307638997668823, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.11524844982023008, 0.14247164639318666, 0.1381235244673984, 0.13790849645625658, 0.1627058856649335, 0.10504679638527337, 0.17051227431566518, 0.17592209625328614, 0.17975392996815498, 0.17812017218157927, 0.17377980435809315, 0.17344369232259194, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.05897308152273195, 0.056133419081791924, 0.051376224928342484, 0.055110383245224326, 0.056219654329486723, 0.04757511154925209, 0.05248426497349157, 0.06297863427805583, 0.053636414505694674]}, "mutation_prompt": null}
{"id": "1a24cc9d-96ea-4108-8124-c67eb80342ac", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "efb96538-2ec2-40ef-83d6-2dcbd5386213", "solution": "import numpy as np\n\nclass NovelDynamicHybridMetaheuristic:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def metaheuristic_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.metaheuristic_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "NovelDynamicHybridMetaheuristic", "description": "A dynamic hybrid metaheuristic algorithm that combines Particle Swarm Optimization (PSO) and Differential Evolution (DE) with adaptive parameter tuning based on individual performance to enhance optimization convergence and solution quality.", "configspace": "", "generation": 31, "fitness": 0.08092699290566939, "feedback": "The algorithm NovelDynamicHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.16827966427656682, 0.14750375249588998, 0.14343130034474938, 0.06145289389587383, 0.06629625688258944, 0.07544915041223998, 0.09587163607382987, 0.14564740493109896, 0.12848965463751116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05344281502764969, 0.03292392860203386, 0.04139372752675119, 0.033503284073075346, 0.043986117094522714, 0.005987746047307119, 0.03423754866739104, 0.022611172774416266, 0.018699379827062823, 0.028232748630690363, 0.031742708973872547, 0.037424114583997636, 0.027748601840720033, 0.0269553175935624, 0.02616690127174337, 0.018898571888461446, 0.010322345145681755, 0.01715737623026503, 0.04313472096565962, 0.06532189513344111, 0.03305264447513723, 0.04626506353495419, 0.06154594632740695, 0.023939234933262776, 0.04623048514903916, 0.060836521999061866, 0.025624813199788488, 0.02774579930391996, 0.02936320531534331, 9.999999999998899e-05, 0.04817959865304022, 0.04110309606581708, 0.03586659773460943, 9.999999999998899e-05, 0.01528374795948384, 9.999999999998899e-05, 0.13224399785062346, 0.14792493821007624, 0.15220855328283855, 0.05490839874388753, 0.07252263526357672, 0.04648318768677184, 0.06946110768715574, 0.0914210706270071, 0.104694160417372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09471662111953116, 0.1066194699547992, 0.1433425789257926, 0.11065031728172159, 0.12571421029193497, 0.12823895649567751, 0.14086516387187276, 0.07810133815270814, 0.0900534365720721, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027186386692145237, 0.09207163326420542, 0.08312656298969157, 0.015171682748688187, 0.054760062266787424, 0.041779002955081856, 0.05252175323347219, 0.03359612969339432, 0.052207226766249004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16389854901561174, 0.16980010536054346, 0.15337868727674453, 0.14332276574283043, 0.17250440964262947, 0.1885821350572473, 0.21394695547525722, 0.18382278085518278, 0.1750929154004749, 9.999999999998899e-05, 9.999999999998899e-05, 0.002345019380394109, 0.019946873210259897, 0.02087804868237253, 0.01595929497604409, 0.034768667211055426, 0.04094444743032799, 0.03929163774134248, 0.10813883612407027, 0.13046507603702429, 0.1600659895422355, 0.10665496501707783, 0.12289340497866341, 0.10591143991979335, 0.10756840714706573, 0.10129785912523037, 0.1076243954128846, 0.1487495050978066, 0.14661959492122312, 0.14402296525880642, 0.1657438736504946, 0.1855206693848207, 0.18216035298482802, 0.14348962355239203, 0.12780882606806732, 0.14989620152911698, 0.08576481937877467, 0.07630798859788901, 0.07230465586708801, 0.11254241125066733, 0.14621056921423659, 0.12038655334185788, 0.07855214809192734, 0.09552254539265326, 0.08444551801670308, 0.2774622935461344, 0.2694540259320387, 0.27824892583634153, 0.2711841678559914, 0.27042020427564817, 0.2658469515604909, 0.2826272336806337, 0.28586256863147275, 0.2875140864838942, 0.14995795411450985, 0.1529412711533601, 0.15936615342868787, 0.1485173510784954, 0.1352303904447384, 0.14082690619580807, 0.1451422274169376, 0.15003684800281702, 0.14893174780920804, 0.1236552140108873, 0.10448661698963879, 0.09161887123783197, 0.10674584022036893, 0.09906876102942463, 0.10177627645602316, 0.1320337402010533, 0.10703596506869706, 0.1024041801674479, 0.1337373384407431, 0.1649293968677501, 0.19127987738229935, 0.10452061301655613, 0.07897465951653926, 0.1711063954281441, 0.07259363588679957, 0.1328161052511614, 0.09462434375785433, 0.16709879647755865, 0.18572284056369937, 0.17999303081637918, 0.16403639938210857, 0.1624776021934653, 0.17464785158020568, 0.16945588696534852, 0.1604793488526267, 0.1646314341673678, 0.058739881582962505, 0.045795508911256166, 0.0429072291775221, 0.05815977209383183, 0.05537224651259298, 0.04581165450876745, 0.050497818266696415, 0.04852636839219426, 0.06280509789720823]}, "mutation_prompt": null}
{"id": "58db2c97-9ecf-4f08-b4d9-6c35ba900d63", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "1ac88be7-1b4f-4be4-b0bc-11026edc68c0", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "AdaptiveHybridPSODE", "description": "An adaptive metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) that dynamically adjusts algorithm parameters based on individual performance to enhance convergence speed and solution quality.", "configspace": "", "generation": 33, "fitness": 0.09360924592869029, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "65a2173b-2ebb-4d6b-9133-828bf21221a3", "solution": "import numpy as np\n\nclass ModifiedDynamicHybridPSODE(DynamicHybridPSODE):\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        super().__init__(budget, dim, population_size, w, c1, c2, f, cr, min_w, max_w, min_c, max_c, min_f, max_f, min_cr, max_cr)\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                for param in ['w', 'c1', 'c2', 'f', 'cr']:\n                    setattr(self, param, np.clip(getattr(self, param) * 1.1, getattr(self, 'min_' + param), getattr(self, 'max_' + param)))", "name": "ModifiedDynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting algorithm parameters based on individual performance to improve convergence speed and solution quality with a probability of 0.2 per parameter update.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ModifiedDynamicHybridPSODE' object has no attribute 'min_c1'\").", "error": "AttributeError(\"'ModifiedDynamicHybridPSODE' object has no attribute 'min_c1'\")", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {}, "mutation_prompt": null}
{"id": "96f6bd9a-6771-47aa-a569-cee766bd85d3", "solution": "import numpy as np\n\nclass DynamicAdaptivePSO_DE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicAdaptivePSO_DE", "description": "Dynamically adjusting algorithm parameters based on individual performance improves convergence and solution quality in black box optimization.", "configspace": "", "generation": 35, "fitness": 0.09360924592869029, "feedback": "The algorithm DynamicAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "e75a7287-868b-40fe-9ef3-d1aa4b21ce5c", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "16a7389b-2ffd-4385-a1dc-ff0e1087fd29", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "16bb4d67-d875-4c50-af6d-ccfe255b62f2", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "6edcb961-d0df-4e1c-b5ba-ff3e48a70675", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "bd292dc0-5f7a-4635-8f3e-933e4353e30e", "solution": "import numpy as np\n\nclass EnhancedDynamicHybridPSODE(DynamicHybridPSODE):\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n            else:\n                self.w = np.clip(self.w * 0.9, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 0.9, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 0.9, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 0.9, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 0.9, self.min_cr, self.max_cr)\n\nenhanced_algorithm = EnhancedDynamicHybridPSODE(budget=10000, dim=10)", "name": "EnhancedDynamicHybridPSODE", "description": "Dynamically adjust algorithm parameters based on individual performance to enhance convergence speed and solution quality in optimizing black box functions.", "configspace": "", "generation": 40, "fitness": 0.08342395459685562, "feedback": "The algorithm EnhancedDynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.12549983988103308, 0.16956295707088997, 0.2160685569242693, 0.06367697584487964, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.004542907104953309, 0.03561820520235193, 0.02565740916914061, 0.0040748385740014825, 0.04194915317320613, 0.013775351223403454, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.009469065689418521, 0.028169142574253292, 0.02209557031738385, 0.0006725629554770185, 0.03798365992948782, 0.024640731450433995, 0.038132214619475246, 0.08064148634755641, 0.025504881677762437, 0.04165832998848851, 0.08945033337645658, 0.02589984156795233, 0.04160479391043137, 0.06320221515981916, 0.02415506264623346, 0.027016296183852817, 0.025106138614926055, 9.999999999998899e-05, 0.03327663543179682, 0.0757689807498988, 0.05082777070448863, 9.999999999998899e-05, 0.035351034571804996, 9.999999999998899e-05, 0.149952360248096, 0.1994180584668337, 0.14995467987696487, 0.011969770204473984, 0.05312924425381882, 0.08259569546506496, 0.038688207610842795, 0.08539313186364905, 0.10240800511693704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02264956105720961, 0.006356417867329434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09430961971923002, 0.08721352782656266, 0.09000452228943268, 0.12885276180474226, 0.12194228224158865, 0.08399926300241756, 0.11423945731413365, 0.13396360238432936, 0.11091299690879897, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009051469264260592, 0.05405267264731628, 0.04756863786426657, 0.03828155788499499, 0.04449997872804923, 0.056393121260345125, 0.031170898836937688, 0.04123928342149541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21394695547525722, 0.17067980152753548, 0.19987553901869493, 9.999999999998899e-05, 0.00639576058749558, 0.026209631021850144, 0.014217267079245755, 0.011393236142012264, 0.018017059293721327, 0.036856938754568414, 0.05115025100004822, 0.027673049109216974, 0.12781042317012237, 0.12369961390610684, 0.12661850069217617, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.12713680344990408, 0.1348007945234041, 0.13974146705376955, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.17749394627055282, 0.1676810805275154, 0.16424433617025957, 0.12574562867885475, 0.14712694178122743, 0.1492584512302807, 0.06477107952762196, 0.06577391487015793, 0.06817778987792877, 0.10768974324315206, 0.1143891428523428, 0.12318277439060188, 0.07184498535818407, 0.104736122480803, 0.09768385353250308, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.28797877585216414, 0.283127757697216, 0.27732880021236284, 0.2951751702697146, 0.27560880929780973, 0.2888016981707606, 0.149398358875394, 0.15545716651782182, 0.11494075746643606, 0.13714644053969294, 0.1441193012271237, 0.13799418279100906, 0.1438623159645782, 0.14792906084988067, 0.13815565754241366, 0.10966603307127065, 0.12132768523184911, 0.11009569197325841, 0.10076333289305317, 0.1040868874361851, 0.11307638997668823, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.11524844982023008, 0.14247164639318666, 0.1381235244673984, 0.13790849645625658, 0.1627058856649335, 0.10504679638527337, 0.17051227431566518, 0.17592209625328614, 0.17975392996815498, 0.17812017218157927, 0.17377980435809315, 0.17344369232259194, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.05897308152273195, 0.056133419081791924, 0.051376224928342484, 0.055110383245224326, 0.056219654329486723, 0.04757511154925209, 0.05248426497349157, 0.06297863427805583, 0.053636414505694674]}, "mutation_prompt": null}
{"id": "ff7e25b5-2884-44b2-9c5d-1a47b1ea22c3", "solution": "import numpy as np\n\nclass CustomMetaheuristicAlgorithm:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def custom_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def custom_de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.custom_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.custom_de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "CustomMetaheuristicAlgorithm", "description": "Combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) and adaptively adjusting algorithm parameters based on individual performance to enhance optimization efficiency and solution quality.", "configspace": "", "generation": 41, "fitness": 0.09360924592869029, "feedback": "The algorithm CustomMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "1a91b03a-ccfb-476c-99cd-49c5a8c111e7", "solution": "import numpy as np\n\nclass NovelHybridAlgorithm:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "NovelHybridAlgorithm", "description": "Combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) and dynamically adapting algorithm parameters based on individual performance to enhance convergence speed and quality of solutions.", "configspace": "", "generation": 42, "fitness": 0.09360924592869029, "feedback": "The algorithm NovelHybridAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "a65ae949-ba05-4d45-9632-31a27689c925", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "50240bf5-12d0-4f86-adbe-43d8ce1e0a6c", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "c42311c1-0546-4ea8-aee4-741fd4dade4b", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, min_w=0.4, max_w=0.9, min_c=0.5, max_c=2.0, min_f=0.3, max_f=0.8, min_cr=0.5, max_cr=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.min_w = min_w\n        self.max_w = max_w\n        self.min_c = min_c\n        self.max_c = max_c\n        self.min_f = min_f\n        self.max_f = max_f\n        self.min_cr = min_cr\n        self.max_cr = max_cr\n\n    def pso_update(self, swarm, func):\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.w * swarm[i]['velocity'] + self.c1 * r1 * (swarm[i]['pbest_pos'] - swarm[i]['position']) + self.c2 * r2 * (swarm[i]['gbest_pos'] - swarm[i]['position'])\n            position = swarm[i]['position'] + velocity\n            if func(position) < func(swarm[i]['pbest_pos']):\n                swarm[i]['pbest_pos'] = position.copy()\n                swarm[i]['pbest_val'] = func(position)\n            swarm[i]['position'] = position.copy()\n        return swarm\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population\n\n    def adapt_parameters(self, func, gbest_val):\n        improvement_threshold = 0.1\n        if np.random.rand() < 0.2:\n            if gbest_val < improvement_threshold:\n                self.w = np.clip(self.w * 1.1, self.min_w, self.max_w)\n                self.c1 = np.clip(self.c1 * 1.1, self.min_c, self.max_c)\n                self.c2 = np.clip(self.c2 * 1.1, self.min_c, self.max_c)\n                self.f = np.clip(self.f * 1.1, self.min_f, self.max_f)\n                self.cr = np.clip(self.cr * 1.1, self.min_cr, self.max_cr)\n\n    def __call__(self, func):\n        swarm = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'pbest_pos': np.zeros(self.dim), 'pbest_val': np.inf, 'gbest_pos': np.zeros(self.dim), 'gbest_val': np.inf} for _ in range(self.population_size)]\n        gbest = {'position': np.zeros(self.dim), 'value': np.inf}\n        for _ in range(self.budget):\n            swarm = self.pso_update(swarm, func)\n            for particle in swarm:\n                if func(particle['position']) < gbest['value']:\n                    gbest['position'] = particle['position'].copy()\n                    gbest['value'] = func(particle['position'])\n            swarm = self.de_update(swarm, func)\n            self.adapt_parameters(func, gbest['value'])\n        return gbest['value']", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE by dynamically adjusting the algorithm parameters based on individual performance to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.19115858319001178, 0.17972305809898148, 0.2160685569242693, 0.0788554907364698, 0.10473954559712306, 0.11484872271514979, 0.14698563462306924, 0.17134280686487036, 0.12154984829732862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03345831183884218, 0.03833523123767424, 0.040039008309271096, 0.03632876267881002, 0.03694547522591851, 0.022893506391292617, 0.023303124767100836, 0.04332486435656069, 0.03563490722538043, 0.03028874372416701, 0.03393775643429908, 0.03975878936909871, 0.029027748321616476, 0.033820890516571334, 0.02955669064348898, 0.021448442999377204, 0.03607390683826439, 0.0287989411925047, 0.06772697917128212, 0.08810389734931945, 0.06158305403468822, 0.0674872186837292, 0.09908002154550155, 0.05592363892170016, 0.07286904021806362, 0.09040225367321653, 0.057288062753215074, 0.03260289261965332, 0.02666006656331721, 0.019921709028087764, 0.06837051375031045, 0.0757689807498988, 0.09188728073418073, 0.02004640316351436, 0.033399742785388264, 0.006560286218409095, 0.14946900766493987, 0.1994180584668337, 0.15345629066348387, 0.07750285189925232, 0.10111764973772641, 0.06951785609666727, 0.13952719018631943, 0.11983806909380712, 0.09940664491364892, 0.014431928670549543, 0.04614223478130153, 0.0791554834713748, 9.999999999998899e-05, 0.02264956105720961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1203777728475387, 0.09856828973825738, 0.12822150593099835, 0.15738793588055455, 0.12844890185806557, 0.12713164597689286, 0.1678283614585655, 0.1915866825737147, 0.1346194540288026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03277826830950348, 0.05601310801378989, 0.08292522631407806, 0.041357128614290195, 0.08561762862792899, 0.053908421691807984, 0.06602927889456478, 0.023084370712431745, 0.057512766361193846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207854127954335, 0.18231331659299277, 0.19380410506165469, 0.16772438936745726, 0.18463089646586428, 0.19597524045513826, 0.21700419963346784, 0.18750286194195065, 0.1849981781423431, 0.003481769948464386, 0.01024567558476941, 0.015160987030469752, 0.029202559034671838, 0.022798791780287653, 0.023200821102664304, 0.05223493179783456, 0.037749259005104396, 0.06956621605745006, 0.11864946802775811, 0.10924599376432975, 0.1274079795897034, 0.11929125913755012, 0.11857152034327789, 0.14764360662721498, 0.11052010177082028, 0.12703774558959757, 0.149076349030971, 0.15095826825636727, 0.15014576849507666, 0.14167771086993886, 0.19424931385610544, 0.17980289744507993, 0.19203556651073972, 0.15050673946776827, 0.15436856844973956, 0.1561512389418298, 0.10104481354094774, 0.0732382736756807, 0.0989312668893575, 0.13980942508952354, 0.13500795331928783, 0.12994920652500552, 0.08947031738010769, 0.11560727395688775, 0.10218134432643688, 0.2613781886735155, 0.26848989950439794, 0.26523278478285073, 0.2885428802203681, 0.2816575016730881, 0.282671899838303, 0.29105308652088147, 0.287080428277402, 0.3096383138080778, 0.149398358875394, 0.15545716651782182, 0.12134258343232118, 0.15490066991366314, 0.14405630370733558, 0.1508924541966482, 0.14124263017366923, 0.15701539950074928, 0.14611443446398376, 0.14174749533604702, 0.15015825268759309, 0.143471418922416, 0.15020700965313027, 0.152557212221892, 0.1589041354016807, 0.112380522572754, 0.20094337824778008, 0.1061520889017662, 0.1423439504667494, 0.17225404515182985, 0.14563812528602516, 0.16382232723304602, 0.12639029850043426, 0.16554240532962017, 0.13790849645625658, 0.1627058856649335, 0.12454691123922934, 0.1893383710630242, 0.18315028777109255, 0.17986034492112535, 0.18227235768717975, 0.18042250987239117, 0.18898637987677935, 0.16828623178387192, 0.1782519846974655, 0.16376625785277954, 0.057936401969488904, 0.058955544169937646, 0.06125226210142887, 0.05665319730260876, 0.05589731933257169, 0.05767980735519418, 0.05991869004875516, 0.06062637032011975, 0.05848531082542863]}, "mutation_prompt": null}
{"id": "7bafe380-789a-4b88-8cda-a8adc829d5f0", "solution": "import numpy as np\n\nclass AdaptiveMutationPSODE(DynamicHybridPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Adaptive mutation rate\n        return population", "name": "AdaptiveMutationPSODE", "description": "Adapting DynamicHybridPSODE by introducing an adaptive mutation rate in the DE component to enhance exploration-exploitation balance.", "configspace": "", "generation": 46, "fitness": 0.09498893378121141, "feedback": "The algorithm AdaptiveMutationPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "32740117-a817-47e6-87e2-ecb2b9135290", "metadata": {"aucs": [0.2099208795015728, 0.22055778134375936, 0.188528628651623, 0.1058000116445672, 0.1084544000377704, 0.11012098038092244, 0.1527528414490229, 0.1338844034894897, 0.1779185203923569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03626410383538348, 0.05502117153553132, 0.04592868789263116, 0.03450735090124746, 0.023726107163798416, 0.027463675412167654, 0.037171942115248435, 0.038204346303576275, 0.042531241527972274, 0.04274330732638354, 0.03695956070948725, 0.04833540336776332, 0.04095266673847908, 0.02378884527428038, 0.03628556434202601, 0.031176780520091985, 0.02764345100277299, 0.04187226989918602, 0.07817789784541673, 0.07074176027003343, 0.05668638192904074, 0.08335129801909791, 0.10228502942215967, 0.11865639930376293, 0.09037579933307605, 0.09559601028866893, 0.07806662245259921, 0.035371488636288584, 0.04501003762610034, 0.019725467713924028, 0.06730284653524976, 0.10469127782162846, 0.0680624044974184, 0.029360012942239555, 0.04269372774942981, 0.0016685545882757502, 0.1463963837691845, 0.14985957863609978, 0.15778877809005332, 0.0632424718645952, 0.09577836744124801, 0.07014713900961356, 0.12161886145806855, 0.10434316392745491, 0.13465756343608792, 0.02840196473113943, 0.016682148025811694, 0.04061567679137024, 0.0012307119638469421, 9.999999999998899e-05, 0.0005992970188173352, 9.999999999998899e-05, 0.0032472240963979937, 9.999999999998899e-05, 0.13758044534543878, 0.12343885442013358, 0.11815540928911883, 0.13840501869579636, 0.12180429975899354, 0.14902317722309522, 0.16670956269717063, 0.18252015018776313, 0.16025512352522076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06324392926107325, 0.09949139902216975, 0.02493998399858155, 0.03359864117966771, 0.0706406355136292, 0.035615704489099675, 0.04286091548258353, 0.02916059074714772, 0.028862614402923148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16685196674372582, 0.20286664909614271, 0.22410587543101035, 0.1659089868106054, 0.18029869459672532, 0.1885821350572473, 0.22432824244737326, 0.18971554314939898, 0.2312923555494465, 0.008997102400140511, 0.0012329687188639138, 0.013554419975153165, 0.038897592669057124, 0.025489218396413937, 0.03299136535577418, 0.035621985270031686, 0.04482424150875686, 0.050182783492451755, 0.11964614930604911, 0.11654186145237944, 0.1325800509962235, 0.12823159521851069, 0.12598450114658266, 0.10228819991974014, 0.11664151021239944, 0.1256730849183807, 0.1549950910113006, 0.16934100315906886, 0.15110671941434617, 0.15135123045903331, 0.20480447125651258, 0.19039386776747314, 0.1968455308591499, 0.1403872499694251, 0.1373327155082723, 0.1461169976804373, 0.10425633679520707, 0.10501906826181662, 0.08241056774535305, 0.13116161727433628, 0.138135654899472, 0.12851608025515526, 0.08493596786266822, 0.12798858810164526, 0.10723861483807273, 0.2601974778216197, 0.26916476651110677, 0.27149758620223596, 0.28132934872342596, 0.28329630075427725, 0.2840649862750617, 0.2988804346462799, 0.29179238106617245, 0.28949329842669935, 0.15712102225306024, 0.15068481938634593, 0.14849524493013688, 0.15175277820596944, 0.15807628050764344, 0.15587529308332326, 0.15068011245247492, 0.15177113011355647, 0.15775136668130363, 0.1301615971082669, 0.14072469358332185, 0.14874683632803176, 0.13435725127695153, 0.11147384596957732, 0.10706247267944113, 0.16813310745933085, 0.14167625650052162, 0.13584259376685603, 0.15307377455241655, 0.1654736621669295, 0.2384391316179052, 0.16763364628278832, 0.17690268162040834, 0.20191248552459096, 0.1283334207890946, 0.1079727739551215, 0.13521462258781702, 0.183027058438345, 0.17638133201323059, 0.18386551140558116, 0.18908291994986892, 0.17183698394753633, 0.17211184791574108, 0.17491642487790382, 0.17159412594923074, 0.18271506473920895, 0.06305243503374058, 0.055930118931024286, 0.05399182967793115, 0.06589798077563414, 0.05748468657028438, 0.05908414627136194, 0.0579984216275965, 0.06254093232887303, 0.054218216288258736]}, "mutation_prompt": null}
{"id": "b48c0e74-bfd1-41b4-8b1c-2b0b2be3b5ba", "solution": "import numpy as np\n\nclass AdaptiveMutationPSODE(DynamicHybridPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Adaptive mutation rate\n        return population", "name": "AdaptiveMutationPSODE", "description": "Adapting DynamicHybridPSODE by introducing an adaptive mutation rate in the DE component to enhance exploration-exploitation balance.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7bafe380-789a-4b88-8cda-a8adc829d5f0", "metadata": {"aucs": [0.2099208795015728, 0.22055778134375936, 0.188528628651623, 0.1058000116445672, 0.1084544000377704, 0.11012098038092244, 0.1527528414490229, 0.1338844034894897, 0.1779185203923569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03626410383538348, 0.05502117153553132, 0.04592868789263116, 0.03450735090124746, 0.023726107163798416, 0.027463675412167654, 0.037171942115248435, 0.038204346303576275, 0.042531241527972274, 0.04274330732638354, 0.03695956070948725, 0.04833540336776332, 0.04095266673847908, 0.02378884527428038, 0.03628556434202601, 0.031176780520091985, 0.02764345100277299, 0.04187226989918602, 0.07817789784541673, 0.07074176027003343, 0.05668638192904074, 0.08335129801909791, 0.10228502942215967, 0.11865639930376293, 0.09037579933307605, 0.09559601028866893, 0.07806662245259921, 0.035371488636288584, 0.04501003762610034, 0.019725467713924028, 0.06730284653524976, 0.10469127782162846, 0.0680624044974184, 0.029360012942239555, 0.04269372774942981, 0.0016685545882757502, 0.1463963837691845, 0.14985957863609978, 0.15778877809005332, 0.0632424718645952, 0.09577836744124801, 0.07014713900961356, 0.12161886145806855, 0.10434316392745491, 0.13465756343608792, 0.02840196473113943, 0.016682148025811694, 0.04061567679137024, 0.0012307119638469421, 9.999999999998899e-05, 0.0005992970188173352, 9.999999999998899e-05, 0.0032472240963979937, 9.999999999998899e-05, 0.13758044534543878, 0.12343885442013358, 0.11815540928911883, 0.13840501869579636, 0.12180429975899354, 0.14902317722309522, 0.16670956269717063, 0.18252015018776313, 0.16025512352522076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06324392926107325, 0.09949139902216975, 0.02493998399858155, 0.03359864117966771, 0.0706406355136292, 0.035615704489099675, 0.04286091548258353, 0.02916059074714772, 0.028862614402923148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16685196674372582, 0.20286664909614271, 0.22410587543101035, 0.1659089868106054, 0.18029869459672532, 0.1885821350572473, 0.22432824244737326, 0.18971554314939898, 0.2312923555494465, 0.008997102400140511, 0.0012329687188639138, 0.013554419975153165, 0.038897592669057124, 0.025489218396413937, 0.03299136535577418, 0.035621985270031686, 0.04482424150875686, 0.050182783492451755, 0.11964614930604911, 0.11654186145237944, 0.1325800509962235, 0.12823159521851069, 0.12598450114658266, 0.10228819991974014, 0.11664151021239944, 0.1256730849183807, 0.1549950910113006, 0.16934100315906886, 0.15110671941434617, 0.15135123045903331, 0.20480447125651258, 0.19039386776747314, 0.1968455308591499, 0.1403872499694251, 0.1373327155082723, 0.1461169976804373, 0.10425633679520707, 0.10501906826181662, 0.08241056774535305, 0.13116161727433628, 0.138135654899472, 0.12851608025515526, 0.08493596786266822, 0.12798858810164526, 0.10723861483807273, 0.2601974778216197, 0.26916476651110677, 0.27149758620223596, 0.28132934872342596, 0.28329630075427725, 0.2840649862750617, 0.2988804346462799, 0.29179238106617245, 0.28949329842669935, 0.15712102225306024, 0.15068481938634593, 0.14849524493013688, 0.15175277820596944, 0.15807628050764344, 0.15587529308332326, 0.15068011245247492, 0.15177113011355647, 0.15775136668130363, 0.1301615971082669, 0.14072469358332185, 0.14874683632803176, 0.13435725127695153, 0.11147384596957732, 0.10706247267944113, 0.16813310745933085, 0.14167625650052162, 0.13584259376685603, 0.15307377455241655, 0.1654736621669295, 0.2384391316179052, 0.16763364628278832, 0.17690268162040834, 0.20191248552459096, 0.1283334207890946, 0.1079727739551215, 0.13521462258781702, 0.183027058438345, 0.17638133201323059, 0.18386551140558116, 0.18908291994986892, 0.17183698394753633, 0.17211184791574108, 0.17491642487790382, 0.17159412594923074, 0.18271506473920895, 0.06305243503374058, 0.055930118931024286, 0.05399182967793115, 0.06589798077563414, 0.05748468657028438, 0.05908414627136194, 0.0579984216275965, 0.06254093232887303, 0.054218216288258736]}, "mutation_prompt": null}
{"id": "1761cb9f-ce04-42d1-b833-9b206587dc56", "solution": "import numpy as np\n\nclass AdaptiveMutationPSODE(DynamicHybridPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Adaptive mutation rate\n        return population", "name": "AdaptiveMutationPSODE", "description": "Adapting DynamicHybridPSODE by introducing an adaptive mutation rate in the DE component to enhance exploration-exploitation balance.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7bafe380-789a-4b88-8cda-a8adc829d5f0", "metadata": {"aucs": [0.2099208795015728, 0.22055778134375936, 0.188528628651623, 0.1058000116445672, 0.1084544000377704, 0.11012098038092244, 0.1527528414490229, 0.1338844034894897, 0.1779185203923569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03626410383538348, 0.05502117153553132, 0.04592868789263116, 0.03450735090124746, 0.023726107163798416, 0.027463675412167654, 0.037171942115248435, 0.038204346303576275, 0.042531241527972274, 0.04274330732638354, 0.03695956070948725, 0.04833540336776332, 0.04095266673847908, 0.02378884527428038, 0.03628556434202601, 0.031176780520091985, 0.02764345100277299, 0.04187226989918602, 0.07817789784541673, 0.07074176027003343, 0.05668638192904074, 0.08335129801909791, 0.10228502942215967, 0.11865639930376293, 0.09037579933307605, 0.09559601028866893, 0.07806662245259921, 0.035371488636288584, 0.04501003762610034, 0.019725467713924028, 0.06730284653524976, 0.10469127782162846, 0.0680624044974184, 0.029360012942239555, 0.04269372774942981, 0.0016685545882757502, 0.1463963837691845, 0.14985957863609978, 0.15778877809005332, 0.0632424718645952, 0.09577836744124801, 0.07014713900961356, 0.12161886145806855, 0.10434316392745491, 0.13465756343608792, 0.02840196473113943, 0.016682148025811694, 0.04061567679137024, 0.0012307119638469421, 9.999999999998899e-05, 0.0005992970188173352, 9.999999999998899e-05, 0.0032472240963979937, 9.999999999998899e-05, 0.13758044534543878, 0.12343885442013358, 0.11815540928911883, 0.13840501869579636, 0.12180429975899354, 0.14902317722309522, 0.16670956269717063, 0.18252015018776313, 0.16025512352522076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06324392926107325, 0.09949139902216975, 0.02493998399858155, 0.03359864117966771, 0.0706406355136292, 0.035615704489099675, 0.04286091548258353, 0.02916059074714772, 0.028862614402923148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16685196674372582, 0.20286664909614271, 0.22410587543101035, 0.1659089868106054, 0.18029869459672532, 0.1885821350572473, 0.22432824244737326, 0.18971554314939898, 0.2312923555494465, 0.008997102400140511, 0.0012329687188639138, 0.013554419975153165, 0.038897592669057124, 0.025489218396413937, 0.03299136535577418, 0.035621985270031686, 0.04482424150875686, 0.050182783492451755, 0.11964614930604911, 0.11654186145237944, 0.1325800509962235, 0.12823159521851069, 0.12598450114658266, 0.10228819991974014, 0.11664151021239944, 0.1256730849183807, 0.1549950910113006, 0.16934100315906886, 0.15110671941434617, 0.15135123045903331, 0.20480447125651258, 0.19039386776747314, 0.1968455308591499, 0.1403872499694251, 0.1373327155082723, 0.1461169976804373, 0.10425633679520707, 0.10501906826181662, 0.08241056774535305, 0.13116161727433628, 0.138135654899472, 0.12851608025515526, 0.08493596786266822, 0.12798858810164526, 0.10723861483807273, 0.2601974778216197, 0.26916476651110677, 0.27149758620223596, 0.28132934872342596, 0.28329630075427725, 0.2840649862750617, 0.2988804346462799, 0.29179238106617245, 0.28949329842669935, 0.15712102225306024, 0.15068481938634593, 0.14849524493013688, 0.15175277820596944, 0.15807628050764344, 0.15587529308332326, 0.15068011245247492, 0.15177113011355647, 0.15775136668130363, 0.1301615971082669, 0.14072469358332185, 0.14874683632803176, 0.13435725127695153, 0.11147384596957732, 0.10706247267944113, 0.16813310745933085, 0.14167625650052162, 0.13584259376685603, 0.15307377455241655, 0.1654736621669295, 0.2384391316179052, 0.16763364628278832, 0.17690268162040834, 0.20191248552459096, 0.1283334207890946, 0.1079727739551215, 0.13521462258781702, 0.183027058438345, 0.17638133201323059, 0.18386551140558116, 0.18908291994986892, 0.17183698394753633, 0.17211184791574108, 0.17491642487790382, 0.17159412594923074, 0.18271506473920895, 0.06305243503374058, 0.055930118931024286, 0.05399182967793115, 0.06589798077563414, 0.05748468657028438, 0.05908414627136194, 0.0579984216275965, 0.06254093232887303, 0.054218216288258736]}, "mutation_prompt": null}
{"id": "ae92681d-1022-4550-a7b1-0ccdf901d709", "solution": "import numpy as np\n\nclass AdaptiveMutationPSODE(DynamicHybridPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Adaptive mutation rate\n        return population", "name": "AdaptiveMutationPSODE", "description": "Adapting DynamicHybridPSODE by introducing an adaptive mutation rate in the DE component to enhance exploration-exploitation balance.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7bafe380-789a-4b88-8cda-a8adc829d5f0", "metadata": {"aucs": [0.2099208795015728, 0.22055778134375936, 0.188528628651623, 0.1058000116445672, 0.1084544000377704, 0.11012098038092244, 0.1527528414490229, 0.1338844034894897, 0.1779185203923569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03626410383538348, 0.05502117153553132, 0.04592868789263116, 0.03450735090124746, 0.023726107163798416, 0.027463675412167654, 0.037171942115248435, 0.038204346303576275, 0.042531241527972274, 0.04274330732638354, 0.03695956070948725, 0.04833540336776332, 0.04095266673847908, 0.02378884527428038, 0.03628556434202601, 0.031176780520091985, 0.02764345100277299, 0.04187226989918602, 0.07817789784541673, 0.07074176027003343, 0.05668638192904074, 0.08335129801909791, 0.10228502942215967, 0.11865639930376293, 0.09037579933307605, 0.09559601028866893, 0.07806662245259921, 0.035371488636288584, 0.04501003762610034, 0.019725467713924028, 0.06730284653524976, 0.10469127782162846, 0.0680624044974184, 0.029360012942239555, 0.04269372774942981, 0.0016685545882757502, 0.1463963837691845, 0.14985957863609978, 0.15778877809005332, 0.0632424718645952, 0.09577836744124801, 0.07014713900961356, 0.12161886145806855, 0.10434316392745491, 0.13465756343608792, 0.02840196473113943, 0.016682148025811694, 0.04061567679137024, 0.0012307119638469421, 9.999999999998899e-05, 0.0005992970188173352, 9.999999999998899e-05, 0.0032472240963979937, 9.999999999998899e-05, 0.13758044534543878, 0.12343885442013358, 0.11815540928911883, 0.13840501869579636, 0.12180429975899354, 0.14902317722309522, 0.16670956269717063, 0.18252015018776313, 0.16025512352522076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06324392926107325, 0.09949139902216975, 0.02493998399858155, 0.03359864117966771, 0.0706406355136292, 0.035615704489099675, 0.04286091548258353, 0.02916059074714772, 0.028862614402923148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16685196674372582, 0.20286664909614271, 0.22410587543101035, 0.1659089868106054, 0.18029869459672532, 0.1885821350572473, 0.22432824244737326, 0.18971554314939898, 0.2312923555494465, 0.008997102400140511, 0.0012329687188639138, 0.013554419975153165, 0.038897592669057124, 0.025489218396413937, 0.03299136535577418, 0.035621985270031686, 0.04482424150875686, 0.050182783492451755, 0.11964614930604911, 0.11654186145237944, 0.1325800509962235, 0.12823159521851069, 0.12598450114658266, 0.10228819991974014, 0.11664151021239944, 0.1256730849183807, 0.1549950910113006, 0.16934100315906886, 0.15110671941434617, 0.15135123045903331, 0.20480447125651258, 0.19039386776747314, 0.1968455308591499, 0.1403872499694251, 0.1373327155082723, 0.1461169976804373, 0.10425633679520707, 0.10501906826181662, 0.08241056774535305, 0.13116161727433628, 0.138135654899472, 0.12851608025515526, 0.08493596786266822, 0.12798858810164526, 0.10723861483807273, 0.2601974778216197, 0.26916476651110677, 0.27149758620223596, 0.28132934872342596, 0.28329630075427725, 0.2840649862750617, 0.2988804346462799, 0.29179238106617245, 0.28949329842669935, 0.15712102225306024, 0.15068481938634593, 0.14849524493013688, 0.15175277820596944, 0.15807628050764344, 0.15587529308332326, 0.15068011245247492, 0.15177113011355647, 0.15775136668130363, 0.1301615971082669, 0.14072469358332185, 0.14874683632803176, 0.13435725127695153, 0.11147384596957732, 0.10706247267944113, 0.16813310745933085, 0.14167625650052162, 0.13584259376685603, 0.15307377455241655, 0.1654736621669295, 0.2384391316179052, 0.16763364628278832, 0.17690268162040834, 0.20191248552459096, 0.1283334207890946, 0.1079727739551215, 0.13521462258781702, 0.183027058438345, 0.17638133201323059, 0.18386551140558116, 0.18908291994986892, 0.17183698394753633, 0.17211184791574108, 0.17491642487790382, 0.17159412594923074, 0.18271506473920895, 0.06305243503374058, 0.055930118931024286, 0.05399182967793115, 0.06589798077563414, 0.05748468657028438, 0.05908414627136194, 0.0579984216275965, 0.06254093232887303, 0.054218216288258736]}, "mutation_prompt": null}
{"id": "aa256d9b-e6ca-4266-bac0-fc676089a10d", "solution": "import numpy as np\n\nclass AdaptiveMutationPSODE(DynamicHybridPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Adaptive mutation rate\n        return population", "name": "AdaptiveMutationPSODE", "description": "Adapting DynamicHybridPSODE by introducing an adaptive mutation rate in the DE component to enhance exploration-exploitation balance.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7bafe380-789a-4b88-8cda-a8adc829d5f0", "metadata": {"aucs": [0.2099208795015728, 0.22055778134375936, 0.188528628651623, 0.1058000116445672, 0.1084544000377704, 0.11012098038092244, 0.1527528414490229, 0.1338844034894897, 0.1779185203923569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03626410383538348, 0.05502117153553132, 0.04592868789263116, 0.03450735090124746, 0.023726107163798416, 0.027463675412167654, 0.037171942115248435, 0.038204346303576275, 0.042531241527972274, 0.04274330732638354, 0.03695956070948725, 0.04833540336776332, 0.04095266673847908, 0.02378884527428038, 0.03628556434202601, 0.031176780520091985, 0.02764345100277299, 0.04187226989918602, 0.07817789784541673, 0.07074176027003343, 0.05668638192904074, 0.08335129801909791, 0.10228502942215967, 0.11865639930376293, 0.09037579933307605, 0.09559601028866893, 0.07806662245259921, 0.035371488636288584, 0.04501003762610034, 0.019725467713924028, 0.06730284653524976, 0.10469127782162846, 0.0680624044974184, 0.029360012942239555, 0.04269372774942981, 0.0016685545882757502, 0.1463963837691845, 0.14985957863609978, 0.15778877809005332, 0.0632424718645952, 0.09577836744124801, 0.07014713900961356, 0.12161886145806855, 0.10434316392745491, 0.13465756343608792, 0.02840196473113943, 0.016682148025811694, 0.04061567679137024, 0.0012307119638469421, 9.999999999998899e-05, 0.0005992970188173352, 9.999999999998899e-05, 0.0032472240963979937, 9.999999999998899e-05, 0.13758044534543878, 0.12343885442013358, 0.11815540928911883, 0.13840501869579636, 0.12180429975899354, 0.14902317722309522, 0.16670956269717063, 0.18252015018776313, 0.16025512352522076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06324392926107325, 0.09949139902216975, 0.02493998399858155, 0.03359864117966771, 0.0706406355136292, 0.035615704489099675, 0.04286091548258353, 0.02916059074714772, 0.028862614402923148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16685196674372582, 0.20286664909614271, 0.22410587543101035, 0.1659089868106054, 0.18029869459672532, 0.1885821350572473, 0.22432824244737326, 0.18971554314939898, 0.2312923555494465, 0.008997102400140511, 0.0012329687188639138, 0.013554419975153165, 0.038897592669057124, 0.025489218396413937, 0.03299136535577418, 0.035621985270031686, 0.04482424150875686, 0.050182783492451755, 0.11964614930604911, 0.11654186145237944, 0.1325800509962235, 0.12823159521851069, 0.12598450114658266, 0.10228819991974014, 0.11664151021239944, 0.1256730849183807, 0.1549950910113006, 0.16934100315906886, 0.15110671941434617, 0.15135123045903331, 0.20480447125651258, 0.19039386776747314, 0.1968455308591499, 0.1403872499694251, 0.1373327155082723, 0.1461169976804373, 0.10425633679520707, 0.10501906826181662, 0.08241056774535305, 0.13116161727433628, 0.138135654899472, 0.12851608025515526, 0.08493596786266822, 0.12798858810164526, 0.10723861483807273, 0.2601974778216197, 0.26916476651110677, 0.27149758620223596, 0.28132934872342596, 0.28329630075427725, 0.2840649862750617, 0.2988804346462799, 0.29179238106617245, 0.28949329842669935, 0.15712102225306024, 0.15068481938634593, 0.14849524493013688, 0.15175277820596944, 0.15807628050764344, 0.15587529308332326, 0.15068011245247492, 0.15177113011355647, 0.15775136668130363, 0.1301615971082669, 0.14072469358332185, 0.14874683632803176, 0.13435725127695153, 0.11147384596957732, 0.10706247267944113, 0.16813310745933085, 0.14167625650052162, 0.13584259376685603, 0.15307377455241655, 0.1654736621669295, 0.2384391316179052, 0.16763364628278832, 0.17690268162040834, 0.20191248552459096, 0.1283334207890946, 0.1079727739551215, 0.13521462258781702, 0.183027058438345, 0.17638133201323059, 0.18386551140558116, 0.18908291994986892, 0.17183698394753633, 0.17211184791574108, 0.17491642487790382, 0.17159412594923074, 0.18271506473920895, 0.06305243503374058, 0.055930118931024286, 0.05399182967793115, 0.06589798077563414, 0.05748468657028438, 0.05908414627136194, 0.0579984216275965, 0.06254093232887303, 0.054218216288258736]}, "mutation_prompt": null}
{"id": "02836a8b-6088-4459-a127-f2b881a8f15f", "solution": "import numpy as np\n\nclass AdaptiveMutationPSODE(DynamicHybridPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Adaptive mutation rate\n        return population", "name": "AdaptiveMutationPSODE", "description": "Adapting DynamicHybridPSODE by introducing an adaptive mutation rate in the DE component to enhance exploration-exploitation balance.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7bafe380-789a-4b88-8cda-a8adc829d5f0", "metadata": {"aucs": [0.2099208795015728, 0.22055778134375936, 0.188528628651623, 0.1058000116445672, 0.1084544000377704, 0.11012098038092244, 0.1527528414490229, 0.1338844034894897, 0.1779185203923569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03626410383538348, 0.05502117153553132, 0.04592868789263116, 0.03450735090124746, 0.023726107163798416, 0.027463675412167654, 0.037171942115248435, 0.038204346303576275, 0.042531241527972274, 0.04274330732638354, 0.03695956070948725, 0.04833540336776332, 0.04095266673847908, 0.02378884527428038, 0.03628556434202601, 0.031176780520091985, 0.02764345100277299, 0.04187226989918602, 0.07817789784541673, 0.07074176027003343, 0.05668638192904074, 0.08335129801909791, 0.10228502942215967, 0.11865639930376293, 0.09037579933307605, 0.09559601028866893, 0.07806662245259921, 0.035371488636288584, 0.04501003762610034, 0.019725467713924028, 0.06730284653524976, 0.10469127782162846, 0.0680624044974184, 0.029360012942239555, 0.04269372774942981, 0.0016685545882757502, 0.1463963837691845, 0.14985957863609978, 0.15778877809005332, 0.0632424718645952, 0.09577836744124801, 0.07014713900961356, 0.12161886145806855, 0.10434316392745491, 0.13465756343608792, 0.02840196473113943, 0.016682148025811694, 0.04061567679137024, 0.0012307119638469421, 9.999999999998899e-05, 0.0005992970188173352, 9.999999999998899e-05, 0.0032472240963979937, 9.999999999998899e-05, 0.13758044534543878, 0.12343885442013358, 0.11815540928911883, 0.13840501869579636, 0.12180429975899354, 0.14902317722309522, 0.16670956269717063, 0.18252015018776313, 0.16025512352522076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06324392926107325, 0.09949139902216975, 0.02493998399858155, 0.03359864117966771, 0.0706406355136292, 0.035615704489099675, 0.04286091548258353, 0.02916059074714772, 0.028862614402923148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16685196674372582, 0.20286664909614271, 0.22410587543101035, 0.1659089868106054, 0.18029869459672532, 0.1885821350572473, 0.22432824244737326, 0.18971554314939898, 0.2312923555494465, 0.008997102400140511, 0.0012329687188639138, 0.013554419975153165, 0.038897592669057124, 0.025489218396413937, 0.03299136535577418, 0.035621985270031686, 0.04482424150875686, 0.050182783492451755, 0.11964614930604911, 0.11654186145237944, 0.1325800509962235, 0.12823159521851069, 0.12598450114658266, 0.10228819991974014, 0.11664151021239944, 0.1256730849183807, 0.1549950910113006, 0.16934100315906886, 0.15110671941434617, 0.15135123045903331, 0.20480447125651258, 0.19039386776747314, 0.1968455308591499, 0.1403872499694251, 0.1373327155082723, 0.1461169976804373, 0.10425633679520707, 0.10501906826181662, 0.08241056774535305, 0.13116161727433628, 0.138135654899472, 0.12851608025515526, 0.08493596786266822, 0.12798858810164526, 0.10723861483807273, 0.2601974778216197, 0.26916476651110677, 0.27149758620223596, 0.28132934872342596, 0.28329630075427725, 0.2840649862750617, 0.2988804346462799, 0.29179238106617245, 0.28949329842669935, 0.15712102225306024, 0.15068481938634593, 0.14849524493013688, 0.15175277820596944, 0.15807628050764344, 0.15587529308332326, 0.15068011245247492, 0.15177113011355647, 0.15775136668130363, 0.1301615971082669, 0.14072469358332185, 0.14874683632803176, 0.13435725127695153, 0.11147384596957732, 0.10706247267944113, 0.16813310745933085, 0.14167625650052162, 0.13584259376685603, 0.15307377455241655, 0.1654736621669295, 0.2384391316179052, 0.16763364628278832, 0.17690268162040834, 0.20191248552459096, 0.1283334207890946, 0.1079727739551215, 0.13521462258781702, 0.183027058438345, 0.17638133201323059, 0.18386551140558116, 0.18908291994986892, 0.17183698394753633, 0.17211184791574108, 0.17491642487790382, 0.17159412594923074, 0.18271506473920895, 0.06305243503374058, 0.055930118931024286, 0.05399182967793115, 0.06589798077563414, 0.05748468657028438, 0.05908414627136194, 0.0579984216275965, 0.06254093232887303, 0.054218216288258736]}, "mutation_prompt": null}
{"id": "bc16c9a2-1280-4f8a-8d4d-40b9212d43db", "solution": "import numpy as np\n\nclass AdaptiveMutationPSODE(DynamicHybridPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Adaptive mutation rate\n        return population", "name": "AdaptiveMutationPSODE", "description": "Adapting DynamicHybridPSODE by introducing an adaptive mutation rate in the DE component to enhance exploration-exploitation balance.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7bafe380-789a-4b88-8cda-a8adc829d5f0", "metadata": {"aucs": [0.2099208795015728, 0.22055778134375936, 0.188528628651623, 0.1058000116445672, 0.1084544000377704, 0.11012098038092244, 0.1527528414490229, 0.1338844034894897, 0.1779185203923569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03626410383538348, 0.05502117153553132, 0.04592868789263116, 0.03450735090124746, 0.023726107163798416, 0.027463675412167654, 0.037171942115248435, 0.038204346303576275, 0.042531241527972274, 0.04274330732638354, 0.03695956070948725, 0.04833540336776332, 0.04095266673847908, 0.02378884527428038, 0.03628556434202601, 0.031176780520091985, 0.02764345100277299, 0.04187226989918602, 0.07817789784541673, 0.07074176027003343, 0.05668638192904074, 0.08335129801909791, 0.10228502942215967, 0.11865639930376293, 0.09037579933307605, 0.09559601028866893, 0.07806662245259921, 0.035371488636288584, 0.04501003762610034, 0.019725467713924028, 0.06730284653524976, 0.10469127782162846, 0.0680624044974184, 0.029360012942239555, 0.04269372774942981, 0.0016685545882757502, 0.1463963837691845, 0.14985957863609978, 0.15778877809005332, 0.0632424718645952, 0.09577836744124801, 0.07014713900961356, 0.12161886145806855, 0.10434316392745491, 0.13465756343608792, 0.02840196473113943, 0.016682148025811694, 0.04061567679137024, 0.0012307119638469421, 9.999999999998899e-05, 0.0005992970188173352, 9.999999999998899e-05, 0.0032472240963979937, 9.999999999998899e-05, 0.13758044534543878, 0.12343885442013358, 0.11815540928911883, 0.13840501869579636, 0.12180429975899354, 0.14902317722309522, 0.16670956269717063, 0.18252015018776313, 0.16025512352522076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06324392926107325, 0.09949139902216975, 0.02493998399858155, 0.03359864117966771, 0.0706406355136292, 0.035615704489099675, 0.04286091548258353, 0.02916059074714772, 0.028862614402923148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16685196674372582, 0.20286664909614271, 0.22410587543101035, 0.1659089868106054, 0.18029869459672532, 0.1885821350572473, 0.22432824244737326, 0.18971554314939898, 0.2312923555494465, 0.008997102400140511, 0.0012329687188639138, 0.013554419975153165, 0.038897592669057124, 0.025489218396413937, 0.03299136535577418, 0.035621985270031686, 0.04482424150875686, 0.050182783492451755, 0.11964614930604911, 0.11654186145237944, 0.1325800509962235, 0.12823159521851069, 0.12598450114658266, 0.10228819991974014, 0.11664151021239944, 0.1256730849183807, 0.1549950910113006, 0.16934100315906886, 0.15110671941434617, 0.15135123045903331, 0.20480447125651258, 0.19039386776747314, 0.1968455308591499, 0.1403872499694251, 0.1373327155082723, 0.1461169976804373, 0.10425633679520707, 0.10501906826181662, 0.08241056774535305, 0.13116161727433628, 0.138135654899472, 0.12851608025515526, 0.08493596786266822, 0.12798858810164526, 0.10723861483807273, 0.2601974778216197, 0.26916476651110677, 0.27149758620223596, 0.28132934872342596, 0.28329630075427725, 0.2840649862750617, 0.2988804346462799, 0.29179238106617245, 0.28949329842669935, 0.15712102225306024, 0.15068481938634593, 0.14849524493013688, 0.15175277820596944, 0.15807628050764344, 0.15587529308332326, 0.15068011245247492, 0.15177113011355647, 0.15775136668130363, 0.1301615971082669, 0.14072469358332185, 0.14874683632803176, 0.13435725127695153, 0.11147384596957732, 0.10706247267944113, 0.16813310745933085, 0.14167625650052162, 0.13584259376685603, 0.15307377455241655, 0.1654736621669295, 0.2384391316179052, 0.16763364628278832, 0.17690268162040834, 0.20191248552459096, 0.1283334207890946, 0.1079727739551215, 0.13521462258781702, 0.183027058438345, 0.17638133201323059, 0.18386551140558116, 0.18908291994986892, 0.17183698394753633, 0.17211184791574108, 0.17491642487790382, 0.17159412594923074, 0.18271506473920895, 0.06305243503374058, 0.055930118931024286, 0.05399182967793115, 0.06589798077563414, 0.05748468657028438, 0.05908414627136194, 0.0579984216275965, 0.06254093232887303, 0.054218216288258736]}, "mutation_prompt": null}
{"id": "75c188be-f0f6-4ade-a9ab-64ccc41ad265", "solution": "import numpy as np\n\nclass AdaptiveMutationPSODE(DynamicHybridPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Adaptive mutation rate\n        return population", "name": "AdaptiveMutationPSODE", "description": "Adapting DynamicHybridPSODE by introducing an adaptive mutation rate in the DE component to enhance exploration-exploitation balance.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7bafe380-789a-4b88-8cda-a8adc829d5f0", "metadata": {"aucs": [0.2099208795015728, 0.22055778134375936, 0.188528628651623, 0.1058000116445672, 0.1084544000377704, 0.11012098038092244, 0.1527528414490229, 0.1338844034894897, 0.1779185203923569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03626410383538348, 0.05502117153553132, 0.04592868789263116, 0.03450735090124746, 0.023726107163798416, 0.027463675412167654, 0.037171942115248435, 0.038204346303576275, 0.042531241527972274, 0.04274330732638354, 0.03695956070948725, 0.04833540336776332, 0.04095266673847908, 0.02378884527428038, 0.03628556434202601, 0.031176780520091985, 0.02764345100277299, 0.04187226989918602, 0.07817789784541673, 0.07074176027003343, 0.05668638192904074, 0.08335129801909791, 0.10228502942215967, 0.11865639930376293, 0.09037579933307605, 0.09559601028866893, 0.07806662245259921, 0.035371488636288584, 0.04501003762610034, 0.019725467713924028, 0.06730284653524976, 0.10469127782162846, 0.0680624044974184, 0.029360012942239555, 0.04269372774942981, 0.0016685545882757502, 0.1463963837691845, 0.14985957863609978, 0.15778877809005332, 0.0632424718645952, 0.09577836744124801, 0.07014713900961356, 0.12161886145806855, 0.10434316392745491, 0.13465756343608792, 0.02840196473113943, 0.016682148025811694, 0.04061567679137024, 0.0012307119638469421, 9.999999999998899e-05, 0.0005992970188173352, 9.999999999998899e-05, 0.0032472240963979937, 9.999999999998899e-05, 0.13758044534543878, 0.12343885442013358, 0.11815540928911883, 0.13840501869579636, 0.12180429975899354, 0.14902317722309522, 0.16670956269717063, 0.18252015018776313, 0.16025512352522076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06324392926107325, 0.09949139902216975, 0.02493998399858155, 0.03359864117966771, 0.0706406355136292, 0.035615704489099675, 0.04286091548258353, 0.02916059074714772, 0.028862614402923148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16685196674372582, 0.20286664909614271, 0.22410587543101035, 0.1659089868106054, 0.18029869459672532, 0.1885821350572473, 0.22432824244737326, 0.18971554314939898, 0.2312923555494465, 0.008997102400140511, 0.0012329687188639138, 0.013554419975153165, 0.038897592669057124, 0.025489218396413937, 0.03299136535577418, 0.035621985270031686, 0.04482424150875686, 0.050182783492451755, 0.11964614930604911, 0.11654186145237944, 0.1325800509962235, 0.12823159521851069, 0.12598450114658266, 0.10228819991974014, 0.11664151021239944, 0.1256730849183807, 0.1549950910113006, 0.16934100315906886, 0.15110671941434617, 0.15135123045903331, 0.20480447125651258, 0.19039386776747314, 0.1968455308591499, 0.1403872499694251, 0.1373327155082723, 0.1461169976804373, 0.10425633679520707, 0.10501906826181662, 0.08241056774535305, 0.13116161727433628, 0.138135654899472, 0.12851608025515526, 0.08493596786266822, 0.12798858810164526, 0.10723861483807273, 0.2601974778216197, 0.26916476651110677, 0.27149758620223596, 0.28132934872342596, 0.28329630075427725, 0.2840649862750617, 0.2988804346462799, 0.29179238106617245, 0.28949329842669935, 0.15712102225306024, 0.15068481938634593, 0.14849524493013688, 0.15175277820596944, 0.15807628050764344, 0.15587529308332326, 0.15068011245247492, 0.15177113011355647, 0.15775136668130363, 0.1301615971082669, 0.14072469358332185, 0.14874683632803176, 0.13435725127695153, 0.11147384596957732, 0.10706247267944113, 0.16813310745933085, 0.14167625650052162, 0.13584259376685603, 0.15307377455241655, 0.1654736621669295, 0.2384391316179052, 0.16763364628278832, 0.17690268162040834, 0.20191248552459096, 0.1283334207890946, 0.1079727739551215, 0.13521462258781702, 0.183027058438345, 0.17638133201323059, 0.18386551140558116, 0.18908291994986892, 0.17183698394753633, 0.17211184791574108, 0.17491642487790382, 0.17159412594923074, 0.18271506473920895, 0.06305243503374058, 0.055930118931024286, 0.05399182967793115, 0.06589798077563414, 0.05748468657028438, 0.05908414627136194, 0.0579984216275965, 0.06254093232887303, 0.054218216288258736]}, "mutation_prompt": null}
{"id": "44caa3d8-09c6-4b55-a34e-386c7fdc5f7b", "solution": "import numpy as np\n\nclass AdaptiveMutationPSODE(DynamicHybridPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Adaptive mutation rate\n        return population", "name": "AdaptiveMutationPSODE", "description": "Adapting DynamicHybridPSODE by introducing an adaptive mutation rate in the DE component to enhance exploration-exploitation balance.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7bafe380-789a-4b88-8cda-a8adc829d5f0", "metadata": {"aucs": [0.2099208795015728, 0.22055778134375936, 0.188528628651623, 0.1058000116445672, 0.1084544000377704, 0.11012098038092244, 0.1527528414490229, 0.1338844034894897, 0.1779185203923569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03626410383538348, 0.05502117153553132, 0.04592868789263116, 0.03450735090124746, 0.023726107163798416, 0.027463675412167654, 0.037171942115248435, 0.038204346303576275, 0.042531241527972274, 0.04274330732638354, 0.03695956070948725, 0.04833540336776332, 0.04095266673847908, 0.02378884527428038, 0.03628556434202601, 0.031176780520091985, 0.02764345100277299, 0.04187226989918602, 0.07817789784541673, 0.07074176027003343, 0.05668638192904074, 0.08335129801909791, 0.10228502942215967, 0.11865639930376293, 0.09037579933307605, 0.09559601028866893, 0.07806662245259921, 0.035371488636288584, 0.04501003762610034, 0.019725467713924028, 0.06730284653524976, 0.10469127782162846, 0.0680624044974184, 0.029360012942239555, 0.04269372774942981, 0.0016685545882757502, 0.1463963837691845, 0.14985957863609978, 0.15778877809005332, 0.0632424718645952, 0.09577836744124801, 0.07014713900961356, 0.12161886145806855, 0.10434316392745491, 0.13465756343608792, 0.02840196473113943, 0.016682148025811694, 0.04061567679137024, 0.0012307119638469421, 9.999999999998899e-05, 0.0005992970188173352, 9.999999999998899e-05, 0.0032472240963979937, 9.999999999998899e-05, 0.13758044534543878, 0.12343885442013358, 0.11815540928911883, 0.13840501869579636, 0.12180429975899354, 0.14902317722309522, 0.16670956269717063, 0.18252015018776313, 0.16025512352522076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06324392926107325, 0.09949139902216975, 0.02493998399858155, 0.03359864117966771, 0.0706406355136292, 0.035615704489099675, 0.04286091548258353, 0.02916059074714772, 0.028862614402923148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16685196674372582, 0.20286664909614271, 0.22410587543101035, 0.1659089868106054, 0.18029869459672532, 0.1885821350572473, 0.22432824244737326, 0.18971554314939898, 0.2312923555494465, 0.008997102400140511, 0.0012329687188639138, 0.013554419975153165, 0.038897592669057124, 0.025489218396413937, 0.03299136535577418, 0.035621985270031686, 0.04482424150875686, 0.050182783492451755, 0.11964614930604911, 0.11654186145237944, 0.1325800509962235, 0.12823159521851069, 0.12598450114658266, 0.10228819991974014, 0.11664151021239944, 0.1256730849183807, 0.1549950910113006, 0.16934100315906886, 0.15110671941434617, 0.15135123045903331, 0.20480447125651258, 0.19039386776747314, 0.1968455308591499, 0.1403872499694251, 0.1373327155082723, 0.1461169976804373, 0.10425633679520707, 0.10501906826181662, 0.08241056774535305, 0.13116161727433628, 0.138135654899472, 0.12851608025515526, 0.08493596786266822, 0.12798858810164526, 0.10723861483807273, 0.2601974778216197, 0.26916476651110677, 0.27149758620223596, 0.28132934872342596, 0.28329630075427725, 0.2840649862750617, 0.2988804346462799, 0.29179238106617245, 0.28949329842669935, 0.15712102225306024, 0.15068481938634593, 0.14849524493013688, 0.15175277820596944, 0.15807628050764344, 0.15587529308332326, 0.15068011245247492, 0.15177113011355647, 0.15775136668130363, 0.1301615971082669, 0.14072469358332185, 0.14874683632803176, 0.13435725127695153, 0.11147384596957732, 0.10706247267944113, 0.16813310745933085, 0.14167625650052162, 0.13584259376685603, 0.15307377455241655, 0.1654736621669295, 0.2384391316179052, 0.16763364628278832, 0.17690268162040834, 0.20191248552459096, 0.1283334207890946, 0.1079727739551215, 0.13521462258781702, 0.183027058438345, 0.17638133201323059, 0.18386551140558116, 0.18908291994986892, 0.17183698394753633, 0.17211184791574108, 0.17491642487790382, 0.17159412594923074, 0.18271506473920895, 0.06305243503374058, 0.055930118931024286, 0.05399182967793115, 0.06589798077563414, 0.05748468657028438, 0.05908414627136194, 0.0579984216275965, 0.06254093232887303, 0.054218216288258736]}, "mutation_prompt": null}
{"id": "736bbf25-357d-4ba8-843d-3ab293f3f11f", "solution": "import numpy as np\n\nclass AdaptiveMutationPSODE(DynamicHybridPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Adaptive mutation rate\n        return population", "name": "AdaptiveMutationPSODE", "description": "Adapting DynamicHybridPSODE by introducing an adaptive mutation rate in the DE component to enhance exploration-exploitation balance.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7bafe380-789a-4b88-8cda-a8adc829d5f0", "metadata": {"aucs": [0.2099208795015728, 0.22055778134375936, 0.188528628651623, 0.1058000116445672, 0.1084544000377704, 0.11012098038092244, 0.1527528414490229, 0.1338844034894897, 0.1779185203923569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03626410383538348, 0.05502117153553132, 0.04592868789263116, 0.03450735090124746, 0.023726107163798416, 0.027463675412167654, 0.037171942115248435, 0.038204346303576275, 0.042531241527972274, 0.04274330732638354, 0.03695956070948725, 0.04833540336776332, 0.04095266673847908, 0.02378884527428038, 0.03628556434202601, 0.031176780520091985, 0.02764345100277299, 0.04187226989918602, 0.07817789784541673, 0.07074176027003343, 0.05668638192904074, 0.08335129801909791, 0.10228502942215967, 0.11865639930376293, 0.09037579933307605, 0.09559601028866893, 0.07806662245259921, 0.035371488636288584, 0.04501003762610034, 0.019725467713924028, 0.06730284653524976, 0.10469127782162846, 0.0680624044974184, 0.029360012942239555, 0.04269372774942981, 0.0016685545882757502, 0.1463963837691845, 0.14985957863609978, 0.15778877809005332, 0.0632424718645952, 0.09577836744124801, 0.07014713900961356, 0.12161886145806855, 0.10434316392745491, 0.13465756343608792, 0.02840196473113943, 0.016682148025811694, 0.04061567679137024, 0.0012307119638469421, 9.999999999998899e-05, 0.0005992970188173352, 9.999999999998899e-05, 0.0032472240963979937, 9.999999999998899e-05, 0.13758044534543878, 0.12343885442013358, 0.11815540928911883, 0.13840501869579636, 0.12180429975899354, 0.14902317722309522, 0.16670956269717063, 0.18252015018776313, 0.16025512352522076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06324392926107325, 0.09949139902216975, 0.02493998399858155, 0.03359864117966771, 0.0706406355136292, 0.035615704489099675, 0.04286091548258353, 0.02916059074714772, 0.028862614402923148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16685196674372582, 0.20286664909614271, 0.22410587543101035, 0.1659089868106054, 0.18029869459672532, 0.1885821350572473, 0.22432824244737326, 0.18971554314939898, 0.2312923555494465, 0.008997102400140511, 0.0012329687188639138, 0.013554419975153165, 0.038897592669057124, 0.025489218396413937, 0.03299136535577418, 0.035621985270031686, 0.04482424150875686, 0.050182783492451755, 0.11964614930604911, 0.11654186145237944, 0.1325800509962235, 0.12823159521851069, 0.12598450114658266, 0.10228819991974014, 0.11664151021239944, 0.1256730849183807, 0.1549950910113006, 0.16934100315906886, 0.15110671941434617, 0.15135123045903331, 0.20480447125651258, 0.19039386776747314, 0.1968455308591499, 0.1403872499694251, 0.1373327155082723, 0.1461169976804373, 0.10425633679520707, 0.10501906826181662, 0.08241056774535305, 0.13116161727433628, 0.138135654899472, 0.12851608025515526, 0.08493596786266822, 0.12798858810164526, 0.10723861483807273, 0.2601974778216197, 0.26916476651110677, 0.27149758620223596, 0.28132934872342596, 0.28329630075427725, 0.2840649862750617, 0.2988804346462799, 0.29179238106617245, 0.28949329842669935, 0.15712102225306024, 0.15068481938634593, 0.14849524493013688, 0.15175277820596944, 0.15807628050764344, 0.15587529308332326, 0.15068011245247492, 0.15177113011355647, 0.15775136668130363, 0.1301615971082669, 0.14072469358332185, 0.14874683632803176, 0.13435725127695153, 0.11147384596957732, 0.10706247267944113, 0.16813310745933085, 0.14167625650052162, 0.13584259376685603, 0.15307377455241655, 0.1654736621669295, 0.2384391316179052, 0.16763364628278832, 0.17690268162040834, 0.20191248552459096, 0.1283334207890946, 0.1079727739551215, 0.13521462258781702, 0.183027058438345, 0.17638133201323059, 0.18386551140558116, 0.18908291994986892, 0.17183698394753633, 0.17211184791574108, 0.17491642487790382, 0.17159412594923074, 0.18271506473920895, 0.06305243503374058, 0.055930118931024286, 0.05399182967793115, 0.06589798077563414, 0.05748468657028438, 0.05908414627136194, 0.0579984216275965, 0.06254093232887303, 0.054218216288258736]}, "mutation_prompt": null}
{"id": "23a76c5a-874c-4913-bf10-d8942657122d", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 56, "fitness": 0.09620059198223713, "feedback": "The algorithm RefinedAdaptiveMutationPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "7bafe380-789a-4b88-8cda-a8adc829d5f0", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "6bab7787-0601-46cf-bc26-d6ab2a1c62e0", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "9706e3c9-c520-4840-b2a7-f026da0dbedc", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "705a2e8b-c331-44a3-9661-5fad7dce2baf", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "9d6f79e8-86f9-4044-b6fe-a968d3248bae", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "a4d47137-2e5a-4e9f-9c7b-99089447d7a6", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "357f3ece-6a78-4484-8100-68dc4dd79a52", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "451c3cf9-0a4a-46d1-bc9c-69b4a40be22f", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "da45ed34-b6ec-47d3-9fa5-50b7f27f1a14", "solution": "import numpy as np\n\nclass MetaheuristicOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        for _ in range(self.budget):\n            population = self.de_update(population, func)\n        best_solution = min(population, key=lambda x: func(x['position']))\n        return best_solution['position']\n\n    def initialize_population(self):\n        return [{'position': np.random.uniform(-5.0, 5.0, self.dim)} for _ in range(self.population_size)]\n\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n                individual_line = np.random.randint(self.dim)\n                x[individual_line] = np.clip(np.random.uniform(-5.0, 5.0), -5.0, 5.0)  # Individual line change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "MetaheuristicOptimizationAlgorithm", "description": "Implement a novel algorithm named MetaheuristicOptimizationAlgorithm, which combines AdaptiveMutationPSODE with a novel individual line change strategy to enhance exploration-exploitation balance for black box optimization tasks.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'MetaheuristicOptimizationAlgorithm' object has no attribute 'population_size'\").", "error": "AttributeError(\"'MetaheuristicOptimizationAlgorithm' object has no attribute 'population_size'\")", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {}, "mutation_prompt": null}
{"id": "66c52e95-8d69-4db5-a794-f8b89db94d9a", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "13be1959-d94f-43d2-8fe0-22875715136e", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "f90e1725-f579-4cc8-a920-22b71694610b", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "d0708988-fb1e-46fc-9786-21ff5448c6a1", "solution": "import numpy as np\n\nclass FurtherRefinedAdaptiveMutationPSODE(RefinedAdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n                x = np.clip(x + np.random.normal(0, 0.1, self.dim), -5.0, 5.0)  # Probabilistic line change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "FurtherRefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the RefinedAdaptiveMutationPSODE algorithm to further refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 68, "fitness": 0.09476051350912106, "feedback": "The algorithm FurtherRefinedAdaptiveMutationPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.20123152973340352, 0.16753981007119112, 0.15353663115297989, 0.0958922971429722, 0.09036795318425828, 0.11694254659844083, 0.12625875043995383, 0.1451047559699835, 0.15882415008717254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03470761335425687, 0.0539859344277509, 0.038973055668167444, 0.06645519754009344, 0.03641601619652557, 0.04000342680997815, 0.03940167584687737, 0.03272083608592713, 0.027954061338315683, 0.04199029670845977, 0.04381234682616053, 0.05241305016252262, 0.02581996137874154, 0.03837074874463797, 0.03655291679320505, 0.028266540905589554, 0.020871661174704625, 0.03440123029173625, 0.06698735473024775, 0.0802867742063137, 0.05698308501658267, 0.09147282885287755, 0.08745070011865497, 0.06670441520516612, 0.09320225303833773, 0.08440748478669757, 0.05646540286246726, 0.03757573953826454, 0.054499790468722664, 0.03632690790917237, 0.06152428387722575, 0.06026331753307146, 0.06938554881293713, 0.054957335869984636, 0.02616654087293535, 0.00607220076434134, 0.1540007852767783, 0.17067170430266054, 0.1656082419160444, 0.07178053412832164, 0.10411292356850754, 0.09287867394395488, 0.0946356629032471, 0.11358947492342575, 0.09756206121907685, 0.062344587019214304, 0.01494915135592767, 0.016162281586686533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00383117136038158, 0.02177382723909227, 0.16167909189908136, 0.15796484420529233, 0.11011691830139858, 0.13518787058217563, 0.14149934884676063, 0.1404875115106946, 0.15263263135746552, 0.14473495371552636, 0.14964402488121886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022430343917946072, 0.05855735681410079, 0.06350412602368327, 0.07129485090009491, 0.04061295582828228, 0.046777602710975974, 0.11919371494384523, 0.037806644648562204, 0.06848910557322774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00221922850255285, 9.999999999998899e-05, 9.999999999998899e-05, 0.17318643278263302, 0.16673497648398028, 0.19130353481850237, 0.18183907513236208, 0.18584924963779514, 0.21907104928383914, 0.25006414098426477, 0.20323660252306897, 0.2061123792494901, 0.003656788042835646, 0.022643030398634467, 0.010745247039572137, 0.026105618531274577, 0.046323603629719545, 0.04331449478358862, 0.049399144364047576, 0.048038779696725764, 0.04275990516529837, 0.12718501769591273, 0.12154933208024665, 0.12023435040029162, 0.12029073932166134, 0.10691053079517909, 0.10723643559800566, 0.12886508298540378, 0.1222975611480357, 0.17194951448379292, 0.14349350356550927, 0.1530490406130529, 0.14307687775531053, 0.20713314410538064, 0.21394292591517883, 0.20447860328004286, 0.14299174680301163, 0.15763377668478884, 0.16378657348202885, 0.09442148531099792, 0.08730020706216968, 0.09821675356941995, 0.13314046217954034, 0.13042588856560688, 0.1434078468447949, 0.09943267313121085, 0.11481179453933854, 0.1081760570284408, 0.2601974778216197, 0.261130183497709, 0.26152303641182184, 0.2770891650469257, 0.2897496429274935, 0.2864936707050745, 0.31091195050565423, 0.3018702465450033, 0.30234302836800786, 0.14975524700392784, 0.15732351175281345, 0.11551452162976661, 0.15349343530984771, 0.1600664685778047, 0.15621373926071214, 0.14202336460880105, 0.14352377348776624, 0.1483058749633015, 0.15947988908836686, 0.1304803394338443, 0.13952925533242655, 0.11549667534481267, 0.15093722997546033, 0.1500990589357558, 0.12976034464222463, 0.20910973423956836, 0.14476496175385078, 0.13997290113039984, 0.15358994653218727, 0.15066662528442232, 0.15039509572135867, 0.15908932321982505, 0.1871556720756532, 0.11119569293768272, 0.11936208198059217, 0.16893627429066704, 0.17414242426493165, 0.1913975414888388, 0.1763914211000558, 0.16246617079349157, 0.1617403884081774, 0.18532967405089606, 0.17517495255758664, 0.1779668125206243, 0.166061378423639, 0.0522777788224561, 0.0660863883261178, 0.06127517220839562, 0.06127408802680279, 0.06778894926630696, 0.06105070116720057, 0.06566431969079911, 0.06262084950892044, 0.06400932450555974]}, "mutation_prompt": null}
{"id": "2940d1ad-2cd0-4336-adc0-8e37e36c319f", "solution": "import numpy as np\n\nclass FurtherRefinedAdaptiveMutationPSODE(RefinedAdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:  # Probability 0.2 to change individual lines\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n                x = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "FurtherRefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the RefinedAdaptiveMutationPSODE algorithm to further refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 69, "fitness": 0.095727964923885, "feedback": "The algorithm FurtherRefinedAdaptiveMutationPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.17565888273586094, 0.17689868458745894, 0.18605597041551802, 0.1019671553449143, 0.10181277398784405, 0.12289261206106672, 0.18380466363717185, 0.14604216502271306, 0.13050129193067894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04265550733383838, 0.04398222233379856, 0.04753017954606675, 0.035738919576156714, 0.04574639508044642, 0.04055512464504829, 0.03419449353573423, 0.10760781391822616, 0.03438137166962074, 0.0369075461178372, 0.045172893588580565, 0.039399000044422205, 0.03145590700222345, 0.044231354152642455, 0.032271510101953726, 0.036651160633367375, 0.023673470084635828, 0.04020189727494616, 0.09682100404954541, 0.08098355067074703, 0.07099993916328473, 0.0852134739775724, 0.08203510390149116, 0.06503646524174622, 0.08391148114916103, 0.08663271537527084, 0.06764972303353867, 0.02528273901789657, 0.03999232150970744, 0.01859020508501419, 0.09033197734141618, 0.07869378802532223, 0.06379777856222668, 0.06334912664022363, 0.026917279770063085, 0.001558265948557347, 0.15007546457926269, 0.1504228882063975, 0.1642168993875479, 0.05261132374564892, 0.08739733466740052, 0.09724107571882046, 0.09896492592954076, 0.11669374451075587, 0.10880116451850574, 0.05587303988457881, 0.05153858734001282, 0.058452796856373945, 9.999999999998899e-05, 0.003115329760932206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16839141640749822, 0.10554738928330243, 0.11837901257433914, 0.12035510341263411, 0.15176642164978948, 0.12507585469281624, 0.17530751206157458, 0.16896017913692107, 0.18918844686559733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05761082718499477, 0.08239677298647163, 0.03554765165587437, 0.05202372027558688, 0.04677477646897166, 0.057437742042624085, 0.07628453309368721, 0.04351916759996022, 0.04473190875560307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007549106992679189, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0049569311628875345, 0.16779813122539056, 0.18927324756458985, 0.19334940874463813, 0.1737534455562807, 0.1686629693111259, 0.1981752610430304, 0.24818271522142898, 0.18865103399487726, 0.19645879467994543, 0.010181898694714642, 0.011426610557767392, 0.011946596023742817, 0.025956894691493426, 0.04201098645765011, 0.030522892776622235, 0.04475021644643662, 0.05656658999291808, 0.05844195426967158, 0.11707630711436501, 0.13793943934766428, 0.12307600402384522, 0.10527104668099763, 0.11638836089288074, 0.13923657791027944, 0.126931105019783, 0.1293995896750737, 0.13994116930863842, 0.15141240903560538, 0.14864479751080284, 0.1600173025194488, 0.1934688722420621, 0.17255520045579598, 0.21585429629375175, 0.14613126993122227, 0.14488865857690958, 0.15157813066446013, 0.084321191201705, 0.09179657371888439, 0.098763667353167, 0.13483245674805622, 0.13147214180017475, 0.14629151775492122, 0.08885191852692698, 0.10816161346992215, 0.11477435801816538, 0.26385199635137047, 0.285651072902115, 0.2949178945160178, 0.27738833430756793, 0.2959993528293281, 0.30416687487183647, 0.30359893829996654, 0.2962169137585894, 0.30717099273219783, 0.14876848323384384, 0.14890236278199642, 0.14328563261762806, 0.14919062418817652, 0.15432566971360429, 0.15503111546925652, 0.15674871360444254, 0.14948548242254078, 0.14731522925055074, 0.1327348225706313, 0.16205841005028288, 0.12581811149520095, 0.11529226675852244, 0.12433890300278527, 0.12837276694699262, 0.12003541246163152, 0.13290836125800287, 0.15752967763918457, 0.15780310938154563, 0.21018632233274415, 0.203183535506823, 0.1432333562060487, 0.1634799139186336, 0.17534391874451427, 0.1564236564321958, 0.15772109768375653, 0.13032491790932277, 0.19191607535880462, 0.1643859857819191, 0.16736076955044277, 0.16954245027528436, 0.1820933613208, 0.1646147153768025, 0.1824352052484668, 0.16398564431983342, 0.17683196152272085, 0.05890257441929447, 0.07668441066258513, 0.06427662836570491, 0.05902366417469507, 0.06546302593634357, 0.05329793869089572, 0.0572381295267651, 0.06302076562407943, 0.062074492264301395]}, "mutation_prompt": null}
{"id": "5ce4dc8a-b782-438b-a00d-fe189e6355bc", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "4ce53e9b-5d70-404a-b69e-bc7754c6c280", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "1cf00757-b70e-4dd0-9cf0-4dfe348e0220", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "b5e1e202-5a54-46b8-92ca-93567ad77200", "solution": "import numpy as np\n\nclass EnhancedRefinedAdaptiveMutationPSODE(RefinedAdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n                line_to_change = np.random.randint(self.dim)  # Introducing line selection for mutation\n                x[line_to_change] = np.clip(np.random.normal(x[line_to_change], 0.1), -5.0, 5.0)  # Probabilistic line change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "EnhancedRefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the RefinedAdaptiveMutationPSODE algorithm to further enhance its exploration-exploitation balance for black box optimization.", "configspace": "", "generation": 73, "fitness": 0.0959427979683449, "feedback": "The algorithm EnhancedRefinedAdaptiveMutationPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.17421716202839888, 0.20849233277087986, 0.17257291086080728, 0.09890823603914323, 0.10214886556347391, 0.08717190505422623, 0.20832677640737396, 0.17638232042005242, 0.15206537217713034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047259267824147355, 0.052088575454278696, 0.037116998458889605, 0.036710011972019174, 0.04062876758257861, 0.031319584892014585, 0.029457040248551003, 0.04568469120559915, 0.022770059091842487, 0.0419312380506186, 0.041487941470411016, 0.041439822617824196, 0.055096704802038765, 0.05641210866918933, 0.028119867354040262, 0.04113560747344891, 0.036647759011992465, 0.04137869982248321, 0.09930622366719266, 0.09180935859257466, 0.06866573503772966, 0.09027803359569464, 0.11296160780960673, 0.07127401372979403, 0.1200310406535926, 0.08745140615623181, 0.06686859681434398, 0.033174784218164444, 0.06084253564136233, 0.05046421702409243, 0.060597693275239894, 0.07302847535390633, 0.05590826807803262, 0.009358702675277941, 0.05866375200483365, 0.015138403683985002, 0.15316440172588464, 0.18583726366804654, 0.1610226073976201, 0.08989377838097334, 0.08977221290943671, 0.0853026403288355, 0.10660926325767506, 0.10042182319054882, 0.1141850530161519, 0.05328450509628824, 0.027853975939180597, 0.0308532922172019, 0.00029162872050314537, 0.027385468820209313, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1363830077212811, 0.11542113369412232, 0.12758565405705014, 0.14022908490012664, 0.14561250444808616, 0.13469850469857392, 0.17044921860048, 0.14048931940409115, 0.21192447963114036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03687194179215525, 0.06023165961275523, 0.11238752971892796, 0.0331066615918677, 0.03893907471459512, 0.05438319620670973, 0.03181621467261864, 0.06403482104294578, 0.0410989974946846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19251071004429332, 0.16622767902949998, 0.18033113495701236, 0.1547123957304053, 0.19456446090962276, 0.19695521059748555, 0.23444933276554547, 0.1921888526063008, 0.20147513408595008, 0.008613251920633225, 0.02560728524851441, 0.010476153712477232, 0.03274090846327293, 0.03367710677656288, 0.038690375181933856, 0.05111031555356693, 0.06206816073233712, 0.04986490605047089, 0.1288273080449711, 0.11988651626292524, 0.14020281372839438, 0.1261192276563674, 0.10643952406761348, 0.1256351220751285, 0.11043674968622486, 0.11034092800875261, 0.13085417598341176, 0.1528810509453551, 0.1509762771864087, 0.14436964651300677, 0.1945340302852182, 0.19339241992797473, 0.19928462577314576, 0.1509993726489176, 0.15501110277737185, 0.14691027467069961, 0.09255725174314189, 0.07975873461707528, 0.08075696797095966, 0.1516149518339298, 0.1284220017527008, 0.12873166661889102, 0.087796879647974, 0.10876953398918121, 0.1020764969186968, 0.26528247971741004, 0.2895899904938406, 0.26019758335146925, 0.2962760609861841, 0.284487138020864, 0.2868513731257776, 0.2999846960883772, 0.32197426689707975, 0.30209056676716906, 0.15482298647701243, 0.16246989132651457, 0.12179017022646221, 0.1519164257192932, 0.14263530321616802, 0.14725289231660843, 0.1494226850351199, 0.15295226624779423, 0.15360461346214271, 0.17162374227202637, 0.1356568524634313, 0.1591693650927951, 0.1193684506142868, 0.10732082466809456, 0.20014038032090475, 0.10903083896403765, 0.12519190719505402, 0.16067100437168924, 0.15907553180375766, 0.1696258588085957, 0.16464118009609208, 0.16117747591678766, 0.1599895159125716, 0.2031316037202241, 0.14258519165119032, 0.09496230790914795, 0.12225069628427865, 0.16876282327803582, 0.17243053757478322, 0.17047327498649645, 0.1923117536915907, 0.2037659255277786, 0.16850345890607898, 0.1653447953842051, 0.2117340010036488, 0.17066067042736688, 0.051813502576952164, 0.057975454564297646, 0.06011125775718773, 0.05131133394697285, 0.07880870687452513, 0.0597444411110315, 0.0787521466182356, 0.06485538277372072, 0.05488735691313995]}, "mutation_prompt": null}
{"id": "35b1e75e-e10f-46fb-9c70-61e1358156fb", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "1c601728-bc29-4304-901e-e40825434327", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "a4c80d21-d83d-4a46-b852-a134a842a729", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "6870a124-4547-4089-b754-f9450676f620", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "bf49bc9c-ec98-4b6b-a533-b03579fc893e", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "7c408131-6537-44c3-b832-d989265d8114", "solution": "import numpy as np\n\nclass LineRefinedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_val = -5.0\n        self.max_val = 5.0\n    \n    def __call__(self, func):\n        population = np.random.uniform(self.min_val, self.max_val, (self.budget, self.dim))\n        for _ in range(self.budget):\n            selected_index = np.random.randint(self.budget)\n            x, a, b, c = population[selected_index], population[np.random.randint(self.budget)], population[np.random.randint(self.budget)], population[np.random.randint(self.budget)]\n            if np.random.rand() < 0.2:\n                x = np.clip(np.random.normal(x, 0.1), self.min_val, self.max_val)  # Probabilistic line change\n            mutant = np.clip(a + np.random.rand() * (b - c), self.min_val, self.max_val)\n            trial = np.where(np.random.rand(self.dim) <= 0.5, mutant, x)\n            if func(trial) < func(x):\n                population[selected_index] = trial.copy()\n        return population", "name": "LineRefinedMetaheuristic", "description": "A novel metaheuristic algorithm, LineRefinedMetaheuristic, that introduces line changes with a 20% probability to refine the exploration-exploitation balance strategy in black box optimization.", "configspace": "", "generation": 79, "fitness": 0.08884199171370698, "feedback": "The algorithm LineRefinedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.1745754072614123, 0.1525674062611475, 0.16338818976538605, 0.18698334738657318, 0.17931735680333682, 0.18106568744905915, 0.19112656511991777, 0.18248011261773867, 0.18612335429781013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04718892392341656, 0.05599135608600847, 0.05674922350898648, 0.03404816067461647, 0.04485929200692973, 0.0404159712771327, 0.05297636491058999, 0.06099445136174475, 0.05293867566112953, 0.027002795807647972, 0.03513705480472251, 0.050836451774656455, 0.03692174501378065, 0.05453179822902565, 0.023253697809047513, 0.021201753723097183, 0.028470161548035833, 0.03059821706595811, 0.10212071461357097, 0.10788599141815391, 0.0983793543886472, 0.09238704209335569, 0.11817273544923157, 0.10774789730067857, 0.14022246667436977, 0.08885941423126609, 0.09375216477673187, 0.06617638015413863, 0.08094790809696728, 0.09774526196618172, 0.07343618669958218, 0.05523311124899377, 0.09797555980438866, 0.04789763930634361, 0.062742604616573, 0.09830638365875455, 0.14489195622415174, 0.16636300139315752, 0.11809423878434211, 0.10650553114876526, 0.09348553201409415, 0.12011178503783504, 0.12447248536057853, 0.1382561023304777, 0.09766891223883944, 0.0032525209948367495, 0.0016194267014405517, 0.02640513841288905, 0.0033016697873783363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035287545528568387, 9.999999999998899e-05, 9.999999999998899e-05, 0.06075822342808912, 0.002363066089127841, 9.999999999998899e-05, 0.010169933461988467, 9.999999999998899e-05, 0.005380539181375155, 0.011644321767266597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05520111526201621, 0.06717076893324359, 0.03701258796948537, 0.04296716516906762, 0.03759894102061534, 0.05010264493041394, 0.042704502673699074, 0.040576059110959406, 0.048397785612684485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00015926358069884294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017296578433450338, 0.21086603675584992, 0.19085732834476488, 0.2189508618746202, 0.17484298019571687, 0.1811036453226158, 0.21715116539304513, 0.19615152426721527, 0.18271202139193743, 0.17803395619257356, 0.040908381298284224, 0.05569796429006035, 0.04877691391386485, 0.04712134474941254, 0.046786722261740965, 0.037118203565164376, 0.05365933177866733, 0.04561766797212752, 0.04730951331572508, 0.13953414058486346, 0.1323487107110003, 0.15757649069396396, 0.15523203702416122, 0.13328503830721183, 0.158684697601697, 0.14676827768185208, 0.15704361331793115, 0.13990522341814815, 0.1608190971823038, 0.1602434323855061, 0.16429815303715334, 0.1590793393855503, 0.1653419597332293, 0.1688616266748879, 0.16541782639676694, 0.15567543290422037, 0.16422823828278943, 0.10683046238903349, 0.10572868211990916, 0.12113392017685365, 0.10403898854368887, 0.11571557137377908, 0.11103892567498219, 0.11406660455721107, 0.11451152413885834, 0.10024796058938956, 0.15467349115470785, 0.1457571246785685, 0.1592564922033396, 0.15649838035763475, 0.16668935332755286, 0.1592722707615598, 0.15907897396401893, 0.16937679844774522, 0.15292892632678246, 0.14197654835438256, 0.14447540482398125, 0.15386131252150137, 0.14170710265123942, 0.144788149602474, 0.1303029847157251, 0.1410281509798289, 0.1411863385447878, 0.15109706040746673, 0.14516697112542476, 0.15538374660192023, 0.15846228021083775, 0.1516104168964424, 0.1637012045917341, 0.13836021658830144, 0.17035313668500296, 0.16441025083059957, 0.14242731527308006, 0.13863242128707165, 0.12671641830349256, 0.13273844231235177, 0.1842789536253323, 0.14739862080169586, 0.20022158905415333, 0.10937641409066945, 0.14202013821558213, 0.13128629890464527, 0.1730463451421993, 0.1832761772076964, 0.1778310574154195, 0.1857431623828799, 0.17408708190665823, 0.17879830168336341, 0.19854065488413075, 0.20214515217036155, 0.18983391086570112, 0.04495027925022732, 0.05611904583118643, 0.044310620714398063, 0.04621563522890704, 0.057315558613543205, 0.06607225645753534, 0.05546372158375812, 0.05099984395679147, 0.07390727762132288]}, "mutation_prompt": null}
{"id": "c993e237-09c8-4d5f-9e4e-bea7fb4263bf", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "8b4953f2-f288-48f8-afc3-6216ffeac0fd", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "dd380bac-32e8-4d11-bbb8-db1af0426754", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "6b772ab2-8fa5-4808-8b72-919eed809229", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "153632b4-a7eb-4b09-8cc5-f4899aca1927", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "c985965b-68db-4746-a17f-b3e7e7c1f424", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "104218bb-add7-40c8-8e96-373636e7f012", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "1a0abd6b-c2eb-46b1-9f63-1d354210291d", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "53dded26-6f63-4901-bcd2-296b2b767660", "solution": "import numpy as np\n\nclass EnhancedRefinedAdaptiveMutationPSODE(RefinedAdaptiveMutationPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.line_change_prob = 0.2\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        for _ in range(self.budget):\n            population = self.de_update(population, func)\n        best_solution = min(population, key=lambda x: func(x['position']))\n        return best_solution['position']", "name": "EnhancedRefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the RefinedAdaptiveMutationPSODE algorithm to further enhance exploration-exploitation balance.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedRefinedAdaptiveMutationPSODE' object has no attribute 'initialize_population'\").", "error": "AttributeError(\"'EnhancedRefinedAdaptiveMutationPSODE' object has no attribute 'initialize_population'\")", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {}, "mutation_prompt": null}
{"id": "0c464094-b479-4279-af7a-4058899ad5fe", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "dff51964-9138-4cbc-84fc-0c3c3628fd15", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "d68a5843-6ea0-48ab-adb2-ed451745b103", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "be87fa77-db61-4e6f-84f8-cfea160dc433", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "5d18020e-d334-411c-aaa9-860ff14592cd", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "3e3d9a73-31b7-45d2-8b28-7734152711a6", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "422ed6ab-e3e1-4605-b95e-d6051ee5dfa1", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "1bc36877-11b8-4884-a49c-a1a354c36dc9", "solution": "import numpy as np\n\nclass ProbabilisticLineChangeOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                x, a, b, c = population[i], population[np.random.randint(self.population_size)], population[np.random.randint(self.population_size)], population[np.random.randint(self.population_size)]\n                if np.random.rand() < 0.2:\n                    self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n                mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n                if func(trial) < func(x):\n                    population[i] = trial.copy()\n        return population", "name": "ProbabilisticLineChangeOptimization", "description": "Implementing a Probabilistic Line Change strategy to enhance exploration and exploitation balance in black box optimization by updating individual lines with a probability of 0.2.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ProbabilisticLineChangeOptimization' object has no attribute 'population_size'\").", "error": "AttributeError(\"'ProbabilisticLineChangeOptimization' object has no attribute 'population_size'\")", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {}, "mutation_prompt": null}
{"id": "1f110a8a-fd64-497c-9e8f-421610973bb8", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "a172188d-45f2-4cc9-a0b5-09d047b08772", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
{"id": "ac02bcb7-7bcb-4916-ba4e-0f72ec90aa06", "solution": "import numpy as np\n\nclass RefinedAdaptiveMutationPSODE(AdaptiveMutationPSODE):\n    def de_update(self, population, func):\n        for i in range(self.population_size):\n            x, a, b, c = population[i]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position'], population[np.random.randint(self.population_size)]['position']\n            if np.random.rand() < 0.2:\n                self.f = np.clip(np.random.normal(self.f, 0.1), self.min_f, self.max_f)  # Probabilistic mutation rate change\n            mutant = np.clip(a + self.f * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.rand(self.dim) <= self.cr, mutant, x)\n            if func(trial) < func(x):\n                population[i]['position'] = trial.copy()\n        return population", "name": "RefinedAdaptiveMutationPSODE", "description": "Introducing probabilistic line changes in the AdaptiveMutationPSODE algorithm to refine its exploration-exploitation balance strategy.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "23a76c5a-874c-4913-bf10-d8942657122d", "metadata": {"aucs": [0.19363169755328313, 0.18493143500729048, 0.20311252657595202, 0.09993888177434251, 0.10630591118484622, 0.09442831598841817, 0.17070591712014538, 0.14132474609394563, 0.15587358498201898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04927204479913816, 0.04287591638604604, 0.04069671895667193, 0.03321198293281724, 0.028045292183468185, 0.03888298602286233, 0.03089710115330313, 0.10758495075158259, 0.05565715140198191, 0.05944137338052502, 0.0357468722766745, 0.038043852625173735, 0.01763510982179617, 0.02938739030549331, 0.03722235950736341, 0.01854936689517328, 0.030802705479223702, 0.0277277477773481, 0.06420815091545917, 0.10832273505212575, 0.07243889337271425, 0.0837473523810861, 0.09532361922830446, 0.0694963053613954, 0.09180422160273338, 0.09469238638420008, 0.10090472541509532, 0.055579707671555845, 0.027335939310003, 0.02713725981987769, 0.08922682419213657, 0.05020645228650866, 0.06573384578487274, 0.05639894545502866, 0.05495965304351935, 0.017968637671075927, 0.14981861080448322, 0.13872134843311468, 0.1417753107063845, 0.06045217651756141, 0.09692312765316169, 0.13211911284582822, 0.09043800909727684, 0.09973281193784189, 0.10896243968750241, 0.052652698260689745, 0.035748450223812345, 0.02899844798611051, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755579474477248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13225650270529243, 0.13747497038958267, 0.11106799895536801, 0.13639040578899075, 0.14131312979147093, 0.11898035488058378, 0.1919010721137221, 0.1377020596641454, 0.20009404130204533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887724640262425, 0.045386037904342036, 0.07543829839915994, 0.03772385162241043, 0.09894201064366004, 0.05259617353689683, 0.040987891065243254, 0.05818080416274429, 0.04104687561294673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18118816598742082, 0.2012090396318683, 0.18156641533197204, 0.19064729881711595, 0.18937949814304988, 0.19549292069728452, 0.254619889271263, 0.1716461044974068, 0.20794676840259463, 0.012401591138098245, 0.012361021729039967, 0.013066070535195151, 0.028647943718367208, 0.05265397006755557, 0.031726559557487044, 0.04514683590819135, 0.05518766944361575, 0.04622476830427025, 0.11620866227291249, 0.13324446165368842, 0.12200728735687993, 0.14053688540527787, 0.12512869069069932, 0.1222346125978, 0.1342120965231427, 0.11167880798348451, 0.1432484120949441, 0.16232329420295932, 0.15715917208940355, 0.14503283312558402, 0.18877448015062237, 0.18765596877567692, 0.18542324759199746, 0.14680238657426015, 0.1458581957294528, 0.14561526407151937, 0.09256814297377736, 0.08759296086803225, 0.08324897333118153, 0.15083023587601108, 0.12840317359822695, 0.14973588466597687, 0.09126491956687655, 0.10045767328688215, 0.11300290895471077, 0.2601974778216197, 0.28738141881999213, 0.3147083584089977, 0.2826454583330871, 0.29220860753260236, 0.29694061199673183, 0.30812884627752823, 0.29124916882540863, 0.32769597229856395, 0.14973017829392088, 0.14207243788481116, 0.1576214117003577, 0.15456384235777765, 0.1647610735436139, 0.1552949878740837, 0.13385936580313396, 0.15143857739962774, 0.15468855240316748, 0.16452210411549406, 0.15364579589667793, 0.14583121046299874, 0.14775743978418998, 0.1089306234390196, 0.1465790531660347, 0.12297770292381482, 0.1297756688730588, 0.16512698917666035, 0.14605464838017856, 0.1692014786152446, 0.17762523156158982, 0.1948968465387687, 0.12127714929785638, 0.1596259788728892, 0.11287777598942761, 0.1352238395916403, 0.13511576455392282, 0.17838606852775596, 0.18151582808656908, 0.18132292938104955, 0.17350419601165468, 0.18040317982183351, 0.16927282243879493, 0.19493362088298805, 0.1842972758520698, 0.1874935121557535, 0.05665937797335374, 0.06159445738429936, 0.06461028623078513, 0.06308068069161421, 0.06271964609370717, 0.06128147314015675, 0.057399482271089264, 0.062032184234467436, 0.06324959252295481]}, "mutation_prompt": null}
