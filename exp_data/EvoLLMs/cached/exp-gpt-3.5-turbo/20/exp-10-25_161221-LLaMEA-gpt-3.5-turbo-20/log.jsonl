{"id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 0, "fitness": 0.20109638362463667, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": null, "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "9d140e15-1a0b-42df-bff8-66a0b4497a6c", "solution": "import numpy as np\n\nclass DynamicHarmonySearch(HarmonySearch):\n    def __call__(self, func):\n        def dynamic_improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < self.bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = self.initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = dynamic_improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "DynamicHarmonySearch", "description": "Enhancing Harmony Search algorithm by introducing a dynamic mutation probability for refining solution strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicHarmonySearch' object has no attribute 'initialize_harmony_memory'\").", "error": "AttributeError(\"'DynamicHarmonySearch' object has no attribute 'initialize_harmony_memory'\")", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {}, "mutation_prompt": null}
{"id": "da246a28-6e40-4f99-802b-291d68142f0f", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "fd45c4fb-39d4-4b31-808a-a160e1b33db8", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01, adapt_prob=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n        self.adapt_prob = adapt_prob\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def adapt_search_space():\n            return np.random.uniform(-5.0, 5.0)\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = adapt_search_space()\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n\n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n\n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "DynamicHarmonySearch", "description": "A novel Harmony Search algorithm that incorporates a dynamic search space adaptation mechanism to enhance exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": 0.20109638362463667, "feedback": "The algorithm DynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "1ab30aba-e56c-4bcf-9218-e0e8e292d269", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "abbc7a56-fed1-4cb3-a029-625318521fe2", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "3f243e9a-a0f6-432f-8798-81fa4b0e5291", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            self.hmcr = max(0.3, self.hmcr - 0.01)  # Adaptive parameter tuning\n            self.bw = min(0.1, self.bw + 0.001)  # Adaptive parameter tuning\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "EnhancedHarmonySearch", "description": "An enhanced Harmony Search algorithm with adaptive parameter tuning for improved convergence performance.", "configspace": "", "generation": 6, "fitness": 0.12813167324909397, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.08.", "error": "", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.27343359572033676, 0.27307160947511067, 0.24050542311785061, 0.3012555608483918, 0.28636319447687764, 0.2803730321503396, 0.2808224092218887, 0.26921126537312245, 0.2791727168503424, 0.005392332278340128, 9.999999999998899e-05, 0.036743641150832285, 0.028133525986380525, 9.999999999998899e-05, 0.0038950259116996566, 0.04681061298741007, 0.004454769951621307, 9.999999999998899e-05, 0.10376338151468412, 0.10802457468212001, 0.0888594660679668, 0.10350912833979509, 0.10606082290352348, 0.10069430644608601, 0.0924379143404973, 0.11659103123024273, 0.0986473022151767, 0.08368418268014144, 0.0900254230192038, 0.09155374195033295, 0.09176023389385668, 0.0935875298693456, 0.0846354786291369, 0.10240157036502895, 0.10896854914262077, 0.07316286384552972, 0.20883908036225618, 0.16316105971072736, 0.1810768046852944, 0.157595946898213, 0.16762304158519203, 0.16196682170085241, 0.16629351239299162, 0.14964020408764755, 0.1722373732592858, 0.11124271363648863, 0.12207631031581345, 0.12489889349685868, 0.12110311895883896, 0.10859280078329736, 0.14189742866085542, 0.11160351708349514, 0.15886336279347002, 0.13249618810533992, 0.19612863476955156, 0.17286706762719317, 0.1705400865966793, 0.19645028987125768, 0.16950828102862814, 0.1603165100548709, 0.16664512562179334, 0.147601782966143, 0.14541697199032, 0.04442401825331477, 0.06927893186494016, 0.07805891810813115, 0.07390832101746125, 0.09970919222647412, 0.08803286524564669, 0.07239352762632867, 0.07133364507156403, 0.07721003657161674, 0.0712708838909617, 0.05336079413592831, 0.037633694254535444, 0.07751411085101823, 0.05532011904611267, 0.07723365522862291, 0.06816644784367942, 0.07555184349386668, 0.0649232944581154, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05767890301462886, 0.052440623601934244, 0.06954472153031366, 0.08429414757148446, 0.07820023580937285, 0.0637668085257197, 0.07173593204543138, 0.05048137650401319, 0.07507139352871073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029713981879183615, 0.0020993678066082433, 0.016534465656060093, 0.016654290511329828, 0.004644178788074327, 0.018972492886458525, 0.035384319160368105, 0.046059123309241334, 0.05731813434662003, 0.2672256205613889, 0.27498703909009936, 0.3084126111567814, 0.25594458146662147, 0.2787997280732316, 0.2516410188652267, 0.278112859344277, 0.2736005703796488, 0.27667057255501804, 0.06533417531782104, 0.062056089197352615, 0.06921063556094054, 0.06757489163108454, 0.08481734968504384, 0.07035237326094756, 0.0595916301851801, 0.07471937904606807, 0.06046453914106009, 0.13909877727407582, 0.1434633826656918, 0.148190854517819, 0.14284741867030049, 0.13173945997409442, 0.14055576804863956, 0.13120966621425956, 0.15854888823167745, 0.14904830976874783, 0.21272710075523815, 0.1902727850733129, 0.20894045280662388, 0.19526385427927384, 0.2039166488622458, 0.2063447141868725, 0.20501440605687438, 0.20401291024231005, 0.194488004901328, 0.13465977625430892, 0.14174969784635816, 0.16212862927239657, 0.14195984956658125, 0.12443077006945036, 0.1357598084472269, 0.14154632862441374, 0.15194474110461775, 0.14998167134231277, 0.16330546074631713, 0.18458499206350265, 0.15662386418737806, 0.19132789412719198, 0.1660161708151876, 0.15328356711120106, 0.16483201698860195, 0.17020734257893533, 0.1619948900748952, 0.1748781678065654, 0.1805185169935759, 0.17569769705881644, 0.17627355742341255, 0.16852350857616072, 0.1700546930102882, 0.17316950762410777, 0.17709463017570837, 0.17100831882154666, 0.2443103719598927, 0.3078971284607803, 0.32545707667534196, 0.2980504383070497, 0.2926602258543475, 0.308342344940419, 0.29353584294552504, 0.2642055798455969, 0.17577091141612577, 0.18137060446495634, 0.21949043889309372, 0.174888295467149, 0.17394676636485928, 0.2217443928367977, 0.19284107433547226, 0.20030838428896847, 0.22047077100170387, 0.1677500255520803, 0.17808785256550042, 0.1713995550765096, 0.17987702851749632, 0.18678281983213252, 0.21872036886907142, 0.17387923467775857, 0.18057545017822196, 0.19214483976526842, 0.2051034952202876, 0.06672194659596842, 0.06019078502480679, 0.05922155878099189, 0.0562583215795226, 0.06973432636300292, 0.06898018635102487, 0.06950886373168919, 0.06364588135322502, 0.06784774030162422]}, "mutation_prompt": null}
{"id": "a2c8f785-22c5-41c2-8e57-459fb853fd70", "solution": "# import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim, param=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.param = param\n\n    def __call__(self, func):\n        def initialize_population(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def update_population(population, fitnesses):\n            idx = np.argmin(fitnesses)\n            return population[idx]\n\n        pop_size = 10\n        population = initialize_population(pop_size)\n        fitness = np.apply_along_axis(func, 1, population)\n\n        for _ in range(self.budget - pop_size):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.param:\n                    new_solution[i] = np.random.choice(population)[i]\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            new_fitness = func(new_solution)\n\n            if new_fitness < np.max(fitness):\n                population = np.vstack((population, new_solution))\n                fitness = np.append(fitness, new_fitness)\n                if len(population) > pop_size:\n                    idx = np.argmax(fitness)\n                    population = np.delete(population, idx, axis=0)\n                    fitness = np.delete(fitness, idx)\n        \n        best_solution = update_population(population, fitness)\n\n        return best_solution", "name": "NovelMetaheuristic", "description": "A novel Harmony Search algorithm combining exploration and exploitation strategies for black box optimization.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {}, "mutation_prompt": null}
{"id": "fcf17b37-9bba-48b0-ad87-49323fbc7cc4", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "0d7bb1c2-b80f-42ae-be91-e60fc025295a", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "1fd2721e-c602-4424-892b-3eae1302be6b", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "cae7acfd-95bc-46b6-ad12-426ad328ee66", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "463b0755-48c5-4a0b-b234-e879d76c181f", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "56ae3e9a-aedf-44e6-8833-b962e68ccd4a", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "5df861b3-3c7c-4f26-9f32-aa6fb50a2fa6", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "9d6c7e0f-a21f-4b6d-8716-6d33dfa3fb9f", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "e177fc9e-4bfa-47a4-889b-858478757dba", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "fd39bdba-e890-41b5-9e09-5176187626b8", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "64c3d019-e1ea-4858-8b25-00c63b31172b", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "53eeab04-d151-4860-be73-f44b702e1061", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "0dcf7908-f233-4e29-8eec-27a6a8ab5e06", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "08b0c6b5-fc90-4fc6-b8cb-43a3bab58425", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "da028a9f-d645-4faf-ac7e-d223e69f5bb7", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "694e41bd-69a3-4916-8dfc-cfd5c04baccc", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "52ad0597-ee3c-4ddd-bbee-c1cdfa50231d", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "a5899d41-28dd-4f8a-89dd-24ce500ad4c3", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "abbb1e6a-534a-4ace-a732-a6cfadabb95b", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch(HarmonySearch):\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01, mutation_prob=0.2):\n        super().__init__(budget, dim, hmcr, bw)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                # Adaptive Mutation\n                if np.random.rand() < self.mutation_prob:\n                    new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search algorithm by incorporating adaptive mutation to improve exploration-exploitation balance.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_harmony_memory' is not defined\").", "error": "NameError(\"name 'initialize_harmony_memory' is not defined\")", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {}, "mutation_prompt": null}
{"id": "25087cdd-4067-4d0b-84ed-1eca918de81e", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "f2e87acf-16e7-40c5-8c89-3bf4fa815d18", "solution": "import numpy as np\n\nclass MetaGuidedHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01, meta_prob=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n        self.meta_prob = meta_prob\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n\n            if np.random.rand() < self.meta_prob:\n                # Meta-learning step to update parameters (if needed)\n\n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "MetaGuidedHarmonySearch", "description": "A novel Meta-guided Harmony Search algorithm that introduces a meta-learning component to adaptively guide the search process based on the problem landscape.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndentationError('expected an indented block', ('<string>', 41, 8, '        best_idx = np.argmin(fitness)\\n')).", "error": "IndentationError('expected an indented block', ('<string>', 41, 8, '        best_idx = np.argmin(fitness)\\n'))", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {}, "mutation_prompt": null}
{"id": "3121eb21-6314-44ec-9ea7-34e8878fa407", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "395e7bf0-8727-468a-936c-6fa2adc8b852", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "fa67296d-7dcd-402d-9201-391b41ac78c8", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "9463a4cd-6faa-47e1-85ef-0e1ab48bfbfe", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "08c64cad-ad86-4c96-ad42-cfff08e987fd", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "b0b6d7cc-e860-4413-93ae-3a22a6d5c189", "solution": "# import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n\n            if np.random.rand() < 0.2:\n                self.hmcr = min(1.0, self.hmcr + np.random.normal(0, 0.1))\n                self.bw = max(0.0, self.bw + np.random.normal(0, 0.01))\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "EnhancedHarmonySearch", "description": "Enhancing the Harmony Search algorithm's exploration and exploitation balance through adaptive fine-tuning of parameter values during runtime.", "configspace": "", "generation": 34, "fitness": 0.14586631743373474, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.14.", "error": "", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.3433334063675788, 0.28004208190156255, 0.19539359365885933, 0.3976523042919513, 0.3138865611346421, 0.17029537655916172, 0.3508343008701894, 0.3106881663399187, 0.19093449697704956, 0.0767262136435376, 0.030772185573678668, 9.999999999998899e-05, 0.06419086223570214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011174314626523518, 9.999999999998899e-05, 0.14719985928701584, 0.11447531640608899, 0.042306511982580064, 0.14729358944972049, 0.09859302366511113, 0.05901626881183386, 0.14371047833539274, 0.10917060595692796, 0.04983814520399177, 0.15946402495761192, 0.09132704919173484, 0.04106831446588621, 0.11660321826579767, 0.11292382478933105, 0.02435799431339869, 0.1270880500511966, 0.0813621354408548, 0.03431978034964578, 0.8618114120110023, 0.6991088303475761, 0.08054483547212099, 0.8670435682173344, 0.6066387038375187, 0.0999599556159344, 0.8650692949201029, 0.668168037054149, 0.08804562372193336, 0.1613640924869716, 0.16221958829350513, 0.08260924593339913, 0.1946988612462185, 0.1275963166817955, 0.10378843394407522, 0.16162537994018944, 0.14059967613721114, 0.06754781723148229, 0.20139966990381875, 0.16979562628459044, 0.16230172702776058, 0.25409320639293675, 0.14865275723460403, 0.1541544170672281, 0.200126615227476, 0.1723491480126237, 0.1601785616549547, 0.08729005605433415, 0.11594072100568942, 9.999999999998899e-05, 0.11967159405346406, 0.06876310297217192, 0.04968510632497347, 0.10250085810484688, 0.0687602449900212, 9.999999999998899e-05, 0.14301583184635747, 0.06703074373478013, 9.999999999998899e-05, 0.11196647732730747, 0.07304921446970225, 9.999999999998899e-05, 0.07814856417104166, 0.05761119998744868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05272204435230465, 0.07140460841278184, 0.0669730423888596, 0.0530030458171834, 0.06409462244886965, 0.08433883554676613, 0.03274492699035314, 0.054308229910937866, 0.06728324718935963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06062732129718584, 0.013160422232439517, 0.004034153956250508, 0.08030678896464383, 0.015427870979525915, 9.999999999998899e-05, 0.06799371984363933, 0.01940487132087254, 9.999999999998899e-05, 0.3160669077511943, 0.26565499720430064, 0.21332651508368206, 0.3127098704451913, 0.328730533411438, 0.19597034599230123, 0.30796242240157323, 0.2728549624690175, 0.2361293788227372, 0.07808404763860233, 0.081816577542971, 0.068436578669823, 0.08392142812013914, 0.06377328127977822, 0.05916579082651208, 0.10354720380863747, 0.06311995688471672, 0.046943424927604394, 0.1474460472172444, 0.1526479777038232, 0.1772473384289015, 0.1503607744347557, 0.13365892635308152, 0.16259735000560527, 0.13862560520912848, 0.16848883197782838, 0.15964418894189714, 0.2325886147348486, 0.2235198236209549, 0.16492329813597584, 0.23445890006906944, 0.1889483521593931, 0.1596112927820379, 0.256718522057815, 0.21166884520723295, 0.15745261760055385, 0.2039572070649146, 0.12595928350697616, 0.10417667303099587, 0.16626077894528302, 0.16327336416911042, 0.09873700301142418, 0.18001850049329093, 0.14281238220560755, 0.12365227658381772, 0.16744913511488502, 0.16393123504603557, 0.1607068323386689, 0.1728237533422038, 0.17537010156620547, 0.1980973066077346, 0.19121003588038732, 0.18321033377189888, 0.17433180887744515, 0.2039302039843155, 0.1917804447404381, 0.15255737151631032, 0.2270536657315636, 0.17060838309913884, 0.15316826120277782, 0.20814928425285362, 0.18851554720093278, 0.1518175804143289, 0.1782469804398974, 0.1730253216040888, 0.15800880323560818, 0.20804464308942472, 0.4093679809592703, 0.2167237101446149, 0.4986719492647489, 0.31364083955483923, 0.2058870800743734, 0.17729687016411533, 0.1560518791775155, 0.19144054447108827, 0.38915520604579623, 0.15912382328744257, 0.1691597549233802, 0.31768291055616416, 0.25348110991579065, 0.1594427742443173, 0.19199544359844145, 0.20658725624965657, 0.17857330330712207, 0.20336277998448993, 0.1806499943705201, 0.1914808678161013, 0.1775689342177551, 0.18758506425024712, 0.18514953661232414, 0.056237980770910356, 0.07438114788589845, 0.051291468269655915, 0.06687769468819338, 0.06731363926797107, 0.055110152624767594, 0.06922608637768113, 0.06321529744245513, 0.051890529483020864]}, "mutation_prompt": null}
{"id": "2171e301-d9ad-4ece-bf43-61427ada41b5", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "5627a2d7-683b-443e-b8e6-756c792b7fec", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "HarmonySearch", "description": "A novel Harmony Search algorithm that combines the exploration capability of Harmony Search with the exploitation power of a local search strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4271494084023547, 0.47050353135935497, 0.44488168369921566, 0.4771457403782444, 0.4613595369845017, 0.4512919562117762, 0.46940876235005047, 0.4268411692114671, 0.46681900601419357, 0.07827037332110576, 0.08554496493197494, 0.045482237425873095, 0.012023535122302254, 0.10310604667393197, 0.1142898361522362, 9.999999999998899e-05, 0.0828621517450614, 0.02387385275560172, 0.24282022607954645, 0.17925788237865303, 0.2105543000843335, 0.20469742068697494, 0.16440374133884395, 0.20698204016811872, 0.17629943883086108, 0.18444542850226275, 0.24342060855766723, 0.22192597638783373, 0.15594501876040268, 0.1456117805684225, 0.15813667094342798, 0.1558434064305798, 0.21594927319554258, 0.14482649353278743, 0.1614934798112323, 0.21614989480388236, 0.715799840913645, 0.7538546630553047, 0.9292112298738341, 0.821950546329861, 0.754523588639339, 0.7805133258563768, 0.9185052672869368, 0.7502794690999198, 0.9146890433712583, 0.20429299618060848, 0.21000474585554463, 0.22107243799105036, 0.2345872605152738, 0.23852666696598168, 0.23649201096250305, 0.22093322132028093, 0.19511713857724478, 0.22488150727875522, 0.21120525929831946, 0.20425424939205172, 0.17556802800673454, 0.19327176282352843, 0.26683959323443085, 0.21575481461246238, 0.20582360894064977, 0.17232055577185312, 0.1764898497902646, 0.20269939556299732, 0.13171377778955906, 0.15545036409867485, 0.1116820542660707, 0.1288061093992675, 0.19307760356774084, 0.17795631920080102, 0.14020845415140926, 0.15386115240649867, 0.1317811447946069, 0.19040389211160524, 0.13031101041333826, 0.13045631998311147, 0.1492094258848512, 0.12704977088204905, 0.1307472369040501, 0.16369592481337003, 0.12589594975487017, 9.999999999998899e-05, 0.0005281093627836908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166225777562139, 0.05167798968834536, 0.102113517363004, 0.05258157977924516, 0.04116541898480486, 0.08613274448391672, 0.10126184034051222, 0.09459607268414094, 0.06352128701810233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002803865945457673, 9.999999999998899e-05, 0.010813136897014686, 0.0007444616998072418, 9.999999999998899e-05, 0.0007026303568389292, 0.1111451020770261, 0.05356973031235868, 0.008685044109165596, 0.07728377497726235, 0.05090500618608407, 0.09546678364440608, 0.12169314928039132, 0.10680948837088056, 0.0662187852137337, 0.35934316995203586, 0.33153387160551095, 0.3862339038909762, 0.4047060941083558, 0.35802375174322165, 0.4075122150037589, 0.3490004699161281, 0.3754339094301222, 0.34199534390624053, 0.12228314354938552, 0.10675913278071314, 0.08325341619468474, 0.09915898608804874, 0.10752413883929912, 0.1150534311606074, 0.10598228709997215, 0.08908782853591679, 0.13805473939252133, 0.14425578888837676, 0.2573957739976678, 0.13810864349823937, 0.18470211390817015, 0.16564648261245407, 0.13644170150626544, 0.203027204763913, 0.1911412793909455, 0.15148251663825685, 0.19568642321490615, 0.23282831072006827, 0.2355974914994896, 0.26554995343601373, 0.27028259767476215, 0.2504629394976813, 0.23308270634926187, 0.2774425738839462, 0.2465857877984602, 0.16743764135526507, 0.193899473862861, 0.16378277871940283, 0.17336484774454874, 0.22188716213989734, 0.18409906519070474, 0.13492273407117406, 0.1302283055876865, 0.18012330623059447, 0.2050634645493481, 0.1792916035055998, 0.18313143996338666, 0.18444367611504664, 0.18857923968069323, 0.184488700374006, 0.22545968691409324, 0.18029502886732174, 0.19982542244519852, 0.1912944374063278, 0.22025759315217142, 0.20551508263072504, 0.19087579839346513, 0.3707639231565002, 0.24833894546528945, 0.21075492051030187, 0.20427314096639326, 0.1999296456803893, 0.1657625674604255, 0.5570110680240685, 0.16946621965672715, 0.5739724617570776, 0.5996830294074, 0.147726140745978, 0.16886576232634398, 0.2306132341668714, 0.1752586689654274, 0.1531943922764567, 0.16781861081992233, 0.20463357165038054, 0.16696134980097088, 0.19161293116682754, 0.21000726993551555, 0.1607549213032491, 0.18386199905101253, 0.20352072743456506, 0.1935745313718522, 0.1851037711572462, 0.19516706597814404, 0.19024557879195103, 0.192148688647789, 0.1943597628849909, 0.18048019693626227, 0.19408243956676918, 0.20301793249720523, 0.09266586823599032, 0.0695023273377996, 0.0708044227200677, 0.06836901761837821, 0.08329735412233075, 0.08995679183908722, 0.07887334348697206, 0.06761869025758427, 0.07149520743761517]}, "mutation_prompt": null}
{"id": "cd67b1bd-b929-4a2a-8275-557ec74a7195", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01, pitch_adjustment_rate=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                        # Adaptive pitch adjustment\n                        bw *= 1 + np.random.uniform(-self.pitch_adjustment_rate, self.pitch_adjustment_rate)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "AdaptiveHarmonySearch", "description": "Enhanced Harmony Search algorithm with adaptive pitch adjustment to balance exploration and exploitation for optimization in black box functions.", "configspace": "", "generation": 37, "fitness": 0.20207832101726522, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "bb5e08ad-33d2-4601-819c-473e48ce453e", "metadata": {"aucs": [0.4692169253005355, 0.40633609808365245, 0.4340827390277021, 0.4504004295456193, 0.47162081752215546, 0.510350252897019, 0.46950292228457113, 0.481763988540001, 0.5493796211506358, 0.08057662216443406, 0.10425728043614113, 0.06980433639933414, 0.0166507685476055, 0.10626332918043568, 0.20200447644335495, 0.020627243672141415, 0.08868198469214073, 0.08746251092090807, 0.22466738115156237, 0.20017616163591478, 0.22238708923840445, 0.2480819013316563, 0.16670845956572977, 0.19901998473914295, 0.18782665456130454, 0.2158757974339135, 0.1604007247469248, 0.21058735529516392, 0.1633374621847301, 0.15319270057334033, 0.188633643363735, 0.1948585817388402, 0.17648677707272653, 0.1832832812592664, 0.16150741063559182, 0.1634588701077635, 0.8339154723890755, 0.7506689603137289, 0.6499856878782984, 0.9034928071078795, 0.801722435908037, 0.8615629577626911, 0.945380480020128, 0.7990565357293651, 0.8654946329727455, 0.19030494744263182, 0.20524560935152913, 0.21101650371260972, 0.20995033740043267, 0.2091644902402381, 0.23224835204352523, 0.18594129225295297, 0.2056182500338074, 0.15645939257746744, 0.16254363390177207, 0.2536927485519297, 0.21255421294159194, 0.26975016754213943, 0.36463383657818227, 0.2716167761578787, 0.1766064514514586, 0.17534847973561407, 0.21643187939905228, 0.143642051275934, 0.12645933959962308, 0.1958103311058107, 0.12363498625615554, 0.16562353071854974, 0.16010985473338568, 0.19978925169100292, 0.13251576113696517, 0.1405357661079485, 0.13249185784175244, 0.16170418543261622, 0.10754327562571997, 0.13722081601522973, 0.16195324281865164, 0.1589852606166331, 0.13989440479505943, 0.11506550134559057, 0.1296557910901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038283664359025638, 9.999999999998899e-05, 0.1060630725325793, 0.033858260306241394, 0.05334422324357091, 0.06853568610676375, 0.028708849503986, 0.02644888877682572, 0.10437185186821774, 0.04863645025775354, 0.08149228813148368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023971274531506936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017118629696386556, 9.999999999998899e-05, 0.10454916201317732, 0.04964947736961822, 0.08805650430767686, 0.06129910379722492, 0.02471479094782225, 0.0777486594160971, 0.07411761170565245, 0.12615279262717394, 0.07170171789542235, 0.3258173109621626, 0.3684625698020295, 0.3601470135979219, 0.3596622506834003, 0.3686279511246304, 0.3576967997637793, 0.379873514547616, 0.3753742323032193, 0.3365083809045466, 0.09159072286712977, 0.11175824198702355, 0.07594042105320242, 0.09400581341141101, 0.0782207841279795, 0.11874522034210366, 0.08773935062168514, 0.10432530641980942, 0.07954240164837079, 0.18932009548245, 0.18701525536215458, 0.1610978736365627, 0.14326547679341728, 0.2187611723201366, 0.21165713097763406, 0.18145052570012699, 0.18412108356682544, 0.18298867775224603, 0.23074418191403478, 0.22495550065377423, 0.19890514779089874, 0.21765121927102182, 0.2625196734548878, 0.24873022731845063, 0.2772617675721709, 0.2638037266343386, 0.2658802210795683, 0.18680698818354646, 0.17014300007299166, 0.15539345293788553, 0.16856587762322128, 0.19486174098436382, 0.19110639290068954, 0.19156386853450535, 0.18869938522306828, 0.16109754032297274, 0.2025580206608798, 0.21637373562080098, 0.1936068101728381, 0.20312162980996196, 0.1951691114949936, 0.19758924798361233, 0.18528581551329093, 0.18461094434688508, 0.1931732800026853, 0.21807067057042184, 0.18793725170640296, 0.1907117063835715, 0.24728745040840083, 0.2171501573967901, 0.24850388558476588, 0.21558174515259332, 0.2393214667011232, 0.21872185605977623, 0.30143490778957527, 0.3767583817110417, 0.1692527401263464, 0.3848271577607004, 0.35152516040455617, 0.39595120185916455, 0.16541323999203283, 0.22759820372494832, 0.1569717482317421, 0.14932854909564353, 0.16711547501004864, 0.16849971167855382, 0.16679976047637934, 0.13304287274470716, 0.29994344279736784, 0.2198177204338817, 0.16146875083920353, 0.28473157142533756, 0.1787853826425877, 0.2033144409458878, 0.19703622716943614, 0.18540596356284245, 0.18824689584226517, 0.18910692630654846, 0.196724309865004, 0.18456693041615546, 0.18393352669710483, 0.07300314077149017, 0.0657151426125756, 0.07319974355129744, 0.11491015182182052, 0.07236494562223528, 0.07407670312180925, 0.08067663548506321, 0.09696453532267402, 0.07024884827757416]}, "mutation_prompt": null}
{"id": "c4a55202-4685-4f44-8e68-d80073f6936d", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, bw=0.01, pitch_adjustment_rate=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.bw = bw\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n\n        def improvise_harmony(pop_size, hm, bw):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = hm[np.random.choice(pop_size)][i]\n                    if np.random.rand() < bw:\n                        new_solution[i] = new_solution[i] + np.random.normal(0, 1)\n                        # Adaptive pitch adjustment\n                        bw *= 1 + np.random.uniform(-self.pitch_adjustment_rate, self.pitch_adjustment_rate)\n                else:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        pop_size = 10\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.apply_along_axis(func, 1, harmony_memory)\n        \n        for _ in range(self.budget - pop_size):\n            new_solution = improvise_harmony(pop_size, harmony_memory, self.bw)\n            new_fitness = func(new_solution)\n            if new_fitness < np.max(fitness):\n                idx = np.argmax(fitness)\n                harmony_memory[idx] = new_solution\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = harmony_memory[best_idx]\n\n        return best_solution", "name": "AdaptiveHarmonySearch", "description": "Enhanced Harmony Search algorithm with adaptive pitch adjustment to balance exploration and exploitation for optimization in black box functions.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cd67b1bd-b929-4a2a-8275-557ec74a7195", "metadata": {"aucs": [0.4692169253005355, 0.40633609808365245, 0.4340827390277021, 0.4504004295456193, 0.47162081752215546, 0.510350252897019, 0.46950292228457113, 0.481763988540001, 0.5493796211506358, 0.08057662216443406, 0.10425728043614113, 0.06980433639933414, 0.0166507685476055, 0.10626332918043568, 0.20200447644335495, 0.020627243672141415, 0.08868198469214073, 0.08746251092090807, 0.22466738115156237, 0.20017616163591478, 0.22238708923840445, 0.2480819013316563, 0.16670845956572977, 0.19901998473914295, 0.18782665456130454, 0.2158757974339135, 0.1604007247469248, 0.21058735529516392, 0.1633374621847301, 0.15319270057334033, 0.188633643363735, 0.1948585817388402, 0.17648677707272653, 0.1832832812592664, 0.16150741063559182, 0.1634588701077635, 0.8339154723890755, 0.7506689603137289, 0.6499856878782984, 0.9034928071078795, 0.801722435908037, 0.8615629577626911, 0.945380480020128, 0.7990565357293651, 0.8654946329727455, 0.19030494744263182, 0.20524560935152913, 0.21101650371260972, 0.20995033740043267, 0.2091644902402381, 0.23224835204352523, 0.18594129225295297, 0.2056182500338074, 0.15645939257746744, 0.16254363390177207, 0.2536927485519297, 0.21255421294159194, 0.26975016754213943, 0.36463383657818227, 0.2716167761578787, 0.1766064514514586, 0.17534847973561407, 0.21643187939905228, 0.143642051275934, 0.12645933959962308, 0.1958103311058107, 0.12363498625615554, 0.16562353071854974, 0.16010985473338568, 0.19978925169100292, 0.13251576113696517, 0.1405357661079485, 0.13249185784175244, 0.16170418543261622, 0.10754327562571997, 0.13722081601522973, 0.16195324281865164, 0.1589852606166331, 0.13989440479505943, 0.11506550134559057, 0.1296557910901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038283664359025638, 9.999999999998899e-05, 0.1060630725325793, 0.033858260306241394, 0.05334422324357091, 0.06853568610676375, 0.028708849503986, 0.02644888877682572, 0.10437185186821774, 0.04863645025775354, 0.08149228813148368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023971274531506936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017118629696386556, 9.999999999998899e-05, 0.10454916201317732, 0.04964947736961822, 0.08805650430767686, 0.06129910379722492, 0.02471479094782225, 0.0777486594160971, 0.07411761170565245, 0.12615279262717394, 0.07170171789542235, 0.3258173109621626, 0.3684625698020295, 0.3601470135979219, 0.3596622506834003, 0.3686279511246304, 0.3576967997637793, 0.379873514547616, 0.3753742323032193, 0.3365083809045466, 0.09159072286712977, 0.11175824198702355, 0.07594042105320242, 0.09400581341141101, 0.0782207841279795, 0.11874522034210366, 0.08773935062168514, 0.10432530641980942, 0.07954240164837079, 0.18932009548245, 0.18701525536215458, 0.1610978736365627, 0.14326547679341728, 0.2187611723201366, 0.21165713097763406, 0.18145052570012699, 0.18412108356682544, 0.18298867775224603, 0.23074418191403478, 0.22495550065377423, 0.19890514779089874, 0.21765121927102182, 0.2625196734548878, 0.24873022731845063, 0.2772617675721709, 0.2638037266343386, 0.2658802210795683, 0.18680698818354646, 0.17014300007299166, 0.15539345293788553, 0.16856587762322128, 0.19486174098436382, 0.19110639290068954, 0.19156386853450535, 0.18869938522306828, 0.16109754032297274, 0.2025580206608798, 0.21637373562080098, 0.1936068101728381, 0.20312162980996196, 0.1951691114949936, 0.19758924798361233, 0.18528581551329093, 0.18461094434688508, 0.1931732800026853, 0.21807067057042184, 0.18793725170640296, 0.1907117063835715, 0.24728745040840083, 0.2171501573967901, 0.24850388558476588, 0.21558174515259332, 0.2393214667011232, 0.21872185605977623, 0.30143490778957527, 0.3767583817110417, 0.1692527401263464, 0.3848271577607004, 0.35152516040455617, 0.39595120185916455, 0.16541323999203283, 0.22759820372494832, 0.1569717482317421, 0.14932854909564353, 0.16711547501004864, 0.16849971167855382, 0.16679976047637934, 0.13304287274470716, 0.29994344279736784, 0.2198177204338817, 0.16146875083920353, 0.28473157142533756, 0.1787853826425877, 0.2033144409458878, 0.19703622716943614, 0.18540596356284245, 0.18824689584226517, 0.18910692630654846, 0.196724309865004, 0.18456693041615546, 0.18393352669710483, 0.07300314077149017, 0.0657151426125756, 0.07319974355129744, 0.11491015182182052, 0.07236494562223528, 0.07407670312180925, 0.08067663548506321, 0.09696453532267402, 0.07024884827757416]}, "mutation_prompt": null}
{"id": "343e6bd7-b759-4f54-a6ab-13a95f189d78", "solution": "import numpy as np\n\nclass VariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n\n        return best_solution", "name": "VariableNeighborhoodSearch", "description": "Introducing Variable Neighborhood Search algorithm with multiple neighborhoods to explore different regions of the search space for efficient optimization in black box functions.", "configspace": "", "generation": 39, "fitness": 0.21790673138573802, "feedback": "The algorithm VariableNeighborhoodSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "cd67b1bd-b929-4a2a-8275-557ec74a7195", "metadata": {"aucs": [0.48641325198997587, 0.4852453034823161, 0.514506740964521, 0.504698650502145, 0.48519981298835235, 0.5037450926031934, 0.47763396281058457, 0.48048121074667927, 0.5001432103243462, 0.06785432599871688, 0.05535417149074606, 9.999999999998899e-05, 9.999999999998899e-05, 0.009050938908431672, 9.999999999998899e-05, 9.999999999998899e-05, 0.042873499398935366, 9.999999999998899e-05, 0.11386955842482382, 0.05609184863595251, 0.06796429219136246, 0.08634133799264998, 0.08323820590983888, 0.06332313673131174, 0.10869318742828149, 0.1294491009663341, 0.06829422277640351, 0.09872753406694612, 0.04193400120088975, 0.05963480015460698, 0.06499262900412361, 0.03269419646928873, 0.05844322793270007, 0.09906644475752424, 0.06950477018147883, 0.09052342125595281, 0.949320439012941, 0.9428058934692531, 0.9612128219457506, 0.9494261494040135, 0.9114900905241698, 0.9561873887766811, 0.9656895768157696, 0.9394147813838177, 0.980315383020377, 0.3844801423703581, 0.33912874652076075, 0.3888390725196905, 0.3794041819444507, 0.358111189320404, 0.3581996039999462, 0.3587353304968507, 0.36225724522451774, 0.36162806872118713, 0.2280832371388356, 0.1393780518120049, 0.21130835454123742, 0.6598735323347462, 0.21413320452198947, 0.4615377971406982, 0.5069363172034473, 0.23596918579124504, 0.5711250723589736, 0.16614239568216493, 0.13435397790896708, 0.25791303193108106, 0.22458426871294235, 0.2267233156322621, 0.19130063002808173, 0.20269172933181512, 0.20183761116758125, 0.20375744247715566, 0.2089503868072906, 0.14482620943149083, 0.1373133338211392, 0.21098947584419825, 0.20406734233044577, 0.17241810456400108, 0.1992850651238952, 0.27866794371669545, 0.1310929929904029, 0.025169332495566632, 9.999999999998899e-05, 9.999999999998899e-05, 0.11660283167212926, 9.999999999998899e-05, 0.045758100837962945, 9.999999999998899e-05, 0.006948948730003068, 0.0025667214961671014, 0.15538294609828862, 0.10925446184882837, 0.16461053629200673, 0.09937318890723112, 0.04069038531373226, 0.04209564240663999, 0.18027656958545535, 0.05347883682391963, 0.17037079134682442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008449390986352556, 0.09696961054089914, 0.05974179571592109, 0.09230416069726177, 0.10118683053143085, 0.10641349317809867, 0.09718949766054852, 0.09793840338970972, 0.09250650122126969, 0.08372858999973809, 0.49656924012724857, 0.4610829942943684, 0.46988912131457994, 0.4598212535563232, 0.4417424442029817, 0.47477644460677193, 0.46145005210438494, 0.44413424008304914, 0.46330387754918745, 0.09491485534710586, 0.09340325543394812, 0.10024683571793647, 0.11650338913961222, 0.09396979520597393, 0.07816911431541773, 0.0875741157064791, 0.10770795816742063, 0.12388767129636347, 0.18408306907233396, 0.1614859200466734, 0.21842476585588988, 0.19540235202385203, 0.1344349212728193, 0.19417167779806443, 0.1267579301296502, 0.19901426841249914, 0.3181510309636898, 0.28358380077610634, 0.18757793700500214, 0.16779724648735794, 0.25403286959879734, 0.2088649674549995, 0.11793385798861078, 0.18625856960550358, 0.13519915327170406, 0.09595942624272158, 0.184943902868004, 0.11239808781142635, 0.06493720574524409, 0.18784208352244158, 0.17015374137273265, 0.12257090636038359, 0.1882740372184687, 0.11557348495853126, 0.029743514838153295, 0.22827330509831711, 0.21619291399868668, 0.1956200300129589, 0.22414604801899363, 0.22046209617714063, 0.23661074848489339, 0.21020994005922045, 0.19576651186781113, 0.19452876512989792, 0.19077428077760317, 0.17835825882853873, 0.18961091687364773, 0.18732270261814787, 0.1952843571471744, 0.1909591274120116, 0.20379797449740744, 0.18193006979554105, 0.18232712636244885, 0.18989431034616722, 0.13750984245817144, 0.7451999376237773, 0.11523878728926262, 0.11254988986724057, 0.7640461863851487, 0.1088391572452847, 0.11536528363181753, 0.16872392638696687, 0.7031731866072417, 0.11318609392227807, 0.08331324077317426, 0.15689158700541395, 0.21405181671535878, 0.21345921718576877, 0.1692443282580538, 0.16792371176251142, 0.4943793678862637, 0.18998752864017066, 0.18266658984475947, 0.17892356167646162, 0.1876274433896704, 0.21431190334458183, 0.19285066714454213, 0.17374605540009358, 0.18451764588338515, 0.19288321989724544, 0.07748769724501126, 0.1154919371086357, 0.08816662165004896, 0.09462617407282137, 0.05552947967172417, 0.1048855052175337, 0.0635272745607417, 0.07827512942638037, 0.06147179377104073]}, "mutation_prompt": null}
{"id": "ff257669-9f8d-4bd2-8d2a-8ae326f2162d", "solution": "import numpy as np\n\nclass VariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n\n        return best_solution", "name": "VariableNeighborhoodSearch", "description": "Introducing Variable Neighborhood Search algorithm with multiple neighborhoods to explore different regions of the search space for efficient optimization in black box functions.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "343e6bd7-b759-4f54-a6ab-13a95f189d78", "metadata": {"aucs": [0.48641325198997587, 0.4852453034823161, 0.514506740964521, 0.504698650502145, 0.48519981298835235, 0.5037450926031934, 0.47763396281058457, 0.48048121074667927, 0.5001432103243462, 0.06785432599871688, 0.05535417149074606, 9.999999999998899e-05, 9.999999999998899e-05, 0.009050938908431672, 9.999999999998899e-05, 9.999999999998899e-05, 0.042873499398935366, 9.999999999998899e-05, 0.11386955842482382, 0.05609184863595251, 0.06796429219136246, 0.08634133799264998, 0.08323820590983888, 0.06332313673131174, 0.10869318742828149, 0.1294491009663341, 0.06829422277640351, 0.09872753406694612, 0.04193400120088975, 0.05963480015460698, 0.06499262900412361, 0.03269419646928873, 0.05844322793270007, 0.09906644475752424, 0.06950477018147883, 0.09052342125595281, 0.949320439012941, 0.9428058934692531, 0.9612128219457506, 0.9494261494040135, 0.9114900905241698, 0.9561873887766811, 0.9656895768157696, 0.9394147813838177, 0.980315383020377, 0.3844801423703581, 0.33912874652076075, 0.3888390725196905, 0.3794041819444507, 0.358111189320404, 0.3581996039999462, 0.3587353304968507, 0.36225724522451774, 0.36162806872118713, 0.2280832371388356, 0.1393780518120049, 0.21130835454123742, 0.6598735323347462, 0.21413320452198947, 0.4615377971406982, 0.5069363172034473, 0.23596918579124504, 0.5711250723589736, 0.16614239568216493, 0.13435397790896708, 0.25791303193108106, 0.22458426871294235, 0.2267233156322621, 0.19130063002808173, 0.20269172933181512, 0.20183761116758125, 0.20375744247715566, 0.2089503868072906, 0.14482620943149083, 0.1373133338211392, 0.21098947584419825, 0.20406734233044577, 0.17241810456400108, 0.1992850651238952, 0.27866794371669545, 0.1310929929904029, 0.025169332495566632, 9.999999999998899e-05, 9.999999999998899e-05, 0.11660283167212926, 9.999999999998899e-05, 0.045758100837962945, 9.999999999998899e-05, 0.006948948730003068, 0.0025667214961671014, 0.15538294609828862, 0.10925446184882837, 0.16461053629200673, 0.09937318890723112, 0.04069038531373226, 0.04209564240663999, 0.18027656958545535, 0.05347883682391963, 0.17037079134682442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008449390986352556, 0.09696961054089914, 0.05974179571592109, 0.09230416069726177, 0.10118683053143085, 0.10641349317809867, 0.09718949766054852, 0.09793840338970972, 0.09250650122126969, 0.08372858999973809, 0.49656924012724857, 0.4610829942943684, 0.46988912131457994, 0.4598212535563232, 0.4417424442029817, 0.47477644460677193, 0.46145005210438494, 0.44413424008304914, 0.46330387754918745, 0.09491485534710586, 0.09340325543394812, 0.10024683571793647, 0.11650338913961222, 0.09396979520597393, 0.07816911431541773, 0.0875741157064791, 0.10770795816742063, 0.12388767129636347, 0.18408306907233396, 0.1614859200466734, 0.21842476585588988, 0.19540235202385203, 0.1344349212728193, 0.19417167779806443, 0.1267579301296502, 0.19901426841249914, 0.3181510309636898, 0.28358380077610634, 0.18757793700500214, 0.16779724648735794, 0.25403286959879734, 0.2088649674549995, 0.11793385798861078, 0.18625856960550358, 0.13519915327170406, 0.09595942624272158, 0.184943902868004, 0.11239808781142635, 0.06493720574524409, 0.18784208352244158, 0.17015374137273265, 0.12257090636038359, 0.1882740372184687, 0.11557348495853126, 0.029743514838153295, 0.22827330509831711, 0.21619291399868668, 0.1956200300129589, 0.22414604801899363, 0.22046209617714063, 0.23661074848489339, 0.21020994005922045, 0.19576651186781113, 0.19452876512989792, 0.19077428077760317, 0.17835825882853873, 0.18961091687364773, 0.18732270261814787, 0.1952843571471744, 0.1909591274120116, 0.20379797449740744, 0.18193006979554105, 0.18232712636244885, 0.18989431034616722, 0.13750984245817144, 0.7451999376237773, 0.11523878728926262, 0.11254988986724057, 0.7640461863851487, 0.1088391572452847, 0.11536528363181753, 0.16872392638696687, 0.7031731866072417, 0.11318609392227807, 0.08331324077317426, 0.15689158700541395, 0.21405181671535878, 0.21345921718576877, 0.1692443282580538, 0.16792371176251142, 0.4943793678862637, 0.18998752864017066, 0.18266658984475947, 0.17892356167646162, 0.1876274433896704, 0.21431190334458183, 0.19285066714454213, 0.17374605540009358, 0.18451764588338515, 0.19288321989724544, 0.07748769724501126, 0.1154919371086357, 0.08816662165004896, 0.09462617407282137, 0.05552947967172417, 0.1048855052175337, 0.0635272745607417, 0.07827512942638037, 0.06147179377104073]}, "mutation_prompt": null}
{"id": "61d4bcef-6123-4117-ac78-d37370faa618", "solution": "import numpy as np\n\nclass VariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n\n        return best_solution", "name": "VariableNeighborhoodSearch", "description": "Introducing Variable Neighborhood Search algorithm with multiple neighborhoods to explore different regions of the search space for efficient optimization in black box functions.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "343e6bd7-b759-4f54-a6ab-13a95f189d78", "metadata": {"aucs": [0.48641325198997587, 0.4852453034823161, 0.514506740964521, 0.504698650502145, 0.48519981298835235, 0.5037450926031934, 0.47763396281058457, 0.48048121074667927, 0.5001432103243462, 0.06785432599871688, 0.05535417149074606, 9.999999999998899e-05, 9.999999999998899e-05, 0.009050938908431672, 9.999999999998899e-05, 9.999999999998899e-05, 0.042873499398935366, 9.999999999998899e-05, 0.11386955842482382, 0.05609184863595251, 0.06796429219136246, 0.08634133799264998, 0.08323820590983888, 0.06332313673131174, 0.10869318742828149, 0.1294491009663341, 0.06829422277640351, 0.09872753406694612, 0.04193400120088975, 0.05963480015460698, 0.06499262900412361, 0.03269419646928873, 0.05844322793270007, 0.09906644475752424, 0.06950477018147883, 0.09052342125595281, 0.949320439012941, 0.9428058934692531, 0.9612128219457506, 0.9494261494040135, 0.9114900905241698, 0.9561873887766811, 0.9656895768157696, 0.9394147813838177, 0.980315383020377, 0.3844801423703581, 0.33912874652076075, 0.3888390725196905, 0.3794041819444507, 0.358111189320404, 0.3581996039999462, 0.3587353304968507, 0.36225724522451774, 0.36162806872118713, 0.2280832371388356, 0.1393780518120049, 0.21130835454123742, 0.6598735323347462, 0.21413320452198947, 0.4615377971406982, 0.5069363172034473, 0.23596918579124504, 0.5711250723589736, 0.16614239568216493, 0.13435397790896708, 0.25791303193108106, 0.22458426871294235, 0.2267233156322621, 0.19130063002808173, 0.20269172933181512, 0.20183761116758125, 0.20375744247715566, 0.2089503868072906, 0.14482620943149083, 0.1373133338211392, 0.21098947584419825, 0.20406734233044577, 0.17241810456400108, 0.1992850651238952, 0.27866794371669545, 0.1310929929904029, 0.025169332495566632, 9.999999999998899e-05, 9.999999999998899e-05, 0.11660283167212926, 9.999999999998899e-05, 0.045758100837962945, 9.999999999998899e-05, 0.006948948730003068, 0.0025667214961671014, 0.15538294609828862, 0.10925446184882837, 0.16461053629200673, 0.09937318890723112, 0.04069038531373226, 0.04209564240663999, 0.18027656958545535, 0.05347883682391963, 0.17037079134682442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008449390986352556, 0.09696961054089914, 0.05974179571592109, 0.09230416069726177, 0.10118683053143085, 0.10641349317809867, 0.09718949766054852, 0.09793840338970972, 0.09250650122126969, 0.08372858999973809, 0.49656924012724857, 0.4610829942943684, 0.46988912131457994, 0.4598212535563232, 0.4417424442029817, 0.47477644460677193, 0.46145005210438494, 0.44413424008304914, 0.46330387754918745, 0.09491485534710586, 0.09340325543394812, 0.10024683571793647, 0.11650338913961222, 0.09396979520597393, 0.07816911431541773, 0.0875741157064791, 0.10770795816742063, 0.12388767129636347, 0.18408306907233396, 0.1614859200466734, 0.21842476585588988, 0.19540235202385203, 0.1344349212728193, 0.19417167779806443, 0.1267579301296502, 0.19901426841249914, 0.3181510309636898, 0.28358380077610634, 0.18757793700500214, 0.16779724648735794, 0.25403286959879734, 0.2088649674549995, 0.11793385798861078, 0.18625856960550358, 0.13519915327170406, 0.09595942624272158, 0.184943902868004, 0.11239808781142635, 0.06493720574524409, 0.18784208352244158, 0.17015374137273265, 0.12257090636038359, 0.1882740372184687, 0.11557348495853126, 0.029743514838153295, 0.22827330509831711, 0.21619291399868668, 0.1956200300129589, 0.22414604801899363, 0.22046209617714063, 0.23661074848489339, 0.21020994005922045, 0.19576651186781113, 0.19452876512989792, 0.19077428077760317, 0.17835825882853873, 0.18961091687364773, 0.18732270261814787, 0.1952843571471744, 0.1909591274120116, 0.20379797449740744, 0.18193006979554105, 0.18232712636244885, 0.18989431034616722, 0.13750984245817144, 0.7451999376237773, 0.11523878728926262, 0.11254988986724057, 0.7640461863851487, 0.1088391572452847, 0.11536528363181753, 0.16872392638696687, 0.7031731866072417, 0.11318609392227807, 0.08331324077317426, 0.15689158700541395, 0.21405181671535878, 0.21345921718576877, 0.1692443282580538, 0.16792371176251142, 0.4943793678862637, 0.18998752864017066, 0.18266658984475947, 0.17892356167646162, 0.1876274433896704, 0.21431190334458183, 0.19285066714454213, 0.17374605540009358, 0.18451764588338515, 0.19288321989724544, 0.07748769724501126, 0.1154919371086357, 0.08816662165004896, 0.09462617407282137, 0.05552947967172417, 0.1048855052175337, 0.0635272745607417, 0.07827512942638037, 0.06147179377104073]}, "mutation_prompt": null}
{"id": "06923e54-8b78-43d4-9001-7d3188078b61", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.5, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, r):\n        return self.beta0 * np.exp(-self.gamma * r**2)\n\n    def move_firefly(self, firefly, best_firefly, func):\n        r = np.linalg.norm(firefly - best_firefly)\n        beta = self.attractiveness(r)\n        epsilon = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return firefly + beta * (best_firefly - firefly) + epsilon\n\n    def __call__(self, func):\n        fireflies = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        intensities = np.array([func(firefly) for firefly in fireflies])\n        best_index = np.argmin(intensities)\n        best_firefly = fireflies[best_index]\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                if intensities[i] < intensities[best_index]:\n                    best_index = i\n                    best_firefly = fireflies[i]\n            for i in range(self.budget):\n                fireflies[i] = self.move_firefly(fireflies[i], best_firefly, func)\n                intensities[i] = func(fireflies[i])\n\n        return best_firefly", "name": "FireflyAlgorithm", "description": "Implementing Firefly Algorithm with light intensity-based movement and attractiveness for global optimization in black box functions.", "configspace": "", "generation": 42, "fitness": 0.09144843562834938, "feedback": "The algorithm FireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "343e6bd7-b759-4f54-a6ab-13a95f189d78", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "1d773118-a333-4b4c-ab00-5de1dec79d09", "solution": "import numpy as np\n\nclass EnhancedVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n                    self.neighborhoods = [neighborhood] + [n for n in self.neighborhoods if n != neighborhood]  # Update neighborhood order based on improvement\n            solution = best_solution\n\n        return best_solution", "name": "EnhancedVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search by incorporating a dynamic neighborhood selection strategy to adaptively explore different regions of the search space for improved optimization in black box functions.", "configspace": "", "generation": 43, "fitness": 0.21288217585796257, "feedback": "The algorithm EnhancedVariableNeighborhoodSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "343e6bd7-b759-4f54-a6ab-13a95f189d78", "metadata": {"aucs": [0.47904542111121196, 0.4969335383644493, 0.4931689963801291, 0.4830359883712757, 0.5000817987710211, 0.47945436787075846, 0.4865823174120806, 0.5007280967375949, 0.49061902390241074, 0.053052359742182476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08606650687514483, 9.999999999998899e-05, 9.999999999998899e-05, 0.03075877792919346, 9.999999999998899e-05, 0.07922025482392125, 0.0728446429739823, 0.04387215522109378, 0.08611322797880583, 0.08388737515745959, 0.08163245918167195, 0.0587258119335724, 0.12180014169784736, 0.1141223387658924, 0.07744271468949315, 0.09136598398154983, 0.0389094491181573, 0.06138774541745551, 0.07450460345483045, 0.06299140121323821, 0.05214292997542036, 0.08975425247451874, 0.07740943566986058, 0.9748869301865278, 0.9638741499785117, 0.9427184571451741, 0.949829867288233, 0.9392045399843532, 0.9228495038132768, 0.9547188850433588, 0.9410355510201793, 0.9650062607309571, 0.3536408385227433, 0.3457008985354897, 0.33676052457567107, 0.33667138024008914, 0.3570651134111532, 0.35768132517101425, 0.3769846167723042, 0.35404090839152336, 0.35435013798720827, 0.23103819476964538, 0.2190301156594523, 0.316286771715402, 0.5127563352873928, 0.20204081579138233, 0.21448072659609685, 0.8002699586609844, 0.23528521553594772, 0.6116840997040174, 0.24701492366265154, 0.13410508267679977, 0.134124938295748, 0.18083712628778825, 0.13584396359579665, 0.1665458394382513, 0.19769545338656347, 0.21785400659774667, 0.1733606781426975, 0.18347763280753726, 0.19194566197237906, 0.1481082193752955, 0.20262309135330503, 0.17310237195827105, 0.1876654670751664, 0.2246936137335257, 0.13383453691235714, 0.16550629048022225, 9.999999999998899e-05, 0.08392333327409374, 0.043539301003389874, 0.11208335656944235, 0.06282853914853381, 0.048791620482520726, 0.0005768244896751096, 0.031040184884681743, 0.03461418367442415, 0.07026699311670725, 0.11463973674240369, 0.1799983379009329, 0.10656595654177103, 0.03667524743803385, 0.03575448824955818, 0.15049027224849565, 0.06352119816427015, 0.06726657936376323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018679435633502939, 0.0017091525689291176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04720777502808793, 0.04606289483981818, 0.10007089712791206, 0.09531100790085179, 0.08265215774664847, 0.0762717741436516, 0.09138593952606588, 0.10525522475630877, 0.09773080297692305, 0.4383975156593337, 0.4449578343494458, 0.48217131846682093, 0.4452683313770892, 0.43839647975805707, 0.43515346211510453, 0.4330527779140372, 0.441316846979262, 0.4546388700094742, 0.07308407919726778, 0.09058762516879837, 0.08102365690190838, 0.06835337072078951, 0.0735166986551492, 0.08973926298011536, 0.11967121697122074, 0.14400147682679076, 0.10765769486853172, 0.2063734071391301, 0.15609080959027155, 0.19529771769720505, 0.13057924822232758, 0.18407955819464528, 0.17916190327060832, 0.12385414917858328, 0.3335147035797089, 0.18623201653250676, 0.18991037241879904, 0.24478561327415704, 0.14133741801688315, 0.24217073028788205, 0.27878340092199516, 0.11714143310441982, 0.21856640016423712, 0.13267608966485955, 0.11234646850665908, 0.23038605947273905, 0.16280007481458758, 0.0633986287403775, 0.23955190247087077, 0.1946405778608008, 0.09726220154199838, 0.1837430698402085, 0.10853502475750898, 0.04874752673131555, 0.22832079537994088, 0.21353274397859168, 0.2485121200952095, 0.18901094204855284, 0.2004339451468321, 0.20836128368282192, 0.23467952379588675, 0.17840018214045106, 0.25471802221654716, 0.1937611876375831, 0.18644225629148647, 0.19406542274910987, 0.2018281601906613, 0.2564246606417475, 0.1813965481511709, 0.18831916334490018, 0.173744243307419, 0.18334420711808452, 0.1897180664607524, 0.1377392895466686, 0.09775606941074766, 0.1741956704891212, 0.11258831429617255, 0.7542783139577315, 0.10876291881757183, 0.11537060785925679, 0.1676044448144285, 0.6009444519439784, 0.1133805460252757, 0.08326517878345419, 0.15704692480024207, 0.21403967869276574, 0.2136539710344042, 0.1690625470146444, 0.16702439176031125, 0.4936943400422066, 0.18998752864017066, 0.19216450694710419, 0.18355612282156863, 0.18057297650669446, 0.20103087466674507, 0.20549963972785656, 0.17806499835195377, 0.1784379650286666, 0.19971524447998035, 0.08819493907677112, 0.07591001719991086, 0.0842086280537393, 0.06345556109056649, 0.06970445767926015, 0.08727130864379473, 0.10236909059438515, 0.0698892377362541, 0.07875386855561972]}, "mutation_prompt": null}
{"id": "5333ed45-514b-44ae-b2a0-6be5fa4da747", "solution": "import numpy as np\n\nclass FireworkAlgorithm:\n    def __init__(self, budget, dim, num_sparks=5, explosion_radius=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_sparks = num_sparks\n        self.explosion_radius = explosion_radius\n\n    def __call__(self, func):\n        def generate_spark(center):\n            return np.clip(center + np.random.uniform(-self.explosion_radius, self.explosion_radius, self.dim), -5.0, 5.0)\n\n        center = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = center\n        best_fitness = func(center)\n\n        for _ in range(self.budget):\n            sparks = [generate_spark(center) for _ in range(self.num_sparks)]\n            spark_fitness = [func(spark) for spark in sparks]\n            best_spark_index = np.argmin(spark_fitness)\n            if spark_fitness[best_spark_index] < best_fitness:\n                best_solution = sparks[best_spark_index]\n                best_fitness = spark_fitness[best_spark_index]\n            center = best_solution\n\n        return best_solution", "name": "FireworkAlgorithm", "description": "Introducing the Firework Algorithm that simulates the explosion of fireworks to explore diverse regions of the search space efficiently for black box function optimization.", "configspace": "", "generation": 44, "fitness": 0.18459524547311493, "feedback": "The algorithm FireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "343e6bd7-b759-4f54-a6ab-13a95f189d78", "metadata": {"aucs": [0.37587025981056044, 0.3900656566169449, 0.3674917398294668, 0.3967372408722708, 0.3778795816618372, 0.39465308775431507, 0.36823258708404716, 0.38804098963434475, 0.3809003018735697, 0.027142048421279097, 9.999999999998899e-05, 9.999999999998899e-05, 0.005402259782500418, 0.0023463025173842134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07879369944796966, 0.05528326755111357, 0.01260111239123185, 0.09814703046019801, 0.039573652497958745, 0.060739765924288314, 0.07512471465669146, 0.04612603707591301, 0.060155932556464675, 0.08294254483907448, 0.041646699976518375, 0.01795965720550352, 0.049912651484211756, 0.07933035833132329, 0.048928931782572516, 0.09941837663749975, 0.04993790781633911, 0.05067414663558989, 0.9507546757548846, 0.9522770220108362, 0.9289295472189588, 0.932568280015437, 0.9277688563807452, 0.9354930109177994, 0.95748257656045, 0.9540788166494378, 0.9683294965328988, 0.2537804102121126, 0.2326498481377287, 0.2635757132779589, 0.29930778249427237, 0.2625711177616761, 0.24622538761587254, 0.2669050235619115, 0.25824318005010305, 0.2513672563109107, 0.2111387115331227, 0.13759670544595626, 0.11769123834984951, 0.32765954123438146, 0.21591774778432493, 0.22351262938088057, 0.28668591043051495, 0.3037268675950495, 0.17779226565778206, 0.10489407646685067, 0.12668077340558814, 0.15923665600480985, 0.14015932530914377, 0.14693230573880123, 0.14548326588724703, 0.1536306143769114, 0.1618906655286142, 0.15247406665109464, 0.1494313999355933, 0.12218645165339836, 0.12552850829623763, 0.15638979638834716, 0.13187238100276333, 0.1668868007512616, 0.16092961498192526, 0.11531966826138706, 0.14303151414287862, 9.999999999998899e-05, 0.0028862459308409694, 0.02250529755020103, 0.05346231110912736, 0.012254787425216795, 0.021583843635198496, 0.00027114227546987113, 0.00015361849816286632, 0.0343934055330436, 0.16103234788261778, 0.12044333226367032, 0.15231058504903872, 0.07969747110137837, 0.060416749543828696, 0.050341301075231604, 0.18473087310222014, 0.07668556355914169, 0.17463939943190565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05767359361013913, 0.07912196155277107, 0.06786420557057427, 0.08352267862306906, 0.08111297810544005, 0.10518081648500044, 0.06992725841272263, 0.08397375456506029, 0.06315582611499981, 0.3690834546957652, 0.3561876669745667, 0.3730923040540439, 0.3766397284103069, 0.35846503964583554, 0.3765984120551258, 0.3631573116766794, 0.38978198032627553, 0.4088356743533169, 0.10490824639049845, 0.07061859963771533, 0.0882585623768819, 0.06078266981219316, 0.10164507421892433, 0.07180059582694864, 0.06288268494789773, 0.06926910438883715, 0.08895412119736212, 0.2005672159740568, 0.129509941068208, 0.14795323608455602, 0.18514906517184282, 0.14777142754676753, 0.14224284730937198, 0.13881665288978273, 0.15573167378160901, 0.1515328375094971, 0.2543747178246364, 0.20175315684935702, 0.1498209579116354, 0.2661232321800302, 0.13962728956435988, 0.11540300773255219, 0.1560007491403983, 0.19408148819462134, 0.09428895580302088, 0.19416505362133885, 0.04709602887840303, 0.030327343768300152, 0.1576078704640278, 0.21893704192864893, 0.09247737980206583, 0.1715825802706228, 0.08196400412013916, 0.041404584681990264, 0.18890782861557875, 0.18758785805820544, 0.20376348245440246, 0.2155646775995831, 0.20674992549066318, 0.2070714301137625, 0.2435089788972774, 0.22128787218379764, 0.18481775992176108, 0.17216858389853695, 0.19299821834364983, 0.1669308988937308, 0.161352782165315, 0.1983840606363202, 0.17479610614220187, 0.1672697489522752, 0.20061217987872082, 0.17764799320065972, 0.1885297681775655, 0.13679415062866906, 0.5679841419520544, 0.17339704424218727, 0.11217579303238767, 0.06183331967689987, 0.10854952055889278, 0.11515434585886852, 0.168691267328546, 0.4923400829002993, 0.11335939939060669, 0.08288911279656808, 0.15641385156037668, 0.21240568687324934, 0.21196205171170812, 0.5270453194241946, 0.16682158210242648, 0.4497282077234971, 0.19480190546598375, 0.1788352769474414, 0.1870541107827277, 0.18850309220092665, 0.18655613308172247, 0.18797292353724193, 0.17736653095965227, 0.1892654288277127, 0.18446951791045563, 0.10193020015905951, 0.0891035181028974, 0.0716707232906374, 0.08437373165846218, 0.05133043404079274, 0.10394439067550598, 0.10942518954707414, 0.06629600659921486, 0.07491991116510255]}, "mutation_prompt": null}
{"id": "5b75f52e-7904-482f-9c3c-75bec31b3706", "solution": "import numpy as np\n\nclass VariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n\n        return best_solution", "name": "VariableNeighborhoodSearch", "description": "Introducing Variable Neighborhood Search algorithm with multiple neighborhoods to explore different regions of the search space for efficient optimization in black box functions.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "343e6bd7-b759-4f54-a6ab-13a95f189d78", "metadata": {"aucs": [0.48641325198997587, 0.4852453034823161, 0.514506740964521, 0.504698650502145, 0.48519981298835235, 0.5037450926031934, 0.47763396281058457, 0.48048121074667927, 0.5001432103243462, 0.06785432599871688, 0.05535417149074606, 9.999999999998899e-05, 9.999999999998899e-05, 0.009050938908431672, 9.999999999998899e-05, 9.999999999998899e-05, 0.042873499398935366, 9.999999999998899e-05, 0.11386955842482382, 0.05609184863595251, 0.06796429219136246, 0.08634133799264998, 0.08323820590983888, 0.06332313673131174, 0.10869318742828149, 0.1294491009663341, 0.06829422277640351, 0.09872753406694612, 0.04193400120088975, 0.05963480015460698, 0.06499262900412361, 0.03269419646928873, 0.05844322793270007, 0.09906644475752424, 0.06950477018147883, 0.09052342125595281, 0.949320439012941, 0.9428058934692531, 0.9612128219457506, 0.9494261494040135, 0.9114900905241698, 0.9561873887766811, 0.9656895768157696, 0.9394147813838177, 0.980315383020377, 0.3844801423703581, 0.33912874652076075, 0.3888390725196905, 0.3794041819444507, 0.358111189320404, 0.3581996039999462, 0.3587353304968507, 0.36225724522451774, 0.36162806872118713, 0.2280832371388356, 0.1393780518120049, 0.21130835454123742, 0.6598735323347462, 0.21413320452198947, 0.4615377971406982, 0.5069363172034473, 0.23596918579124504, 0.5711250723589736, 0.16614239568216493, 0.13435397790896708, 0.25791303193108106, 0.22458426871294235, 0.2267233156322621, 0.19130063002808173, 0.20269172933181512, 0.20183761116758125, 0.20375744247715566, 0.2089503868072906, 0.14482620943149083, 0.1373133338211392, 0.21098947584419825, 0.20406734233044577, 0.17241810456400108, 0.1992850651238952, 0.27866794371669545, 0.1310929929904029, 0.025169332495566632, 9.999999999998899e-05, 9.999999999998899e-05, 0.11660283167212926, 9.999999999998899e-05, 0.045758100837962945, 9.999999999998899e-05, 0.006948948730003068, 0.0025667214961671014, 0.15538294609828862, 0.10925446184882837, 0.16461053629200673, 0.09937318890723112, 0.04069038531373226, 0.04209564240663999, 0.18027656958545535, 0.05347883682391963, 0.17037079134682442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008449390986352556, 0.09696961054089914, 0.05974179571592109, 0.09230416069726177, 0.10118683053143085, 0.10641349317809867, 0.09718949766054852, 0.09793840338970972, 0.09250650122126969, 0.08372858999973809, 0.49656924012724857, 0.4610829942943684, 0.46988912131457994, 0.4598212535563232, 0.4417424442029817, 0.47477644460677193, 0.46145005210438494, 0.44413424008304914, 0.46330387754918745, 0.09491485534710586, 0.09340325543394812, 0.10024683571793647, 0.11650338913961222, 0.09396979520597393, 0.07816911431541773, 0.0875741157064791, 0.10770795816742063, 0.12388767129636347, 0.18408306907233396, 0.1614859200466734, 0.21842476585588988, 0.19540235202385203, 0.1344349212728193, 0.19417167779806443, 0.1267579301296502, 0.19901426841249914, 0.3181510309636898, 0.28358380077610634, 0.18757793700500214, 0.16779724648735794, 0.25403286959879734, 0.2088649674549995, 0.11793385798861078, 0.18625856960550358, 0.13519915327170406, 0.09595942624272158, 0.184943902868004, 0.11239808781142635, 0.06493720574524409, 0.18784208352244158, 0.17015374137273265, 0.12257090636038359, 0.1882740372184687, 0.11557348495853126, 0.029743514838153295, 0.22827330509831711, 0.21619291399868668, 0.1956200300129589, 0.22414604801899363, 0.22046209617714063, 0.23661074848489339, 0.21020994005922045, 0.19576651186781113, 0.19452876512989792, 0.19077428077760317, 0.17835825882853873, 0.18961091687364773, 0.18732270261814787, 0.1952843571471744, 0.1909591274120116, 0.20379797449740744, 0.18193006979554105, 0.18232712636244885, 0.18989431034616722, 0.13750984245817144, 0.7451999376237773, 0.11523878728926262, 0.11254988986724057, 0.7640461863851487, 0.1088391572452847, 0.11536528363181753, 0.16872392638696687, 0.7031731866072417, 0.11318609392227807, 0.08331324077317426, 0.15689158700541395, 0.21405181671535878, 0.21345921718576877, 0.1692443282580538, 0.16792371176251142, 0.4943793678862637, 0.18998752864017066, 0.18266658984475947, 0.17892356167646162, 0.1876274433896704, 0.21431190334458183, 0.19285066714454213, 0.17374605540009358, 0.18451764588338515, 0.19288321989724544, 0.07748769724501126, 0.1154919371086357, 0.08816662165004896, 0.09462617407282137, 0.05552947967172417, 0.1048855052175337, 0.0635272745607417, 0.07827512942638037, 0.06147179377104073]}, "mutation_prompt": null}
{"id": "0a42525f-448b-46b0-b1d4-eaf354b71e39", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            self.neighborhoods = [neighborhood * 0.9 if neighbor_fitness < best_fitness else neighborhood * 1.1 for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search by introducing adaptive neighborhood sizes based on individual performance to improve exploration-exploitation balance in optimization.", "configspace": "", "generation": 46, "fitness": 0.11526610767951369, "feedback": "The algorithm AdaptiveNeighborhoodSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "343e6bd7-b759-4f54-a6ab-13a95f189d78", "metadata": {"aucs": [0.22152484014230567, 0.2253185330388453, 0.16989390549958627, 0.22425859378225033, 0.20966121652844527, 0.23492297205207302, 0.17018983784638864, 0.17781000760455024, 0.18518006251632113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06309835351378801, 0.03817459661212885, 0.006766931986985414, 0.029534879613674403, 0.007947372838366551, 0.0003356714616167267, 0.020972738493373666, 0.02866837572485692, 0.01838129559071333, 0.06872286342977263, 0.01603391783997654, 9.999999999998899e-05, 0.03162428435197817, 0.0015658489403401754, 0.017297441608412956, 0.021920850017279725, 9.999999999998899e-05, 0.041512991720887515, 0.9910488603082873, 0.9905979334722144, 0.9918297411779079, 0.9842356727911904, 0.9861502664950648, 0.9884579277884379, 0.9923842345029806, 0.988432217444429, 0.9928738977889539, 0.09006863956813482, 0.06156788722758921, 0.06148811976040358, 0.04431008327818364, 0.05704145615443723, 0.03570354010185761, 0.05831729022806609, 0.041130899334143045, 0.06284040607266228, 0.11594593602928815, 0.11446750545376927, 0.11228368518661369, 0.12352558972096017, 0.15255668430696245, 0.18311947801796435, 0.05985348143091218, 0.11599289233458954, 0.10517795376377892, 9.999999999998899e-05, 0.01842707643795527, 9.999999999998899e-05, 9.999999999998899e-05, 0.0060027474802951675, 9.999999999998899e-05, 0.03847726430858256, 9.999999999998899e-05, 9.999999999998899e-05, 0.0711707095132087, 0.06967537935645829, 9.999999999998899e-05, 0.08650922701982744, 0.05288408522922472, 9.999999999998899e-05, 0.021420736408949037, 0.11064200261827539, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026941033643410273, 0.022452036238875372, 9.999999999998899e-05, 0.033743981869536976, 0.05205788017089019, 0.012810937766152386, 0.013137486737545667, 0.01282886033510966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2166344453218032, 0.21899781252408734, 0.16100024945747826, 0.17963827373399566, 0.25552378435535594, 0.19063011178871636, 0.2313448509537923, 0.22380986326639363, 0.23292274815229408, 0.030950348157892438, 0.037045996461953834, 0.03153554524456159, 0.03607350121115982, 0.04063695813087265, 0.027317080303623675, 0.04921387782084563, 0.05613651243519924, 0.034633949141769316, 0.09304667608539019, 0.10920000064447799, 0.09553263786956845, 0.0878757715984646, 0.10771870348551038, 0.10201482465082612, 0.08492345889134156, 0.15061738117406454, 0.0919177153506111, 0.11988943737085522, 0.14713525126440108, 0.10695697582734798, 0.20183911989698766, 0.13127162330162645, 0.12038925806581624, 0.13375105948219557, 0.10370820061464348, 0.1308966574253987, 0.11622799517732851, 0.08742355560956372, 0.1043424694884677, 0.08370469045735285, 0.075772067472757, 0.06646251504939793, 0.10250450248143439, 0.07679743363436486, 0.0839783427345212, 0.13844595025728557, 0.1585380668512445, 0.10553158155143405, 0.12672715025206782, 0.1223552097769861, 0.1594470067786895, 0.1303011249519761, 0.1372516084827201, 0.13028492454050755, 0.14605964839524366, 0.13453341249377593, 0.1536337797104963, 0.1534868826625423, 0.1871103199193267, 9.999999999998899e-05, 0.1486868281911371, 0.15754906691629744, 0.1038440064336219, 0.17124473154349384, 0.10195041541616334, 0.16376230494677968, 0.2116863432948689, 0.07659536550196011, 0.1443111853400122, 0.10244344005032668, 0.1103512088432046, 0.11199975415241537, 0.20153250569145698, 0.07708971968950973, 0.06779932021940971, 0.10395218180497667, 0.11940265829005658, 0.10582640319176173, 0.07818732042259147, 0.10992032160298437, 0.12276762439785471, 0.13936203017719584, 0.16278592900512867, 0.14937922273384774, 0.16461149366015848, 0.15228860339860328, 0.15010468745408856, 0.17328240225971636, 0.16262464431378176, 0.15459488361382667, 0.04183907068608772, 0.02930166353927144, 0.06271188170293751, 0.041732106115736856, 0.0518807254874144, 0.03760674715913337, 0.03246876157440515, 0.020221379196184164, 0.039227312936752634]}, "mutation_prompt": null}
{"id": "35d84088-396f-4fa9-94bb-8a750a057bce", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n        neighborhoods = [0.1, 0.5, 1.0]\n\n        for _ in range(self.budget):\n            for neighborhood in neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            best_neighbors = np.argsort([func(generate_neighbor(solution, n)) for n in neighborhoods])\n            neighborhoods = np.clip(np.array(neighborhoods) * (1 + (0.1 if best_neighbors[0] > 1 else -0.1)), 0.1, 1.0)\n            solution = best_solution\n\n        return best_solution", "name": "AdaptiveNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation in the search space for improved optimization.", "configspace": "", "generation": 47, "fitness": 0.16562975622786363, "feedback": "The algorithm AdaptiveNeighborhoodSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "343e6bd7-b759-4f54-a6ab-13a95f189d78", "metadata": {"aucs": [0.5123412565237888, 0.5183712862925853, 0.5491723281850399, 0.4983692442783252, 0.5045677815308611, 0.5084239547310945, 0.48919045790101523, 0.4933967954724009, 0.5134627065978553, 0.06554251225116625, 0.003400855441450079, 9.999999999998899e-05, 9.999999999998899e-05, 0.012434174938809717, 9.999999999998899e-05, 9.999999999998899e-05, 0.010710898172333283, 9.999999999998899e-05, 0.04246679509752371, 9.999999999998899e-05, 9.999999999998899e-05, 0.03326503612736209, 9.999999999998899e-05, 0.023410192597027923, 0.0363284437947714, 9.999999999998899e-05, 9.999999999998899e-05, 0.065649542521795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0040322178917086005, 9.999999999998899e-05, 9.999999999998899e-05, 0.7181396745114978, 0.6112089961673506, 0.6903073845534378, 0.7606414419537988, 0.5542089052302724, 0.8440323140520654, 0.6321994687641375, 0.7583030280704761, 0.7473651540103277, 0.3820930349453865, 0.3269019985246656, 0.3494858066058847, 0.3564837550280706, 0.36275229678221255, 0.32066891197380254, 0.3573487220160432, 0.327210567665535, 0.37358427771297265, 0.10442264917611987, 0.07729631231421885, 0.022900776921631727, 0.06802168664352048, 9.999999999998899e-05, 0.009006829176573583, 0.06415423169727053, 0.0320414747944735, 0.00249598209551527, 0.2538587649331244, 0.19743572947295251, 0.18786769703657824, 0.16879119423262234, 0.17954195583659271, 0.19945259579311037, 0.2051232719412741, 0.20948375909740857, 0.2196577825988113, 0.22645321726305379, 0.17865049845616854, 0.1347417904263568, 0.21155184100338786, 0.18989178622055003, 0.183759222295252, 0.21363109484164367, 0.20083488897295554, 0.18742373989020344, 9.999999999998899e-05, 9.999999999998899e-05, 0.08810036513873143, 0.0705151888449842, 0.001515936264031681, 0.0840385864836577, 0.0004041862940026286, 9.999999999998899e-05, 0.03840369961532575, 0.13334737939663355, 0.07349339471101246, 0.16196157631966868, 0.07010674166986897, 0.02139193989906274, 0.02812619855657794, 0.15847856634158974, 0.023699422306393547, 0.06405099374676793, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003836389395662443, 9.999999999998899e-05, 9.999999999998899e-05, 0.007481551100512851, 9.999999999998899e-05, 0.0038669688331532948, 0.07992281172741078, 0.14992484869955802, 0.06016410144542439, 0.08727201405911944, 0.16176230772209188, 0.14948503558955584, 0.08740653034191004, 0.08394743701068452, 0.08810510628347878, 0.49464745891559647, 0.4576651599074447, 0.45995578404819404, 0.45590474882152143, 0.43456380800333394, 0.4679853880997783, 0.47601914325981665, 0.46077260380323914, 0.4417367279026019, 0.014001294841606393, 9.999999999998899e-05, 9.999999999998899e-05, 0.0050259441881150835, 0.011335699139722988, 0.015434349837888495, 0.06110821921562315, 0.029003636725479898, 9.999999999998899e-05, 0.10893394264860545, 0.16087792385742983, 0.11727883998400324, 0.13440716165960143, 0.16000294987635721, 0.15043951913581755, 0.05792033272500885, 0.16742286144787655, 0.0679958904773037, 0.1255486881376302, 0.12857054229435794, 0.10806658937523772, 0.1949821769323894, 0.09418367533014993, 0.1170810805988467, 0.14129670875719913, 0.10289018827596297, 0.09497323373931099, 0.04692951718739147, 0.03846605930500013, 0.036611278591542784, 0.1192274772983909, 0.015865864357557213, 0.062332389601100324, 0.0727778231653976, 0.01269252264585341, 0.029783881228101383, 0.16157446199397396, 0.11254106594769686, 0.13699455196600463, 0.18473304078212538, 0.15603722803387643, 0.10898615244597609, 0.19312380343560243, 0.1321399309350727, 0.12962008337581432, 0.17532927411945365, 0.1564529422283213, 0.16026296624215697, 0.15630502609193753, 0.17650970540219335, 0.18474453684770664, 0.1595522307791376, 0.16317692258248806, 0.172569509498254, 0.18985480353280892, 0.1371244884160422, 0.09838406608129113, 0.0767222375962976, 0.11208225230590996, 0.7703917452819329, 0.10854466042055844, 0.11536589120180796, 0.1675954858613099, 0.6157929183123587, 0.11306778499346803, 0.08276519095824753, 0.15338557371702177, 0.20712415287081676, 0.03584288456665086, 0.16922148734432718, 0.05924942275649214, 0.452242804933799, 0.20915164390565477, 0.19464355425892632, 0.20126654936078792, 0.19046561096822, 0.1847640331946213, 0.1842098095650445, 0.2001707160250099, 0.18683426308161766, 0.18489246183745756, 0.048031729128277245, 0.021655176776050222, 0.05154942405117713, 0.04418544932701374, 0.02153407496292381, 0.036899583364556565, 0.0471954816988307, 0.024061948977205483, 0.03661319568975341]}, "mutation_prompt": null}
{"id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 48, "fitness": 0.26840286262402774, "feedback": "The algorithm AdaptiveVariableNeighborhoodSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "343e6bd7-b759-4f54-a6ab-13a95f189d78", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "72428c68-47b7-4bfe-bb8c-944402f21806", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "761bb817-080c-4a32-99b6-9d32944d84b4", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "83a7d375-5c22-4868-a96f-17f1c3743ef8", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "b62ba69d-3099-47e0-901a-3fdf3cd269cd", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "4a4f2b44-f2c9-492c-b010-02995488e7c0", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "1e234e37-b714-44ad-8c76-0a8511ff90fd", "solution": "import numpy as np\n\nclass EnhancedVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n            \n            # Individual line refinement\n            if np.random.rand() < 0.2:\n                best_solution = best_solution + np.random.uniform(-0.1, 0.1, self.dim)\n\n        return best_solution", "name": "EnhancedVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search by integrating dynamic neighborhood adaptation and individual line refinement for enhanced optimization performance.", "configspace": "", "generation": 54, "fitness": 0.15459528341969683, "feedback": "The algorithm EnhancedVariableNeighborhoodSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.3204526827926809, 0.4138501310635456, 0.4560496462376813, 0.4051100607291621, 0.4049917399075189, 0.4181426657641689, 0.3822827174745618, 0.4064032819613781, 0.40277253899786636, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037247996259222926, 0.023970894393627318, 0.020229507937413627, 0.05424758773196514, 0.10400601503421802, 0.026221567503727616, 0.04507298821235528, 0.10470534541168108, 0.03127292192894526, 0.09427025227354646, 0.07467383866683008, 0.017719748339347863, 0.05579480606040832, 0.041918957715838756, 0.02460745307592571, 0.03271267858713112, 0.06731191702066297, 0.013593013489173411, 0.9786664457566723, 0.9584605176548061, 0.1874292740119431, 0.10691408311138839, 0.1860500502977347, 0.9610266765538816, 0.9062725800648959, 0.21047058704045618, 0.1665815926963602, 0.26956949155102694, 0.13673022277684377, 0.2379979963512926, 0.27131976204858943, 0.2077440686490004, 0.2763275070824518, 0.27514490854160256, 0.235003431555329, 0.33348362441348267, 0.17313601102531762, 0.20125829271279339, 0.1384685746209836, 0.2843196449428237, 0.18327153028015797, 0.20868468434659848, 0.09488255214364727, 0.11628129958099487, 0.13374098329613682, 0.15150969211812404, 0.1417385698771162, 0.1453474013221827, 0.1140294021815016, 0.13742669141827168, 0.16265034553451752, 0.16615431634369449, 0.12882176210424456, 0.15637609131608465, 0.15640467620700005, 0.13035299334882167, 0.12858463069742954, 0.14261690061797416, 0.12819458354959334, 0.12604067519814743, 0.1288934836224629, 0.15131280975857864, 0.1441077563432095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0695261383502167, 0.04239817599894491, 0.17896020316596783, 0.06348530456847179, 0.012580550078654995, 0.01529169727666646, 0.13370290200527601, 0.016798935091027145, 0.07917533340402538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06426477260852459, 0.07759303271842533, 0.04473457683921245, 0.06860106681116707, 0.06581553256147965, 0.07577700471474669, 0.06067446241309593, 0.08124602585469443, 0.08079467206210722, 0.4052526876242223, 0.33009607843892996, 0.3551536590312774, 0.3635194727288342, 0.3224483227761783, 0.387423451401652, 0.40383676791353684, 0.36032323855734927, 0.3990843349561176, 0.037813280123480064, 0.06437803789225127, 0.0025112916983711653, 0.028077154486010336, 0.05665530620900905, 0.11860148001769377, 0.02418162264603252, 0.05056320364507916, 0.0541596863197461, 0.28799132875390265, 0.22646797951192033, 0.20409470827728893, 0.09440875802744808, 0.13891477017333254, 0.13227975162832206, 0.1697895812208049, 0.15293789691508886, 0.2306400813590741, 0.1312292211957481, 0.15120885560889696, 0.11047123631455635, 0.16430950986232584, 0.1664435918620606, 0.11144960212485422, 0.15539516915701113, 0.10522925185342902, 0.09211292095237422, 0.06442720486448084, 0.045729584991270555, 0.035790477088025185, 0.19353861198357536, 0.10259925819312121, 0.09720575448289259, 0.19013418265130033, 0.08304341555557126, 0.023739889628291322, 0.15249944722152375, 0.23694155612159384, 0.13074246846397475, 0.1961948153771499, 0.16683238477157214, 0.16263242517429755, 0.16180996312326457, 0.18707058541075716, 0.19631303548436652, 0.18030088568425795, 0.20149290591198743, 0.1691392307321703, 0.17482474986637864, 0.17877011916634145, 0.1752850057046379, 0.1700006663647715, 0.19008060343840483, 0.18370475234788042, 0.1880017024876397, 0.136644575786257, 0.5821878021960923, 0.11526405838486897, 0.1983909639708148, 0.5671353854157121, 0.10874016691930533, 0.11380886333902895, 0.16871207497929375, 0.3770420824382432, 0.1106138413129032, 0.08297143393160478, 0.16964786441579816, 0.2016995419660168, 0.20868131332866457, 0.1699906685746555, 0.16682446102353277, 0.17945587858277434, 0.17716021574645913, 0.17196537860005046, 0.17863531592027626, 0.17902131612344985, 0.1873644528773376, 0.22417457336863933, 0.1849353079956847, 0.19456504464683277, 0.17330844392918154, 0.036202251945776864, 0.09808488625193823, 0.03172686512180245, 0.06909222359285394, 0.06289882105229294, 0.06547643310166318, 0.06352380574127459, 0.06195432252623778, 0.05282909423202642]}, "mutation_prompt": null}
{"id": "6c93f694-ffd3-4485-8bd1-cac9d7e60847", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "75a9ffb2-04dd-4326-a112-3ff4371c5a28", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "efd762f9-f8c0-464a-8702-e189729db61b", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "3cea8587-f7cd-41f5-9687-d7685d128ca4", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "8977b332-384d-403d-a9ff-f09b8112d582", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "49fe681f-8123-41d1-bbe8-f7da0783fece", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "6338f79a-991e-44a4-ac04-2f57e2e848b7", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "3be2b874-89f2-48df-8cf3-d55ad62dff53", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "4e6df55d-f598-4ff3-90e2-660907a88eb8", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "e9f41439-d3a1-4d68-80e4-9ba88a7c5f20", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "0ecb07d7-0974-4dab-9377-3443a00a27f0", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "3c18e429-4a3e-454a-a29a-cf7e1675c3e1", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "8d8b74e0-c90a-4c92-a448-abcc88029267", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30, c1=2.0, c2=2.0, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def generate_candidate(population, gbest, c1, c2):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            v_individual = self.f * (population - population) + c1 * r1 * (gbest - population) + c2 * r2 * (population - gbest)\n            return np.clip(population + v_individual, -5.0, 5.0)\n\n        def differential_evolution(population, f, cr):\n            mutant = population + f * (population[np.random.choice(range(self.swarm_size), 3, replace=False)] - population)\n            crossover = np.random.rand(self.dim) < cr\n            trial = np.where(crossover, mutant, population)\n            return np.clip(trial, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n\n        for _ in range(self.budget):\n            for idx in range(self.swarm_size):\n                candidate = generate_candidate(population[idx], gbest, self.c1, self.c2)\n                candidate_fitness = func(candidate)\n                if candidate_fitness < fitness[idx]:\n                    population[idx] = candidate\n                    fitness[idx] = candidate_fitness\n                    if candidate_fitness < fitness[gbest_idx]:\n                        gbest = candidate\n                        gbest_idx = idx\n                else:\n                    trial = differential_evolution(population[idx], self.f, self.cr)\n                    trial_fitness = func(trial)\n                    if trial_fitness < fitness[idx]:\n                        population[idx] = trial\n                        fitness[idx] = trial_fitness\n                        if trial_fitness < fitness[gbest_idx]:\n                            gbest = trial\n                            gbest_idx = idx\n\n        return gbest", "name": "HybridPSODE", "description": "Implementing a Hybrid Particle Swarm Optimization with Differential Evolution (PSO-DE) algorithm that combines the exploration capabilities of PSO with the global search abilities of DE for efficient optimization.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 6 is out of bounds for axis 0 with size 5').", "error": "IndexError('index 6 is out of bounds for axis 0 with size 5')", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {}, "mutation_prompt": null}
{"id": "b88a11a8-c280-4299-b5a5-5988efe705ca", "solution": "import numpy as np\n\nclass DynamicAdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Dynamic adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "DynamicAdaptiveVariableNeighborhoodSearch", "description": "An algorithm using Adaptive Variable Neighborhood Search with dynamic neighborhood adjustment for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 68, "fitness": 0.26840286262402774, "feedback": "The algorithm DynamicAdaptiveVariableNeighborhoodSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "dacf9e0c-88d2-42c7-91f4-485d2120f824", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "29139b78-df6c-4131-8119-c1863c37dee8", "solution": "import numpy as np\n\nclass EvolutionaryMultiObjectiveOptimization:\n    def __init__(self, budget, dim, objectives=2, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.objectives = objectives\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def mutate(solution):\n            mutated_solution = solution + np.random.normal(0, self.mutation_rate, self.dim)\n            return np.clip(mutated_solution, -5.0, 5.0)\n\n        population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(self.objectives)]\n        best_solution = population[0]\n        best_fitness = np.mean([func(sol) for sol in population])\n\n        for _ in range(self.budget):\n            new_population = [mutate(sol) for sol in population]\n            new_fitness = [func(sol) for sol in new_population]\n\n            if np.mean(new_fitness) < best_fitness:\n                best_solution = new_population[np.argmin(new_fitness)]\n                best_fitness = np.mean(new_fitness)\n\n            population = new_population\n\n        return best_solution", "name": "EvolutionaryMultiObjectiveOptimization", "description": "Introducing Evolutionary Multi-Objective Optimization algorithm (EMO2) that utilizes a self-adaptive mutation operator with multiple objectives to enhance exploration and exploitation for improved optimization performance.", "configspace": "", "generation": 70, "fitness": 0.053508632420464955, "feedback": "The algorithm EvolutionaryMultiObjectiveOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.08785293794374616, 0.08439386165289198, 0.08166395529698967, 0.0675203218692988, 0.05636397583536623, 0.07633232848391924, 0.1245983801915117, 0.09503131666673403, 0.09969832477243712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03391457006355836, 0.0024934440403340252, 0.016692159201261547, 0.006125207929194021, 0.01578837081333373, 0.00011880232265881752, 0.005098530539162649, 0.015718525622909096, 0.012243672643426518, 0.006000036293208888, 9.999999999998899e-05, 0.0074713939084036785, 0.02478512627052465, 0.0012002485617133019, 0.004164490708266411, 0.027114296528400472, 0.005261169191769999, 0.01720275720806219, 0.029343248574226655, 0.044873263170222, 0.017919253002651403, 0.024500913342031194, 0.029645659840335292, 0.03413392993945308, 0.026937420594576045, 0.03647833863553773, 0.04272931272966851, 0.012865709288105931, 0.029564193757851576, 9.999999999998899e-05, 0.00916287279176109, 0.015925972767217522, 0.008718509777908001, 9.999999999998899e-05, 0.012560850198809148, 9.999999999998899e-05, 0.09020559387742577, 0.043963590662891905, 0.040417748648917895, 0.04260009922851571, 0.046445401390256436, 9.999999999998899e-05, 0.04441804968620999, 0.06232931063918479, 9.999999999998899e-05, 0.05016873207592887, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019192739428797179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014972002537695928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02317037173105141, 0.026938951378973064, 0.0471019151553439, 0.04907942606274951, 0.013566280345967408, 0.0006058391272477648, 0.047089259928615346, 0.049621800668292915, 0.00139917996684924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01774427428908676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15265101305180762, 0.14339154150043631, 0.1553892421707973, 0.09716608843869634, 0.06410440274577811, 0.16173081285813118, 0.13012603398604516, 0.08038578391696904, 0.14414803087591077, 0.03510915786785462, 0.0017504541842359167, 0.00013426515093384328, 0.0005324810918060363, 0.004509725858739877, 0.03875504263307539, 0.01942174593165913, 9.999999999998899e-05, 0.05910830660435551, 0.11825936641677148, 0.13269896001464987, 0.13903428176505384, 0.15538586445413816, 0.13533157312947164, 0.12373850622378546, 0.1420303476556941, 0.12683121673246045, 0.15678489507083992, 0.11334303512203747, 0.11969068902268132, 0.12027814840942208, 0.14721542112397024, 0.11688272732167337, 0.15283248952281214, 0.1391361342370161, 0.10868780835040237, 0.11776534447429998, 0.052917951144016095, 0.053532065058095046, 0.0575267896902395, 0.08362256595656037, 0.05744049741759372, 0.09826511087755241, 0.08636012244533253, 0.048905277535374214, 0.059218675160195966, 0.16868121268095915, 0.1170612392997018, 0.14532454169094267, 0.16537467552245633, 0.11210429491282359, 0.14849601709478688, 0.19346659701872737, 0.10964276005275297, 0.14549706380619887, 0.032252680649726195, 9.999999999998899e-05, 0.12333769866790223, 0.06421366707656484, 0.1288082097864086, 9.999999999998899e-05, 0.004232589981913004, 9.999999999998899e-05, 9.999999999998899e-05, 0.10732416749336682, 0.10289907907578677, 0.10500513817701829, 0.10423491686055009, 0.08976481321026963, 0.07771314392559503, 0.08767580704445355, 0.09211380824768678, 0.09564101351515764, 0.08779008836250946, 0.12540056037075142, 0.03351194445312944, 0.06445998117829455, 0.07127156923357247, 0.06922831460845469, 0.08759584737997961, 0.04868371631227386, 0.09335257310649503, 0.17696334502357514, 0.18366007344966706, 0.18410171545428178, 0.18013915818224957, 0.17704319508402655, 0.19086022417344461, 0.19822338713303345, 0.17849253328969716, 0.19344813692237717, 0.05314548095768479, 0.046567454159946675, 0.03178062360267375, 0.040636860112069906, 0.03741454344168593, 0.04483967840362857, 0.03742340213665463, 0.036111533334945656, 0.04265877964868392]}, "mutation_prompt": null}
{"id": "f5bc23ba-89fd-4e54-a01d-d6c14a730262", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "5f6e349c-99ef-4c8a-b1c3-40ac0295fc1b", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "34a7cb92-cc93-4345-afc5-c1b1e03bb1b8", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "8603d276-2d36-44e8-9683-9ddbf3a03f44", "solution": "import numpy as np\n\nclass AdaptiveMetaheuristicAlgorithm:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveMetaheuristicAlgorithm", "description": "An adaptive metaheuristic algorithm that combines Variable Neighborhood Search with dynamically adjusting neighborhood sizes to balance exploration and exploitation for improved optimization performance.", "configspace": "", "generation": 74, "fitness": 0.26840286262402774, "feedback": "The algorithm AdaptiveMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "fc161fcd-fc0e-40fc-b700-1f6a05d3f20f", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "c6a288a8-fdf0-49e6-8911-814238d1a3c7", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "a71afe16-e2fb-4cf5-a84f-45146ef33c36", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "c3dc90f8-5f73-4ccb-a2d6-63e4188ccfe7", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "4e8eacf9-052b-4476-beb3-f08e80d70f14", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "3ded835a-34ed-4eab-94ec-8809b9f2a40b", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "ba8a83e8-4707-46a6-939d-0df8d4d7d339", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "14c7478a-aab3-4cc1-bcc7-417926537cb2", "solution": "import numpy as np\n\nclass AdaptiveMetaheuristicOptimization:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveMetaheuristicOptimization", "description": "Adaptive Metaheuristic Optimization with Dynamic Neighborhood Adjustment for Black Box Optimization Problems", "configspace": "", "generation": 82, "fitness": 0.26840286262402774, "feedback": "The algorithm AdaptiveMetaheuristicOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "6fce0f4e-c543-41fc-bbdc-7db22cb1d11f", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive and probabilistic neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing Variable Neighborhood Search by adapting neighborhood sizes dynamically and probabilistically for improved optimization performance.", "configspace": "", "generation": 83, "fitness": 0.26840286262402774, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "2a71818a-4391-4cb7-a277-ce5831903dca", "solution": "import numpy as np\n\nclass DynamicAdaptiveNeighborhoodEvolutionarySearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Dynamic adaptive neighborhood evolution\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "DynamicAdaptiveNeighborhoodEvolutionarySearch", "description": "A novel Metaheuristic algorithm named Dynamic Adaptive Neighborhood Evolutionary Search, enhancing Variable Neighborhood Search with dynamically evolving neighborhood sizes to balance exploration and exploitation for improved optimization performance.", "configspace": "", "generation": 84, "fitness": 0.26840286262402774, "feedback": "The algorithm DynamicAdaptiveNeighborhoodEvolutionarySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "77075625-3dfc-4673-a519-3d802e3c3f01", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "3322339a-22b9-4741-be55-ac6c8577ddca", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "898c7f7a-7ee4-4444-ad2a-62f19440db22", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "17cea401-e30c-439f-8e3f-0cb0eaf16e2e", "solution": "import numpy as np\n\nclass NovelAdaptiveMetaheuristicSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment with probability 0.2\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "NovelAdaptiveMetaheuristicSearch", "description": "A novel Adaptive Metaheuristic Search Algorithm with Dynamic Neighborhood Adjustment for Global Optimization.", "configspace": "", "generation": 88, "fitness": 0.26840286262402774, "feedback": "The algorithm NovelAdaptiveMetaheuristicSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "012ad9f1-3234-41c7-8d5f-cf280194e315", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "f4ac5d04-179b-439a-bd2c-3f022b47daba", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "53beedaf-b9e7-484e-b6cb-97fc1199d046", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "73ac2840-97f4-4ca3-b85a-77073b4e6860", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearchEnhanced:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment with probability 0.2 for each neighborhood\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearchEnhanced", "description": "Integrating Adaptive Variable Neighborhood Search with dynamic neighborhood adjustment to enhance exploration and exploitation for efficient black box optimization.", "configspace": "", "generation": 92, "fitness": 0.26840286262402774, "feedback": "The algorithm AdaptiveVariableNeighborhoodSearchEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "72b80597-8fb9-4fa5-bf63-eeceb4f78614", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "c8feed38-57ab-4dd5-88fe-38b34533c5bd", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        # Your novel metaheuristic algorithm implementation here\n        return optimized_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Adaptive Variable Neighborhood Search with dynamic neighborhood adjustment for improved optimization performance.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'optimized_solution' is not defined\").", "error": "NameError(\"name 'optimized_solution' is not defined\")", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {}, "mutation_prompt": null}
{"id": "e3d78b7a-fcb4-4069-b024-5b36a4713ab0", "solution": "import numpy as np\n\nclass AdaptiveDynamicVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveDynamicVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection and dynamic adjustment for exploration and exploitation trade-off in optimization.", "configspace": "", "generation": 95, "fitness": 0.26840286262402774, "feedback": "The algorithm AdaptiveDynamicVariableNeighborhoodSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "f415e16e-7490-40a3-809f-3b300c5278bd", "solution": "import numpy as np\n\nclass DynamicAdaptiveVNS:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Self-adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "DynamicAdaptiveVNS", "description": "Dynamic Adaptive Variable Neighborhood Search with self-adaptive neighborhood adjustment for enhanced optimization performance.", "configspace": "", "generation": 96, "fitness": 0.26840286262402774, "feedback": "The algorithm DynamicAdaptiveVNS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "3d7b519e-39c0-4d62-99c9-9bc935fde7bb", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "6025a878-2b2c-4275-becd-6d5fddfdcc3e", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
{"id": "7a1676eb-93ba-4a0a-8adb-e9fadad47f76", "solution": "import numpy as np\n\nclass AdaptiveVariableNeighborhoodSearch:\n    def __init__(self, budget, dim, neighborhoods=[0.1, 0.5, 1.0]):\n        self.budget = budget\n        self.dim = dim\n        self.neighborhoods = neighborhoods\n\n    def __call__(self, func):\n        def generate_neighbor(solution, neighborhood):\n            return np.clip(solution + np.random.uniform(-neighborhood, neighborhood, self.dim), -5.0, 5.0)\n\n        solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_solution = solution\n        best_fitness = func(solution)\n\n        for _ in range(self.budget):\n            for neighborhood in self.neighborhoods:\n                neighbor = generate_neighbor(solution, neighborhood)\n                neighbor_fitness = func(neighbor)\n                if neighbor_fitness < best_fitness:\n                    best_solution = neighbor\n                    best_fitness = neighbor_fitness\n            solution = best_solution\n            \n            # Adaptive neighborhood adjustment\n            if np.random.rand() < 0.2:\n                self.neighborhoods = [neighborhood * np.random.choice([0.8, 1.2]) for neighborhood in self.neighborhoods]\n\n        return best_solution", "name": "AdaptiveVariableNeighborhoodSearch", "description": "Enhancing Variable Neighborhood Search with adaptive neighborhood selection to dynamically adjust exploration and exploitation trade-off for improved optimization performance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "337fdc43-162e-4ce5-bc3c-5c76e7e1cc75", "metadata": {"aucs": [0.915678266273284, 0.8907736179383324, 0.8554959032940678, 0.8986932660797793, 0.8890223393941771, 0.8453257147574958, 0.8957640947935254, 0.8934820000210512, 0.8505360075911736, 0.06827328213658379, 0.028801221394550547, 9.999999999998899e-05, 9.999999999998899e-05, 0.08484032941098996, 9.999999999998899e-05, 0.08434218136105376, 9.999999999998899e-05, 9.999999999998899e-05, 0.05439289991208518, 0.020583239005078968, 0.05536680395667737, 0.11087296764036314, 0.08585733221420255, 0.04936081993976427, 0.08954396289989874, 0.05270896784110535, 0.07734645933091111, 0.081695018312546, 0.039404607402841574, 0.022672449742984435, 0.07503036459340362, 0.07311101043256263, 0.06467162339627397, 0.10967964956295162, 0.035575646112068204, 0.07775572341788883, 0.9751563318206765, 0.9590481323784676, 0.9565328782524072, 0.9774709894172312, 0.9358052526201611, 0.9558803731753178, 0.9525678320598315, 0.962827204126654, 0.9797688698310439, 0.786618446874385, 0.7883538239928045, 0.7780107287540758, 0.8274718918529433, 0.7935664287153574, 0.7704150587454481, 0.8077543589144397, 0.7954377263531526, 0.7700446398666371, 0.21404646765950852, 0.12775657525612172, 0.20238125591598422, 0.2107790922031535, 0.27295012934886087, 0.28333290765302277, 0.5518885179839654, 0.23540567363020803, 0.16970133875652504, 0.1370225860167107, 0.136436639590109, 0.13559403273270132, 0.17262646206098253, 0.2467988013710697, 0.12801008146696946, 0.19934750848368743, 0.2501678947546707, 0.19794370133227135, 0.20026057809329256, 0.17489543703488686, 0.4678031667157232, 0.13274089134631484, 0.3119893871712598, 0.18319842943454245, 0.19359827754772707, 0.11731530866355044, 0.13598591381667413, 9.999999999998899e-05, 0.012312696648233201, 0.050508624512453415, 0.06020130268840096, 0.06712749410093932, 0.05167087567249451, 9.999999999998899e-05, 0.00013411642659033607, 0.05116927222448864, 0.13133245630086987, 0.05872959910829412, 0.15678952943052704, 0.08704824910239528, 0.025825442007074484, 0.019054011753823596, 0.1953005800952674, 0.02327238297554013, 0.13159429788480315, 0.054547809078037246, 0.04009664776346655, 0.10731155433120898, 0.12456415483792738, 0.14418419779249636, 0.0751012338767938, 0.27283758386385115, 0.32384776843065044, 0.154577949350873, 0.11077975408436491, 0.14107589563162215, 0.12012608817990089, 0.2197912421409144, 0.16676886916374567, 0.29405904352389967, 0.22366302639994706, 0.09507806160534871, 0.23807190647904197, 0.5353764766021075, 0.5732026638500651, 0.5234434301203251, 0.5195451199347576, 0.5759381271279643, 0.5626797909477892, 0.5246397659894533, 0.551465597187597, 0.5285130650470506, 0.0973773219331251, 0.033993241972388066, 0.11686067599513683, 0.06510197144303476, 0.07588534055959095, 0.06477278261700181, 0.10006612819678118, 0.08966090713448704, 0.08602151987035866, 0.16940974433178713, 0.17170157277078746, 0.19489843501875992, 0.19814039101925995, 0.14797223094160783, 0.3257998903235779, 0.1824728543940224, 0.1849948595343709, 0.16543181543383312, 0.26176460069955587, 0.11498784976747323, 0.19145293111518158, 0.362612320225311, 0.15120829722242357, 0.1530265820440111, 0.21480242169330332, 0.12276275991503893, 0.2460238897782464, 0.24802565111152075, 0.06902720429091536, 0.17065178318367757, 0.16288565787130138, 0.2160284969759616, 0.1129226190969097, 0.15569311116569184, 0.05566992758030487, 0.18337286530834807, 0.23152958474908858, 0.2035219061604493, 0.17555110298590337, 0.17928887082284095, 0.2110358388063076, 0.2009845826808475, 0.20831535111921817, 0.14377821237928423, 0.24811125001284107, 0.1854032881329818, 0.17918319268572303, 0.22790284454520815, 0.17745090972080269, 0.18232523016746083, 0.17942623373423316, 0.16483168700559092, 0.20798631685688407, 0.16923288288385208, 0.19011770748311518, 0.13795555284548933, 0.9509449279489315, 0.17372124794407606, 0.11236529201143763, 0.9555707665610319, 0.1312365172328136, 0.11802414610293477, 0.554579362342291, 0.9244977929725823, 0.12398635053581142, 0.4052449946091343, 0.1573922499471535, 0.21306733537718514, 0.21367091461205168, 0.16956847076542403, 0.15555666066761498, 0.42827042165327944, 0.24202593912393855, 0.2343990900728502, 0.21853549600336974, 0.2435582832361406, 0.224702962430537, 0.23248470515893116, 0.2595149965202015, 0.28978307274438053, 0.2530894199722178, 0.09032026759277123, 0.06959571186127578, 0.07068825080760566, 0.06974538810056152, 0.059466645167185694, 0.10724699226103007, 0.07548446033512124, 0.045598954971448835, 0.07024349260887575]}, "mutation_prompt": null}
