{"id": "e14595f6-836f-4989-b92a-810541857296", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 0, "fitness": 0.09144843562834938, "feedback": "The algorithm FireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "ce2f99a8-bbf8-4c9a-9b83-81045e8f5916", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "efb76937-876a-414d-95ca-ff72adf55348", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def mutate(self, population, current_index):\n        candidates = [idx for idx in range(self.budget) if idx != current_index]\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        return population[a] + self.F * (population[b] - population[c])\n\n    def crossover(self, target, trial):\n        crossover_points = np.random.rand(self.dim) < self.CR\n        offspring = np.where(crossover_points, trial, target)\n        return offspring\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                trial = self.mutate(population, i)\n                offspring = self.crossover(population[i], trial)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n        return population[np.argmin(fitness_values)]", "name": "DifferentialEvolution", "description": "Differential Evolution (DE) algorithm enhances the Firefly Algorithm by utilizing differential mutation and selection strategies to explore the search space effectively.", "configspace": "", "generation": 2, "fitness": 0.09144843562834938, "feedback": "The algorithm DifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "efb01aac-ea01-4e5d-be82-1e2ad8da3fc1", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8244ec0d-270a-4ba5-85e1-ec6b757fc7c8", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "84dd0000-a175-4510-94de-83eeae176762", "solution": "import numpy as np\n\nclass HybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n        self.F = F\n        self.CR = CR\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def differential_evolution(self, population, light_intensities, func):\n        for i in range(self.budget):\n            indices = list(range(self.budget))\n            indices.remove(i)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n\n            mutant = population[a] + self.F * (population[b] - population[c])\n            crossover_points = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover_points, mutant, population[i])\n\n            if func(trial) < light_intensities[i]:\n                population[i] = trial\n                light_intensities[i] = func(trial)\n\n        return population, light_intensities\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n            population, light_intensities = self.differential_evolution(population, light_intensities, func)\n\n        return population[np.argmin(light_intensities)]", "name": "HybridFireflyDE", "description": "Utilizing a Hybrid Firefly Algorithm with Differential Evolution for enhanced exploration-exploitation trade-off in solving black box optimization problems.", "configspace": "", "generation": 5, "fitness": 0.09144843562834938, "feedback": "The algorithm HybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f1041a19-b363-4535-b4a7-f97f38ea7a3e", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f3d4dad8-92ad-490b-ad68-b4dfadb6b17c", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "2066ee25-8914-47fa-93c0-b721d9763577", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim, inertia=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.inertia = inertia\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        self.velocities = np.zeros((self.budget, self.dim))\n        self.personal_bests = self.population.copy()\n        self.global_best = self.personal_bests[np.argmin([func(individual) for individual in self.personal_bests])]\n\n    def update_particle(self, particle, personal_best):\n        cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (personal_best - particle)\n        social_component = self.social_weight * np.random.rand(self.dim) * (self.global_best - particle)\n        return particle + self.inertia * self.velocities[i] + cognitive_component + social_component\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                self.velocities[i] = self.update_particle(self.population[i], self.personal_bests[i])\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], -5.0, 5.0)\n                if func(self.population[i]) < func(self.personal_bests[i]):\n                    self.personal_bests[i] = self.population[i]\n                    if func(self.population[i]) < func(self.global_best):\n                        self.global_best = self.population[i]\n\n        return self.global_best", "name": "ParticleSwarmOptimization", "description": "Particle Swarm Optimization (PSO) is a population-based optimization algorithm inspired by the social behavior of bird flocking to find optimal solutions.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {}, "mutation_prompt": null}
{"id": "ea5cdc3e-ecc4-4c0e-a3e4-216d8b306323", "solution": "import numpy as np\n\nclass DynamicFireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def adapt_parameters(self, iteration, max_iterations):\n        self.alpha = 0.1 + 0.9 * (1 - iteration / max_iterations)\n        self.beta0 = 0.9 + 0.1 * (1 - iteration / max_iterations)\n        self.gamma = 1.0 - 0.5 * (1 - iteration / max_iterations)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for iter in range(self.budget):\n            self.adapt_parameters(iter, self.budget)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "DynamicFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by introducing dynamic parameter adaptation for improved convergence speed and solution quality.", "configspace": "", "generation": 9, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3f826b45-37ff-4bc0-a3b8-a3c51ea1d346", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b414d234-cb26-4f64-ba9c-c0d46c9eaeed", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b2ef3694-c0ba-48b5-9491-e8422c94d765", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6012b3f3-bca7-437c-aee2-a59fcff4a501", "solution": "import numpy as np\n\nclass GlowwormSwarmOptimization:\n    def __init__(self, budget, dim, step_size=0.1, neighborhood_radius=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.step_size = step_size\n        self.neighborhood_radius = neighborhood_radius\n\n    def distance(self, x, y):\n        return np.linalg.norm(x - y)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i] and self.distance(population[i], population[j]) < self.neighborhood_radius:\n                        step = self.step_size * (np.random.rand(self.dim) - 0.5)\n                        population[i] += step\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "GlowwormSwarmOptimization", "description": "A novel algorithm named Glowworm Swarm Optimization (GSO) mimics the glowing behavior of glowworms to optimize black box functions, with individuals attracting others based on their light intensity.", "configspace": "", "generation": 13, "fitness": 0.09144843562834938, "feedback": "The algorithm GlowwormSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e3f0a963-a51d-453c-9873-d52a0394783b", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b90ba59e-284d-45a2-85e1-cd25260702b8", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f72e8695-895e-4d4f-adb5-efa49366e621", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def levy_flight(self, scale=0.1):\n        sigma = (np.math.gamma(1 + scale) * np.math.sin(np.pi * scale / 2) / np.math.gamma((1 + scale) / 2) * scale ** ((scale - 1) / 2)) ** (1 / scale)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        levy = u / np.power(np.abs(v), 1 / scale)\n        return levy\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * self.levy_flight()  # Incorporating Levy flights for exploration\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for improved exploration capabilities", "configspace": "", "generation": 16, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "00645174-a872-44bb-99f5-6e9606359134", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8902d0be-def0-4007-801c-8a1b88887e5a", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "70d45f16-348e-4c45-96ce-d5914e25b80a", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "81328e22-c0b6-4082-a781-1a9bcc434eb1", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c44abbf5-fd3a-4e22-b2cf-ef12fec21870", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "beaf3de2-f951-4a38-8d79-0b8d430fb790", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f0fb1f4d-4b16-4a06-9362-fc4b84bcc293", "solution": "import numpy as np\n\nclass QuantumFireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def quantum_rotation(self, current, best, theta):\n        rotation_matrix = np.array([[np.cos(theta), -np.sin(theta)], [np.sin(theta), np.cos(theta)]])\n        return np.dot(rotation_matrix, current - best) + best\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.alpha * np.exp(-self.gamma * distance**2)\n                        rotation_angle = attractiveness_ij * np.pi\n                        population[i] = self.quantum_rotation(population[i], population[j], rotation_angle)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "QuantumFireflyAlgorithm", "description": "A novel metaheuristic algorithm called Quantum Firefly Algorithm (QFA) that combines the principles of quantum computing with firefly behavior to optimize black box functions efficiently.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('shapes (2,2) and (5,) not aligned: 2 (dim 1) != 5 (dim 0)').", "error": "ValueError('shapes (2,2) and (5,) not aligned: 2 (dim 1) != 5 (dim 0)')", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {}, "mutation_prompt": null}
{"id": "b820c616-cd17-4113-b2e3-cd37d6176365", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b758e1f7-8b0c-429f-b635-b5bc60301fbb", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0130e4af-b795-47dd-9964-7c97db0e12b7", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "921fae5f-a22a-4e28-a652-25813374297a", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "75fa34f0-e232-4739-851d-85867272cd79", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "ba744b73-ab5b-4ae6-8dbc-971fd4d1ec0b", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d6b8d50f-3078-46cf-bb1a-7d13852a9b33", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.beta0) * np.sin(np.pi * self.beta0 / 2) / (\n                    np.math.gamma((1 + self.beta0) / 2) * self.beta0 * 2 ** ((self.beta0 - 1) / 2))) ** (1 / self.beta0)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / (abs(v) ** (1 / self.beta0))\n        return step\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * self.levy_flight()\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flight for more exploratory behavior.", "configspace": "", "generation": 30, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "af7a0259-68d7-46c6-9643-7443c2a5e3cb", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "9295f05d-73b6-4f58-a780-ca62043d6cfc", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "409f00cd-91e3-4af2-be55-07b4fccf70e1", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def mutate(self, population, target_idx):\n        idxs = np.arange(self.budget)\n        idxs = idxs[idxs != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        return population[a] + self.F * (population[b] - population[c])\n\n    def crossover(self, target, mutant):\n        j_rand = np.random.randint(self.dim)\n        trial = np.where(np.random.rand(self.dim) < self.CR, mutant, target)\n        trial[j_rand] = mutant[j_rand]\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n        for _ in range(self.budget):\n            next_population = np.empty_like(population)\n            for target_idx in range(self.budget):\n                mutant = self.mutate(population, target_idx)\n                trial = self.crossover(population[target_idx], mutant)\n                if func(trial) < func(population[target_idx]):\n                    next_population[target_idx] = trial\n                else:\n                    next_population[target_idx] = population[target_idx]\n            population = next_population\n\n        return population[np.argmin([func(individual) for individual in population])]", "name": "DifferentialEvolution", "description": "Differential Evolution Metaheuristic (DE) optimizes candidate solutions by iteratively exploring the search space using the difference of two randomly chosen population members.", "configspace": "", "generation": 33, "fitness": 0.09043303929253546, "feedback": "The algorithm DifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.16959259177318453, 0.17446045146969757, 0.17721749245215657, 0.15795165349688212, 0.18148150416244713, 0.1671510761058671, 0.17623690886515975, 0.15676310324173104, 0.16345190753576955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03858269551190496, 0.0447945367779885, 0.03959288015458895, 0.05618496929234729, 0.0407821352043356, 0.05189949029270302, 0.048505888344581805, 0.061675196140086874, 0.0517727205519084, 0.023270993262621942, 0.028276392162196906, 0.03804199178118417, 0.025053667727265583, 0.045630066532579394, 0.05373922820579968, 0.035724882698369265, 0.03580946208849345, 0.03613690998569996, 0.09396816295924504, 0.09894570358805288, 0.17316502890850494, 0.10634871984484529, 0.1344381598800184, 0.08962758877791244, 0.10285072814983565, 0.11005739053772923, 0.08727146451990697, 0.0789433220072786, 0.07292690044642147, 0.10019098225768097, 0.07389745906097633, 0.07262748755257764, 0.0450805751992861, 0.09155219762960098, 0.06262624317176868, 0.0894403634800155, 0.11705227410278107, 0.18938665946469824, 0.14367585352068457, 0.11010170332594915, 0.11490157316458283, 0.11878286071483146, 0.10150949745282012, 0.11782296549471827, 0.11772821082696339, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.009118032063711312, 0.007802334213936946, 0.007968386162906071, 9.999999999998899e-05, 0.0008859164213960158, 0.016790757226985753, 9.999999999998899e-05, 0.06339968209380009, 0.006937249459363692, 0.058993402427191866, 0.05461512245687539, 0.009468453331913929, 0.021887116333969447, 0.024499206696379727, 0.016920554936147303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05342426733684369, 0.06730342837697756, 0.08107111079179163, 0.05941523347397892, 0.02402350657941299, 0.05010365601457234, 0.0470179792329225, 0.03334202593274005, 0.06542564006324514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21421420882147924, 0.19072344859354484, 0.18027583998479424, 0.20398831423674157, 0.19248398922648324, 0.19610288589978586, 0.19602860401862976, 0.1841164878585616, 0.1861280161361778, 0.030790009616450176, 0.03568810953748558, 0.03575521127327996, 0.03638525172286322, 0.03538414242026633, 0.04362395505722183, 0.05499049693225866, 0.043839914531604185, 0.04633246735118646, 0.13629504188389796, 0.11831470748940787, 0.12106804529951587, 0.1398824818119403, 0.14584727785393736, 0.11812564438343776, 0.14963170564215833, 0.14489866332880974, 0.12253174122982835, 0.16517103298733293, 0.16675506728425116, 0.16748149019784975, 0.16507334606095103, 0.16867268927713808, 0.1681283438371851, 0.16777831661012954, 0.17365250425460943, 0.15759248828816397, 0.1030434237163923, 0.10227877191437962, 0.10918267855895014, 0.10965788186482295, 0.1255581244496341, 0.10825392991584082, 0.10849543273708295, 0.12309990874744248, 0.12814851074978362, 0.14836997580299938, 0.16322171359529547, 0.16278423333685843, 0.1528118956295249, 0.15678194799981715, 0.16013138941982474, 0.14891127372852808, 0.15532616103138208, 0.17644709545350812, 0.13197261432962437, 0.1623399496675334, 0.13398795238791994, 0.1430311550973491, 0.13683617398183856, 0.14960301245826135, 0.145049487123455, 0.13634187566729017, 0.1604757114380957, 0.16493554765466234, 0.16515945246685082, 0.16235265027766033, 0.15430498547209603, 0.15124660196825657, 0.14270663660408578, 0.1689517115639615, 0.15443759502414833, 0.1552433709759563, 0.15492837646321345, 0.16538942432045967, 0.1708714700414513, 0.1351457828160223, 0.1430930752483517, 0.1913466042908959, 0.1626334779659635, 0.19796743249280246, 0.16293650312329178, 0.1717158758309324, 0.18376154518100174, 0.17374303334393904, 0.187219346792182, 0.21060556823759002, 0.19002304730506414, 0.17533151731899377, 0.18621651205328282, 0.20310214743949084, 0.05842775835422487, 0.06014505400042436, 0.06425900589885636, 0.05283042187689879, 0.058610983460604116, 0.05042080876704791, 0.07220324088759211, 0.05287968037378998, 0.05015073872086251]}, "mutation_prompt": null}
{"id": "521d2108-74d7-4c58-b08f-c6f06f38ee6d", "solution": "import numpy as np\n\nclass DynamicFireflyAlgorithm(FireflyAlgorithm):\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            self.alpha = 0.2 * np.exp(-0.1 * _)  # Dynamic alpha\n            self.gamma = 1.0 * np.exp(-0.1 * _)  # Dynamic gamma\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "DynamicFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating dynamic alpha and gamma values during the optimization process to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 34, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "5d519794-4272-4752-b860-24cbd4959b14", "solution": "import numpy as np\n\nclass FireflyDEAlgorithm(FireflyAlgorithm):\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0, F=0.5, CR=0.9):\n        super().__init__(budget, dim, alpha, beta0, gamma)\n        self.F = F\n        self.CR = CR\n\n    def mutate(self, population, best_idx):\n        idxs = list(range(self.budget))\n        idxs.remove(best_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, -5.0, 5.0)\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        j_rand = np.random.randint(self.dim)\n        for j in range(self.dim):\n            if np.random.rand() > self.CR and j != j_rand:\n                trial[j] = mutant[j]\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                f_trial = func(trial)\n                if f_trial < light_intensities[i]:\n                    population[i] = trial\n                    light_intensities[i] = f_trial\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyDEAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Differential Evolution strategy for improved exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": 0.09144843562834938, "feedback": "The algorithm FireflyDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "a4925227-75f0-4e61-ac47-b56b70907ed3", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "9e580e06-f028-43e9-ba29-f183d1defb1e", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b9dbeb38-021e-404c-9c93-a811ebfec7ee", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "66fbf555-a7bc-4842-87d1-8bf3f42aa4fc", "solution": "import numpy as np\n\nclass HybridFireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0, de_weight=0.5, de_cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n        self.de_weight = de_weight\n        self.de_cr = de_cr\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def de_mutate(self, population, i):\n        candidates = [idx for idx in range(self.budget) if idx != i]\n        a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n        return population[i] + self.de_weight * (a - population[i]) + self.de_weight * (b - c)\n\n    def de_crossover(self, target, mutant):\n        crossover_points = np.random.rand(self.dim) < self.de_cr\n        trial = np.where(crossover_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n                        \n                        mutant = self.de_mutate(population, i)\n                        trial = self.de_crossover(population[i], mutant)\n                        f_val = func(trial)\n                        \n                        if f_val < light_intensities[i]:\n                            population[i] = trial\n                            light_intensities[i] = f_val\n\n        return population[np.argmin(light_intensities)]", "name": "HybridFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating a hybrid approach of Differential Evolution (DE) for improved local search capabilities.", "configspace": "", "generation": 39, "fitness": 0.09144843562834938, "feedback": "The algorithm HybridFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "7a10c646-6484-4e51-8870-a04df9ac1725", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b6eb06db-395d-4b56-9f8f-05b9000f57ec", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness, step_size):\n        step = self.alpha * step_size * (np.random.standard_cauchy(self.dim) / np.abs(np.random.standard_cauchy(self.dim)))\n        return current + attractiveness * (best - current) + step\n\n    def levy_flight(self):\n        return np.random.standard_cauchy()\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        step_size = self.levy_flight()\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij, step_size)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for improved exploration in the search space.", "configspace": "", "generation": 41, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "ce0221a3-75db-4cc0-83d3-95d9258b1f5f", "solution": "import numpy as np\n\nclass GlowwormSwarmOptimization:\n    def __init__(self, budget, dim, rho=0.5, gamma=0.5, step_size=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.rho = rho\n        self.gamma = gamma\n        self.step_size = step_size\n\n    def calculate_luciferin(self, light_intensity):\n        return 1 / (1 + light_intensity)\n\n    def move_glowworm(self, current, best, luciferin):\n        step = self.step_size * (np.random.rand(self.dim) - 0.5)\n        return current + luciferin * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n        luciferins = np.array([self.calculate_luciferin(intensity) for intensity in light_intensities])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if luciferins[j] > luciferins[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        if distance != 0:\n                            current_luciferin = self.calculate_luciferin(light_intensities[i])\n                            luciferins[i] = current_luciferin + self.rho * (current_luciferin - luciferins[i])\n                            population[i] = self.move_glowworm(population[i], population[j], luciferins[i])\n                            light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "GlowwormSwarmOptimization", "description": "The Glowworm Swarm Optimization (GSO) algorithm simulates the behavior of glowworms to optimize a given black box function by attracting and moving towards brighter individuals in the search space.", "configspace": "", "generation": 42, "fitness": 0.09144843562834938, "feedback": "The algorithm GlowwormSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "55a50757-aae3-4caa-bbed-6dbd50a0f4d3", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "2c9af534-261c-4fa0-86bd-36a265493888", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, w=0.7, c1=1.5, c2=2.0, F=0.5, CR=0.7):\n        self.budget = budget\n        self.dim = dim\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n\n    def update_velocity(self, velocity, position, pbest, gbest):\n        r1 = np.random.rand(self.dim)\n        r2 = np.random.rand(self.dim)\n        return self.w * velocity + self.c1 * r1 * (pbest - position) + self.c2 * r2 * (gbest - position)\n\n    def ensure_bounds(self, position):\n        position[position > 5.0] = 5.0\n        position[position < -5.0] = -5.0\n        return position\n\n    def mutate(self, population, pbest, gbest):\n        mutant_population = []\n        for i, p in enumerate(population):\n            idxs = np.random.choice(range(len(population)), 3, replace=False)\n            target_vector = p + self.F * (population[idxs[0]] - p) + self.F * (population[idxs[1]] - population[idxs[2]])\n            cross_points = np.random.rand(self.dim) < self.CR\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial_vector = np.where(cross_points, target_vector, p)\n            trial_vector = self.ensure_bounds(trial_vector)\n            if func(trial_vector) < func(pbest[i]):\n                pbest[i] = trial_vector\n            if func(trial_vector) < func(gbest):\n                gbest = trial_vector\n            mutant_population.append(trial_vector)\n        return np.array(mutant_population), pbest, gbest\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        velocity = np.zeros((self.budget, self.dim))\n        pbest = population.copy()\n        gbest = pbest[np.argmin([func(individual) for individual in pbest])]\n\n        for _ in range(self.budget):\n            velocity = self.update_velocity(velocity, population, pbest, gbest)\n            population += velocity\n            population = self.ensure_bounds(population)\n\n            population, pbest, gbest = self.mutate(population, pbest, gbest)\n\n        return gbest", "name": "HybridPSODE", "description": "Utilizing a hybrid approach combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to enhance exploration and exploitation for efficient optimization on the BBOB test suite.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {}, "mutation_prompt": null}
{"id": "82a7393c-1949-4b2c-b9a7-2b891af0a38b", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "FireflyAlgorithm", "description": "Firefly Algorithm (FA) is inspired by the flashing behavior of fireflies to create a metaheuristic algorithm for optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0d11571e-ac90-4244-a434-879f22474224", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0, adaptive_step=True):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n        self.adaptive_step = adaptive_step\n\n    def attractiveness(self, light_intensity, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2)\n\n    def move_firefly(self, current, best, attractiveness):\n        step = self.alpha * (np.random.rand(self.dim) - 0.5) if self.adaptive_step else np.zeros(self.dim)\n        return current + attractiveness * (best - current) + step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        light_intensities = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if light_intensities[j] > light_intensities[i]:\n                        distance = np.linalg.norm(population[i] - population[j])\n                        attractiveness_ij = self.attractiveness(light_intensities[j], distance)\n                        population[i] = self.move_firefly(population[i], population[j], attractiveness_ij)\n                        light_intensities[i] = func(population[i])\n\n        return population[np.argmin(light_intensities)]", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm's convergence by introducing adaptive step size and variable attractiveness based on individual performance.", "configspace": "", "generation": 46, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3b5eeca6-0b6e-4ef4-95ca-c4a59edd320b", "solution": "import numpy as np\n\nclass HarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "HarmonySearchAlgorithm", "description": "A novel metaheuristic algorithm, Harmony Search Algorithm (HSA), simulates the process of musicians improvising new harmonies to find optimal solutions in the search space.", "configspace": "", "generation": 47, "fitness": 0.10278589474248659, "feedback": "The algorithm HarmonySearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "e14595f6-836f-4989-b92a-810541857296", "metadata": {"aucs": [0.2635756108669217, 0.29675437643724867, 0.2832184506343042, 0.3085778083562738, 0.2813357677469357, 0.25220497400079234, 0.2880925382946492, 0.36279704921406897, 0.27416437976889363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12085997287370442, 0.11073865809288985, 0.13399932366650924, 0.10757107414052791, 0.11367779883821727, 0.09020079454062013, 0.09754521229866497, 0.09619692804173541, 0.08318992453023089, 0.07089469609834853, 0.06131756080175943, 0.11521404055329187, 0.10217586480836505, 0.11049083286483397, 0.08606096128166496, 0.06889011467572037, 0.07691653768910112, 0.08023025034168585, 0.132892528148026, 0.1256143384712155, 0.14109021431983382, 0.15827858051625243, 0.125122998569144, 0.14935711251791906, 0.1610026303709523, 0.1229497791866353, 0.14514794015410448, 0.07595514137042392, 0.15830883532482254, 0.06548904123135812, 0.10039888338870806, 0.09986318877493083, 0.103604370247243, 0.1240247960222074, 0.08081334136102325, 0.004396765817753612, 0.14372064242621796, 0.06346363114459963, 0.135058482149219, 0.1734370222543068, 0.11813856259175914, 0.16643109566678627, 0.05920909807648589, 0.11779595444418478, 0.11204159628513444, 0.06056285465434885, 0.016434481847958926, 0.06921468413157106, 0.002654535513053835, 0.08744167956189808, 0.04667751883109228, 0.037112263770276654, 0.018488898610317106, 0.036748546209268484, 0.07915276026751339, 9.999999999998899e-05, 0.0627998543821977, 0.09526178895799398, 9.999999999998899e-05, 0.11611088989028118, 0.08226591103439473, 9.999999999998899e-05, 0.08391084288889161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026756462106248713, 0.019101547473888036, 0.04246901289452798, 0.049663533047515585, 9.999999999998899e-05, 9.999999999998899e-05, 0.005973702029993366, 0.011572512177550731, 0.011461297407842408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0328465125802444, 0.021078646753427854, 0.018571731059856433, 0.03906757292950802, 0.03449430125079722, 0.021551884196150395, 0.020508086704297823, 0.00757314672412901, 0.024647669285281504, 0.24602467297348762, 0.2703633130591716, 0.2527079403753718, 0.26705621524994216, 0.23814852443763657, 0.25983119651999886, 0.25111763749415916, 0.2814441140656523, 0.25056436754277556, 0.04882295442934048, 0.04330156798679963, 0.04927952672782665, 0.06721259883050812, 0.02857644494153977, 0.0709390889928978, 0.0434659285124982, 0.053520637398076776, 0.06362857962537005, 0.11631017340368766, 0.12722406481634285, 0.09236246181730678, 0.13116978442957294, 0.17254300246255605, 0.08868942377443267, 0.12690788662100605, 0.12930301430121904, 0.08192531769129474, 0.1305600376660081, 0.192212405660799, 0.14191615158876847, 0.1736885603178816, 0.14604971583701587, 0.1555238398179285, 0.1370998740242887, 0.19517236848021602, 0.24404926536019955, 0.1240125046965691, 0.07978288522185417, 0.09451787298327785, 0.11524320175628022, 0.12844025254151692, 0.15955421395481595, 0.1050964938406469, 0.11980331509516551, 0.08881500548357413, 0.15340142159705827, 0.14337857664068598, 0.16755983146879116, 0.13155402097335955, 0.15122349052534578, 0.12889212776810433, 0.15977229224255174, 0.1434527785208809, 0.17808374739715638, 0.10531078021740081, 0.15696271935492967, 0.1803655206822845, 0.1722680444254744, 0.15613762818328447, 0.1600655967609207, 0.16511615833607973, 0.15289653454245877, 0.1681763264163103, 0.1009122843863608, 0.11582592264108693, 0.1235819109405436, 0.1600204391039992, 0.18673732028909773, 0.17497303777764173, 0.0976437440990019, 0.15709363797482168, 0.15340143321867705, 0.08021091573427197, 0.1588083120946303, 0.16234397585225657, 0.13135701152817092, 0.13132422616880302, 0.15999329805363305, 0.09873099243916983, 0.16382651642482893, 0.10383042965388412, 0.1400093203006274, 0.1381330187370018, 0.15244362377059528, 0.15474451067609885, 0.14060678983401032, 0.1441749869974005, 0.159042663521214, 0.16441848199782305, 0.1887363476024677, 0.03787683213944815, 0.04855810685362938, 0.053317236900128906, 0.049896085864814865, 0.03593099407445666, 0.04364596719699276, 0.054681436815252726, 0.041964776651967406, 0.048487475740415564]}, "mutation_prompt": null}
{"id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 48, "fitness": 0.34372018500710805, "feedback": "The algorithm ImprovedHarmonySearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "3b5eeca6-0b6e-4ef4-95ca-c4a59edd320b", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "ff758bb8-2c64-403d-b58f-33ae95762ea0", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "0b0611d2-e5ce-490a-b2b3-dd11303e0130", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "e507f4ec-ab60-4b8c-a70e-0e8d777a07db", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "75e4b7b9-a93f-4568-9dba-1462d83dacbc", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "64b80e36-a081-4e7f-8097-47723c95b309", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "551d196d-b714-4b69-ba90-3613c247a4a7", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "81d449bb-d8d7-4577-ad42-d5d0887aa0e3", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "f1d06f48-aeba-4088-a5ee-33f4882a40af", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "63787160-3317-484d-9c9f-3d3633a0b8ac", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "25a57acb-98c4-425f-8597-084000bfc1e1", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "c2d06682-e794-4622-ac37-9cb452f387a2", "solution": "import numpy as np\n\nclass HybridDEHSAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9, de_pop_size=10, de_mut_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n        self.de_pop_size = de_pop_size\n        self.de_mut_prob = de_mut_prob\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def differential_evolution(self, population, func):\n        mutant_pop = np.zeros_like(population)\n        for i in range(self.harmony_memory_size):\n            idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n            mutant = population[idxs[0]] + self.de_weight * (population[idxs[1]] - population[idxs[2])\n            crossover = np.random.rand(self.dim) < self.de_cross_prob\n            if not np.any(crossover):\n                crossover[np.random.randint(0, self.dim)] = True\n            mutant[crossover] = population[i][crossover]\n            mutant_pop[i] = mutant\n        return mutant_pop\n\n    def harmony_search(self, population, func):\n        new_population = np.copy(population)\n        for i in range(self.harmony_memory_size):\n            for j in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_population[i][j] = np.random.uniform(-5.0, 5.0)\n        return new_population\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            de_population = self.differential_evolution(population, func)\n            hs_population = self.harmony_search(population, func)\n            combined_population = np.concatenate((population, de_population, hs_population))\n            fitness_values = np.array([func(individual) for individual in combined_population])\n            sorted_indices = np.argsort(fitness_values)\n            population = combined_population[sorted_indices[:self.harmony_memory_size]]\n\n        return population[np.argmin(np.array([func(individual) for individual in population]))]", "name": "HybridDEHSAlgorithm", "description": "Novel Hybrid Differential Evolution Harmony Search Algorithm combining DE's global search capability with Harmony Search's local exploration for improved optimization performance.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 21, 102, '            mutant = population[idxs[0]] + self.de_weight * (population[idxs[1]] - population[idxs[2])')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 21, 102, '            mutant = population[idxs[0]] + self.de_weight * (population[idxs[1]] - population[idxs[2])'))", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {}, "mutation_prompt": null}
{"id": "4296e46e-25b1-45f3-a8b9-790204cd09d8", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "d36064f9-4290-4eb2-afb7-f4974470c518", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "9d0bcc6d-b03f-4313-8aeb-59531086e193", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "6676dbf8-f62d-40d8-aad1-432054d96afb", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, de_weight=0.8, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory):\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < self.de_cross_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.de_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for _ in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "ImprovedHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating Differential Evolution to improve exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9116584356553715, 0.8970607240808709, 0.8945134913615737, 0.9000507709685582, 0.9061175217442605, 0.9070575156980338, 0.9041849645301462, 0.9061478902731614, 0.9136742462909694, 0.8066023731221039, 0.845702881701325, 0.8230304743779532, 0.8076961962099131, 0.8219289034509704, 0.8358860196813094, 0.803615936461638, 0.8233949244263299, 0.8391663549766892, 0.4036494290861148, 0.5181508313797278, 0.16193277840619935, 0.2221138118896221, 0.42470190822797316, 0.5025836829036129, 0.453830275903774, 0.33090990347973237, 0.22466179613865078, 0.5250178117693196, 0.17245734934771917, 0.4202151646391109, 0.15457686391751468, 0.12292311451114513, 0.16140799118552207, 0.13085787027875717, 0.1492923468344105, 0.1574289824470223, 0.9935200998545437, 0.9921266439522461, 0.9925125250697867, 0.9931030426082268, 0.9913532473796945, 0.9916903572701092, 0.9905707472842213, 0.990412173786462, 0.9910570655563103, 0.6576511562817258, 0.6869937210808106, 0.7138018319601112, 0.5962644569544053, 0.6370918670054273, 0.6587578903481122, 0.66664217403681, 0.6481829763501195, 0.6219230433970386, 0.6084474963710675, 0.5837534232706524, 0.6288144512425664, 0.6449355326273107, 0.5836303317361996, 0.23984429979196986, 0.6084898773571742, 0.4695109211255101, 0.3253052073867353, 0.17431704406400073, 0.1872938070605883, 0.19531976770928727, 0.1760770300542268, 0.17102580162179015, 0.1709764879257657, 0.17430210672768665, 0.129051473373191, 0.19532580097731755, 0.1922796495271727, 0.18781763029102583, 0.17100962056236746, 0.1691950148247895, 0.1863359684732332, 0.1880582058030661, 0.21555661109959112, 0.2136313734184293, 0.21273099223418324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018620875335599862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026729214400212697, 9.999999999998899e-05, 9.999999999998899e-05, 0.0351298562568505, 0.13180099291067804, 0.0717808457710919, 0.09499672567011208, 9.999999999998899e-05, 0.11926377079348605, 0.022679647130626868, 9.999999999998899e-05, 0.025198301614390628, 0.07147773181480299, 0.12970287124931934, 0.1258847606086576, 0.1835133963194946, 0.1858974480734994, 0.20417991843555705, 0.21812913582501037, 0.23762676249400527, 0.15676111289104488, 0.17019705969929377, 0.4778930816565947, 0.5053428947203852, 0.47550486435459904, 0.5098181458779684, 0.4949336192847702, 0.5099603640931796, 0.5384653346952737, 0.564253195518551, 0.5045561335846726, 0.09423958974494362, 0.10911172939220537, 0.09219586488361742, 0.09893419716054319, 0.0962272544082472, 0.09068811094227691, 0.0920496316657764, 0.09609219522038515, 0.10917433926244902, 0.12658636674680912, 0.1491000511458398, 0.12510387585613703, 0.11704757839051894, 0.11946306592220846, 0.13353186945288564, 0.12798054677342696, 0.17061926569244823, 0.12936782064814012, 0.4652176048039972, 0.4833095038203228, 0.47907575313726625, 0.4485626858838304, 0.47524628504751276, 0.4912019873575182, 0.5929795646577907, 0.5609933536903918, 0.5020104171673454, 0.2536695814975264, 0.2623197930795036, 0.270339169266826, 0.2672371434550026, 0.24207095289710456, 0.2869641250643892, 0.3192140474496352, 0.33598506204576983, 0.37995732597695364, 0.1875052786374768, 0.1861295284409633, 0.20313116852631952, 0.19751898699758985, 0.19130534309455272, 0.20378082776747652, 0.2030834725886712, 0.18034691316019758, 0.1988800320381462, 0.37104267344730546, 0.6161959381120485, 0.5627296118692603, 0.24082632196076403, 0.47477120744552537, 0.7750177112782007, 0.1815223630633639, 0.6365691685210682, 0.3029987008746039, 0.17353881404377935, 0.17625779513398865, 0.3279654454855948, 0.7290203520720695, 0.7971028717902628, 0.7767628803458552, 0.4707715796645906, 0.6281013738030548, 0.6642383929635982, 0.19284743992105557, 0.19880523146341045, 0.16359268002125915, 0.20324211351534516, 0.19736019058120702, 0.19899526827681224, 0.20398364844125594, 0.20686333517512923, 0.15066663232780342, 0.18431361454417416, 0.17446881093400224, 0.18666282065994177, 0.16458814896944218, 0.19253606967373338, 0.17600082070087408, 0.15836225199999676, 0.17500165046321703, 0.17615678169727234, 0.07513109009295382, 0.07188921571049856, 0.06658855304672218, 0.07997960698760176, 0.08049598052460771, 0.07745568869979003, 0.07386491849732624, 0.07635798408769134, 0.073476406518456]}, "mutation_prompt": null}
{"id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 64, "fitness": 0.3504202752603777, "feedback": "The algorithm DynamicHarmonySearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.30.", "error": "", "parent_id": "f4e17580-2848-4b14-a21c-aa96e8d11acc", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "37abea71-67cc-4433-b796-c1d21585915e", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "0179eef0-6e73-4220-8845-fc09a63ec993", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "1fef882a-d936-4d71-b4e5-937bb54e41ed", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "73dec543-253a-4b65-a665-39eb4f49d64d", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "1012eabe-046a-4bbf-999b-42e6219da8a0", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_prob = crossover_prob\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n\n    def mutate(self, target_idx, iter_count):\n        scaling_factor = self.scaling_factor * np.exp(-4 * iter_count / self.budget)\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        r1, r2, r3 = np.random.choice(candidates, 3, replace=False)\n        mutant_vector = self.population[r1] + scaling_factor * (self.population[r2] - self.population[r3])\n        return mutant_vector\n\n    def crossover(self, target_vector, mutant_vector):\n        trial_vector = np.copy(target_vector)\n        crossover_points = np.random.rand(self.dim) < self.crossover_prob\n        trial_vector[crossover_points] = mutant_vector[crossover_points]\n        return trial_vector\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            for idx, target_vector in enumerate(self.population):\n                mutant_vector = self.mutate(idx, iter_count)\n                trial_vector = self.crossover(target_vector, mutant_vector)\n                target_fitness = func(target_vector)\n                trial_fitness = func(trial_vector)\n\n                if trial_fitness < target_fitness:\n                    self.population[idx] = trial_vector\n\n        best_idx = np.argmin([func(individual) for individual in self.population])\n        return self.population[best_idx]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Adapting the Differential Evolution algorithm with self-adaptive control parameters for enhanced global exploration and exploitation in black-box optimization tasks.", "configspace": "", "generation": 69, "fitness": 0.34391256465985787, "feedback": "The algorithm SelfAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.804743950205409, 0.786854296078014, 0.8014899519233993, 0.7781526430697796, 0.7943798741468615, 0.7789377042874255, 0.7911233065518211, 0.765084087388509, 0.774717202766211, 0.5844415621045937, 0.620460096275788, 0.6359755576302903, 0.606044432185053, 0.5997884171370683, 0.5785308416548036, 0.6245304979826527, 0.6145730689838941, 0.6055971294726065, 0.12444005202860209, 0.10340228756489489, 0.10109921679352396, 0.100877799996972, 0.10982182042084254, 0.1252925224352277, 0.10627132651803128, 0.1138541231378778, 0.1014644288547435, 0.0966265644675417, 0.08818520364716609, 0.10037936148808335, 0.11357874033170556, 0.11477500901453985, 0.09437281852538071, 0.11936159496101606, 0.1126438464291879, 0.09429097050278412, 0.9499138794589441, 0.9606919922880369, 0.9569315189009849, 0.9497642072663411, 0.9664445629628128, 0.9462548363785384, 0.958189799689272, 0.9698579476794666, 0.9308810167601611, 0.37280997538351524, 0.2694456887352177, 0.3621272824453776, 0.39793497497216157, 0.39546599888028044, 0.36723623180290055, 0.22236078904195333, 0.34196077972335237, 0.43748859479548796, 0.7504920600738859, 0.6536159197241601, 0.7442861298534695, 0.7082816750765888, 0.741978803646433, 0.7010004782163961, 0.7372176197237426, 0.8150183077342656, 0.6422750461140466, 0.23749765353248187, 0.15926083102668176, 0.15566777395128684, 0.18173621403739015, 0.182688068312017, 0.14421012274667233, 0.15282776615411697, 0.18179655916247806, 0.18339720817463112, 0.18586189829415456, 0.15195486300785654, 0.17715168527059855, 0.22512801747241584, 0.18097424827094244, 0.15521173015080836, 0.18879408115661367, 0.13394977489328808, 0.1403677044929027, 0.3030616238443371, 0.34483786095144464, 0.40309678905460045, 0.22607903249857608, 0.06872900009731164, 0.2846070379754527, 0.3682743894038599, 0.2122869068210672, 0.3898722819260181, 0.13550508474763046, 0.46500487045276995, 0.3397792705032521, 0.35416217163572306, 0.4716672686735772, 0.49492844220017496, 0.3500228241025173, 0.5220089171761028, 0.5014835359981009, 0.1919526592233154, 0.094445561553952, 0.08314499169275547, 0.17156423105630636, 0.2172101266358084, 0.006932897742791266, 0.19821298719681468, 0.15052361457783936, 0.1288816107713301, 0.2723708986492366, 0.2750650904634504, 0.26489574466307053, 0.22802554084579352, 0.3390857263392729, 0.3520743029298078, 0.28530156445839716, 0.22782237736087074, 0.3305271711934673, 0.6505713530428144, 0.6562983926491037, 0.7142424145503499, 0.6682624195858714, 0.6997126245491471, 0.6802946099217893, 0.7335975788267526, 0.665570180175262, 0.6669460737314035, 0.08970833904648412, 0.09185487921159385, 0.10507414790888792, 0.08368608343318684, 0.0946753941813544, 0.09228864262657077, 0.0849949825678481, 0.08814237908578437, 0.11363260762913885, 0.11642015029453034, 0.14664471586433114, 0.1275903914141212, 0.10474322329561747, 0.12242303506053998, 0.13613080830584456, 0.14129361410777908, 0.1014302556818295, 0.1072629970688358, 0.3945485003410143, 0.42082507921961154, 0.42550488322460167, 0.44489510294966017, 0.39558474663218546, 0.4254009931251316, 0.44241191869390517, 0.44263017945346705, 0.4220196325995147, 0.3059639141995518, 0.3068849189055751, 0.31562724319372404, 0.28433916158997263, 0.30052915324159446, 0.27331470280642056, 0.3535347296151755, 0.31862435507785725, 0.3287230842646566, 0.18854156173087322, 0.20733978354210103, 0.19753162419763248, 0.20012631065479203, 0.18629239264355046, 0.19221976938460839, 0.18796513131052983, 0.22990094000045436, 0.20071006436479788, 0.1903239140972416, 0.19270243444911217, 0.18409550755573723, 0.19262975798650628, 0.37520740648557394, 0.19453326318700492, 0.17458965915170632, 0.18214033600682789, 0.20227857663844273, 0.7900424140653421, 0.17579671376653572, 0.17155140548686632, 0.7658830605872686, 0.19237877015908467, 0.708629734404918, 0.7591550754083127, 0.16287143703729212, 0.7460491551604465, 0.7409408563450501, 0.2315709928429861, 0.6775583661694851, 0.1937584808895394, 0.19215344935500311, 0.1498563728109753, 0.7838965353226286, 0.14955814472020268, 0.19706320874965255, 0.17413795953542444, 0.1655463872306191, 0.17036771343098955, 0.18680053238729466, 0.15732592873304074, 0.16807558335690553, 0.16885890722572472, 0.17276215382148907, 0.1815648358091685, 0.07935514810388289, 0.0644291359029121, 0.08257995683600405, 0.08685396756849206, 0.07564948114609482, 0.07258050228813395, 0.07653565640412796, 0.0746090577623314, 0.08637482955295894]}, "mutation_prompt": null}
{"id": "77273c48-1512-4a20-a23a-cd599d5c5d12", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "a2ac8989-6995-411b-8de2-9d21286c2118", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "3a659c78-3c36-49db-bc9d-ec05fc6f3f14", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "f3b6cce3-612e-4270-b501-b84c2a9c37d4", "solution": "import numpy as np\n\nclass DynamicFireflyAlgorithm:\n    def __init__(self, budget, dim, alpha_min=0.1, alpha_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha_min = alpha_min\n        self.alpha_max = alpha_max\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.linalg.norm(x - y))\n\n    def levy_flight(self, alpha):\n        return np.random.standard_cauchy(size=self.dim) / (np.abs(np.random.uniform()) ** (1 / alpha))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for iteration in range(self.budget):\n            alpha = self.alpha_min + (self.alpha_max - self.alpha_min) * (iteration / self.budget)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if fitness[j] < fitness[i]:\n                        step = self.attractiveness(population[i], population[j]) * (population[j] - population[i])\n                        population[i] += alpha * step + self.levy_flight(alpha)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n        \n        return population[np.argmin(fitness)]", "name": "DynamicFireflyAlgorithm", "description": "Introducing the Firefly Algorithm with dynamic alpha for enhanced exploration-exploitation balance in global optimization.", "configspace": "", "generation": 73, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d10cf68c-54c6-43c5-be98-cfc253c08b42", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "f752154a-9d89-480f-99b7-ac3ddbe31fc8", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "09a29e80-5382-4cd7-b080-eab48f3cee28", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "a3631431-280c-40f9-b61a-f1636bd10a83", "solution": "import numpy as np\n\nclass DynamicDEAlgorithm:\n    def __init__(self, budget, dim, population_size=50, cr=0.9, f=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.cr = cr\n        self.f = f\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n    def mutate(self, population, target_idx):\n        idxs = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[idxs[0]] + self.f * (population[idxs[1]] - population[idxs[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        rand_dims = np.random.rand(self.dim) < self.cr\n        trial[rand_dims] = mutant[rand_dims]\n        return trial\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            new_population = np.empty_like(population)\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                new_population[i] = trial if func(trial) < fitness[i] else population[i]\n            population = new_population\n            fitness = np.array([func(individual) for individual in population])\n\n        return population[np.argmin(fitness)]", "name": "DynamicDEAlgorithm", "description": "Introducing Differential Evolution with Dynamic Adaptive Strategy Parameters for Enhanced Black Box Optimization.", "configspace": "", "generation": 77, "fitness": 0.15516036946338313, "feedback": "The algorithm DynamicDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.3564579646287591, 0.3306740533174989, 0.3352732407519703, 0.31691646501684057, 0.3076264676718179, 0.30522188093621494, 0.3335724101901847, 0.31041312095541973, 0.3457361258926728, 0.03067296087434135, 0.047795583214361614, 0.053819381535645916, 0.04424110438876139, 0.02958646750742633, 0.04049709711391736, 0.0519738689730157, 0.029419179667455997, 0.07722253662222134, 0.08683670037701541, 0.07085289676819706, 0.0817359601806038, 0.06251451808470831, 0.07635614866280971, 0.06772647092798834, 0.07023750972974374, 0.07112118349991103, 0.07848049742004137, 0.07421314410095492, 0.05210025821802233, 0.05970086356660964, 0.06516806228455174, 0.05592850647363268, 0.0631642818637751, 0.06134940235093711, 0.06811260448928935, 0.06992034244181322, 0.9403782360897777, 0.9656467566332494, 0.9379534326699206, 0.963854100245367, 0.9421368146817762, 0.9480273357095218, 0.950574627555983, 0.9682482985589098, 0.9411596113411728, 0.11295008383478966, 0.08728438731557342, 0.08053012105548318, 0.09253980394180472, 0.09937376868845005, 0.08698052438617976, 0.09788710600502692, 0.07140321723980836, 0.0818846636875663, 0.205979991353749, 0.1858444107085433, 0.19782050802431828, 0.20049806355316757, 0.19401596716234626, 0.16993489949509222, 0.18487713703675046, 0.17889790645114922, 0.19305604154993938, 0.08308580890842676, 0.08252801538417276, 0.09312766376531467, 0.07226031052821313, 0.06908989381348163, 0.07477903541043252, 0.07601450268715815, 0.06297939751212711, 0.0696960926463095, 0.06571213924965902, 0.06996950347457553, 0.07116527281742091, 0.0762984501312941, 0.056289397743747194, 0.10924078906612755, 0.08040926321323916, 0.07732957064058266, 0.08014979952011947, 9.999999999998899e-05, 0.00042966564541324637, 0.00892888700584249, 0.0008932576171392093, 9.999999999998899e-05, 0.0026739636622885588, 0.000550217498940242, 9.999999999998899e-05, 0.00888780068215056, 0.06563404478866375, 0.09545057648596322, 0.06161233127332, 0.059739799149362116, 0.05728364463246449, 0.07733241590926043, 0.09484310297320231, 0.07024820415697719, 0.06519875463031999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04658682593916075, 0.03855326744890719, 0.05962802385858723, 0.049185030668216334, 0.039750038313737246, 0.04750678443841083, 0.048107155108145117, 0.041282138459618145, 0.03880079806228276, 0.29505560486672666, 0.30251229965095294, 0.31281871593468524, 0.27878440191922804, 0.31252649986619896, 0.29924469098118545, 0.3068685082115824, 0.2917317431932499, 0.29582121484098267, 0.06712294191205326, 0.06447926947316596, 0.05750364650458628, 0.059987338926884015, 0.06620314866973842, 0.059769433536222105, 0.06552847075553003, 0.05766245166466888, 0.05643046386339989, 0.10970930390578304, 0.13965928098219993, 0.11842175776965747, 0.14406205773592007, 0.1168141287295843, 0.10798713552628325, 0.11545769561339458, 0.1119393470104012, 0.11265167179698532, 0.19833542477733535, 0.19256843153656034, 0.2029865439382984, 0.2076783331129023, 0.21210215937233945, 0.20868205825052732, 0.20166062921785322, 0.20085835798704288, 0.2114596811608248, 0.14179876645247658, 0.135415109485307, 0.13795220512251438, 0.14992670147747356, 0.13799193900592932, 0.15272868453574118, 0.14774186857380278, 0.15549285965256, 0.1502515372589016, 0.14873804915993294, 0.17575250505041806, 0.1625651394467562, 0.1689035629478547, 0.15810921194417238, 0.1847067928532613, 0.1566573987043255, 0.16226041797043034, 0.17911226787896772, 0.15069893680710333, 0.15993533606065158, 0.15540997354513253, 0.14511106763084425, 0.16990964766895356, 0.16398776559985295, 0.15465961298295716, 0.16087171381259668, 0.16444928201408604, 0.1560029412921069, 0.1432756720556022, 0.1530449940727382, 0.16270641237120365, 0.20656012204922047, 0.18074804297196645, 0.14390240843282787, 0.14698770308822717, 0.1504889471740336, 0.16741015138462967, 0.21236331558532728, 0.174544601014191, 0.16437123498631445, 0.14163817898952424, 0.148535793602386, 0.13960107279902245, 0.14908608465840556, 0.15117354671910033, 0.18142153657348237, 0.1624436206740436, 0.18123729553460288, 0.1999800812065352, 0.17058149843062453, 0.18042254623648113, 0.16488926586360153, 0.1591950066451956, 0.16853635558986002, 0.05637670763096103, 0.0666923826132656, 0.06383003017035283, 0.05667831069291629, 0.05624508176322163, 0.07245218989427793, 0.05977752762934174, 0.05870767864155513, 0.055699557620346396]}, "mutation_prompt": null}
{"id": "9530b644-7867-4ff0-81aa-07333496dcab", "solution": "import numpy as np\n\nclass DynamicHarmonySearchDEAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95, de_scaling_factor=0.5, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n        self.de_scaling_factor = de_scaling_factor\n        self.de_cross_prob = de_cross_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n            if np.random.rand() < self.de_cross_prob:\n                de_vector = self.de_scaling_factor * (harmony_memory[np.random.randint(self.harmony_memory_size)] - harmony_memory[np.random.randint(self.harmony_memory_size)])\n                new_harmony[i] = new_harmony[i] + de_vector[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchDEAlgorithm", "description": "Enhancing Harmony Search Algorithm by incorporating a Differential Evolution-inspired mutation strategy for improved exploration-exploitation balance and solution quality.", "configspace": "", "generation": 78, "fitness": 0.3382819233886349, "feedback": "The algorithm DynamicHarmonySearchDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.912155935652006, 0.9209151866241855, 0.9271555805710602, 0.9063114153616811, 0.9112969754150962, 0.9226152778795284, 0.9248034694966888, 0.9075827380699525, 0.9107697453490263, 0.850678081599279, 0.8392179734392125, 0.8526567746242049, 0.8595026650869546, 0.8532199392611246, 0.8536582390826744, 0.850260300381275, 0.8412788016817749, 0.8659833719485608, 0.10263579875386097, 0.12527370751764788, 0.2883209308463872, 0.12079293341710651, 0.32005396906470385, 0.12530672928166986, 0.10778145097621783, 0.1200774321469289, 0.15256464810782056, 0.11654777383696824, 0.10190323974143611, 0.13390721966236419, 0.10887461285988898, 0.1228664189372548, 0.09903643206979218, 0.10942899097732972, 0.11402079015332112, 0.11270013375003596, 0.9941349034109, 0.9896552330999606, 0.9908813880404215, 0.9896003522270127, 0.993685065239027, 0.9937133606441251, 0.9874858689545916, 0.986339655875287, 0.9848499590150976, 0.678744712792219, 0.6995819560656034, 0.7497327446671687, 0.6778557586608411, 0.6412591548434339, 0.7188954558329694, 0.6082887002376194, 0.690493546953272, 0.6661515905353849, 0.22406231288356393, 0.5307855365120757, 0.3348807823268789, 0.6430760631875976, 0.33012614526296413, 0.8116152476854384, 0.7581647953028368, 0.7143936568809657, 0.22090652967038127, 0.16111157664331166, 0.16975519092851388, 0.1761249596577873, 0.16347929178137077, 0.17450660608009416, 0.17435871932188152, 0.1670212877507622, 0.1620559926919528, 0.20694966985858843, 0.1578220741734936, 0.1717431922700181, 0.1607892530525109, 0.16470542489070195, 0.16999193173350813, 0.1705613864230492, 0.2049752445700599, 0.19501124301474837, 0.1956758813359868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000381993355732968, 9.999999999998899e-05, 0.00703431643757868, 0.004270291288563044, 0.008401331448561922, 0.0008500609097250589, 0.04434600285703505, 0.027529213555697596, 9.999999999998899e-05, 9.999999999998899e-05, 0.2458509593560939, 0.08451400725043645, 0.12644862656000255, 0.1319343294773585, 0.05890162991812409, 0.10409045405384854, 0.14111704148731585, 0.14053746570736514, 0.03778319792392992, 0.18213761196712208, 0.17193269320307414, 0.1477391020938057, 0.12289880041185586, 0.13132472496071823, 0.21054713284865056, 0.10760006767796948, 0.07397971413983417, 0.04930646052071608, 0.5216908186602499, 0.5133233783282765, 0.5183880587592085, 0.5391776373186932, 0.5382620241291254, 0.5489438932848636, 0.5332303510493303, 0.5384682419416541, 0.5727421553275223, 0.109639942940995, 0.09895399050030396, 0.09985050670769724, 0.11021319670766516, 0.09068572066732572, 0.09534378407841593, 0.10350363617186376, 0.10617051521880205, 0.08527308067160944, 0.11885231541392438, 0.11197592546317114, 0.14189193917957932, 0.14531911551774446, 0.13198428850766541, 0.11428505859046423, 0.13729516360552918, 0.14017549786138916, 0.13871236184920321, 0.5346813422524008, 0.5461373507649032, 0.5043333685857994, 0.5550914778618459, 0.5732383393066458, 0.5918061989531305, 0.7070712696456052, 0.6337269077344773, 0.6235582453561392, 0.3226751969253614, 0.3305260390302748, 0.29259391230239407, 0.3393408987885509, 0.34144082846484825, 0.2576043216649734, 0.4288778475642675, 0.40823328575815454, 0.23767846575763774, 0.18729024530281357, 0.21096680463213302, 0.19183401192735405, 0.1839808063231022, 0.21413318255122626, 0.21206383665112194, 0.20506464588879214, 0.20514715181600018, 0.19501335411099197, 0.19484186712104667, 0.2903157952488947, 0.22402149651275882, 0.4656546005815304, 0.19180990483240967, 0.2072861620087595, 0.29756488682165827, 0.1829474278377604, 0.20184547115472662, 0.8621090892127448, 0.5464307089754294, 0.7227762763228136, 0.6326308609959195, 0.8182428828629362, 0.8035540687292495, 0.39998379817664464, 0.4540947778763902, 0.46845988515462766, 0.18001024683300615, 0.16618394294150096, 0.3715395660678381, 0.2674567617357898, 0.20665683332400464, 0.20491487406997022, 0.45741867204631514, 0.1956070036173323, 0.2763984991307734, 0.17437959344020404, 0.1733642994024398, 0.17679105787406557, 0.179342332977805, 0.16718121557090548, 0.1719607821246264, 0.18772611572141418, 0.17506228240875898, 0.1908605393667855, 0.0872323495301891, 0.08256326007297643, 0.0806585584912688, 0.08023301523820137, 0.07959160045161529, 0.07695535769185935, 0.08390323587816251, 0.0821191091503295, 0.07904013596536719]}, "mutation_prompt": null}
{"id": "b81bb00c-8c3a-44c3-a26f-84e5d3c1fdfe", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "4c7b9776-b079-4d1f-a454-59f28c27622e", "solution": "import numpy as np\n\nclass QuantumHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n                # Quantum-inspired operator\n                new_harmony[i] += np.random.normal(0, 1) * np.pi / 2\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "QuantumHarmonySearchAlgorithm", "description": "Introducing Quantum-Inspired Harmony Search Algorithm by incorporating quantum-inspired operators to enhance exploration-exploitation trade-off and solution convergence.", "configspace": "", "generation": 80, "fitness": 0.1618560667914291, "feedback": "The algorithm QuantumHarmonySearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.2615968669401223, 0.26472616338616517, 0.29234450396828127, 0.26021322538275893, 0.2971433226455331, 0.27143273820393754, 0.28043234333366585, 0.2552942513927249, 0.2675589932323491, 0.005441447170605018, 0.0014211331367856017, 0.011740090264337644, 0.0034414324154877773, 0.011543995822269837, 0.0003510001917252925, 0.0075444328686593565, 0.0013179901887737655, 0.0043137510922711675, 0.08340582855003431, 0.09086555098030291, 0.09416000361188237, 0.11295356447740945, 0.09175140884010868, 0.07691246276945618, 0.0948704490189275, 0.0953494160155236, 0.08317658706941078, 0.07477736814467228, 0.06939578719857364, 0.06617635577282344, 0.07139167296351612, 0.08334584735187056, 0.08003672233929426, 0.06581848734907947, 0.07557843805468278, 0.06993531056525448, 0.9920848654309105, 0.9924346588572358, 0.9901780750026778, 0.9875983065926833, 0.9907497631794882, 0.9891099216043915, 0.9916539471074979, 0.9870891560619902, 0.9903416250953985, 0.1330988705571906, 0.14980639947540075, 0.1335281218645774, 0.15603049845381378, 0.1310235628388826, 0.15490279184897227, 0.13993457600021464, 0.16579022220941042, 0.14301181367011717, 0.18211962907217216, 0.2061914322316316, 0.19485713063951937, 0.2174005698565037, 0.18746519006076412, 0.17040489141179604, 0.1822576723381173, 0.16863986556137367, 0.1843750535931049, 0.08660733946516708, 0.06830275980105216, 0.05516231584419251, 0.07821489136417659, 0.06496456899713687, 0.08143147483317681, 0.0635759313166443, 0.07018051358380328, 0.0589703900951728, 0.09232856428944802, 0.0640878027891073, 0.07207537036868839, 0.08103044952480998, 0.08673652482391403, 0.09485833075945815, 0.06998938583797187, 0.07440259173502328, 0.09229318357138583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009799993236801363, 0.028843827954324608, 0.0029363583780251945, 0.030221360071061687, 0.06141646083319341, 0.018827270729896317, 0.07177367902164855, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033111966666666603, 0.01922147949838493, 0.027745243263464503, 0.022560090425909785, 0.01933812122648959, 0.022852536717959615, 0.033166014357213, 0.03194964901795905, 0.02159026157392996, 0.2716145044285496, 0.30424695234915855, 0.28943578960408645, 0.2728283837027693, 0.2802057811597909, 0.2872509296529163, 0.27227246407849925, 0.2966679019781826, 0.27524533503049475, 0.06330083932256236, 0.08269551987382617, 0.06732419102837084, 0.06385714432143319, 0.07476911529505981, 0.07176884410341067, 0.06833037078240445, 0.08097711106558492, 0.07199739222531698, 0.14375292034916787, 0.13412125033312572, 0.16513223381867903, 0.14164632191383553, 0.11698792229961141, 0.12019672435696305, 0.11507520484652756, 0.12372034196345627, 0.12977760406165084, 0.21301271864952354, 0.20524063989824737, 0.2162483835982666, 0.21794352871596168, 0.20926693588246514, 0.22375883058602264, 0.24409005400537997, 0.2194219076962164, 0.21501662551736722, 0.1431840272721283, 0.1526820376669561, 0.1471359131927733, 0.14672049691664724, 0.14374909627590915, 0.15671212579611038, 0.1416405962546463, 0.15077565245925195, 0.15983630882203848, 0.17296585680361132, 0.18976860359347703, 0.18526188716278713, 0.18917822296256526, 0.19677420545141677, 0.18592275950522996, 0.18996481378621233, 0.18846387656419605, 0.18188219396198368, 0.16844283747075783, 0.1712737906501387, 0.17148397783225777, 0.17610289677327962, 0.1784318322374917, 0.1716634580534221, 0.1764883107040789, 0.1737886992550015, 0.17056986872432844, 0.20375200712072872, 0.2728907191954605, 0.2251219544492662, 0.2681929226491975, 0.3352623461517489, 0.2722913294734679, 0.29847255072297796, 0.23942248266041577, 0.24727204785915513, 0.16769985720156966, 0.15651172117444534, 0.1548346036324676, 0.22353629722180945, 0.18841911667498512, 0.17864189933076502, 0.19211602475870282, 0.2533068654010835, 0.2295711295509778, 0.18504077364394833, 0.17886734253989522, 0.16829941635492518, 0.17472834867288167, 0.17215573876910006, 0.18981729233373734, 0.17049368287219635, 0.17136453244958372, 0.18623370923250093, 0.061362127830076885, 0.07275875901850382, 0.07384597663290227, 0.07505650527050534, 0.06953148583975288, 0.06678275699074077, 0.06414712585061044, 0.06842360602778352, 0.07221805144786908]}, "mutation_prompt": null}
{"id": "3be5a30a-c96b-4ccc-b360-d1797515a3ee", "solution": "import numpy as np\n\nclass NovelDynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "NovelDynamicHarmonySearchAlgorithm", "description": "Novel Dynamic Harmony Search Algorithm with enhanced parameter adaptation and improved exploration-exploitation balance for efficient optimization across diverse benchmark functions.", "configspace": "", "generation": 81, "fitness": 0.3504202752603777, "feedback": "The algorithm NovelDynamicHarmonySearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.30.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "af3c360c-8921-4f71-82cf-d06a251be16c", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "aa7b30f7-ef58-464a-acb9-333d887943cc", "solution": "import numpy as np\n\nclass DynamicFireworkAlgorithm:\n    def __init__(self, budget, dim, num_fireworks=20, explosion_amp=0.1, min_spark_amp=0.01, max_spark_amp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_fireworks = num_fireworks\n        self.explosion_amp = explosion_amp\n        self.min_spark_amp = min_spark_amp\n        self.max_spark_amp = max_spark_amp\n\n    def initialize_fireworks(self):\n        return np.random.uniform(-5.0, 5.0, (self.num_fireworks, self.dim))\n\n    def explode_firework(self, firework):\n        explosion_vector = np.random.uniform(-self.explosion_amp, self.explosion_amp, self.dim)\n        return firework + explosion_vector\n\n    def spark_firework(self, firework):\n        spark_amp = np.random.uniform(self.min_spark_amp, self.max_spark_amp)\n        return firework + spark_amp * np.random.normal(0, 1, self.dim)\n\n    def __call__(self, func):\n        fireworks = self.initialize_fireworks()\n        fireworks_fitness = np.array([func(firework) for firework in fireworks])\n\n        for _ in range(self.budget):\n            for i in range(self.num_fireworks):\n                new_firework = self.explode_firework(fireworks[i]) if np.random.rand() < 0.5 else self.spark_firework(fireworks[i])\n                new_fitness = func(new_firework)\n                \n                if new_fitness < fireworks_fitness[i]:\n                    fireworks[i] = new_firework\n                    fireworks_fitness[i] = new_fitness\n\n        return fireworks[np.argmin(fireworks_fitness)]", "name": "DynamicFireworkAlgorithm", "description": "Introducing Dynamic Firework Algorithm with Multiswarm Interaction for enhanced global and local search balance in black box optimization.", "configspace": "", "generation": 83, "fitness": 0.1407469180039946, "feedback": "The algorithm DynamicFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.12.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.36847020834055766, 0.3492545719230489, 0.41962837447209933, 0.4003305901401736, 0.31430786872377436, 0.37320379730171627, 0.4107313110576678, 0.38725375380518257, 0.372086789062838, 0.00016440665521622044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006697111852279725, 0.020055790789571426, 9.999999999998899e-05, 0.017384952931147946, 9.999999999998899e-05, 0.003359257444194408, 0.030892652241673924, 0.018096949381873118, 0.023238165203065875, 0.02456402576130945, 0.041096502672218094, 0.03825837852062974, 0.015334559973644746, 0.059100765764806606, 0.02746006186451344, 0.01774122226561048, 0.04217903986149052, 0.0791239953806867, 0.019346161453908772, 0.01630729547260923, 0.0201829898477357, 0.011060071534393812, 0.020511243004187385, 0.3984636320735573, 0.185435621852711, 0.5282536681323591, 0.10369037924444324, 0.5747630761052509, 0.3985503849011769, 0.33555255199526024, 0.14968466255244273, 0.18457284935538254, 0.22842766118949187, 0.16187350309927773, 0.17162736413345614, 0.22420497726605626, 0.19443499837595413, 0.20659872113181976, 0.13839992808833979, 0.13173604947590245, 0.17982438124842337, 0.15565729888685387, 0.05886657852170951, 0.03878541240907829, 0.010626574320338866, 0.044741966122039956, 0.008745030067861315, 0.05868490649246194, 0.08960240790402041, 0.048128914104218934, 0.19705591572293757, 0.13641944756586, 0.10738653522280217, 0.12817262197037782, 0.14481700645830098, 0.10162061755724372, 0.133144834998133, 0.12179785202316507, 0.15809123116724055, 0.1723766013241944, 0.11779577627685245, 0.19247978899189444, 0.14672318588200473, 0.13031255288032007, 0.1599508359918398, 0.16009411685551023, 0.12408538792536605, 0.1677109899677104, 9.999999999998899e-05, 9.999999999998899e-05, 0.00047670494319296264, 0.005951986381931951, 0.021601737656401054, 9.999999999998899e-05, 9.999999999998899e-05, 0.014273170996523588, 9.999999999998899e-05, 0.10687594982577575, 0.07364249781102694, 0.16880510758922407, 0.0775722300676811, 0.07528158816991215, 0.1036858178426695, 0.14526015572643558, 0.07560401287483076, 0.0751041919537816, 0.0003462100847142491, 0.015435566768514208, 9.999999999998899e-05, 0.001701232748847925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008751524099573915, 0.0061894277007439324, 0.0474268335972291, 0.05932458265816709, 0.08523674816466809, 0.05465241090407691, 0.08149177305740796, 0.070793570303466, 0.08258609592486243, 0.06495012393844468, 0.07402585670413431, 0.3213718455325354, 0.330769970276256, 0.36264366942914306, 0.32286556418856116, 0.31489519535187893, 0.30557084263246304, 0.32552303292864426, 0.27841075306338015, 0.3431024401637096, 0.018703695575393642, 0.0015536246326193215, 9.999999999998899e-05, 0.0223289659068574, 0.0187730422420036, 0.05793046717165995, 0.01778802707803584, 0.01577208087476356, 0.06824037967691132, 0.12959996819237152, 0.1938587305780365, 0.15348276730080956, 0.2258338965906186, 0.17546320141395066, 0.16634690215094616, 0.19983626772291785, 0.12030085948992142, 0.14630019156741947, 0.11777144213134505, 0.12479673285566772, 0.12153105303204104, 0.14549243890749985, 0.13334213425771757, 0.12918163175714348, 0.13606273632590815, 0.1894263252652605, 0.1067273225186911, 0.06032093451887943, 0.06485650915630559, 0.08571451410651898, 0.08218306984840196, 0.0772356384257955, 0.070062758860447, 0.07159698201768883, 0.11853821706874912, 0.05139118206665194, 0.15525528140685896, 0.09420036321478442, 0.161100032721199, 0.17005937787690184, 0.11082746809836175, 0.15616326027567007, 0.16180705158247854, 0.10897403613581924, 0.14389665661577455, 0.14825848245210294, 0.23964297030673698, 0.18311996123949448, 0.18575142072043616, 0.16055332403515843, 0.18186320516519938, 0.16320459126478204, 0.16749399773611018, 0.15986335472566393, 0.4270587963975453, 0.16160661956095124, 0.4404331818639976, 0.4393927720884335, 0.1986120408743134, 0.5047413396473213, 0.16164206816989102, 0.47621637642600767, 0.2893753195488332, 0.3542971513923855, 0.42193457761849806, 0.2783243031760446, 0.23495243322983383, 0.25289254468542743, 0.17742048526308574, 0.2915169592393325, 0.26309562733387504, 0.309117828343647, 0.19546252059684532, 0.1985243792655902, 0.1943299397792584, 0.19102663937141107, 0.19657179162428307, 0.20386705616599388, 0.2048726067413158, 0.19928032746495006, 0.21707345958841728, 0.037120292518084685, 0.04404561718880473, 0.05860779404620442, 0.04319213960885149, 0.04850657392459412, 0.04196395618326221, 0.04984079664116403, 0.0312715880163813, 0.039551145511858565]}, "mutation_prompt": null}
{"id": "5b0d67db-c8f8-4333-9023-97b03191bee8", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "b0cdf942-8c7e-4252-9dda-499900758e2c", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "36737565-d1f3-4350-a4ca-943d58c329b9", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "a340fd8e-a779-45bb-a529-fae96d206b06", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "14fa301a-7fbf-4c25-8c3b-c07103171c02", "solution": "import numpy as np\n\nclass EvoSADE:\n    def __init__(self, budget, dim, pop_size=50, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def mutate(self, population, target_idx, scaling_factor):\n        candidates = np.array([idx for idx in range(self.pop_size) if idx != target_idx])\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant_vector = population[selected[0]] + scaling_factor * (population[selected[1]] - population[selected[2]])\n        return mutant_vector\n\n    def crossover(self, target_vector, mutant_vector):\n        crossover_points = np.random.rand(self.dim) < self.cr\n        trial_vector = np.where(crossover_points, mutant_vector, target_vector)\n        return trial_vector\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n\n        for _ in range(self.budget):\n            target_idx = np.random.randint(self.pop_size)\n            scaling_factor = np.random.uniform(0.5, 1.0)\n            mutant_vector = self.mutate(population, target_idx, scaling_factor)\n            trial_vector = self.crossover(population[target_idx], mutant_vector)\n            trial_fitness = func(trial_vector)\n\n            if trial_fitness < fitness[target_idx]:\n                population[target_idx] = trial_vector\n                fitness[target_idx] = trial_fitness\n                if trial_fitness < fitness[best_idx]:\n                    best_idx = target_idx\n\n        return population[best_idx]", "name": "EvoSADE", "description": "Evolutionary Optimization with Self-Adaptive Differential Evolution (EvoSADE) algorithm utilizing adaptive strategies for mutation and crossover to enhance exploration and exploitation for black box optimization.", "configspace": "", "generation": 88, "fitness": 0.27498081058450885, "feedback": "The algorithm EvoSADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.6692565589465473, 0.6482052919751202, 0.6236920715395446, 0.663067994961879, 0.6492697058747434, 0.6258774271852878, 0.6484199962828501, 0.6337055671455805, 0.6562068817973772, 0.34765250330697084, 0.3385199750884773, 0.3309081444001313, 0.36409209371294715, 0.4024734669698944, 0.3513000523757027, 0.3330207161750892, 0.33514788121203964, 0.33844077495112324, 0.09853364793365249, 0.0928723652504646, 0.09779303313481635, 0.09955000879769083, 0.09745350956850074, 0.09680175981639072, 0.10089061274874278, 0.09445926708948627, 0.11033811074923106, 0.08363771039327783, 0.09604556761069594, 0.10636132205291138, 0.09727542762950414, 0.09324140908071799, 0.09028253485288551, 0.09778785454353822, 0.08138839406918574, 0.0927060745251369, 0.9870078304056922, 0.9717816721067695, 0.9629227147936616, 0.982392590089132, 0.9838028338434945, 0.9708017211421822, 0.9799952287070307, 0.9784853744438627, 0.984200229056363, 0.23559321807995814, 0.23442925885572097, 0.25315505514628767, 0.2778256741803653, 0.24401451620598968, 0.2754231522658339, 0.2836488713930825, 0.2536190079969638, 0.27551563830153947, 0.528536540316668, 0.5676955685093898, 0.5793725030798169, 0.5648265374936582, 0.5059252901042406, 0.4874508703691761, 0.5967216487504374, 0.6516061985778752, 0.5836590622856834, 0.1995701293233746, 0.21391294320551113, 0.230473678918939, 0.2322919643316954, 0.22223343946828322, 0.17112253967135582, 0.22064276025201746, 0.1914564170057822, 0.24549851052974003, 0.21238324759553084, 0.1807091617771408, 0.24181892305862773, 0.23516201463972308, 0.23886858389195653, 0.1780621886567051, 0.2516472007075904, 0.22560759550017617, 0.22283836160085524, 0.17330763583237163, 0.12154611176232266, 0.13614645565637817, 0.12356934999987135, 0.09829511373333932, 0.14894211887420372, 0.18252458265406601, 0.12292258912631682, 0.1426169837341842, 0.2802762506820875, 0.29906987747504454, 0.2526711022825693, 0.23406064738876753, 0.25792950320981656, 0.259296533454798, 0.26875038081562475, 0.25798697053653386, 0.2807965676034494, 0.013040171933416778, 0.010582031116979085, 0.016626178558418414, 0.03385133316601974, 0.035957893396229124, 0.0649820084502164, 0.043038990461346294, 0.03704771096378445, 0.02486099563673838, 0.1735003652252768, 0.1690742952913481, 0.16069146540112855, 0.1643543796155592, 0.19757161090607456, 0.17690965202595887, 0.14605307767164, 0.16126965733365528, 0.1539304897295699, 0.5188727599648253, 0.5530412204851491, 0.5368944905191848, 0.4923339123189603, 0.5160347481174781, 0.5057450016535179, 0.5337512301463438, 0.49778341669633897, 0.5036728243052193, 0.0812404010975295, 0.08707576850435195, 0.08253906876293482, 0.08177964289802586, 0.09077429790728342, 0.08008334793320937, 0.0823343422262739, 0.08194878438831821, 0.080204456440505, 0.14011800781876516, 0.11089263890892798, 0.1378062659174759, 0.14322634727636452, 0.11898739858819429, 0.1308193555924061, 0.12414529246550865, 0.11968542627136447, 0.10459129210318296, 0.2882664093376881, 0.2960478504122228, 0.29709504719270363, 0.301193779469055, 0.27820210436059023, 0.2883700287936912, 0.2937999185815051, 0.32444734857740876, 0.30695433562024466, 0.2231377257353072, 0.22395503442827613, 0.20765607271912145, 0.22203323766417948, 0.22656519047170676, 0.22204731855565685, 0.2271924573524744, 0.22245311883451857, 0.22886702841288276, 0.1684319402055262, 0.19265630449748827, 0.18975286343733344, 0.1902209368345099, 0.24119828287653922, 0.18319973148222202, 0.19656465032334847, 0.2071825203974904, 0.2037217767563163, 0.17740118542009076, 0.19981460734987688, 0.1705806599480395, 0.17434367266399697, 0.17450701411310388, 0.1787715952061848, 0.17242908236827426, 0.1742497220635294, 0.18365474281270144, 0.6207137682440758, 0.45018605894994934, 0.1663160347179301, 0.17786561714002036, 0.49681650000581623, 0.1801250773461317, 0.4535673862676549, 0.4753273042325198, 0.27510811612539465, 0.44789222929416084, 0.3824220635264922, 0.44011158649500925, 0.18433666469520005, 0.19122728056100657, 0.4057115865741834, 0.407766426662174, 0.18107029381798212, 0.4569093290322005, 0.16363292628912973, 0.17099653981878926, 0.19663299571353887, 0.17889655805055205, 0.17712029449142297, 0.1657502740108735, 0.16788241967948503, 0.16226589596973373, 0.1673897360878175, 0.07353129601913788, 0.06430553066978861, 0.08049706316203353, 0.06682575464456586, 0.07300982679036427, 0.0816063390257965, 0.06199095382631781, 0.06604336384572107, 0.0652216977983735]}, "mutation_prompt": null}
{"id": "54b91657-7915-4a2f-9520-031100c6ddfb", "solution": "import numpy as np\n\nclass DynamicFireflyAlgorithm:\n    def __init__(self, budget, dim, population_size=20, alpha_min=0.1, alpha_max=0.9, gamma_min=0.1, gamma_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha_min = alpha_min\n        self.alpha_max = alpha_max\n        self.gamma_min = gamma_min\n        self.gamma_max = gamma_max\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n    def attractiveness(self, r):\n        return self.alpha_min + (self.alpha_max - self.alpha_min) * np.exp(-r)\n\n    def move_firefly(self, fireflies, current_firefly, iteration):\n        for i in range(self.dim):\n            r = np.linalg.norm(fireflies - current_firefly, axis=1)\n            beta = self.attractiveness(r)\n            gamma = self.gamma_min + (self.gamma_max - self.gamma_min) * (iteration / self.budget)\n            move = gamma * (np.random.rand() - 0.5) + beta * (fireflies[:, i] - current_firefly[i])\n            current_firefly[i] += move\n            current_firefly[i] = np.clip(current_firefly[i], -5.0, 5.0)\n        return current_firefly\n\n    def __call__(self, func):\n        fireflies = self.initialize_population()\n        firefly_fitness = np.array([func(individual) for individual in fireflies])\n\n        for iteration in range(self.budget):\n            for idx, firefly in enumerate(fireflies):\n                new_firefly = self.move_firefly(fireflies, firefly, iteration)\n                new_fitness = func(new_firefly)\n                \n                if new_fitness < firefly_fitness[idx]:\n                    fireflies[idx] = new_firefly\n                    firefly_fitness[idx] = new_fitness\n        \n        return fireflies[np.argmin(firefly_fitness)]", "name": "DynamicFireflyAlgorithm", "description": "Introducing Dynamic Firefly Algorithm with adaptive attraction coefficient and light absorption coefficient for efficient exploration and exploitation in optimization.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('setting an array element with a sequence.').", "error": "ValueError('setting an array element with a sequence.')", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {}, "mutation_prompt": null}
{"id": "afa60c8d-bd7b-472d-845d-86295427f9b3", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithmImproved:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithmImproved", "description": "Dynamic Harmony Search Algorithm with adaptive bandwidth and exploration probability for optimizing black-box functions efficiently.", "configspace": "", "generation": 90, "fitness": 0.3504202752603777, "feedback": "The algorithm DynamicHarmonySearchAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.30.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "8e970b2b-c32d-4445-9c2f-340083bdd433", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta_min=0.2, beta_max=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.beta_max = beta_max\n\n    def initialize_fireflies(self):\n        return np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n\n    def move_firefly(self, firefly, best_firefly):\n        beta = self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * np.square(np.linalg.norm(firefly - best_firefly)))\n        return firefly + beta * (best_firefly - firefly) + np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        fireflies = self.initialize_fireflies()\n        best_firefly = fireflies[np.argmin([func(individual) for individual in fireflies])]\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                new_firefly = self.move_firefly(fireflies[i], best_firefly)\n                if func(new_firefly) < func(fireflies[i]):\n                    fireflies[i] = new_firefly\n            best_firefly = fireflies[np.argmin([func(individual) for individual in fireflies])]\n\n        return best_firefly", "name": "EnhancedFireflyAlgorithm", "description": "Introducing Enhanced Firefly Algorithm with Dynamic Attraction Coefficient for enhanced exploration and exploitation balance in black box optimization.", "configspace": "", "generation": 91, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "4a1a9d1c-ca50-407b-98d5-e01be85a82b1", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "9ec42e50-9abf-49ad-8611-385d5c6db94d", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "a5514086-f222-4a20-ae55-5cc10048c90e", "solution": "import numpy as np\n\nclass DEHSAlgorithm:\n    def __init__(self, budget, dim, population_size=50, cr=0.8, f=0.5, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.cr = cr\n        self.f = f\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n    def mutate_differential_evolution(self, population, target_idx):\n        idxs = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[idxs[0]] + self.f * (population[idxs[1]] - population[idxs[2]])\n        return mutant\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.population_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                diff = self.mutate_differential_evolution(harmony_memory, i)\n                new_harmony[i] = harmony_memory[np.random.randint(self.population_size)][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        population_fitness = np.array([func(individual) for individual in population])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(population, iteration)\n            new_fitness = func(new_harmony)\n            best_idx = np.argmin(population_fitness)\n            \n            if new_fitness < population_fitness[best_idx]:\n                population[best_idx] = new_harmony\n                population_fitness[best_idx] = new_fitness\n        \n        return population[np.argmin(population_fitness)]", "name": "DEHSAlgorithm", "description": "Utilizing a Novel Metaheuristic Algorithm combining Differential Evolution and Harmony Search for enhanced exploration-exploitation balance and improved solution quality.", "configspace": "", "generation": 94, "fitness": 0.08900653779272447, "feedback": "The algorithm DEHSAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.18414985761281277, 0.18710806237354227, 0.1619308520008459, 0.15129795286268022, 0.1452959123338815, 0.15640748603145826, 0.16224282398932588, 0.19182188232140074, 0.14148095030470031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03718587827646713, 0.04208104026758441, 0.04177661443558578, 0.042006149191932685, 0.034535770851306546, 0.05044383354980764, 0.04290682544702373, 0.053265941845431874, 0.04023168999251814, 0.031856820511271144, 0.030763374512949304, 0.030037201752082576, 0.04271132141937328, 0.032702279887103614, 0.019604959688316326, 0.051093511619604404, 0.035357956449875716, 0.03572520756354658, 0.1783288747524424, 0.10525564990443159, 0.10519313520822726, 0.11974965002930693, 0.1315381191997278, 0.11824427374344026, 0.11902280189995385, 0.12939026519134422, 0.11374214168833985, 0.09336339625450651, 0.061030541627282386, 0.0659453122658682, 0.06531731938940888, 0.05114381220768971, 0.10053565101215245, 0.058269642085379436, 0.07699399397604889, 0.03690205488937104, 0.14475848670905211, 0.13137526532901234, 0.1136758382109696, 0.10255668244864502, 0.10422922950244629, 0.11538609700375435, 0.121196488309121, 0.1374405125631194, 0.13649719175026143, 0.009062768018380352, 0.002012534888368833, 9.999999999998899e-05, 9.999999999998899e-05, 0.013958085988329594, 0.007316057889534711, 0.022974921189337638, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018230954199560667, 0.004022717216657479, 0.009597955406448477, 0.0014373266166299858, 0.012095761764563395, 0.01850271683607807, 0.010348745672097315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04919895222184023, 0.05360725272935085, 0.050018726381097944, 0.04291185478011117, 0.048945338396415905, 0.05754814957583532, 0.0476039483105023, 0.037817041222663605, 0.05176676126945334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002520831530477885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2587876684893329, 0.18534912119703817, 0.20306815043924265, 0.20581180229921625, 0.20451326243532897, 0.1856459677564739, 0.20021038213872888, 0.18420138546049847, 0.20373979866074965, 0.044856022014228225, 0.03428058382931998, 0.05951661248393447, 0.04706151680193105, 0.04539365957724473, 0.04146202758586637, 0.056672413099549845, 0.048518827801168674, 0.03832940655901862, 0.12542382995404733, 0.13530446985860012, 0.14892466509383684, 0.1658158608859407, 0.1567456249862178, 0.12794182061508252, 0.1400366602458869, 0.15498446167906565, 0.12693453023876156, 0.15422429481891398, 0.1513033645963613, 0.17277407429728975, 0.15435361966090566, 0.1577401909700682, 0.15494608221295625, 0.15950439392843452, 0.17663689906960367, 0.15567026717337462, 0.09060514393566133, 0.09153275401069882, 0.12062302297567162, 0.09992052927745154, 0.10920812352008635, 0.1053367220938981, 0.11486582543447843, 0.11837663454375613, 0.10320080956991806, 0.1447115605777728, 0.15621119242367165, 0.171155221516755, 0.14617594454661487, 0.15589917988251722, 0.157334393417355, 0.1422879256273436, 0.15050251206066512, 0.15944363209490509, 0.14049635769258673, 0.1559130484095449, 0.14360721943197563, 0.1454981754065826, 0.13639212118807187, 0.13549239652760936, 0.14914680027754135, 0.14895069654651794, 0.15838343552902934, 0.1407943679559045, 0.15053365451753775, 0.16511370597237096, 0.19250877097305807, 0.1546642229208457, 0.19764907948006982, 0.1789918568181842, 0.12975237111002969, 0.1623764985707985, 0.15433273060439734, 0.14844543428360157, 0.16407765094506688, 0.12540869092268803, 0.14643278369789225, 0.2110485263360139, 0.12550774247114715, 0.18294085182967168, 0.1982916491766954, 0.18257445083270107, 0.18404996844941535, 0.17777139895959082, 0.17631840445923974, 0.17223857355542627, 0.17522923146129166, 0.17419498564927616, 0.17131634630765347, 0.19692491172591897, 0.057215980254280985, 0.048155371283132076, 0.04725541323670146, 0.05009072782905155, 0.05582968503654451, 0.06761402928804294, 0.059626115937161384, 0.043006333592971346, 0.05047056300374586]}, "mutation_prompt": null}
{"id": "12892cfd-e5e4-437d-8bd5-76a83d471396", "solution": "import numpy as np\n\nclass AdaptiveDifferentialHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95, diff_weight=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n        self.diff_weight = diff_weight\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def adapt_harmony_search_strategy(self, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n        return bandwidth, exp_prob\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth, exp_prob = self.adapt_harmony_search_strategy(iteration)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + self.diff_weight * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "AdaptiveDifferentialHarmonySearchAlgorithm", "description": "Introducing a Novel Adaptive Differential Harmony Search Algorithm with adaptive strategy updates based on differential evolution and harmony search for enhanced optimization performance.", "configspace": "", "generation": 95, "fitness": 0.3460648786245064, "feedback": "The algorithm AdaptiveDifferentialHarmonySearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.30.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.944696522001691, 0.9424107605002157, 0.95180772781985, 0.9463275895811777, 0.9373336724350784, 0.9454035227081774, 0.9481935268775905, 0.9489745005558902, 0.9477222752664732, 0.9000204347386997, 0.8982824681031684, 0.8973227998193198, 0.9040936437470642, 0.9073673857618907, 0.9031408753204572, 0.9084676234005301, 0.6363231973381729, 0.9075721649158234, 0.6546357039197989, 0.36663768806387964, 0.2042152258893134, 0.69379782697584, 0.5272788197531437, 0.6252487959821887, 0.14826669193646125, 0.7163509250173155, 0.2706384678000009, 0.1359381476585615, 0.17483707934721338, 0.14483866347528185, 0.16542498414819018, 0.6988525485633249, 0.1881314626284023, 0.15829142801850737, 0.6769032073135002, 0.5639667836022808, 0.985662423606483, 0.9932568272376344, 0.9875517227664401, 0.9857954742958531, 0.9802069863722923, 0.993049694793726, 0.9895129789797571, 0.9904902897655198, 0.9856922048292763, 0.2807355121350542, 0.16370757892766163, 0.18906897980702397, 0.15449453636508403, 0.17594417187408362, 0.2077623663949053, 0.16373370336337467, 0.1409348263725917, 0.2273266495359587, 0.22721968107906665, 0.8229910227414156, 0.22364216737686027, 0.28018612717051294, 0.2122899409387463, 0.21161161877980572, 0.23350720416699933, 0.23267178341696781, 0.8347883560034699, 0.18378811373248427, 0.18520889558185194, 0.14953293464797002, 0.18945867026972096, 0.2039848872612381, 0.1615075781776537, 0.14840162450964, 0.1581437344502742, 0.1481741912093607, 0.16245775089371928, 0.13225333083346213, 0.14183747603614993, 0.14024705866561693, 0.1526304524204326, 0.1302058565912615, 0.16179420308984005, 0.14022800791360945, 0.14449456305969854, 9.999999999998899e-05, 9.999999999998899e-05, 0.002583333375372976, 0.004350474472663679, 9.999999999998899e-05, 9.999999999998899e-05, 0.029925791304409755, 9.999999999998899e-05, 9.999999999998899e-05, 0.03771232057721807, 0.03622651178485481, 0.052998073516357325, 0.024340303875049485, 0.03811872077065037, 0.010530914866541896, 0.0720317308427042, 0.04703001124684347, 0.08064215962486343, 0.07140463645100603, 0.2478648595673677, 0.0602938543837227, 0.06563476691207981, 0.09503623418666451, 0.12433364355693632, 0.08146722220721636, 0.092948817717036, 0.16313841920379857, 0.15127723983971353, 0.19751715599963904, 0.17844473370361136, 0.25256454132702477, 0.1168878583130758, 0.0762415062964823, 0.221308965733772, 0.1448742847427824, 0.09826422601501905, 0.54375265651299, 0.5675956897903764, 0.5848279663563363, 0.6727165099897005, 0.5898310067289932, 0.53539005532663, 0.5523672196547891, 0.6164716979492787, 0.5931125983854388, 0.11689083811691703, 0.11569435747588719, 0.10229333194767609, 0.09726875273010027, 0.10424269370694272, 0.10762214965821881, 0.11135720644464475, 0.1109237951606663, 0.13141661435932006, 0.11684254778696979, 0.14694000202875845, 0.12964372179109762, 0.13861554420797817, 0.13518939681426634, 0.1288712572731867, 0.13914048270657675, 0.14185025434730247, 0.15832862421603455, 0.6300931439597038, 0.34434112672016715, 0.7494798412176342, 0.5953396163490772, 0.48792933044002995, 0.6672640881160432, 0.8003340392988738, 0.8251335528906423, 0.7734745926099053, 0.35082468077765383, 0.3640922755188094, 0.24554111534476997, 0.4623709656840478, 0.38956309828020375, 0.30067563566879263, 0.4643182980641607, 0.5241956922954064, 0.2700908119008897, 0.19634565052219932, 0.2068002131668567, 0.22822370156740635, 0.23039529566990058, 0.1966422139568743, 0.20652029406669914, 0.2018324199087933, 0.20933720543393497, 0.20755254528880585, 0.20952889017281562, 0.7848373318675766, 0.6904755479618626, 0.23589538461633885, 0.252249320614617, 0.24823877546613216, 0.8140529616685116, 0.22152467753131866, 0.5086223702240127, 0.18317849981870493, 0.1870710956549756, 0.43707788035661654, 0.9197674726258019, 0.7181810789910559, 0.9320128749356189, 0.5273999048339806, 0.29683236380477673, 0.164923423085096, 0.4014740902151769, 0.20719011076167793, 0.43933416119421453, 0.20704619728980866, 0.1635517700636998, 0.20752778854371035, 0.10451494246673987, 0.15366592344415841, 0.38665429164074616, 0.18450052204882073, 0.18779482773342038, 0.18332803605776726, 0.17630515062740015, 0.17441580734743545, 0.1718354903591044, 0.1918738298228434, 0.1798187057772328, 0.19772171065645394, 0.08626194024328526, 0.08478064053536127, 0.08968375956387697, 0.08531923162559218, 0.08959095001635287, 0.1043713372536198, 0.08624327120101793, 0.08985768182256237, 0.09108073232663938]}, "mutation_prompt": null}
{"id": "eedd3806-cc87-423c-afba-143bf45788c6", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "e9620d2f-e822-4f9d-9f53-86108af2036d", "solution": "import numpy as np\n\nclass QuantumHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def apply_quantum_guidance(self, harmony_memory):\n        quantum_harmony = np.copy(harmony_memory)\n        for i in range(self.dim):\n            mean_val = np.mean(harmony_memory[:, i])\n            std_val = np.std(harmony_memory[:, i])\n            quantum_harmony[:, i] = (harmony_memory[:, i] - mean_val) / std_val\n        return quantum_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        quantum_guided_harmony = self.apply_quantum_guidance(harmony_memory)\n        return quantum_guided_harmony[np.argmin(harmony_fitness)]", "name": "QuantumHarmonySearchAlgorithm", "description": "Introducing Quantum-inspired Harmony Search Algorithm by incorporating quantum principles to guide exploration and exploitation for enhanced optimization performance.", "configspace": "", "generation": 97, "fitness": 0.3504202752603777, "feedback": "The algorithm QuantumHarmonySearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.30.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "bd746d11-bde4-4b3d-84e3-b30436f1c7be", "solution": "import numpy as np\n\nclass DynamicHarmonySearchAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, min_bandwidth=0.01, max_bandwidth=0.1, min_exp_prob=0.7, max_exp_prob=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.min_bandwidth = min_bandwidth\n        self.max_bandwidth = max_bandwidth\n        self.min_exp_prob = min_exp_prob\n        self.max_exp_prob = max_exp_prob\n\n    def initialize_harmony_memory(self):\n        return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def improvise_harmony(self, harmony_memory, iteration):\n        bandwidth = self.min_bandwidth + (self.max_bandwidth - self.min_bandwidth) * (iteration / self.budget)\n        exp_prob = self.max_exp_prob - (self.max_exp_prob - self.min_exp_prob) * (iteration / self.budget)\n\n        new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < bandwidth:\n                new_harmony[i] = np.random.uniform(-5.0, 5.0)\n            if np.random.rand() < exp_prob:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                diff = harmony_memory[idxs[1]] - harmony_memory[idxs[2]]\n                new_harmony[i] = harmony_memory[idxs[0]][i] + np.random.uniform(0, 1) * diff[i]\n        return new_harmony\n\n    def __call__(self, func):\n        harmony_memory = self.initialize_harmony_memory()\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n\n        for iteration in range(self.budget):\n            new_harmony = self.improvise_harmony(harmony_memory, iteration)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            \n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n        \n        return harmony_memory[np.argmin(harmony_fitness)]", "name": "DynamicHarmonySearchAlgorithm", "description": "Enhancing Harmony Search Algorithm through dynamic adaptation of bandwidth and exploration probability for improved convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.9387529641187626, 0.9367235446973003, 0.9444591108290961, 0.9401393311898645, 0.9408744056716478, 0.9384020508082247, 0.9466022568609811, 0.9434331748758129, 0.9400226737066488, 0.8953585646337465, 0.9011198222529595, 0.9009587686183126, 0.8961322959947118, 0.9026998467896636, 0.8938644630487033, 0.8949990994318845, 0.9055185798180944, 0.9064874115738877, 0.17592784817735851, 0.7127174817669277, 0.8430639545692633, 0.7656745284548124, 0.741361750661167, 0.7450259251356374, 0.18476577664444316, 0.741309290106462, 0.7198826231137334, 0.1580080945001573, 0.18060409264903587, 0.15867395305557586, 0.1668974956264796, 0.18098833043466522, 0.741824962213018, 0.729170238515775, 0.15813320359452487, 0.368439397627331, 0.9891543950317694, 0.9893405517975448, 0.9888301367964317, 0.9898110519313407, 0.9883390313589716, 0.9885618136876376, 0.9921368627503564, 0.9914501545943585, 0.22498821217931342, 0.38311839407238635, 0.5017686375289733, 0.3105838650865017, 0.20617411765823412, 0.1541430176229318, 0.4726275513268031, 0.17869561696232727, 0.17979528188338245, 0.20278656345070945, 0.36167157959137763, 0.22235527701813407, 0.22691040591322686, 0.37411553185261326, 0.3531332325818567, 0.2808751426098888, 0.22289226788048666, 0.2897172053469318, 0.3872436872442919, 0.15231010275503853, 0.13486872095860158, 0.15657187826312402, 0.17592859983484999, 0.16632134888438488, 0.1526811222980916, 0.16497382824536866, 0.2199266336923702, 0.15426405815399524, 0.13812225593564287, 0.1465163524298465, 0.1513748427122702, 0.15282213455802707, 0.1500547120213459, 0.17663447964541135, 0.13868725030963325, 0.1386351089907677, 0.1401671757953804, 0.012974120553947421, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009691990728075695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008710937171281019, 9.999999999998899e-05, 0.059463003012729, 0.03291515097240805, 0.017017453228917123, 0.028878990649357505, 0.009748340420002943, 0.03582674488246107, 0.038467691686957406, 0.04802032613875018, 0.017051890398639302, 0.08858598891626857, 0.1722501352224648, 0.17134555737096613, 0.05042553814626083, 0.23025108552083795, 0.16311317986116014, 0.10379115538602324, 0.10703901355868728, 0.02751948792319292, 0.14618937146535316, 0.16663090152589244, 0.13177237853629398, 0.20517659350322803, 0.19532361697584166, 0.26507760281367554, 0.16115277309797515, 0.15752239328130724, 0.0677569747309259, 0.5477761509524182, 0.5224734876447277, 0.31084277901163926, 0.6242033858328941, 0.5471282155441912, 0.598366941282799, 0.5517458511291469, 0.5833489251450475, 0.584198540729436, 0.10612742778642636, 0.11647843376745626, 0.10817366624448044, 0.12523191912954457, 0.09884529403562081, 0.10317590678409505, 0.35429748094987545, 0.1145671523357048, 0.13525644122544622, 0.15408296195435978, 0.14581142458655483, 0.15479682950304163, 0.11337622382018542, 0.11869725290611965, 0.1321432357704465, 0.18231207118593995, 0.15271643937710577, 0.12011872494402631, 0.6114486967791127, 0.550003038929171, 0.4759023246220144, 0.31318130856426996, 0.7611091735027562, 0.42093488259088807, 0.7960012492515166, 0.8289057278041925, 0.6547563094523918, 0.31597231718566254, 0.2584550379179307, 0.32047137394656344, 0.22361663055210546, 0.3585870705416173, 0.29752766793373, 0.3249238062761688, 0.518917679137556, 0.7311094020889282, 0.19099795096259375, 0.1974881464771555, 0.19078380743379053, 0.21073330140272162, 0.19307564792724885, 0.20928798186640651, 0.22897246852376862, 0.21301180845934253, 0.22166003287422775, 0.7384590393777641, 0.23491250409141007, 0.24954623830237765, 0.8581507738537923, 0.25069964372262776, 0.224570278623486, 0.792660161363371, 0.22201616469439633, 0.24898090119127858, 0.18694915227532305, 0.1824038633620858, 0.40855155642921936, 0.9173298966338614, 0.6853550740047059, 0.9089970552787242, 0.8645812588795272, 0.43502155963775935, 0.1566301896826361, 0.21767031294981254, 0.20697896540579863, 0.43724500581368164, 0.20976271771377797, 0.2884799228904067, 0.20722815332485223, 0.20385530753055914, 0.5023189063441805, 0.15578115295996575, 0.17305815432835603, 0.19138762496084583, 0.175653771323531, 0.18640168108515376, 0.18085679667928556, 0.1842603748971242, 0.17676104914238422, 0.19473237685359124, 0.18431319466699847, 0.09661374852250793, 0.08185233322881691, 0.0844350521896784, 0.08470218981105138, 0.08995271948084138, 0.09672216260134248, 0.09320142898741601, 0.08590114456762077, 0.08804479096089146]}, "mutation_prompt": null}
{"id": "feb5306d-a101-451a-b77e-e93887a152a5", "solution": "import numpy as np\n\nclass DifferentialEvolutionAlgorithm:\n    def __init__(self, budget, dim, population_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.F = F\n        self.CR = CR\n\n    def initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n    def mutate(self, population, target_idx):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        np.random.shuffle(candidates)\n        a, b, c = candidates[:3]\n        return population[a] + self.F * (population[b] - population[c])\n\n    def crossover(self, target_vector, trial_vector):\n        crossover_points = np.random.rand(self.dim) < self.CR\n        new_vector = np.where(crossover_points, trial_vector, target_vector)\n        return new_vector\n\n    def select_population(self, target_vector, trial_vector, func):\n        target_fitness = func(target_vector)\n        trial_fitness = func(trial_vector)\n        return trial_vector if trial_fitness < target_fitness else target_vector\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        for _ in range(self.budget):\n            new_population = np.empty_like(population)\n            for idx, target_vector in enumerate(population):\n                mutated_vector = self.mutate(population, idx)\n                trial_vector = self.crossover(target_vector, mutated_vector)\n                new_population[idx] = self.select_population(target_vector, trial_vector, func)\n            population = new_population\n\n        return population[np.argmin([func(individual) for individual in population])]", "name": "DifferentialEvolutionAlgorithm", "description": "Introducing Differential Evolution with Adaptive Crossover and Mutation Strategies for Enhanced Population Diversity and Convergence Speed", "configspace": "", "generation": 99, "fitness": 0.24040172635497944, "feedback": "The algorithm DifferentialEvolutionAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "db0e7824-a866-43a3-acd6-a55a8e8f1aee", "metadata": {"aucs": [0.548891723626242, 0.5540894262516896, 0.5372950552754403, 0.5289157319519345, 0.5399381988376054, 0.5175577638866433, 0.5616066205512369, 0.5525827001335047, 0.5780527898197049, 0.20924539883091575, 0.2371794646754617, 0.21714524210049524, 0.25036303858212083, 0.24982088863320973, 0.240574031721129, 0.25235583189508815, 0.2355448137799473, 0.22742439433560702, 0.10206951612540272, 0.10134893918197996, 0.09055110768685903, 0.09036391775063024, 0.09702929714077058, 0.10082542994873112, 0.10525631171087402, 0.09450817299431868, 0.0849418696918528, 0.08897016858077678, 0.08477988429948924, 0.07859945067268059, 0.08601136948856014, 0.08289058642965541, 0.07757763414520646, 0.08353135202497908, 0.08756254485898973, 0.08969366234082443, 0.8849725937232263, 0.9515817878804053, 0.9052596593434068, 0.9064868244579267, 0.9133860034359453, 0.8889902543825966, 0.9096840915285379, 0.9276092613129929, 0.9206478049831965, 0.20211123224404914, 0.22529166477402618, 0.22341325023128433, 0.2055358460109642, 0.18742851067138233, 0.21172665687676773, 0.22405676549703402, 0.21029443792130043, 0.17700049765164316, 0.47725722023018347, 0.6043587692318726, 0.5292450524411543, 0.5196163453327123, 0.5022058491984907, 0.4957522149279242, 0.4692768025641264, 0.4781295842994072, 0.5179057002930711, 0.14980839585160843, 0.13413172568749776, 0.2117554603971401, 0.1658578129527033, 0.14340551968613147, 0.16636137146248053, 0.15000619381835145, 0.13802708458282864, 0.15412937937566296, 0.12988802432945556, 0.13321964260891606, 0.13274521077679635, 0.15029969435517576, 0.1479229131911055, 0.17963091232543416, 0.13618704660890413, 0.12245164508511663, 0.14693765597051422, 0.11407715133447505, 0.11159386305175667, 0.10687516955592913, 0.11944681776942556, 0.09600619793682164, 0.11824645860024752, 0.09339247323993749, 0.07960572058666726, 0.14088694901192755, 0.20675994210670756, 0.27370453430311914, 0.2220908769039317, 0.194052353404089, 0.21918917757945888, 0.24397033043813876, 0.2138419777709346, 0.2554251739583133, 0.27921689124309834, 0.018136023443557914, 0.032636435535184916, 0.0147812860825981, 0.013669064611882109, 0.027723348856868668, 0.039422111659826786, 0.012896958904345945, 0.014624173923549089, 0.011967111084162929, 0.13755457034556162, 0.12684256255415005, 0.15037205814803367, 0.1338689599085332, 0.13631498234666428, 0.15198362697701928, 0.11451142293827055, 0.126725417883073, 0.1182962018084921, 0.45293041417186997, 0.4359780005372277, 0.4569702736974759, 0.4319548399816363, 0.45281741603341785, 0.4367358360440946, 0.460775563106827, 0.4881626694719372, 0.485311444780114, 0.10223908986703278, 0.08586370585731806, 0.0798406898407944, 0.08495605597866795, 0.08931345535562818, 0.08411702341603755, 0.08078767207020177, 0.08652806769705879, 0.08450031765675614, 0.11489810922590804, 0.1294124083451601, 0.12137491248596566, 0.12183295348213674, 0.11654678951228381, 0.11500160121918057, 0.1260541514371245, 0.1953140886920769, 0.12290318166391279, 0.27733447894980034, 0.2668858108279275, 0.29203315500919547, 0.27811510640287007, 0.2806986861009423, 0.2841262230819678, 0.2679843804660539, 0.28276206229376943, 0.29320570428374226, 0.2098115370938164, 0.19283310169909096, 0.22063186159922799, 0.20152037236880216, 0.21102262896263635, 0.21571737263368107, 0.20922936856997398, 0.2138962112720162, 0.204400258361632, 0.18387564793698652, 0.17378531466757563, 0.1742950591194039, 0.1996300680048113, 0.17145356516245158, 0.20406760093705156, 0.18271485407875843, 0.21458872639127058, 0.1868756318806326, 0.17484343897380428, 0.19346982490713072, 0.1710391416368724, 0.20206935479385768, 0.17525946853364982, 0.17639798843846455, 0.18094280413709107, 0.16833865674184634, 0.17477019917069392, 0.17364195942727378, 0.5753810095577723, 0.17209855387383777, 0.45072316398463375, 0.4057327378858836, 0.3176916728218486, 0.3482110638589665, 0.1956133511887892, 0.2792070806451228, 0.39009594412899185, 0.18665577340038875, 0.47477235747895674, 0.4069644845252507, 0.18571012331148828, 0.20346107780914136, 0.20757043480572257, 0.23926075423347715, 0.1754591634561733, 0.17955390763722667, 0.19543009668309907, 0.19193461101217058, 0.19008364842395353, 0.1700428550663775, 0.18464130398998924, 0.19149368326643745, 0.16658713739955366, 0.17201357535930928, 0.07038890606203863, 0.06839042708727117, 0.06811938582451926, 0.07569172294186577, 0.0636788194756236, 0.07532145181749417, 0.07370108714222168, 0.07946585221034397, 0.07044424148623873]}, "mutation_prompt": null}
