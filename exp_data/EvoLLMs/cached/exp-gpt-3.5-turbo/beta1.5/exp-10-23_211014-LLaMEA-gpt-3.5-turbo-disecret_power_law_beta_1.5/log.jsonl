{"id": "d5e9c690-6ec9-418b-b271-865c0dbd28bf", "solution": "import numpy as np\n\nclass QIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.alpha = 0.9\n\n    def _quantum_update(self, population):\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                population[i][j] = np.sign(np.random.uniform(-1, 1)) * abs(np.cos(np.pi * population[i][j])) ** self.alpha\n        return population\n\n    def _evolutionary_update(self, population, func):\n        fitness_values = [func(individual) for individual in population]\n        sorted_indices = np.argsort(fitness_values)\n        elite = population[sorted_indices[0]]\n\n        for i in range(1, self.population_size):\n            population[i] = elite + np.random.normal(0, 0.1, size=self.dim)\n\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "QIEA", "description": "Novel Metaheuristic Algorithm: Quantum-Inspired Evolutionary Algorithm (QIEA) that combines quantum computing principles with evolutionary strategies to explore the search space efficiently and globally.", "configspace": "", "generation": 0, "fitness": 0.06845351935089071, "feedback": "The algorithm QIEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.14160978108951894, 0.1410453493356093, 0.14159970171589176, 0.05465941514504269, 0.05482838606112406, 0.05488678505678668, 0.07054620304588866, 0.07048894435393704, 0.07025155172633801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02455153187069825, 0.019628814107517822, 0.020210444620513024, 0.008943762702656177, 0.009604905971000832, 0.009146960234868828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02096504125398968, 0.020578807781884256, 0.024231720861778938, 0.005150418451827288, 0.00803197543228562, 0.006269157587372343, 9.999999999998899e-05, 0.000380166321998332, 0.00030231177665573927, 0.006466643844253883, 0.00646901564461555, 0.006470181764081984, 0.0064839413139791136, 0.006497078657576649, 0.00648746489923957, 0.006484750725157751, 0.0065106947827276995, 0.006505989171517679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023046622744225198, 0.01871237463612141, 0.02166430250031348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17027670658616767, 0.16616754507760412, 0.1596108111103709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08956765936000644, 0.08697320542811271, 0.07691276153236415, 0.11112074286298468, 0.0654297722170637, 0.062010853442731384, 0.07017772402251177, 0.06668736987164625, 0.11336487491135883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06457078470578892, 0.06473178058602513, 0.06460678833389322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12024199500318866, 0.12074735692737903, 0.12057433702439757, 0.10294530566493487, 0.10317920577276163, 0.10320545685668969, 0.18937401780709817, 0.18796217318675246, 0.18851969480017272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015932038674525195, 0.013980709212691234, 0.01562935623308881, 0.027845590853634694, 0.02794531453695781, 0.025215783176082862, 0.11366085100040768, 0.12028070666449298, 0.12268009398410629, 0.13330089565804193, 0.11878127795956639, 0.11859948650176177, 0.13182953817211562, 0.14391644517322089, 0.1278416480765483, 0.13296663892353622, 0.12918981535081908, 0.1306602888880649, 0.1885579814473325, 0.18098693081540507, 0.18047596702065716, 0.12711448192203456, 0.12544384473314096, 0.12757262459549434, 0.06530722859022586, 0.06452215675180373, 0.06398288359431992, 0.13302158585016444, 0.13288756191170614, 0.1339123389995298, 0.06747002967904225, 0.06530708907565219, 0.06397819609117505, 0.20555166874336983, 0.2240067398935488, 0.19741447268879597, 0.22472613238278227, 0.21625196265217417, 0.202025635942495, 0.2119401934508991, 0.23038256550088976, 0.2717413682865726, 0.1554595819618707, 0.15705626653711136, 0.15664044235736874, 0.1558488598181883, 0.15982629877654675, 0.15455359297810178, 0.15858564201398462, 0.16464675682926533, 0.1581366775480043, 0.1431083355065511, 0.14847985916168327, 0.1427370894587271, 0.09213180475349059, 0.09683174644249082, 0.0963471993339341, 0.06936692045053294, 0.06926206197145401, 0.06943740675923837, 0.12489150587422915, 0.1336021769892063, 0.12719212815331538, 0.05789085718732989, 0.05773124004319541, 0.058093815358217005, 0.12004482509504433, 0.1205134566641256, 0.11953108627182663, 0.18726590585448344, 0.19047067132436724, 0.19066218785196076, 0.178522884195627, 0.17973528199800526, 0.17405527647483265, 0.1884304535134299, 0.17419325428482646, 0.1773446813471472, 0.08657940420233756, 0.0813594859655159, 0.0960584056942253, 0.07573434265779155, 0.08619365121513178, 0.07137521272393588, 0.08960581885630159, 0.07593301079395331, 0.08398437660361469]}, "mutation_prompt": null}
{"id": "60ea7ef1-8c1b-45a9-ae9f-086b6a732281", "solution": "import numpy as np\n\nclass QIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.alpha = 0.9\n\n    def _quantum_update(self, population):\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                population[i][j] = np.sign(np.random.uniform(-1, 1)) * abs(np.cos(np.pi * population[i][j])) ** self.alpha\n        return population\n\n    def _evolutionary_update(self, population, func):\n        fitness_values = [func(individual) for individual in population]\n        sorted_indices = np.argsort(fitness_values)\n        elite = population[sorted_indices[0]]\n\n        for i in range(1, self.population_size):\n            population[i] = elite + np.random.normal(0, 0.1, size=self.dim)\n\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "QIEA", "description": "Novel Metaheuristic Algorithm: Quantum-Inspired Evolutionary Algorithm (QIEA) that combines quantum computing principles with evolutionary strategies to explore the search space efficiently and globally.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5e9c690-6ec9-418b-b271-865c0dbd28bf", "metadata": {"aucs": [0.14160978108951894, 0.1410453493356093, 0.14159970171589176, 0.05465941514504269, 0.05482838606112406, 0.05488678505678668, 0.07054620304588866, 0.07048894435393704, 0.07025155172633801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02455153187069825, 0.019628814107517822, 0.020210444620513024, 0.008943762702656177, 0.009604905971000832, 0.009146960234868828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02096504125398968, 0.020578807781884256, 0.024231720861778938, 0.005150418451827288, 0.00803197543228562, 0.006269157587372343, 9.999999999998899e-05, 0.000380166321998332, 0.00030231177665573927, 0.006466643844253883, 0.00646901564461555, 0.006470181764081984, 0.0064839413139791136, 0.006497078657576649, 0.00648746489923957, 0.006484750725157751, 0.0065106947827276995, 0.006505989171517679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023046622744225198, 0.01871237463612141, 0.02166430250031348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17027670658616767, 0.16616754507760412, 0.1596108111103709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08956765936000644, 0.08697320542811271, 0.07691276153236415, 0.11112074286298468, 0.0654297722170637, 0.062010853442731384, 0.07017772402251177, 0.06668736987164625, 0.11336487491135883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06457078470578892, 0.06473178058602513, 0.06460678833389322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12024199500318866, 0.12074735692737903, 0.12057433702439757, 0.10294530566493487, 0.10317920577276163, 0.10320545685668969, 0.18937401780709817, 0.18796217318675246, 0.18851969480017272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015932038674525195, 0.013980709212691234, 0.01562935623308881, 0.027845590853634694, 0.02794531453695781, 0.025215783176082862, 0.11366085100040768, 0.12028070666449298, 0.12268009398410629, 0.13330089565804193, 0.11878127795956639, 0.11859948650176177, 0.13182953817211562, 0.14391644517322089, 0.1278416480765483, 0.13296663892353622, 0.12918981535081908, 0.1306602888880649, 0.1885579814473325, 0.18098693081540507, 0.18047596702065716, 0.12711448192203456, 0.12544384473314096, 0.12757262459549434, 0.06530722859022586, 0.06452215675180373, 0.06398288359431992, 0.13302158585016444, 0.13288756191170614, 0.1339123389995298, 0.06747002967904225, 0.06530708907565219, 0.06397819609117505, 0.20555166874336983, 0.2240067398935488, 0.19741447268879597, 0.22472613238278227, 0.21625196265217417, 0.202025635942495, 0.2119401934508991, 0.23038256550088976, 0.2717413682865726, 0.1554595819618707, 0.15705626653711136, 0.15664044235736874, 0.1558488598181883, 0.15982629877654675, 0.15455359297810178, 0.15858564201398462, 0.16464675682926533, 0.1581366775480043, 0.1431083355065511, 0.14847985916168327, 0.1427370894587271, 0.09213180475349059, 0.09683174644249082, 0.0963471993339341, 0.06936692045053294, 0.06926206197145401, 0.06943740675923837, 0.12489150587422915, 0.1336021769892063, 0.12719212815331538, 0.05789085718732989, 0.05773124004319541, 0.058093815358217005, 0.12004482509504433, 0.1205134566641256, 0.11953108627182663, 0.18726590585448344, 0.19047067132436724, 0.19066218785196076, 0.178522884195627, 0.17973528199800526, 0.17405527647483265, 0.1884304535134299, 0.17419325428482646, 0.1773446813471472, 0.08657940420233756, 0.0813594859655159, 0.0960584056942253, 0.07573434265779155, 0.08619365121513178, 0.07137521272393588, 0.08960581885630159, 0.07593301079395331, 0.08398437660361469]}, "mutation_prompt": null}
{"id": "0fd2112a-0943-4f10-be8a-9babb8d676fc", "solution": "import numpy as np\n\nclass AdaptiveQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n\n    def _adaptive_evolutionary_update(self, population, func):\n        fitness_values = [func(individual) for individual in population]\n        sorted_indices = np.argsort(fitness_values)\n        elite = population[sorted_indices[0]]\n\n        for i in range(1, self.population_size):\n            mutation_rate = self.mutation_rate / np.sqrt(i)  # Adaptive mutation rate\n            population[i] = elite + np.random.normal(0, mutation_rate, size=self.dim)\n\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._adaptive_evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "AdaptiveQIEA", "description": "Enhancing the QIEA algorithm by introducing adaptive mutation rates in the evolutionary update step to improve exploration and exploitation balance.", "configspace": "", "generation": 2, "fitness": 0.06499467981194898, "feedback": "The algorithm AdaptiveQIEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.07.", "error": "", "parent_id": "d5e9c690-6ec9-418b-b271-865c0dbd28bf", "metadata": {"aucs": [0.1404484318810737, 0.14083105572107346, 0.1410349574753884, 0.054807346795435086, 0.05489087447236196, 0.05486423004648189, 0.069917199456758, 0.07004414022695005, 0.0702951077435926, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01489423803141221, 0.01504921762204281, 0.011339351969425815, 0.00454941916404894, 0.0053207752180587375, 0.0057452007970205665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01974307090695726, 0.015582557777362283, 0.012207853350040931, 0.004127876022514854, 0.002981900400926718, 0.005375654176927536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006478386209501696, 0.006497809141986721, 0.006495677404223743, 0.006489411172037607, 0.006505112898281373, 0.006500447583696944, 0.006486136010977139, 0.0065112929206249115, 0.006507488672877093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02397401052626169, 0.01964588375579679, 0.021597428620993342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1597412847403824, 0.159433784504187, 0.15680481848160577, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08944662753770338, 0.02552679019349058, 0.03296671722287681, 0.025340048769054713, 0.03850141474920188, 0.08295489355534447, 0.030390790925705402, 0.05002072478430242, 0.08123473512766888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06733992129411526, 0.05139262101899966, 0.0710963020251878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12068962631332802, 0.12074735692737903, 0.12068557122963652, 0.10297727474840668, 0.10317817649294225, 0.10321495432093197, 0.19019662612765253, 0.1871839663710091, 0.1878613198717577, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01659390506978975, 0.01350699534899702, 0.015314229609198038, 0.0269351604250182, 0.026635516732231412, 0.02819051898675229, 0.1192865588556713, 0.1127451226247349, 0.11412761013804629, 0.11804901521232058, 0.12044469528007229, 0.10307056732162123, 0.13791947200575827, 0.11969029978799439, 0.12736625526336576, 0.12999442218591684, 0.12614761412502662, 0.1268489140427651, 0.19086313689286494, 0.18249084528381665, 0.18034098852114933, 0.12226684607904992, 0.12635065447503224, 0.12584547100745636, 0.06292120957417646, 0.06474215094642877, 0.06340272910429756, 0.12546506323295403, 0.12263613312405852, 0.12795147712956845, 0.06385961726302014, 0.06269237393516303, 0.06309940465145958, 0.2101196736446237, 0.19957073359191768, 0.19821505607747092, 0.19716222085848156, 0.2048048525181838, 0.21328022355613818, 0.2108059602235588, 0.20222429523539542, 0.22928344385875177, 0.1618641216792598, 0.15571776391000625, 0.15257974526781404, 0.15259355714561318, 0.15263955991290346, 0.15975199391951977, 0.15192176524894152, 0.15618565807223517, 0.15244305999347307, 0.1382865485101642, 0.14146601500810851, 0.13889889234211128, 0.08841383780693901, 0.0921970521975396, 0.09297022426793267, 0.06936606262180811, 0.06947704065831439, 0.06958345910607644, 0.1235996155209621, 0.12128731622712585, 0.12742853461247583, 0.057944666868331884, 0.057974320760160625, 0.05831281507742969, 0.12034173290033556, 0.1201301173430156, 0.12005811443101178, 0.17732345672869942, 0.1827230080002139, 0.17431565846265873, 0.1795677318352913, 0.17885869835686896, 0.18919583429940134, 0.16373165829722147, 0.172547207654818, 0.1694271224618542, 0.0711677265803663, 0.07506481040999957, 0.07525538313162417, 0.07216784977726698, 0.07916949095834547, 0.08382234311141634, 0.08461099307759556, 0.08895324487054201, 0.0803877046509075]}, "mutation_prompt": null}
{"id": "d07cc676-6935-4790-98e1-04f289c3d1c0", "solution": "import numpy as np\n\nclass QIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.alpha = 0.9\n\n    def _quantum_update(self, population):\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                population[i][j] = np.sign(np.random.uniform(-1, 1)) * abs(np.cos(np.pi * population[i][j])) ** self.alpha\n        return population\n\n    def _evolutionary_update(self, population, func):\n        fitness_values = [func(individual) for individual in population]\n        sorted_indices = np.argsort(fitness_values)\n        elite = population[sorted_indices[0]]\n\n        for i in range(1, self.population_size):\n            population[i] = elite + np.random.normal(0, 0.1, size=self.dim)\n\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "QIEA", "description": "Novel Metaheuristic Algorithm: Quantum-Inspired Evolutionary Algorithm (QIEA) that combines quantum computing principles with evolutionary strategies to explore the search space efficiently and globally.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5e9c690-6ec9-418b-b271-865c0dbd28bf", "metadata": {"aucs": [0.14160978108951894, 0.1410453493356093, 0.14159970171589176, 0.05465941514504269, 0.05482838606112406, 0.05488678505678668, 0.07054620304588866, 0.07048894435393704, 0.07025155172633801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02455153187069825, 0.019628814107517822, 0.020210444620513024, 0.008943762702656177, 0.009604905971000832, 0.009146960234868828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02096504125398968, 0.020578807781884256, 0.024231720861778938, 0.005150418451827288, 0.00803197543228562, 0.006269157587372343, 9.999999999998899e-05, 0.000380166321998332, 0.00030231177665573927, 0.006466643844253883, 0.00646901564461555, 0.006470181764081984, 0.0064839413139791136, 0.006497078657576649, 0.00648746489923957, 0.006484750725157751, 0.0065106947827276995, 0.006505989171517679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023046622744225198, 0.01871237463612141, 0.02166430250031348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17027670658616767, 0.16616754507760412, 0.1596108111103709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08956765936000644, 0.08697320542811271, 0.07691276153236415, 0.11112074286298468, 0.0654297722170637, 0.062010853442731384, 0.07017772402251177, 0.06668736987164625, 0.11336487491135883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06457078470578892, 0.06473178058602513, 0.06460678833389322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12024199500318866, 0.12074735692737903, 0.12057433702439757, 0.10294530566493487, 0.10317920577276163, 0.10320545685668969, 0.18937401780709817, 0.18796217318675246, 0.18851969480017272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015932038674525195, 0.013980709212691234, 0.01562935623308881, 0.027845590853634694, 0.02794531453695781, 0.025215783176082862, 0.11366085100040768, 0.12028070666449298, 0.12268009398410629, 0.13330089565804193, 0.11878127795956639, 0.11859948650176177, 0.13182953817211562, 0.14391644517322089, 0.1278416480765483, 0.13296663892353622, 0.12918981535081908, 0.1306602888880649, 0.1885579814473325, 0.18098693081540507, 0.18047596702065716, 0.12711448192203456, 0.12544384473314096, 0.12757262459549434, 0.06530722859022586, 0.06452215675180373, 0.06398288359431992, 0.13302158585016444, 0.13288756191170614, 0.1339123389995298, 0.06747002967904225, 0.06530708907565219, 0.06397819609117505, 0.20555166874336983, 0.2240067398935488, 0.19741447268879597, 0.22472613238278227, 0.21625196265217417, 0.202025635942495, 0.2119401934508991, 0.23038256550088976, 0.2717413682865726, 0.1554595819618707, 0.15705626653711136, 0.15664044235736874, 0.1558488598181883, 0.15982629877654675, 0.15455359297810178, 0.15858564201398462, 0.16464675682926533, 0.1581366775480043, 0.1431083355065511, 0.14847985916168327, 0.1427370894587271, 0.09213180475349059, 0.09683174644249082, 0.0963471993339341, 0.06936692045053294, 0.06926206197145401, 0.06943740675923837, 0.12489150587422915, 0.1336021769892063, 0.12719212815331538, 0.05789085718732989, 0.05773124004319541, 0.058093815358217005, 0.12004482509504433, 0.1205134566641256, 0.11953108627182663, 0.18726590585448344, 0.19047067132436724, 0.19066218785196076, 0.178522884195627, 0.17973528199800526, 0.17405527647483265, 0.1884304535134299, 0.17419325428482646, 0.1773446813471472, 0.08657940420233756, 0.0813594859655159, 0.0960584056942253, 0.07573434265779155, 0.08619365121513178, 0.07137521272393588, 0.08960581885630159, 0.07593301079395331, 0.08398437660361469]}, "mutation_prompt": null}
{"id": "f3b65f4c-fdce-485a-bd63-126118a6b277", "solution": "import numpy as np\n\nclass QIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.alpha = 0.9\n\n    def _quantum_update(self, population):\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                population[i][j] = np.sign(np.random.uniform(-1, 1)) * abs(np.cos(np.pi * population[i][j])) ** self.alpha\n        return population\n\n    def _evolutionary_update(self, population, func):\n        fitness_values = [func(individual) for individual in population]\n        sorted_indices = np.argsort(fitness_values)\n        elite = population[sorted_indices[0]]\n\n        for i in range(1, self.population_size):\n            population[i] = elite + np.random.normal(0, 0.1, size=self.dim)\n\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "QIEA", "description": "Novel Metaheuristic Algorithm: Quantum-Inspired Evolutionary Algorithm (QIEA) that combines quantum computing principles with evolutionary strategies to explore the search space efficiently and globally.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5e9c690-6ec9-418b-b271-865c0dbd28bf", "metadata": {"aucs": [0.14160978108951894, 0.1410453493356093, 0.14159970171589176, 0.05465941514504269, 0.05482838606112406, 0.05488678505678668, 0.07054620304588866, 0.07048894435393704, 0.07025155172633801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02455153187069825, 0.019628814107517822, 0.020210444620513024, 0.008943762702656177, 0.009604905971000832, 0.009146960234868828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02096504125398968, 0.020578807781884256, 0.024231720861778938, 0.005150418451827288, 0.00803197543228562, 0.006269157587372343, 9.999999999998899e-05, 0.000380166321998332, 0.00030231177665573927, 0.006466643844253883, 0.00646901564461555, 0.006470181764081984, 0.0064839413139791136, 0.006497078657576649, 0.00648746489923957, 0.006484750725157751, 0.0065106947827276995, 0.006505989171517679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023046622744225198, 0.01871237463612141, 0.02166430250031348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17027670658616767, 0.16616754507760412, 0.1596108111103709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08956765936000644, 0.08697320542811271, 0.07691276153236415, 0.11112074286298468, 0.0654297722170637, 0.062010853442731384, 0.07017772402251177, 0.06668736987164625, 0.11336487491135883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06457078470578892, 0.06473178058602513, 0.06460678833389322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12024199500318866, 0.12074735692737903, 0.12057433702439757, 0.10294530566493487, 0.10317920577276163, 0.10320545685668969, 0.18937401780709817, 0.18796217318675246, 0.18851969480017272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015932038674525195, 0.013980709212691234, 0.01562935623308881, 0.027845590853634694, 0.02794531453695781, 0.025215783176082862, 0.11366085100040768, 0.12028070666449298, 0.12268009398410629, 0.13330089565804193, 0.11878127795956639, 0.11859948650176177, 0.13182953817211562, 0.14391644517322089, 0.1278416480765483, 0.13296663892353622, 0.12918981535081908, 0.1306602888880649, 0.1885579814473325, 0.18098693081540507, 0.18047596702065716, 0.12711448192203456, 0.12544384473314096, 0.12757262459549434, 0.06530722859022586, 0.06452215675180373, 0.06398288359431992, 0.13302158585016444, 0.13288756191170614, 0.1339123389995298, 0.06747002967904225, 0.06530708907565219, 0.06397819609117505, 0.20555166874336983, 0.2240067398935488, 0.19741447268879597, 0.22472613238278227, 0.21625196265217417, 0.202025635942495, 0.2119401934508991, 0.23038256550088976, 0.2717413682865726, 0.1554595819618707, 0.15705626653711136, 0.15664044235736874, 0.1558488598181883, 0.15982629877654675, 0.15455359297810178, 0.15858564201398462, 0.16464675682926533, 0.1581366775480043, 0.1431083355065511, 0.14847985916168327, 0.1427370894587271, 0.09213180475349059, 0.09683174644249082, 0.0963471993339341, 0.06936692045053294, 0.06926206197145401, 0.06943740675923837, 0.12489150587422915, 0.1336021769892063, 0.12719212815331538, 0.05789085718732989, 0.05773124004319541, 0.058093815358217005, 0.12004482509504433, 0.1205134566641256, 0.11953108627182663, 0.18726590585448344, 0.19047067132436724, 0.19066218785196076, 0.178522884195627, 0.17973528199800526, 0.17405527647483265, 0.1884304535134299, 0.17419325428482646, 0.1773446813471472, 0.08657940420233756, 0.0813594859655159, 0.0960584056942253, 0.07573434265779155, 0.08619365121513178, 0.07137521272393588, 0.08960581885630159, 0.07593301079395331, 0.08398437660361469]}, "mutation_prompt": null}
{"id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 5, "fitness": 0.09348408524574145, "feedback": "The algorithm EnhancedQIEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "d5e9c690-6ec9-418b-b271-865c0dbd28bf", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "75e4932e-157c-4b40-b588-d6bcce8dcc92", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _gaussian_update(self, population):\n        for i in range(1, self.population_size):\n            gaussian = np.random.normal(0, 1, size=self.dim)\n            population[i] += gaussian\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._gaussian_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Enhancing Quantum-Inspired Evolutionary Algorithm (QIEA) with a novel Gaussian mutation operator for improved exploration-exploitation trade-off.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedQIEA' object has no attribute '_levy_update'\").", "error": "AttributeError(\"'EnhancedQIEA' object has no attribute '_levy_update'\")", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {}, "mutation_prompt": null}
{"id": "37c3c4b3-f0f9-4f12-9657-1f40dcb2dc9b", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 5\n        self.pitch_adjustment_rate = 0.5\n        self.bandwidth = 0.01\n\n    def _initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n    def _local_search(self, harmony):\n        new_harmony = np.copy(harmony)\n        for i in range(self.dim):\n            new_harmony[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n            new_harmony[i] = np.clip(new_harmony[i], -5.0, 5.0)\n        return new_harmony\n\n    def __call__(self, func):\n        population = self._initialize_population()\n\n        for _ in range(self.budget // self.harmony_memory_size):\n            new_harmonies = [self._local_search(harmony) for harmony in population]\n            combined_population = np.vstack((population, new_harmonies))\n            scores = np.array([func(individual) for individual in combined_population])\n            sorted_indices = np.argsort(scores)\n            population = combined_population[sorted_indices[:self.harmony_memory_size]]\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "AdaptiveHarmonySearch", "description": "Implementing an Adaptive Harmony Search Algorithm (AHSA) that dynamically adjusts parameters based on the harmony memory and pitch adjustment rate to enhance global and local search capabilities for black box optimization.", "configspace": "", "generation": 7, "fitness": 0.055127672918460206, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.13823956268612314, 0.11901765449151536, 0.16627803328744106, 0.04538152825904895, 0.09718763416938214, 0.052772337931530466, 0.06410986802314689, 0.09329014916454959, 0.12962866939991768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002338985761035861, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946326739885751, 0.007766168900900983, 0.012568105307433353, 0.036348233351378045, 0.012066781363425094, 0.009385415375605444, 0.004598318842127802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06645323385452262, 0.045642436761079486, 0.06851790397947244, 0.05662533660265967, 0.06538191638784452, 0.04818111140007053, 0.048158476665305705, 0.0688050955162709, 0.040926667811780004, 0.06697032655388924, 0.006636520060618545, 0.0034450150765522602, 0.003932137805079394, 0.03761955002705508, 0.0021504639535622205, 0.05196968730596818, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 0.01750586155901579, 0.0020629362854637234, 9.999999999998899e-05, 0.006500648579255697, 9.999999999998899e-05, 0.0014801873637702023, 0.0447756634796902, 0.10639351038569989, 9.999999999998899e-05, 0.0006521680552339371, 0.07555285887417851, 9.999999999998899e-05, 0.00010020947675071223, 0.11722051921101173, 9.999999999998899e-05, 0.0022161119421987285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01093612054462878, 0.04730877663560129, 0.05597661191980774, 0.06588094588675031, 9.999999999998899e-05, 0.00995583404236755, 0.1339997319645332, 0.018056985334014453, 0.02727392592690614, 9.999999999998899e-05, 0.010410987689092877, 9.999999999998899e-05, 0.0025765297166230328, 9.999999999998899e-05, 0.010485669083052152, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005692480467720529, 0.049884649085784494, 0.1746470663111368, 0.29943107703830296, 0.09680266573529839, 0.12910600194125277, 0.07020247445123262, 0.14033704089875487, 0.10879327213706125, 0.1500528872347946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01638993454457016, 0.011155575092601566, 9.999999999998899e-05, 0.002827589628664806, 0.07334422134761243, 0.07507209202968812, 0.10131874586205869, 0.08263688455640206, 0.14055652437854205, 0.0831491756977315, 0.08264604868483671, 0.06812507335640017, 0.03586349886415807, 0.11226859678727652, 0.11456980157175589, 0.1267596248870303, 0.11734609739437873, 0.1452692578853939, 0.12051143545447407, 0.09654575665233911, 0.13880993642557737, 0.12545240100044286, 0.07937059456548579, 0.059747220466935924, 0.05986379028705502, 0.05543575600474282, 0.08264470622382036, 0.06435171717733279, 0.06463925005047277, 0.0707633379497471, 0.06333332812163683, 0.014246858032208709, 0.16871250196310594, 0.060426437467831606, 0.10257141454303786, 0.18138076570158246, 0.10178353468743373, 0.0886769614335251, 0.1825887552722344, 0.05729687127178873, 0.1378814843734283, 0.07805924673591835, 0.019006690721627972, 9.999999999998899e-05, 0.11058730143853901, 0.11287697462668989, 0.14953469802751607, 0.0919605479324298, 0.054998202257754536, 9.999999999998899e-05, 0.10962091347237712, 0.07365226089958743, 0.11986662825453098, 0.1411230599319213, 0.19133088078645255, 0.054959326273136266, 0.08696925466397842, 0.1054419985244347, 0.0939245229823289, 0.07504781278869832, 0.09833875335360298, 0.09691477615013588, 0.106753049505803, 0.048837881359322766, 0.11819094367164329, 0.055803226703499575, 0.04900360840360862, 0.085806929252909, 0.1960579860626317, 0.18369084813373326, 0.2109845430755417, 0.2445333738311174, 0.15609539838697306, 0.264614785102813, 0.21221115869821983, 0.2347983938963346, 0.23671487508657596, 0.03315403552890617, 0.025244348060813326, 0.03241243134677885, 0.036606753984493645, 0.04164256860522786, 0.025590404484284957, 0.04457811951275237, 0.03781312625768585, 0.0373150055338376]}, "mutation_prompt": null}
{"id": "86ba4c14-9137-473e-89ce-24065204ea1d", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "b8a2001e-80e7-45db-b5cc-699ff4a4057d", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "a2250907-a1a2-4e30-a500-f1a19c37c51a", "solution": "import numpy as np\n\nclass DynamicQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.alpha = 0.5\n\n    def _dynamic_learning_rate_adjustment(self, population, func, iteration):\n        learning_rate = self.beta / (1 + self.alpha * iteration)\n        for i in range(1, self.population_size):\n            population[i] += learning_rate * np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for iteration in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._dynamic_learning_rate_adjustment(population, func, iteration)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicQIEA", "description": "Enhancing Quantum-Inspired Evolutionary Algorithm (QIEA) by introducing a novel mechanism called Dynamic Learning Rate Adjustment for improved convergence speed and solution quality.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicQIEA' object has no attribute 'beta'\").", "error": "AttributeError(\"'DynamicQIEA' object has no attribute 'beta'\")", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {}, "mutation_prompt": null}
{"id": "a4cdd4a4-4385-4116-ad89-d3084388c8dc", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "86999da6-2909-4e23-b8f9-076c873ee4aa", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "e264163f-7d2f-4d86-9982-eb39b73cfc4e", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "d2df6264-5dc6-48f6-be38-2cf94a0385ae", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "aa87aa49-0d2d-43c3-bd7a-cba123251bc3", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "8d44ac92-aa29-4934-b1d6-b1e5127c7d56", "solution": "import numpy as np\n\nclass DQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n        self.history = []\n\n    def _adaptive_quantum_update(self, population):\n        for i in range(1, self.population_size):\n            self.beta = np.mean(self.history) if len(self.history) > 0 else self.beta\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _update_history(self, performance):\n        self.history.append(performance)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._adaptive_quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n            performances = [func(individual) for individual in population]\n            best_solution = population[np.argmin(performances)]\n            self._update_history(np.min(performances))\n\n        return best_solution", "name": "DQIEA", "description": "Introducing a Dynamic Quantum-Inspired Evolutionary Algorithm (DQIEA) with adaptive parameter control based on historical performance to enhance exploration and exploitation trade-off for black box optimization.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DQIEA' object has no attribute '_levy_update'\").", "error": "AttributeError(\"'DQIEA' object has no attribute '_levy_update'\")", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {}, "mutation_prompt": null}
{"id": "337cf3c6-c566-4b5e-9f00-55329236626f", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "8b8a361f-cf35-4afa-97cf-c617a6c74e4d", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "b4943575-d927-4426-8a61-a65b0d535cd5", "solution": "import numpy as np\n\nclass DQIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.beta = 1.5\n\n    def _adaptive_beta(self):\n        self.beta = max(1.0, self.beta - 0.01)\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            self._adaptive_beta()\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DQIEA", "description": "Introducing Dynamic Quantum-Inspired Evolutionary Algorithm (DQIEA) with adaptive beta value for Levy flights to enhance exploration and exploitation balance.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DQIEA' object has no attribute '_quantum_update'\").", "error": "AttributeError(\"'DQIEA' object has no attribute '_quantum_update'\")", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {}, "mutation_prompt": null}
{"id": "5c18cfde-df66-489c-83bb-a58d80a7e2a9", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "d73f9baf-9e5a-4458-b455-dd3b8c47121f", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "05fb1647-f8e7-4985-806d-130ca572dea3", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "5ca9f35c-682d-4316-a7b6-63493a9a809c", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "94b02451-ff31-43e3-b11b-48b5603d8883", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "589fa462-c94c-4fa0-8c89-2132f96c02e8", "solution": "import numpy as np\n\nclass EnhancedQIEA(QIEA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.5\n\n    def _levy_update(self, population):\n        for i in range(1, self.population_size):\n            levy = np.random.standard_cauchy(size=self.dim) / (np.power(np.abs(np.random.normal(0, 1, size=self.dim)), 1/self.beta))\n            population[i] += levy\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._quantum_update(population)\n            population = self._levy_update(population)\n            population = self._evolutionary_update(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedQIEA", "description": "Utilizing Quantum-Inspired Evolutionary Algorithm (QIEA) with modified update mechanisms incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.21326855338935724, 0.1767286529956591, 0.19840968127813308, 0.1502909444684063, 0.1421520493810855, 0.1275512563902761, 0.15799700745974132, 0.1636550620616617, 0.17017381507934548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03358934683069714, 0.04431450664138481, 0.042057417911200545, 0.03626370861743233, 0.05038256504427863, 0.04216410814840632, 0.03007112853869054, 0.04987101889408585, 0.03610262611974557, 0.04052585564871258, 0.03957920255106451, 0.035536681307116846, 0.04270951855066829, 0.031174146477519593, 0.024734682833403188, 0.02769954524456042, 0.028289656025399568, 0.027060754329379044, 0.10744070485051038, 0.10944580270387994, 0.12456221336038087, 0.1395646771799125, 0.11282833920353874, 0.09214716762794084, 0.10977365468888622, 0.5279477922667816, 0.09335436038096834, 0.055077597110727905, 0.06460531329482333, 0.04963192388744897, 0.05673715080123598, 0.06635070473552351, 0.08919537873768568, 0.0625081965048141, 0.059863738383493015, 0.05216601653994313, 0.14461609378188955, 0.16231828743163657, 0.14109674218774382, 0.14576375206705283, 0.11817235943723081, 0.08988309621749013, 0.10238010074310078, 0.12039316148175694, 0.14941807740220192, 9.999999999998899e-05, 0.009412221394753728, 0.013332499141935683, 9.999999999998899e-05, 0.00897700883473973, 0.01361162961810225, 0.037825632535916864, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057876325978993, 0.02451810667930132, 0.057292177418332035, 0.04812339656134279, 0.025769421604476483, 0.03943267358881164, 0.024138833343433586, 0.017373140154086864, 0.020826828691599464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06632113726023037, 0.05510446952284531, 0.05557771978989767, 0.042895805517251584, 0.041123815983716616, 0.02213735481863499, 0.0895683150768154, 0.08412561448058586, 0.03280089408659037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20406704221440042, 0.17870264033578587, 0.19524368670011716, 0.18198449043470866, 0.19702671509322278, 0.17151526907536263, 0.18948595053091655, 0.21081112245605071, 0.24069554967802165, 0.02364276324483705, 0.02508728880272626, 0.03600031186668751, 0.031626530651271745, 0.044256904740924585, 0.03250177089188855, 0.04917990305335007, 0.047229977435509496, 0.051145285852602695, 0.17058504625073034, 0.1483380289031495, 0.1352678056248604, 0.1465328978146575, 0.13268147531527863, 0.15074651899400537, 0.13682243833034902, 0.11751034427941098, 0.1273311164248846, 0.16005062174340945, 0.1522485414552811, 0.1539655554125422, 0.1929145852231693, 0.18550260657596185, 0.16895193404998587, 0.15357335567411734, 0.14465996564125527, 0.1508274162210761, 0.11877783358063121, 0.10399993585153333, 0.09924753320452306, 0.16133896256616242, 0.11342037852471332, 0.12663085154996656, 0.09884937341029576, 0.09515659930516263, 0.13629118143157481, 0.17855415303457034, 0.1826589486028174, 0.20682255335582755, 0.1758178897760636, 0.1727836159800017, 0.17424779186243577, 0.18342699590126144, 0.17985427306219914, 0.16577812775371858, 0.1525463673049604, 0.14815232225366326, 0.15579905856173826, 0.14858917528952442, 0.1582710075697079, 0.1553471117504458, 0.14769474097605273, 0.15229231535780619, 0.1570980067310318, 0.1779349316944766, 0.13084415250695747, 0.14819523664421486, 0.16516874183620311, 0.11354712602573414, 0.1548610670589502, 0.17347821585167278, 0.15211823436501004, 0.16090900818707055, 0.15775496282442747, 0.24477303816336127, 0.16668576929480172, 0.16042566976290074, 0.15040799547994665, 0.18669319308176757, 0.1797396762242779, 0.14759627519725327, 0.15370059416389725, 0.18792979836421075, 0.19362618485364802, 0.18063142729370207, 0.18565226178562566, 0.1776521259275845, 0.1938005212643339, 0.18680664214506737, 0.19731870443891597, 0.1997725676617036, 0.056852120478284474, 0.0447518674615196, 0.054094243127996045, 0.06455603197509918, 0.06299286483342947, 0.06372668035899809, 0.055012195994738056, 0.04830702214790583, 0.0651422354081771]}, "mutation_prompt": null}
{"id": "b0042a08-2768-4a26-af89-86217fa00eb4", "solution": "import numpy as np\n\nclass DynamicMultiStrategyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicMultiStrategyAlgorithm", "description": "Introducing a Dynamic Multi-Strategy Algorithm combining Differential Evolution and Firefly Algorithms for enhanced exploration and exploitation in black box optimization tasks.", "configspace": "", "generation": 26, "fitness": 0.15370821246213287, "feedback": "The algorithm DynamicMultiStrategyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.13.", "error": "", "parent_id": "d3ae3cb4-a7a7-4514-a6b9-fdfa240430a9", "metadata": {"aucs": [0.4188405533054933, 0.46945838098187487, 0.46430147018285484, 0.4259140379772751, 0.42730000624476816, 0.4435914646151846, 0.41684103688167384, 0.4445687436315279, 0.4571832427062291, 9.999999999998899e-05, 9.999999999998899e-05, 0.020130212628727384, 9.999999999998899e-05, 0.03330976024215904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06261132252996304, 0.10207805077044452, 0.06683315529563516, 0.09535242641763886, 0.05593267216813036, 0.08069775515278066, 0.08917387981323832, 0.06252771749305097, 0.06502298571251364, 0.03682391225283921, 0.03539178993557157, 0.034862604844308254, 0.09638597071436561, 0.017057830107124028, 0.0026832589680725327, 0.00911815537165317, 0.010019307921371734, 0.01678663825726945, 0.19604899414066546, 0.14232147884333646, 0.25003127623770005, 0.08741857524187002, 0.08593938385591171, 0.09540477030561667, 0.1286924425878515, 0.1045836373285629, 0.11774682107639822, 0.21126313316300038, 0.17829784003680926, 0.17662281652418865, 0.18246171485825158, 0.20386346155025303, 0.24299871200248857, 0.29749529304886535, 0.19308433222062882, 0.24668271916126983, 0.1314948663541694, 0.13174099975353015, 0.10717597855001826, 0.13637276255056152, 0.10533510547235614, 0.11016856643210193, 0.0490867978537195, 0.15271885351094294, 0.15723579560283218, 0.20980751770897632, 0.11556787096280363, 0.10288455565488164, 0.12702709770486287, 0.12324108860244465, 0.05047058601346821, 0.2597441027859493, 0.22716944428837627, 0.17391933702703644, 0.19441396263847377, 0.1709033102363734, 0.16465349288815756, 0.15145882595896998, 0.12592223331079788, 0.1172980849760783, 0.16814572908101288, 0.1905508253291961, 0.24933210055033783, 9.999999999998899e-05, 0.05179726490992087, 9.999999999998899e-05, 0.0384733396527106, 0.022815391029457843, 0.013046816070749978, 0.0012143227299035164, 9.999999999998899e-05, 0.05308919153666247, 0.10786704865355201, 0.044653113818254875, 0.09854935304249879, 0.07531998512421068, 0.02568987506819742, 0.04225041081937175, 0.16648983525122607, 0.09150814391883322, 0.03530395269847253, 0.00726387203812251, 9.999999999998899e-05, 0.0019745570578403315, 0.007482208333728146, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022574735952465286, 9.999999999998899e-05, 9.999999999998899e-05, 0.10798943483641577, 0.09116977435047524, 0.09114320394522724, 0.06184685393182465, 0.024838013952494076, 0.08701820895326695, 0.11501624991350601, 0.11266652461363769, 0.0810955434622117, 0.45406853101763, 0.43608776481607214, 0.4170508354863529, 0.30626280496714364, 0.4372914649897026, 0.3575775559855223, 0.4462338041349828, 0.41299345650931696, 0.4240354138773017, 0.06355633300238228, 0.016541341077990768, 9.999999999998899e-05, 0.12334783853793285, 0.03588289743505779, 0.10753141042130665, 0.07204607470814517, 0.04539757722713622, 0.07225104482436451, 0.2393484427047773, 0.15378552118834554, 0.18119203226327718, 0.26655384488396017, 0.3232919060938273, 0.20020691079849995, 0.357557998332118, 0.19397246952629188, 0.19835210874790365, 0.15972731548102093, 0.21922628870904182, 0.1680387583742302, 0.18866714495191017, 0.25219927156999966, 0.15239952554155645, 0.20115092130287693, 0.2751757294055668, 0.19165355860253974, 0.09577763573998344, 0.0904652093926328, 0.14104726330800532, 0.095666466143011, 0.11243832020126643, 0.1544852020353592, 0.1715567916783659, 0.11113235332270521, 0.11544998964302322, 0.18161014052606195, 0.23515991182865525, 0.16122938990555213, 0.22491641142855245, 0.24514120072187517, 0.20837353118283575, 0.19183451420064757, 0.18917284758803043, 0.18280401897037268, 0.17561940129248488, 0.17545921460161606, 0.176424627393043, 0.19169406367429254, 0.16992597668964737, 0.16644247290527214, 0.1879615431758075, 0.18122612483787248, 0.17733325209974815, 0.17381488527505295, 0.12670120795635953, 0.15251043612702975, 0.07667164837465823, 0.19916871566575867, 0.6176950949770804, 0.10766129257152768, 0.1677963411337503, 0.6702540738940943, 0.5035911428988515, 0.15647285999464877, 0.41128393770051475, 0.09002623390997777, 0.16502368364100384, 0.16287185989950725, 0.38146635150082386, 0.10043528648238298, 0.2558430774698276, 0.18522837612406207, 0.18360724907573844, 0.17903191289593456, 0.18086945320021985, 0.19035822944022562, 0.19349039261108236, 0.18214968319354052, 0.17647427673359106, 0.1850021836678588, 0.06725749428845629, 0.04786642619269388, 0.0689387809042451, 0.0643447897402517, 0.06490191214176522, 0.09604019990306589, 0.06202951668224943, 0.05779200217865332, 0.0682735109775533]}, "mutation_prompt": null}
{"id": "76d75065-db40-4c79-9a8a-4336f21742e9", "solution": "import numpy as np\n\nclass HybridHarmonySearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.harmony_memory_size = 20\n        self.pso_c1 = 1.49\n        self.pso_c2 = 1.49\n        self.pso_w = 0.72\n\n    def _harmony_search(self, population, func):\n        harmony_memory = np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n        harmony_fitness = np.array([func(individual) for individual in harmony_memory])\n        for _ in range(self.population_size):\n            new_harmony = np.clip(np.mean(harmony_memory, axis=0) + np.random.uniform(-1, 1, self.dim), -5.0, 5.0)\n            if func(new_harmony) < max(harmony_fitness):\n                replace_idx = np.argmax(harmony_fitness)\n                harmony_memory[replace_idx] = new_harmony\n                harmony_fitness[replace_idx] = func(new_harmony)\n        return harmony_memory[np.argmin(harmony_fitness)]\n\n    def _particle_swarm_optimization(self, population, func):\n        velocity = np.zeros((self.population_size, self.dim))\n        pbest = population.copy()\n        pbest_fitness = np.array([func(individual) for individual in population])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n\n        for _ in range(self.population_size):\n            velocity = self.pso_w * velocity + self.pso_c1 * np.random.rand() * (pbest - population) + self.pso_c2 * np.random.rand() * (gbest - population)\n            population += velocity\n            population = np.clip(population, -5.0, 5.0)\n            current_fitness = np.array([func(individual) for individual in population])\n\n            for i in range(self.population_size):\n                if current_fitness[i] < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = current_fitness[i]\n\n            new_gbest_idx = np.argmin(pbest_fitness)\n            if pbest_fitness[new_gbest_idx] < func(gbest):\n                gbest = pbest[new_gbest_idx]\n                gbest_idx = new_gbest_idx\n\n        return gbest\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._harmony_search(population, func)\n            population = self._particle_swarm_optimization(population, func)\n\n        best_solution = self._particle_swarm_optimization(population, func)\n        return best_solution", "name": "HybridHarmonySearchPSO", "description": "Introducing a Hybrid Harmony Search and Particle Swarm Optimization algorithm for robust black box optimization by balancing global and local search strategies effectively.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, -0.5298655382739986').", "error": "TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, -0.5298655382739986')", "parent_id": "b0042a08-2768-4a26-af89-86217fa00eb4", "metadata": {}, "mutation_prompt": null}
{"id": "d5ac3285-f6ad-4d66-9113-94417589e547", "solution": "import numpy as np\n\nclass DynamicMultiStrategyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicMultiStrategyAlgorithm", "description": "Introducing a Dynamic Multi-Strategy Algorithm combining Differential Evolution and Firefly Algorithms for enhanced exploration and exploitation in black box optimization tasks.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0042a08-2768-4a26-af89-86217fa00eb4", "metadata": {"aucs": [0.4188405533054933, 0.46945838098187487, 0.46430147018285484, 0.4259140379772751, 0.42730000624476816, 0.4435914646151846, 0.41684103688167384, 0.4445687436315279, 0.4571832427062291, 9.999999999998899e-05, 9.999999999998899e-05, 0.020130212628727384, 9.999999999998899e-05, 0.03330976024215904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06261132252996304, 0.10207805077044452, 0.06683315529563516, 0.09535242641763886, 0.05593267216813036, 0.08069775515278066, 0.08917387981323832, 0.06252771749305097, 0.06502298571251364, 0.03682391225283921, 0.03539178993557157, 0.034862604844308254, 0.09638597071436561, 0.017057830107124028, 0.0026832589680725327, 0.00911815537165317, 0.010019307921371734, 0.01678663825726945, 0.19604899414066546, 0.14232147884333646, 0.25003127623770005, 0.08741857524187002, 0.08593938385591171, 0.09540477030561667, 0.1286924425878515, 0.1045836373285629, 0.11774682107639822, 0.21126313316300038, 0.17829784003680926, 0.17662281652418865, 0.18246171485825158, 0.20386346155025303, 0.24299871200248857, 0.29749529304886535, 0.19308433222062882, 0.24668271916126983, 0.1314948663541694, 0.13174099975353015, 0.10717597855001826, 0.13637276255056152, 0.10533510547235614, 0.11016856643210193, 0.0490867978537195, 0.15271885351094294, 0.15723579560283218, 0.20980751770897632, 0.11556787096280363, 0.10288455565488164, 0.12702709770486287, 0.12324108860244465, 0.05047058601346821, 0.2597441027859493, 0.22716944428837627, 0.17391933702703644, 0.19441396263847377, 0.1709033102363734, 0.16465349288815756, 0.15145882595896998, 0.12592223331079788, 0.1172980849760783, 0.16814572908101288, 0.1905508253291961, 0.24933210055033783, 9.999999999998899e-05, 0.05179726490992087, 9.999999999998899e-05, 0.0384733396527106, 0.022815391029457843, 0.013046816070749978, 0.0012143227299035164, 9.999999999998899e-05, 0.05308919153666247, 0.10786704865355201, 0.044653113818254875, 0.09854935304249879, 0.07531998512421068, 0.02568987506819742, 0.04225041081937175, 0.16648983525122607, 0.09150814391883322, 0.03530395269847253, 0.00726387203812251, 9.999999999998899e-05, 0.0019745570578403315, 0.007482208333728146, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022574735952465286, 9.999999999998899e-05, 9.999999999998899e-05, 0.10798943483641577, 0.09116977435047524, 0.09114320394522724, 0.06184685393182465, 0.024838013952494076, 0.08701820895326695, 0.11501624991350601, 0.11266652461363769, 0.0810955434622117, 0.45406853101763, 0.43608776481607214, 0.4170508354863529, 0.30626280496714364, 0.4372914649897026, 0.3575775559855223, 0.4462338041349828, 0.41299345650931696, 0.4240354138773017, 0.06355633300238228, 0.016541341077990768, 9.999999999998899e-05, 0.12334783853793285, 0.03588289743505779, 0.10753141042130665, 0.07204607470814517, 0.04539757722713622, 0.07225104482436451, 0.2393484427047773, 0.15378552118834554, 0.18119203226327718, 0.26655384488396017, 0.3232919060938273, 0.20020691079849995, 0.357557998332118, 0.19397246952629188, 0.19835210874790365, 0.15972731548102093, 0.21922628870904182, 0.1680387583742302, 0.18866714495191017, 0.25219927156999966, 0.15239952554155645, 0.20115092130287693, 0.2751757294055668, 0.19165355860253974, 0.09577763573998344, 0.0904652093926328, 0.14104726330800532, 0.095666466143011, 0.11243832020126643, 0.1544852020353592, 0.1715567916783659, 0.11113235332270521, 0.11544998964302322, 0.18161014052606195, 0.23515991182865525, 0.16122938990555213, 0.22491641142855245, 0.24514120072187517, 0.20837353118283575, 0.19183451420064757, 0.18917284758803043, 0.18280401897037268, 0.17561940129248488, 0.17545921460161606, 0.176424627393043, 0.19169406367429254, 0.16992597668964737, 0.16644247290527214, 0.1879615431758075, 0.18122612483787248, 0.17733325209974815, 0.17381488527505295, 0.12670120795635953, 0.15251043612702975, 0.07667164837465823, 0.19916871566575867, 0.6176950949770804, 0.10766129257152768, 0.1677963411337503, 0.6702540738940943, 0.5035911428988515, 0.15647285999464877, 0.41128393770051475, 0.09002623390997777, 0.16502368364100384, 0.16287185989950725, 0.38146635150082386, 0.10043528648238298, 0.2558430774698276, 0.18522837612406207, 0.18360724907573844, 0.17903191289593456, 0.18086945320021985, 0.19035822944022562, 0.19349039261108236, 0.18214968319354052, 0.17647427673359106, 0.1850021836678588, 0.06725749428845629, 0.04786642619269388, 0.0689387809042451, 0.0643447897402517, 0.06490191214176522, 0.09604019990306589, 0.06202951668224943, 0.05779200217865332, 0.0682735109775533]}, "mutation_prompt": null}
{"id": "a2f20e0b-676c-483a-9018-c15522a48ed1", "solution": "import numpy as np\n\nclass DynamicMultiStrategyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicMultiStrategyAlgorithm", "description": "Introducing a Dynamic Multi-Strategy Algorithm combining Differential Evolution and Firefly Algorithms for enhanced exploration and exploitation in black box optimization tasks.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0042a08-2768-4a26-af89-86217fa00eb4", "metadata": {"aucs": [0.4188405533054933, 0.46945838098187487, 0.46430147018285484, 0.4259140379772751, 0.42730000624476816, 0.4435914646151846, 0.41684103688167384, 0.4445687436315279, 0.4571832427062291, 9.999999999998899e-05, 9.999999999998899e-05, 0.020130212628727384, 9.999999999998899e-05, 0.03330976024215904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06261132252996304, 0.10207805077044452, 0.06683315529563516, 0.09535242641763886, 0.05593267216813036, 0.08069775515278066, 0.08917387981323832, 0.06252771749305097, 0.06502298571251364, 0.03682391225283921, 0.03539178993557157, 0.034862604844308254, 0.09638597071436561, 0.017057830107124028, 0.0026832589680725327, 0.00911815537165317, 0.010019307921371734, 0.01678663825726945, 0.19604899414066546, 0.14232147884333646, 0.25003127623770005, 0.08741857524187002, 0.08593938385591171, 0.09540477030561667, 0.1286924425878515, 0.1045836373285629, 0.11774682107639822, 0.21126313316300038, 0.17829784003680926, 0.17662281652418865, 0.18246171485825158, 0.20386346155025303, 0.24299871200248857, 0.29749529304886535, 0.19308433222062882, 0.24668271916126983, 0.1314948663541694, 0.13174099975353015, 0.10717597855001826, 0.13637276255056152, 0.10533510547235614, 0.11016856643210193, 0.0490867978537195, 0.15271885351094294, 0.15723579560283218, 0.20980751770897632, 0.11556787096280363, 0.10288455565488164, 0.12702709770486287, 0.12324108860244465, 0.05047058601346821, 0.2597441027859493, 0.22716944428837627, 0.17391933702703644, 0.19441396263847377, 0.1709033102363734, 0.16465349288815756, 0.15145882595896998, 0.12592223331079788, 0.1172980849760783, 0.16814572908101288, 0.1905508253291961, 0.24933210055033783, 9.999999999998899e-05, 0.05179726490992087, 9.999999999998899e-05, 0.0384733396527106, 0.022815391029457843, 0.013046816070749978, 0.0012143227299035164, 9.999999999998899e-05, 0.05308919153666247, 0.10786704865355201, 0.044653113818254875, 0.09854935304249879, 0.07531998512421068, 0.02568987506819742, 0.04225041081937175, 0.16648983525122607, 0.09150814391883322, 0.03530395269847253, 0.00726387203812251, 9.999999999998899e-05, 0.0019745570578403315, 0.007482208333728146, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022574735952465286, 9.999999999998899e-05, 9.999999999998899e-05, 0.10798943483641577, 0.09116977435047524, 0.09114320394522724, 0.06184685393182465, 0.024838013952494076, 0.08701820895326695, 0.11501624991350601, 0.11266652461363769, 0.0810955434622117, 0.45406853101763, 0.43608776481607214, 0.4170508354863529, 0.30626280496714364, 0.4372914649897026, 0.3575775559855223, 0.4462338041349828, 0.41299345650931696, 0.4240354138773017, 0.06355633300238228, 0.016541341077990768, 9.999999999998899e-05, 0.12334783853793285, 0.03588289743505779, 0.10753141042130665, 0.07204607470814517, 0.04539757722713622, 0.07225104482436451, 0.2393484427047773, 0.15378552118834554, 0.18119203226327718, 0.26655384488396017, 0.3232919060938273, 0.20020691079849995, 0.357557998332118, 0.19397246952629188, 0.19835210874790365, 0.15972731548102093, 0.21922628870904182, 0.1680387583742302, 0.18866714495191017, 0.25219927156999966, 0.15239952554155645, 0.20115092130287693, 0.2751757294055668, 0.19165355860253974, 0.09577763573998344, 0.0904652093926328, 0.14104726330800532, 0.095666466143011, 0.11243832020126643, 0.1544852020353592, 0.1715567916783659, 0.11113235332270521, 0.11544998964302322, 0.18161014052606195, 0.23515991182865525, 0.16122938990555213, 0.22491641142855245, 0.24514120072187517, 0.20837353118283575, 0.19183451420064757, 0.18917284758803043, 0.18280401897037268, 0.17561940129248488, 0.17545921460161606, 0.176424627393043, 0.19169406367429254, 0.16992597668964737, 0.16644247290527214, 0.1879615431758075, 0.18122612483787248, 0.17733325209974815, 0.17381488527505295, 0.12670120795635953, 0.15251043612702975, 0.07667164837465823, 0.19916871566575867, 0.6176950949770804, 0.10766129257152768, 0.1677963411337503, 0.6702540738940943, 0.5035911428988515, 0.15647285999464877, 0.41128393770051475, 0.09002623390997777, 0.16502368364100384, 0.16287185989950725, 0.38146635150082386, 0.10043528648238298, 0.2558430774698276, 0.18522837612406207, 0.18360724907573844, 0.17903191289593456, 0.18086945320021985, 0.19035822944022562, 0.19349039261108236, 0.18214968319354052, 0.17647427673359106, 0.1850021836678588, 0.06725749428845629, 0.04786642619269388, 0.0689387809042451, 0.0643447897402517, 0.06490191214176522, 0.09604019990306589, 0.06202951668224943, 0.05779200217865332, 0.0682735109775533]}, "mutation_prompt": null}
{"id": "b61fc97e-6b2f-492f-9f04-1e2c761986fe", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedDynamicMultiStrategyAlgorithm", "description": "Enhancing the Dynamic Multi-Strategy Algorithm by incorporating Levy flight behavior to promote exploration in the search space.", "configspace": "", "generation": 30, "fitness": 0.18934332296892517, "feedback": "The algorithm EnhancedDynamicMultiStrategyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "b0042a08-2768-4a26-af89-86217fa00eb4", "metadata": {"aucs": [0.4345104175940365, 0.45977441830446386, 0.4849908117919257, 0.4841822336872065, 0.4708456001860263, 0.45097538062376574, 0.43248405347620344, 0.4567375811444101, 0.4492625640315062, 0.09134239430456315, 0.017762717665419814, 0.02743276120960869, 9.999999999998899e-05, 0.051521994852851805, 9.999999999998899e-05, 9.999999999998899e-05, 0.09308852215048558, 9.999999999998899e-05, 0.11865009076850841, 0.09566893339654814, 0.093058399419363, 0.10180237260074387, 0.08316341561692664, 0.08287077839557788, 0.11370749624473142, 0.07342134800924627, 0.1438413632748068, 0.07585425450356886, 0.07098481775782606, 0.0580116416894525, 0.08789442074514742, 0.09262281412201734, 0.08675226764138477, 0.06352969376978179, 0.0707636004409109, 0.06763635098057907, 0.528875185407857, 0.7557377035032821, 0.6349930453579742, 0.3948562841390786, 0.5602163727731002, 0.7123459868051125, 0.5625344947439765, 0.4841491670813902, 0.38395558914585015, 0.23513113924003481, 0.24678372170556573, 0.22747777047410422, 0.25273996663966314, 0.2163077073239673, 0.2614349650912353, 0.29868918787969145, 0.23858221866674234, 0.28552956903197835, 0.5318153489208448, 0.13396475429478283, 0.1334766886751224, 0.2665104733981012, 0.20890429609174366, 0.18278602855746418, 0.1648098439370851, 0.14746217839862108, 0.20740644580105339, 0.17440721542451898, 0.13546257004108775, 0.12087730743027636, 0.14115031872245032, 0.12556090493506422, 0.1578905480494155, 0.21567292934898186, 0.2564132045868177, 0.17597802958257047, 0.21692948957991143, 0.16277526217782978, 0.16162470862775136, 0.16003443571894527, 0.16716504679443955, 0.20616066798215982, 0.15028841983670937, 0.1941129051987579, 0.13506015120832748, 9.999999999998899e-05, 0.054152552227906714, 9.999999999998899e-05, 0.03608420912296517, 0.03647676238320907, 0.0068803106072642395, 0.0017036828009622251, 9.999999999998899e-05, 0.07011063146274099, 0.14382670686326415, 0.030597648078079742, 0.11079028376444655, 0.06951338942604712, 0.02729404157678439, 0.029624559144436513, 0.1677695305510708, 0.08119707526015796, 0.02264927206549272, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029082786217038414, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015298803539917083, 9.999999999998899e-05, 0.010265771030220971, 0.0033996932845060668, 0.1322895540675274, 0.10465385957250672, 0.09427383829015323, 0.07367256466912786, 0.06630671726706316, 0.09661647097034698, 0.10764354411829868, 0.11784029291445564, 0.1015217046100384, 0.4384480558952498, 0.4326009546815629, 0.4374957685965254, 0.37875380914637513, 0.40118005029522796, 0.39544854623904535, 0.42898384775132103, 0.41466229786250763, 0.42850003067587517, 0.06914021061282916, 0.04636775319286901, 0.013792490684151892, 0.12030829640811758, 0.04788797208298323, 0.11159740238769411, 0.054726006369320235, 0.04444468528967194, 0.06903954844552085, 0.24961046440971135, 0.23999679908697602, 0.3090536821748394, 0.3002259023639171, 0.31315428163890646, 0.20852919865709452, 0.38171695902943936, 0.19422687409501127, 0.25433895191963474, 0.1844111088554572, 0.27344774541730565, 0.2109866162666134, 0.21243911079211397, 0.24865684592425563, 0.17073728996353843, 0.19859654147009664, 0.3091377270622805, 0.20445861269858168, 0.11696562890727824, 0.08377835749665952, 0.18434611002933088, 0.21195105859198915, 0.15787754316883806, 0.21810330876660633, 0.16426355742169074, 0.2138303187828099, 0.16182988349915017, 0.2068255207485904, 0.2161601026892983, 0.19686361556957743, 0.21268529019435534, 0.1977689345364606, 0.18239640894624565, 0.22670431804516422, 0.19128119281219047, 0.19986475214902544, 0.19549241849645216, 0.17494280162508546, 0.1807796176750498, 0.21049662413387282, 0.17317784031814643, 0.17842603913815636, 0.18748800484559036, 0.22077065536666807, 0.18000958409368573, 0.17563157872073987, 0.12625648367892173, 0.1533281790046236, 0.13552583684295572, 0.20079862537456827, 0.6633013910051133, 0.10842485162593929, 0.16732655628739324, 0.6846082056228076, 0.5175009157816544, 0.15704415531341942, 0.3703856629260738, 0.09198168737542034, 0.1657714358609912, 0.1659923786158004, 0.3817824889285969, 0.10318171562522382, 0.27003231907962333, 0.18862617949934735, 0.18205265472280963, 0.1779196095567882, 0.1862670919542282, 0.1889671628139954, 0.18514338255071128, 0.176474366425327, 0.17071616830210146, 0.16907479357624688, 0.08023245334693152, 0.05296014185295139, 0.08028265918549571, 0.08078182760954655, 0.08078004879735201, 0.08960586805346515, 0.07962505603793002, 0.0723771585624674, 0.07485361120341072]}, "mutation_prompt": null}
{"id": "35fa0811-d97d-47aa-8134-53b395939a3a", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedDynamicMultiStrategyAlgorithm", "description": "Enhancing the Dynamic Multi-Strategy Algorithm by incorporating Levy flight behavior to promote exploration in the search space.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b61fc97e-6b2f-492f-9f04-1e2c761986fe", "metadata": {"aucs": [0.4345104175940365, 0.45977441830446386, 0.4849908117919257, 0.4841822336872065, 0.4708456001860263, 0.45097538062376574, 0.43248405347620344, 0.4567375811444101, 0.4492625640315062, 0.09134239430456315, 0.017762717665419814, 0.02743276120960869, 9.999999999998899e-05, 0.051521994852851805, 9.999999999998899e-05, 9.999999999998899e-05, 0.09308852215048558, 9.999999999998899e-05, 0.11865009076850841, 0.09566893339654814, 0.093058399419363, 0.10180237260074387, 0.08316341561692664, 0.08287077839557788, 0.11370749624473142, 0.07342134800924627, 0.1438413632748068, 0.07585425450356886, 0.07098481775782606, 0.0580116416894525, 0.08789442074514742, 0.09262281412201734, 0.08675226764138477, 0.06352969376978179, 0.0707636004409109, 0.06763635098057907, 0.528875185407857, 0.7557377035032821, 0.6349930453579742, 0.3948562841390786, 0.5602163727731002, 0.7123459868051125, 0.5625344947439765, 0.4841491670813902, 0.38395558914585015, 0.23513113924003481, 0.24678372170556573, 0.22747777047410422, 0.25273996663966314, 0.2163077073239673, 0.2614349650912353, 0.29868918787969145, 0.23858221866674234, 0.28552956903197835, 0.5318153489208448, 0.13396475429478283, 0.1334766886751224, 0.2665104733981012, 0.20890429609174366, 0.18278602855746418, 0.1648098439370851, 0.14746217839862108, 0.20740644580105339, 0.17440721542451898, 0.13546257004108775, 0.12087730743027636, 0.14115031872245032, 0.12556090493506422, 0.1578905480494155, 0.21567292934898186, 0.2564132045868177, 0.17597802958257047, 0.21692948957991143, 0.16277526217782978, 0.16162470862775136, 0.16003443571894527, 0.16716504679443955, 0.20616066798215982, 0.15028841983670937, 0.1941129051987579, 0.13506015120832748, 9.999999999998899e-05, 0.054152552227906714, 9.999999999998899e-05, 0.03608420912296517, 0.03647676238320907, 0.0068803106072642395, 0.0017036828009622251, 9.999999999998899e-05, 0.07011063146274099, 0.14382670686326415, 0.030597648078079742, 0.11079028376444655, 0.06951338942604712, 0.02729404157678439, 0.029624559144436513, 0.1677695305510708, 0.08119707526015796, 0.02264927206549272, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029082786217038414, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015298803539917083, 9.999999999998899e-05, 0.010265771030220971, 0.0033996932845060668, 0.1322895540675274, 0.10465385957250672, 0.09427383829015323, 0.07367256466912786, 0.06630671726706316, 0.09661647097034698, 0.10764354411829868, 0.11784029291445564, 0.1015217046100384, 0.4384480558952498, 0.4326009546815629, 0.4374957685965254, 0.37875380914637513, 0.40118005029522796, 0.39544854623904535, 0.42898384775132103, 0.41466229786250763, 0.42850003067587517, 0.06914021061282916, 0.04636775319286901, 0.013792490684151892, 0.12030829640811758, 0.04788797208298323, 0.11159740238769411, 0.054726006369320235, 0.04444468528967194, 0.06903954844552085, 0.24961046440971135, 0.23999679908697602, 0.3090536821748394, 0.3002259023639171, 0.31315428163890646, 0.20852919865709452, 0.38171695902943936, 0.19422687409501127, 0.25433895191963474, 0.1844111088554572, 0.27344774541730565, 0.2109866162666134, 0.21243911079211397, 0.24865684592425563, 0.17073728996353843, 0.19859654147009664, 0.3091377270622805, 0.20445861269858168, 0.11696562890727824, 0.08377835749665952, 0.18434611002933088, 0.21195105859198915, 0.15787754316883806, 0.21810330876660633, 0.16426355742169074, 0.2138303187828099, 0.16182988349915017, 0.2068255207485904, 0.2161601026892983, 0.19686361556957743, 0.21268529019435534, 0.1977689345364606, 0.18239640894624565, 0.22670431804516422, 0.19128119281219047, 0.19986475214902544, 0.19549241849645216, 0.17494280162508546, 0.1807796176750498, 0.21049662413387282, 0.17317784031814643, 0.17842603913815636, 0.18748800484559036, 0.22077065536666807, 0.18000958409368573, 0.17563157872073987, 0.12625648367892173, 0.1533281790046236, 0.13552583684295572, 0.20079862537456827, 0.6633013910051133, 0.10842485162593929, 0.16732655628739324, 0.6846082056228076, 0.5175009157816544, 0.15704415531341942, 0.3703856629260738, 0.09198168737542034, 0.1657714358609912, 0.1659923786158004, 0.3817824889285969, 0.10318171562522382, 0.27003231907962333, 0.18862617949934735, 0.18205265472280963, 0.1779196095567882, 0.1862670919542282, 0.1889671628139954, 0.18514338255071128, 0.176474366425327, 0.17071616830210146, 0.16907479357624688, 0.08023245334693152, 0.05296014185295139, 0.08028265918549571, 0.08078182760954655, 0.08078004879735201, 0.08960586805346515, 0.07962505603793002, 0.0723771585624674, 0.07485361120341072]}, "mutation_prompt": null}
{"id": "a170db0b-36e6-4542-a5ac-fb5a52b080f6", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedDynamicMultiStrategyAlgorithm", "description": "Enhancing the Dynamic Multi-Strategy Algorithm by incorporating Levy flight behavior to promote exploration in the search space.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b61fc97e-6b2f-492f-9f04-1e2c761986fe", "metadata": {"aucs": [0.4345104175940365, 0.45977441830446386, 0.4849908117919257, 0.4841822336872065, 0.4708456001860263, 0.45097538062376574, 0.43248405347620344, 0.4567375811444101, 0.4492625640315062, 0.09134239430456315, 0.017762717665419814, 0.02743276120960869, 9.999999999998899e-05, 0.051521994852851805, 9.999999999998899e-05, 9.999999999998899e-05, 0.09308852215048558, 9.999999999998899e-05, 0.11865009076850841, 0.09566893339654814, 0.093058399419363, 0.10180237260074387, 0.08316341561692664, 0.08287077839557788, 0.11370749624473142, 0.07342134800924627, 0.1438413632748068, 0.07585425450356886, 0.07098481775782606, 0.0580116416894525, 0.08789442074514742, 0.09262281412201734, 0.08675226764138477, 0.06352969376978179, 0.0707636004409109, 0.06763635098057907, 0.528875185407857, 0.7557377035032821, 0.6349930453579742, 0.3948562841390786, 0.5602163727731002, 0.7123459868051125, 0.5625344947439765, 0.4841491670813902, 0.38395558914585015, 0.23513113924003481, 0.24678372170556573, 0.22747777047410422, 0.25273996663966314, 0.2163077073239673, 0.2614349650912353, 0.29868918787969145, 0.23858221866674234, 0.28552956903197835, 0.5318153489208448, 0.13396475429478283, 0.1334766886751224, 0.2665104733981012, 0.20890429609174366, 0.18278602855746418, 0.1648098439370851, 0.14746217839862108, 0.20740644580105339, 0.17440721542451898, 0.13546257004108775, 0.12087730743027636, 0.14115031872245032, 0.12556090493506422, 0.1578905480494155, 0.21567292934898186, 0.2564132045868177, 0.17597802958257047, 0.21692948957991143, 0.16277526217782978, 0.16162470862775136, 0.16003443571894527, 0.16716504679443955, 0.20616066798215982, 0.15028841983670937, 0.1941129051987579, 0.13506015120832748, 9.999999999998899e-05, 0.054152552227906714, 9.999999999998899e-05, 0.03608420912296517, 0.03647676238320907, 0.0068803106072642395, 0.0017036828009622251, 9.999999999998899e-05, 0.07011063146274099, 0.14382670686326415, 0.030597648078079742, 0.11079028376444655, 0.06951338942604712, 0.02729404157678439, 0.029624559144436513, 0.1677695305510708, 0.08119707526015796, 0.02264927206549272, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029082786217038414, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015298803539917083, 9.999999999998899e-05, 0.010265771030220971, 0.0033996932845060668, 0.1322895540675274, 0.10465385957250672, 0.09427383829015323, 0.07367256466912786, 0.06630671726706316, 0.09661647097034698, 0.10764354411829868, 0.11784029291445564, 0.1015217046100384, 0.4384480558952498, 0.4326009546815629, 0.4374957685965254, 0.37875380914637513, 0.40118005029522796, 0.39544854623904535, 0.42898384775132103, 0.41466229786250763, 0.42850003067587517, 0.06914021061282916, 0.04636775319286901, 0.013792490684151892, 0.12030829640811758, 0.04788797208298323, 0.11159740238769411, 0.054726006369320235, 0.04444468528967194, 0.06903954844552085, 0.24961046440971135, 0.23999679908697602, 0.3090536821748394, 0.3002259023639171, 0.31315428163890646, 0.20852919865709452, 0.38171695902943936, 0.19422687409501127, 0.25433895191963474, 0.1844111088554572, 0.27344774541730565, 0.2109866162666134, 0.21243911079211397, 0.24865684592425563, 0.17073728996353843, 0.19859654147009664, 0.3091377270622805, 0.20445861269858168, 0.11696562890727824, 0.08377835749665952, 0.18434611002933088, 0.21195105859198915, 0.15787754316883806, 0.21810330876660633, 0.16426355742169074, 0.2138303187828099, 0.16182988349915017, 0.2068255207485904, 0.2161601026892983, 0.19686361556957743, 0.21268529019435534, 0.1977689345364606, 0.18239640894624565, 0.22670431804516422, 0.19128119281219047, 0.19986475214902544, 0.19549241849645216, 0.17494280162508546, 0.1807796176750498, 0.21049662413387282, 0.17317784031814643, 0.17842603913815636, 0.18748800484559036, 0.22077065536666807, 0.18000958409368573, 0.17563157872073987, 0.12625648367892173, 0.1533281790046236, 0.13552583684295572, 0.20079862537456827, 0.6633013910051133, 0.10842485162593929, 0.16732655628739324, 0.6846082056228076, 0.5175009157816544, 0.15704415531341942, 0.3703856629260738, 0.09198168737542034, 0.1657714358609912, 0.1659923786158004, 0.3817824889285969, 0.10318171562522382, 0.27003231907962333, 0.18862617949934735, 0.18205265472280963, 0.1779196095567882, 0.1862670919542282, 0.1889671628139954, 0.18514338255071128, 0.176474366425327, 0.17071616830210146, 0.16907479357624688, 0.08023245334693152, 0.05296014185295139, 0.08028265918549571, 0.08078182760954655, 0.08078004879735201, 0.08960586805346515, 0.07962505603793002, 0.0723771585624674, 0.07485361120341072]}, "mutation_prompt": null}
{"id": "343a368c-fdbf-4ad4-a9e4-3e1d397c8aa6", "solution": "import numpy as np\n\nclass EnhancedDynamicMultiStrategyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedDynamicMultiStrategyAlgorithm", "description": "Enhancing the Dynamic Multi-Strategy Algorithm by incorporating Levy flight behavior to promote exploration in the search space.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b61fc97e-6b2f-492f-9f04-1e2c761986fe", "metadata": {"aucs": [0.4345104175940365, 0.45977441830446386, 0.4849908117919257, 0.4841822336872065, 0.4708456001860263, 0.45097538062376574, 0.43248405347620344, 0.4567375811444101, 0.4492625640315062, 0.09134239430456315, 0.017762717665419814, 0.02743276120960869, 9.999999999998899e-05, 0.051521994852851805, 9.999999999998899e-05, 9.999999999998899e-05, 0.09308852215048558, 9.999999999998899e-05, 0.11865009076850841, 0.09566893339654814, 0.093058399419363, 0.10180237260074387, 0.08316341561692664, 0.08287077839557788, 0.11370749624473142, 0.07342134800924627, 0.1438413632748068, 0.07585425450356886, 0.07098481775782606, 0.0580116416894525, 0.08789442074514742, 0.09262281412201734, 0.08675226764138477, 0.06352969376978179, 0.0707636004409109, 0.06763635098057907, 0.528875185407857, 0.7557377035032821, 0.6349930453579742, 0.3948562841390786, 0.5602163727731002, 0.7123459868051125, 0.5625344947439765, 0.4841491670813902, 0.38395558914585015, 0.23513113924003481, 0.24678372170556573, 0.22747777047410422, 0.25273996663966314, 0.2163077073239673, 0.2614349650912353, 0.29868918787969145, 0.23858221866674234, 0.28552956903197835, 0.5318153489208448, 0.13396475429478283, 0.1334766886751224, 0.2665104733981012, 0.20890429609174366, 0.18278602855746418, 0.1648098439370851, 0.14746217839862108, 0.20740644580105339, 0.17440721542451898, 0.13546257004108775, 0.12087730743027636, 0.14115031872245032, 0.12556090493506422, 0.1578905480494155, 0.21567292934898186, 0.2564132045868177, 0.17597802958257047, 0.21692948957991143, 0.16277526217782978, 0.16162470862775136, 0.16003443571894527, 0.16716504679443955, 0.20616066798215982, 0.15028841983670937, 0.1941129051987579, 0.13506015120832748, 9.999999999998899e-05, 0.054152552227906714, 9.999999999998899e-05, 0.03608420912296517, 0.03647676238320907, 0.0068803106072642395, 0.0017036828009622251, 9.999999999998899e-05, 0.07011063146274099, 0.14382670686326415, 0.030597648078079742, 0.11079028376444655, 0.06951338942604712, 0.02729404157678439, 0.029624559144436513, 0.1677695305510708, 0.08119707526015796, 0.02264927206549272, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029082786217038414, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015298803539917083, 9.999999999998899e-05, 0.010265771030220971, 0.0033996932845060668, 0.1322895540675274, 0.10465385957250672, 0.09427383829015323, 0.07367256466912786, 0.06630671726706316, 0.09661647097034698, 0.10764354411829868, 0.11784029291445564, 0.1015217046100384, 0.4384480558952498, 0.4326009546815629, 0.4374957685965254, 0.37875380914637513, 0.40118005029522796, 0.39544854623904535, 0.42898384775132103, 0.41466229786250763, 0.42850003067587517, 0.06914021061282916, 0.04636775319286901, 0.013792490684151892, 0.12030829640811758, 0.04788797208298323, 0.11159740238769411, 0.054726006369320235, 0.04444468528967194, 0.06903954844552085, 0.24961046440971135, 0.23999679908697602, 0.3090536821748394, 0.3002259023639171, 0.31315428163890646, 0.20852919865709452, 0.38171695902943936, 0.19422687409501127, 0.25433895191963474, 0.1844111088554572, 0.27344774541730565, 0.2109866162666134, 0.21243911079211397, 0.24865684592425563, 0.17073728996353843, 0.19859654147009664, 0.3091377270622805, 0.20445861269858168, 0.11696562890727824, 0.08377835749665952, 0.18434611002933088, 0.21195105859198915, 0.15787754316883806, 0.21810330876660633, 0.16426355742169074, 0.2138303187828099, 0.16182988349915017, 0.2068255207485904, 0.2161601026892983, 0.19686361556957743, 0.21268529019435534, 0.1977689345364606, 0.18239640894624565, 0.22670431804516422, 0.19128119281219047, 0.19986475214902544, 0.19549241849645216, 0.17494280162508546, 0.1807796176750498, 0.21049662413387282, 0.17317784031814643, 0.17842603913815636, 0.18748800484559036, 0.22077065536666807, 0.18000958409368573, 0.17563157872073987, 0.12625648367892173, 0.1533281790046236, 0.13552583684295572, 0.20079862537456827, 0.6633013910051133, 0.10842485162593929, 0.16732655628739324, 0.6846082056228076, 0.5175009157816544, 0.15704415531341942, 0.3703856629260738, 0.09198168737542034, 0.1657714358609912, 0.1659923786158004, 0.3817824889285969, 0.10318171562522382, 0.27003231907962333, 0.18862617949934735, 0.18205265472280963, 0.1779196095567882, 0.1862670919542282, 0.1889671628139954, 0.18514338255071128, 0.176474366425327, 0.17071616830210146, 0.16907479357624688, 0.08023245334693152, 0.05296014185295139, 0.08028265918549571, 0.08078182760954655, 0.08078004879735201, 0.08960586805346515, 0.07962505603793002, 0.0723771585624674, 0.07485361120341072]}, "mutation_prompt": null}
{"id": "4662757a-6b40-4482-b3fe-def8f430a509", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 34, "fitness": 0.23179206872749017, "feedback": "The algorithm HybridDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "b61fc97e-6b2f-492f-9f04-1e2c761986fe", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "45ad8d15-7730-4769-911b-db504105afbb", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "d621490f-b4aa-4c59-89cc-959248233e68", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "a7d93cf4-2afd-48f7-8070-7bc9690e0055", "solution": "# import numpy as np\n\nclass EnhancedHybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution\n", "name": "EnhancedHybridDynamicAlgorithm", "description": "Hybridizing Differential Evolution, Firefly Algorithm, Particle Swarm Optimization, and Levy Flight for robust black box optimization in a dynamic population.", "configspace": "", "generation": 37, "fitness": 0.23179206872749017, "feedback": "The algorithm EnhancedHybridDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "cc900532-864d-4df4-a42a-88987658cbe4", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Enhancing the HybridDynamicAlgorithm by introducing a Levy flight step to promote exploration and maintain diversity in the search space.", "configspace": "", "generation": 38, "fitness": 0.23179206872749017, "feedback": "The algorithm HybridDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "faa62375-1839-4011-93d0-47569a73dc55", "solution": "# import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "HybridDynamicAlgorithm with refinement in Differential Evolution, Firefly Algorithm, PSO, and Levy Flight for global optimization on BBOB test suite.", "configspace": "", "generation": 39, "fitness": 0.23179206872749017, "feedback": "The algorithm HybridDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "83905279-863a-4d72-9bf7-dad984d3c8fa", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "7b5f8b09-b436-4204-8029-15ce0a7c58fa", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "6147c29b-8c3f-4606-b6a4-b659cf1fd746", "solution": "import numpy as np\n\nclass EnhancedHybridDynamicAlgorithm(HybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n            for i in range(self.population_size):\n                if np.random.rand() < self.beta:\n                    population[i] = np.clip(population[i] + np.random.normal(0, 0.1, self.dim), -5.0, 5.0)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedHybridDynamicAlgorithm", "description": "Hybridizing Particle Swarm Optimization (PSO), Differential Evolution (DE), Firefly Algorithm, and Levy Flight to optimize black box functions efficiently.", "configspace": "", "generation": 42, "fitness": 0.22679543240399372, "feedback": "The algorithm EnhancedHybridDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.49345603903888513, 0.49403839439614183, 0.5097569795228215, 0.5413862742911474, 0.5120713745252975, 0.5292050371425678, 0.5257831761567413, 0.49023828329190655, 0.5467116209059873, 0.04461191407005749, 0.050866613675643046, 0.1069470792352889, 0.002929689198892138, 0.02402109278223541, 0.05190130326136044, 0.0035466435871841506, 0.10291827982156243, 0.11545419666487611, 0.09345764459180939, 0.1019872376315859, 0.08669953651697693, 0.09485303738292983, 0.08702253786817638, 0.08712339787817291, 0.10183950727206936, 0.0982027999737406, 0.09063722496358129, 0.06657096010858166, 0.08193587449730788, 0.07608161924704637, 0.104816257147203, 0.04317102779721704, 0.10533387525169491, 0.06599778331652428, 0.05272705896917629, 0.07044718683645279, 0.9231372669777592, 0.8924119492242019, 0.9694685743433527, 0.9090751756420263, 0.9270451155820951, 0.9187074522706393, 0.9374235913308163, 0.9314269138214335, 0.9336774445870558, 0.33605423804601897, 0.3226857645578851, 0.31482594796398267, 0.3256966028229915, 0.3371084022652794, 0.34294883621376415, 0.38184203399837413, 0.3516065892264306, 0.33554397759336174, 0.2716090019185834, 0.1740995081364608, 0.1364131115755154, 0.2247303755805211, 0.21375422109264652, 0.2083796112530928, 0.1144732790636861, 0.2732345493595635, 0.22228671566425906, 0.12642799068060373, 0.1970358891915721, 0.12797079160243263, 0.2076505851697239, 0.20558867423166827, 0.11602683823054216, 0.237661651460232, 0.3206938009045478, 0.1772070480705541, 0.22443080340329247, 0.21972257462827716, 0.16037765868330867, 0.18211089639561662, 0.13469399892369638, 0.1322542694548411, 0.2307401322096182, 0.21194142304502517, 0.23213361877420935, 0.0052054608601158625, 0.08467785457681498, 0.005039814450114144, 0.08146045562244542, 0.056342300147043334, 0.0823415392943112, 0.022909401908973615, 0.001059381271373061, 0.013319454687731214, 0.1368144599940352, 0.081974912236088, 0.10486264316340732, 0.06523509761549773, 0.04796240655784423, 0.07688641687018061, 0.15165658830621342, 0.17849829517617144, 0.04765712772568209, 0.007674168576553342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021990482989115434, 0.0011021737735907866, 0.015604020446902012, 9.999999999998899e-05, 0.14139961694635805, 0.11538600973836033, 0.13850167855438267, 0.06355369934236055, 0.11199586676024353, 0.11096059701928118, 0.16092288378955055, 0.11495104721051119, 0.10016636219118624, 0.4935986680176827, 0.47574732739973047, 0.44592201477572824, 0.44715975691436993, 0.4801527484654696, 0.45406304206024106, 0.4465803013169122, 0.45180283579064084, 0.4717526560437093, 0.05582035860564738, 0.08736972359727935, 0.03932811828656502, 0.16027715619140126, 0.03762528905413054, 0.10891533747631454, 0.07825399176104508, 0.03854153348020373, 0.07734869216233786, 0.2610977240242891, 0.3145635029177638, 0.33816781118314476, 0.287335492590597, 0.3602013526376543, 0.3073847749866294, 0.32607496676616765, 0.18864580551292576, 0.2377860880517676, 0.1734834178416269, 0.3056732253865677, 0.2571378618895739, 0.32754949627234475, 0.2457864133302261, 0.285707517672507, 0.21030273603793326, 0.2563480962391358, 0.2469578326777364, 0.11423820670512663, 0.0853472033228907, 0.2008213020906664, 0.15874822914861886, 0.2090547208563004, 0.252642299180305, 0.16306638171924281, 0.26354278938848485, 0.15507079881399055, 0.1943600543263161, 0.20397056400494673, 0.18047259788547998, 0.2204444670089748, 0.18661088045252927, 0.22733200558886224, 0.20929124599774518, 0.20680812301081963, 0.22315672995501323, 0.17954497780068646, 0.17836182289087943, 0.18850478021587647, 0.20206934367241902, 0.1788376410014727, 0.2162765951019745, 0.197956802861459, 0.2034548909458872, 0.1875812056248809, 0.17746326865076467, 0.12662190920883154, 0.15438716081299098, 0.17168855812320039, 0.20127541105511215, 0.7719994488987253, 0.10857917370205217, 0.1693044319345931, 0.788831209851714, 0.6104664063138274, 0.15764068789326047, 0.6566072536355797, 0.09394020867827746, 0.16860139808408947, 0.16834539747499078, 0.7104514903861119, 0.10420014431846736, 0.6049708542911365, 0.18683166598955825, 0.18830212022646342, 0.17865128843092148, 0.19174093398889436, 0.20830539653420588, 0.18229259598929504, 0.18746074566188264, 0.1903154733372754, 0.17281714792649472, 0.07521519373183982, 0.06420454081699534, 0.08111618890825867, 0.07425916505849905, 0.08826778995194651, 0.08194418239613754, 0.08492462218279051, 0.07556060113437635, 0.08450333490039141]}, "mutation_prompt": null}
{"id": "0ca2022c-cfea-4ef1-8d70-1b75613176b4", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "05109bff-52a1-425a-8669-90d455c39281", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "84080930-3b16-418d-beaf-1a675d06b806", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "5aa9bd18-444e-41e1-9946-5b93417e3692", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "29218a5f-73bb-4463-8905-c720f1afe7a1", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "76bc364d-c279-4694-83a0-b81b36597f83", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "58d9a27e-8f95-424e-892f-62dcc651a184", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "7f95429d-1f2f-4642-9ea5-2b7ef7e65b1f", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "ead65b97-b62c-4e11-8c61-f235caddea4c", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "ea3cf8d1-70c6-462e-80b2-e66c258fbf2c", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "7b4fa32f-e90a-4706-86ba-e8930e7ccf9b", "solution": "# import numpy as np\n\nclass EnhancedHybridDynamicAlgorithm(HybridDynamicAlgorithm):\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population", "name": "EnhancedHybridDynamicAlgorithm", "description": "Enhancing the HybridDynamicAlgorithm by introducing a new Levy flight step for enhanced exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": 0.23179206872749017, "feedback": "The algorithm EnhancedHybridDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "c19cecf2-2d47-4887-b9b7-b51570efef27", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "bcd38a6e-e453-40cf-996f-21e9d539688d", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "60ff9687-bbac-4d64-9914-1b73e278c585", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm_Levy(HybridDynamicAlgorithm):\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population", "name": "HybridDynamicAlgorithm_Levy", "description": "Enhancing the HybridDynamicAlgorithm by introducing a Lévy flight step for diversified exploration in the optimization process.", "configspace": "", "generation": 56, "fitness": 0.23179206872749017, "feedback": "The algorithm HybridDynamicAlgorithm_Levy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "9cae511a-996e-4365-b684-c187dff218ca", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "16125041-8e58-4f73-855f-309bab807867", "solution": "# import numpy as np\n\nclass EnhancedHybridDynamicAlgorithm(HybridDynamicAlgorithm):\n    def _enhanced_levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._enhanced_levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedHybridDynamicAlgorithm", "description": "Enhancing the HybridDynamicAlgorithm by introducing Levy flights for diversified exploration and exploiting the search space through differential evolution, firefly algorithm, and PSO with carefully tuned parameters for improved optimization performance.", "configspace": "", "generation": 58, "fitness": 0.23179206872749017, "feedback": "The algorithm EnhancedHybridDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "1c515314-c84e-4a48-b8de-a533f983a6d7", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "76519e28-a3fd-4c42-ba56-4c3df25911de", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "e2a337dc-ac0d-4d9d-806a-8e5ea549288b", "solution": "import numpy as np\n\nclass EnhancedHybridDynamicAlgorithm(HybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 0.1\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += self.beta * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population", "name": "EnhancedHybridDynamicAlgorithm", "description": "Enhancing the HybridDynamicAlgorithm with a modified levy flight step to improve global exploration and incorporating a dynamic strategy adaptation mechanism to balance exploration and exploitation.", "configspace": "", "generation": 61, "fitness": 0.22136381349743706, "feedback": "The algorithm EnhancedHybridDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.4081383371567707, 0.46714836776966184, 0.44706542459605625, 0.4351371377717025, 0.4122210155673578, 0.4221371064779701, 0.4243922900832978, 0.4189764942622529, 0.4187053152834188, 0.03958249766115318, 0.03939968046264475, 0.04126180848145522, 0.02693657300958152, 0.039462706596595454, 0.0069221742096686745, 0.01980021429200296, 0.02438012761227437, 0.046337832925146594, 0.14704294003374674, 0.10147882730311775, 0.11172725894862723, 0.11181764765888524, 0.1270098513787512, 0.10909067823939911, 0.10244548331651226, 0.11414319358972047, 0.12072951902437512, 0.10338323029461882, 0.12352295968066551, 0.09964198868950602, 0.0879630724790249, 0.09084040829824136, 0.1078988092485722, 0.09989687680417281, 0.08910480431435686, 0.09758124929271339, 0.9121823104143983, 0.9297919192365203, 0.9673256529739493, 0.9282811753260776, 0.9168222816966844, 0.92646544793892, 0.9460025200676374, 0.9518881277905259, 0.9642594104030279, 0.28584282196064226, 0.2627210799527048, 0.2600949879669965, 0.2814586516704427, 0.2605635374402602, 0.2886685702845162, 0.27946166020355645, 0.26576322354277215, 0.2800095515708714, 0.3205029946651694, 0.3381982590568009, 0.27209161466323506, 0.37446414949828266, 0.2828502359330911, 0.31396276692093483, 0.18497947840930618, 0.22003602731444183, 0.3343253273296276, 0.19230659117218152, 0.18337164164260944, 0.1745162871228313, 0.15818256692597843, 0.15661107376765981, 0.14505957517312706, 0.2043833953248131, 0.19176835965175942, 0.1706031000607391, 0.21177468645745134, 0.16505833140996606, 0.12806117155011543, 0.1837915391282391, 0.1572729812384447, 0.1407447820517913, 0.1731063656852857, 0.18298970529964975, 0.20776435177331332, 0.005151068308803963, 0.05508344585856262, 0.013432073053227578, 0.04740720761918471, 0.02797368094721464, 9.999999999998899e-05, 9.999999999998899e-05, 0.024860669708057004, 0.019115710933925723, 0.14727824964737823, 0.06467501315181035, 0.17063308830012625, 0.09410043931343659, 0.1031121487564649, 0.09242744345923415, 0.14761112899578144, 0.09765762862933736, 0.0898819678517968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1303923030072841, 0.10646578621571967, 0.10375759645172189, 0.1026425294158102, 0.10270131558830997, 0.12323659288487943, 0.09059103150136616, 0.09434627024889797, 0.08532932471379207, 0.39844694420157933, 0.40925420644367927, 0.40313880490230336, 0.4167493001548016, 0.3816032405059162, 0.40119141423108273, 0.4144002380695041, 0.3910178339545679, 0.385836583324216, 0.158779553850935, 0.10013074031252578, 0.08393331339915244, 0.13715352360754263, 0.10414162393126136, 0.08859970753565594, 0.0950746519472907, 0.11784720989079234, 0.0729802384579632, 0.23833035893457333, 0.25442420319754866, 0.2802554307525599, 0.27001450021567985, 0.25985170357500087, 0.23925159963688736, 0.24400931384519897, 0.20171720417364558, 0.2473348689795467, 0.26109547341511474, 0.29760952280269637, 0.30049038450780297, 0.3133500923564253, 0.26288866979719716, 0.2897232383350027, 0.28446174149806036, 0.2776210799680393, 0.28694224679769664, 0.19679698644035704, 0.08918005272363239, 0.18802136309887152, 0.20919798763692454, 0.19282955914191224, 0.22105911663265299, 0.22288927209541298, 0.23951119507358776, 0.22115204636083086, 0.18981696878495713, 0.19072810089012793, 0.18400287663924242, 0.19937326175169423, 0.22097638680403686, 0.21825278683238303, 0.187572649478999, 0.21503446458725417, 0.19787818931405288, 0.19267688809831185, 0.19578109087448203, 0.20477880912712376, 0.21732850769680545, 0.2324502205068435, 0.20334544011841083, 0.20965395195306613, 0.20168294023797684, 0.20065809621546893, 0.17704707914571738, 0.12641002236719656, 0.15426001167335124, 0.6247717553699712, 0.2013475648491413, 0.642800057846985, 0.1085025840234406, 0.1692549019093853, 0.6253519712968219, 0.5289634467409849, 0.15722340332868112, 0.5264065915371384, 0.16604007849271352, 0.16756244247912, 0.16877740962599241, 0.6211709115027086, 0.10437081884599486, 0.48356669946431075, 0.18152276995870098, 0.17700704175977933, 0.1842928919815191, 0.1781447198426449, 0.18391650755927713, 0.174850923189378, 0.17242177146566118, 0.18674055750377938, 0.1834028986515529, 0.09453787191196239, 0.07564665430563289, 0.07713179872377207, 0.07710339083769668, 0.07869956679800183, 0.0733132023064984, 0.08395837523464256, 0.09467440721465259, 0.07044273803324652]}, "mutation_prompt": null}
{"id": "a32a7e93-9a45-435c-b85e-7180eba4f317", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "eca579b9-2abb-447e-8cc4-b02c3a7fdb13", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "6a62b532-aa66-4971-bf53-51ad04545369", "solution": "import numpy as np\n\nclass RefinedHybridDynamicAlgorithm(HybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 0.1\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    movement = attractiveness[j] * (population[j] - population[i]) + self.beta * np.random.standard_cauchy(self.dim)\n                    population[i] += movement\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population", "name": "RefinedHybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation with a refined strategy.", "configspace": "", "generation": 64, "fitness": 0.22424959575890818, "feedback": "The algorithm RefinedHybridDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.4859014361806069, 0.4522503348438649, 0.4661128604624557, 0.48364234529014716, 0.44378509693704105, 0.47537732651125075, 0.4579596152322637, 0.4853739993396927, 0.4824972938698736, 0.1139058980785208, 0.053532129529968, 0.03870408338126652, 0.09042322779409229, 0.038689280377153024, 0.03567318837457101, 0.046708808188572926, 0.10143775897797747, 0.057802360005205444, 0.14471759358180258, 0.12228538875758554, 0.1342489911803123, 0.12018355823215665, 0.10955955054067013, 0.11320596838994423, 0.13046440242270108, 0.14325572838835177, 0.09780700906067563, 0.11466829175879834, 0.10089035715984151, 0.0857896413079341, 0.11373658186030189, 0.10472662327614635, 0.1373811210212169, 0.09758258118320007, 0.11102259508305501, 0.12434582623644275, 0.9554013036046677, 0.9561702859742838, 0.9680107185658288, 0.9556370811326674, 0.9534454262666467, 0.9456625717006611, 0.9620777335049623, 0.961554132960006, 0.968079794615975, 0.3039700360331249, 0.2846972902569398, 0.25678204572654795, 0.2909538802064253, 0.2865599294766953, 0.3010997795086745, 0.2951973842227231, 0.29196514684504404, 0.2550587270079908, 0.36333744710093163, 0.2529545314899272, 0.14841960299725232, 0.3574289712501806, 0.26849095958072766, 0.3248605727929629, 0.28239614476355246, 0.2193557256109946, 0.3430568203025608, 0.24524314846414896, 0.1597271949018868, 0.16922844526970404, 0.18656731956479078, 0.15464685482140017, 0.11281279171104508, 0.19575512707324016, 0.13099774246951024, 0.15703149198681965, 0.17918656156685642, 0.2297506947802176, 0.16635555851507255, 0.1766980085851253, 0.18700576977212502, 0.20381283941978723, 0.16819730193858817, 0.2074324509471519, 0.2210983610548195, 9.999999999998899e-05, 0.016316103113145797, 9.999999999998899e-05, 0.030389057206708148, 0.02494788323042163, 0.0004001659388525036, 0.0238132726426602, 9.999999999998899e-05, 0.025452851338094606, 0.10401764970263283, 0.06773998135997861, 0.0676727852570761, 0.10116699265890183, 0.024442386663721893, 0.0022921985290013103, 0.05738177421740509, 0.04464087739190259, 0.05750892403938035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006076849859069089, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0761052005491123, 0.09774478262456543, 0.07997858332538177, 0.04238860605244843, 0.11288293596802446, 0.1289075628871691, 0.08748446825965694, 0.07807964616425545, 0.07480227074358448, 0.400003943886738, 0.41621957990447167, 0.4207929798062511, 0.4185297482399938, 0.4293845763723403, 0.39899766912590506, 0.4555990152235182, 0.4192849366692992, 0.40121408367086786, 0.12042452131188552, 0.11495555760342469, 0.08136738600469218, 0.11974115013085995, 0.08545245853829908, 0.13506692759953964, 0.10474617206846137, 0.11004995206721924, 0.10801134064886242, 0.23007361083110933, 0.26825539679693156, 0.2659039627253378, 0.2558430615048277, 0.25144526186354155, 0.2607707837140427, 0.26168773731909456, 0.23423107079253158, 0.2687391879261599, 0.30540612221451213, 0.30118596035532785, 0.30998831960196394, 0.25166028546809227, 0.2214186223150686, 0.22644779257969805, 0.28603901314340796, 0.3089892296399608, 0.2092810846538008, 0.21353239322280337, 0.1551858520381445, 0.180877827834796, 0.21301135739967736, 0.17799419610454947, 0.2016666506241359, 0.18181555485041478, 0.2404868899562217, 0.17551224203426596, 0.2056245323111917, 0.1840193775978085, 0.18749469601564028, 0.19492607611431634, 0.19501731230571284, 0.19600934149761484, 0.19327385419423349, 0.20285272416337452, 0.2040812758028807, 0.2113898409685686, 0.22033611427760147, 0.1833066901254532, 0.21241747931804256, 0.2100029608234255, 0.20118074554179777, 0.21886817266762393, 0.2733027460863382, 0.19701518137428264, 0.17820672878329225, 0.1684322714317661, 0.17569048547104138, 0.714995702306414, 0.20035885436275258, 0.6536654874223342, 0.10846410515531457, 0.16975774896249263, 0.6932966891032697, 0.5397975933561436, 0.15741384942653913, 0.5373832071703866, 0.15409600031897863, 0.16757090654359308, 0.16837565994596393, 0.42221440674851196, 0.10459483787019286, 0.5035320030725169, 0.18699868822994914, 0.17941758313563727, 0.18937624981780843, 0.18456568063488765, 0.18319507186347062, 0.1808952713967914, 0.1957973878934276, 0.17693663499774015, 0.18863756870641712, 0.08091112598318884, 0.08576375377841672, 0.06512795089053869, 0.07155802619881613, 0.07611955873644805, 0.07955006957284783, 0.10429948600771988, 0.07347103482680961, 0.08094921222590379]}, "mutation_prompt": null}
{"id": "db4fcca0-ecee-4188-89f9-ea409c79e876", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "19f6d8b9-db23-4abc-98ca-be85d5b926ec", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "17210696-059d-43b8-813f-94fc5cdf9e4e", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "11af069f-64b6-4cca-a3a2-6e474d147176", "solution": "import numpy as np\n\nclass RefinedDynamicAlgorithm(HybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.beta = 1.0\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    distance = np.linalg.norm(population[j] - population[i])\n                    population[i] += attractiveness[j] * np.exp(-self.beta * distance ** 2) * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population", "name": "RefinedDynamicAlgorithm", "description": "Refining the EnhancedDynamicMultiStrategyAlgorithm by introducing a Levy flight step for enhanced exploration capability and utilizing a firefly algorithm for optimization.", "configspace": "", "generation": 68, "fitness": 0.22221581489869405, "feedback": "The algorithm RefinedDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5229183149288015, 0.5197912131323595, 0.505424257354179, 0.5334929020692802, 0.5113160209322971, 0.5349804342501219, 0.5044381393225619, 0.5078142706175539, 0.5135607927888506, 0.035262260192243544, 0.01588205909674778, 0.028993565892245554, 0.052808039421035735, 0.037641473350337185, 0.0010238621037246265, 0.03343338981931088, 0.05330462716451623, 0.08051638407788797, 0.11177203673849656, 0.09888395984603571, 0.12799839974390725, 0.11454892963250418, 0.11426144415982487, 0.11243678054925932, 0.09594701052301646, 0.06651701506248842, 0.10267959481821964, 0.07466916762244147, 0.08555273295087751, 0.10924579062753748, 0.11948391532874303, 0.08193569230989683, 0.08735767550576023, 0.08023987065347737, 0.0816377001309122, 0.1080108191420277, 0.9584944307987854, 0.9731103058772681, 0.9749699195360447, 0.9288061252456907, 0.8381644149841835, 0.9401423748090899, 0.9767569389489262, 0.962570633122676, 0.9770721134783195, 0.33635553345453706, 0.31372304625204406, 0.34038736116359447, 0.31256931703723645, 0.33724939926622644, 0.3164727186516051, 0.34618915620463553, 0.34059144853368273, 0.388977792754977, 0.22971944572590708, 0.1366307678632025, 0.14001314042638113, 0.21686000559702945, 0.26895061094577855, 0.1890724493371767, 0.15131417480655296, 0.13885980817542443, 0.23618626320382097, 0.16151691883264374, 0.17528593525899394, 0.16818298039743584, 0.21228581506766464, 0.15166087964074126, 0.1311961502753891, 0.21045697139762665, 0.16985798077185787, 0.18366759163620094, 0.2497096803566795, 0.25403650599980165, 0.12865017627974662, 0.1976407257473085, 0.12605037812529574, 0.17939715755974828, 0.24622394829450478, 0.22631598081798165, 0.20331452309043319, 9.999999999998899e-05, 0.011737557045011782, 0.0013597464969939965, 0.059481017013971016, 0.020978306326139506, 0.05477312304958759, 0.00015618658851146439, 9.999999999998899e-05, 0.10599610377461466, 0.09587633276351826, 0.07686762204485953, 0.06069086511645039, 0.003697857055003251, 0.008573112401761729, 0.0633572343415082, 0.1653199104774461, 0.09695265728193936, 0.05612951300608571, 9.999999999998899e-05, 0.03108094501751113, 9.999999999998899e-05, 0.0024108062710270772, 0.01463470700368985, 9.999999999998899e-05, 0.003623339561321659, 0.010857651750180053, 0.046101979793445214, 0.13729380467800512, 0.1634274286451044, 0.14376857511957875, 0.07532547259778088, 0.12424703048413344, 0.06241927632598421, 0.06928902739011877, 0.08027582744218376, 0.1222722956983594, 0.46118517009190896, 0.4831263019675719, 0.44737901682108505, 0.4555772890901012, 0.4475369513558043, 0.4272546526876366, 0.45184758050557916, 0.5056433131365886, 0.4981634788590501, 0.07655042320150629, 0.06714136522788339, 0.0455299518668999, 0.09962902482084812, 0.06306377797157658, 0.0523040828072302, 0.07053810445362596, 0.11239091090693343, 0.06215395809247215, 0.26240520575345805, 0.30658607350984957, 0.14519373233758326, 0.3311671731999659, 0.28478626404155316, 0.3195148032876566, 0.2662074110429542, 0.18862256636218955, 0.26375987355867614, 0.21705014102620934, 0.2879314846366706, 0.3300647055305742, 0.301890060167317, 0.2577278714817901, 0.21754964978641722, 0.3263814841621142, 0.2260475219848257, 0.2238172245392599, 0.17456356349954916, 0.22439502427486746, 0.21370482883957598, 0.19158119637640614, 0.19235971753643588, 0.1837136765745392, 0.16368557310426024, 0.23036171492038626, 0.23146789445762628, 0.18757451458123142, 0.1624900530522766, 0.17693340555151027, 0.21165763228541568, 0.18986650224656465, 0.18487583342060732, 0.21310004099222102, 0.1891091479246274, 0.1939695797018458, 0.19352027630758184, 0.1859511011938776, 0.17392700424365592, 0.19602853564207912, 0.217173931629149, 0.1856024525658122, 0.24339116076980527, 0.21690519592166657, 0.17340615101252876, 0.12541407993061005, 0.1877375211771829, 0.1522468171141549, 0.18471556354486074, 0.19993070734212293, 0.800709440307621, 0.1082368269430588, 0.16802952536013416, 0.7563563621772021, 0.6459104344809563, 0.15652513771516519, 0.5654971495091137, 0.16568592988348063, 0.16780692403728392, 0.16695240298210212, 0.09314289779857099, 0.20920351671372917, 0.49099321174829547, 0.2190065576722683, 0.17630642944878816, 0.21215790276668423, 0.18261338528225535, 0.2048819220324405, 0.18404785782389232, 0.18583676222089562, 0.1900791332252889, 0.17905379796844934, 0.07182190541284905, 0.04291929906780112, 0.06416073186960658, 0.07467443263924911, 0.06797935374707342, 0.0716441286128684, 0.08512731818742247, 0.08863381286024763, 0.08662667944255986]}, "mutation_prompt": null}
{"id": "db90b327-d80e-41ae-a8d1-c7cc2a39fd2c", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "2646b877-9f20-4c9a-96bd-d3491d0df1d2", "solution": "import numpy as np\n\nclass HybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.alpha = 0.5\n        self.gamma = 0.1\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def _differential_evolution(self, population, func):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n            trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population\n\n    def _firefly_algorithm(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j]:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _pso(self, population, func):\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        global_best = best_individual.copy()\n        for i in range(self.population_size):\n            velocities[i] = self.inertia_weight * velocities[i] + self.c1 * np.random.rand() * (best_individual - population[i]) + self.c2 * np.random.rand() * (global_best - population[i])\n            population[i] += velocities[i]\n            population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def _levy_flight(self, population):\n        levy = np.random.standard_cauchy(size=(self.population_size, self.dim))\n        population += 0.01 * levy\n        population = np.clip(population, -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._differential_evolution(population, func)\n            population = self._firefly_algorithm(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDynamicAlgorithm", "description": "Improving the EnhancedDynamicMultiStrategyAlgorithm by incorporating a novel hybridization of Particle Swarm Optimization (PSO) for global exploration and Differential Evolution (DE) for local exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5054705679802436, 0.5912032173620905, 0.5561906865389482, 0.5251112634775628, 0.5018126613226155, 0.5375040622551068, 0.507298478439775, 0.5442555261392932, 0.5166449771548258, 0.101282377279026, 0.03846459751991593, 0.055402758844935285, 0.0662171493290209, 0.05042090406022948, 0.0773410595765448, 0.05297249266630477, 0.061933630205057155, 0.09224205226413529, 0.10077347603110243, 0.13284645338571988, 0.08793270559766608, 0.07850440928529812, 0.08902638897644732, 0.10673921151573218, 0.09006393222481568, 0.09201110416119851, 0.09452383268024878, 0.07236148439778933, 0.06428656408269362, 0.0647997477964154, 0.08496906746271837, 0.05088159125441949, 0.08160748266362461, 0.08427914123847591, 0.053822762911567734, 0.08060788509921091, 0.8841493535516491, 0.882975152634191, 0.9688237632249305, 0.8931324147038927, 0.8655300481576083, 0.8599438784306117, 0.8980463948789321, 0.9134240421804918, 0.9477736698078374, 0.33137885831621716, 0.32962628119368687, 0.3851509897255705, 0.34081545805648206, 0.3664783246265876, 0.3549585502201932, 0.41867595306454963, 0.34113664381913433, 0.3507007151414353, 0.22559421527529877, 0.6459885918491706, 0.15887082663160346, 0.27587702719051443, 0.24694120487806837, 0.21299759025224252, 0.6581058678465513, 0.16820980759669624, 0.19722326117708033, 0.20573906777737427, 0.2072401773645508, 0.2116615377291775, 0.21152159530360548, 0.20342104886153145, 0.232322750345628, 0.24055673348817885, 0.2842451076110645, 0.19237091644794502, 0.24575966675455552, 0.2126971645447734, 0.16437721267924554, 0.1794200012645184, 0.13277349000258853, 0.1331180685087625, 0.24781234885888148, 0.201704362277352, 0.23891996172363383, 9.999999999998899e-05, 0.0715164077417827, 0.044482402204396365, 0.0632717698332439, 0.04624811311696653, 0.04024856789065523, 0.0047265265914837595, 9.999999999998899e-05, 0.01733651888839194, 0.17227986627012615, 0.10392010972713561, 0.10445383183725532, 0.07734713272472016, 0.04217192973492889, 0.0954284153523055, 0.15698680560723843, 0.1958142352561576, 0.06939187353140641, 0.0011133318016239846, 0.003436544908693051, 0.019296108555254654, 0.009754994640330361, 0.012315799784460624, 0.002666051047898743, 0.0036074111534831754, 0.014387890543752446, 0.0005842743976401943, 0.11427545241624415, 0.11438732286877606, 0.1526091045541338, 0.12323091044020906, 0.13338144210479363, 0.0809739045607546, 0.13528247889654155, 0.1471605413832756, 0.09028476788071371, 0.45094025603817545, 0.46072317739763047, 0.4687763742880042, 0.42867349775516606, 0.4599240472931386, 0.4653405663768556, 0.4574642811466779, 0.4927313422468864, 0.4913080446035185, 0.08760993079288326, 0.0662409149005827, 0.026924828792375455, 0.14531051825304397, 0.03813795294507494, 0.11256414695405526, 0.05625534462126558, 0.06969042618174004, 0.06282840238261289, 0.25031763810345364, 0.3262183552719977, 0.30906642534967455, 0.31966472662155576, 0.33228514100864526, 0.3196236803854081, 0.35892489247952997, 0.25509021448849767, 0.2085071234533752, 0.17799339254646152, 0.2313958840438437, 0.19201250541808368, 0.2502200299695144, 0.24984550332157118, 0.28736058254642205, 0.33547249179891914, 0.27382680125772363, 0.2666049975182603, 0.11730585898015178, 0.0775234857745527, 0.1435965195470199, 0.18354860720082433, 0.2182572146025158, 0.1724757361111715, 0.16649416141805318, 0.218029383837531, 0.167976144141728, 0.21754341953907863, 0.21769029044771926, 0.17683405926691254, 0.21302820109996523, 0.19997770333314524, 0.22339077920253736, 0.21281607094941002, 0.19506964107072466, 0.19104524488361863, 0.18459115163313855, 0.18595399883688812, 0.19136233956247584, 0.20819976822494168, 0.18714422932826025, 0.1810361090697855, 0.18812056209520622, 0.18129519651756598, 0.18144437747770958, 0.1776505347104954, 0.12634271530668373, 0.15444012173629995, 0.17224833205467116, 0.20144008845006223, 0.7333129321696719, 0.1085486085395494, 0.16964720487931595, 0.7962341322585427, 0.6936606316868849, 0.15745180703593853, 0.6066986284961982, 0.09364411723678256, 0.16845356993975147, 0.16759279332808397, 0.5687879229643523, 0.10427988135667599, 0.49046262301004295, 0.1973423358064207, 0.18641697143770308, 0.18616688226478129, 0.19255703199513596, 0.19082902838042115, 0.17897863940727932, 0.1862119260848133, 0.18896495730360097, 0.19664665832685735, 0.08248392371302249, 0.05032873374639146, 0.07560428983677936, 0.06610138465152426, 0.07801551063916867, 0.08960675127177198, 0.07026556310374088, 0.07200669754097888, 0.07546958436008266]}, "mutation_prompt": null}
{"id": "7a75737f-d636-4479-81ca-9a41a5911d41", "solution": "import numpy as np\n\nclass EnhancedHybridDynamicAlgorithm(HybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.probability = 0.016129032258064516\n\n    def _fine_tune_de_component(self, population, func):\n        for i in range(self.population_size):\n            if np.random.rand() < self.probability:\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n        return population\n\n    def _fine_tune_fa_component(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j] and np.random.rand() < self.probability:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._fine_tune_de_component(population, func)\n            population = self._fine_tune_fa_component(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedHybridDynamicAlgorithm", "description": "Enhancing the HybridDynamicAlgorithm by fine-tuning the Differential Evolution and Firefly Algorithm components using a probability-based strategy.", "configspace": "", "generation": 71, "fitness": 0.23371960794048402, "feedback": "The algorithm EnhancedHybridDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "4662757a-6b40-4482-b3fe-def8f430a509", "metadata": {"aucs": [0.5195243148267417, 0.5195181361886687, 0.4954909293487755, 0.49313113769898087, 0.518560741429011, 0.5215112702811967, 0.5150607528460107, 0.5184978049846578, 0.49960097089756483, 0.0808178793925114, 0.03640692449579397, 0.11426094261327802, 0.10744434153020843, 0.06938555681128566, 0.037264814157646264, 0.05965213039173689, 0.03014556653013678, 0.06962872933038211, 0.09387217304540518, 0.07770115042462655, 0.10515537898093885, 0.11154761403226343, 0.11586431406401265, 0.13229110273050115, 0.13082887388629294, 0.11473193258668402, 0.1341324565071509, 0.09189635393535556, 0.1013967442118825, 0.09392676371462605, 0.10096160853745495, 0.0826049863167162, 0.11240703579598266, 0.11912455043121428, 0.0756684598370928, 0.09595553594710782, 0.9848128377945953, 0.9886405406443316, 0.9879350924253315, 0.9766962380509541, 0.9811209637894069, 0.9755361886289197, 0.9831741051104911, 0.9752455986424469, 0.9815650576050227, 0.35274254020319473, 0.3189921840287764, 0.3427231597297903, 0.3762140793004837, 0.37084954575267703, 0.3505402211497243, 0.3012755671671563, 0.28734188240699754, 0.3255208587590135, 0.6560233846077604, 0.12606341365153273, 0.27560758573846567, 0.24861441717260235, 0.20008531673877428, 0.3470243655635219, 0.210587415420174, 0.18062426885994665, 0.4430417682425597, 0.24785402059369643, 0.2183088339679441, 0.18855135181921312, 0.21020684939388312, 0.17273521952454285, 0.1247077850738042, 0.24876345428868396, 0.18075297977035987, 0.22106691319921778, 0.13140851885809401, 0.21542900546276322, 0.1297706161896176, 0.19648667648043794, 0.2366070253160013, 0.13382389729202004, 0.18695168274092167, 0.13077392642456087, 0.10309540124624439, 9.999999999998899e-05, 0.003005728670981256, 9.999999999998899e-05, 0.024436373909328957, 0.053355468471129264, 0.03471704149254018, 0.008779734282392537, 0.001342545950221763, 0.06193746623876972, 0.06894383261547987, 0.08136441046510101, 0.10135253474317507, 0.04287369279209574, 0.02483374073456468, 0.07574989747956373, 0.11258055614729778, 0.0760186436444028, 0.05020398069584331, 0.015498424582665593, 0.004851807076698078, 9.999999999998899e-05, 0.05150521640302108, 0.012679244608612472, 0.005296342262088416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06739024191788212, 0.08563832279237305, 0.08932570789791394, 0.041799172677023266, 0.0897279052552653, 0.13209407907197201, 0.08248890618882454, 0.15306917662184882, 0.12477663697247932, 0.4336115351968799, 0.44002085266510005, 0.43544135377406823, 0.4520755704239632, 0.4338928512018162, 0.43998703126667915, 0.4551817103258763, 0.42528683234430964, 0.454026793954011, 0.10356598285406504, 0.05881982662356933, 0.06820866032160722, 0.08341899791132945, 0.10376146466017167, 0.08757883478955975, 0.1100923185425785, 0.12247346175583573, 0.06539001498342567, 0.31680235367862397, 0.2848931747780481, 0.21435193548253595, 0.2953805082774855, 0.3212318838117254, 0.1502283238450367, 0.3511079996294344, 0.1798250280021917, 0.2246855726738035, 0.2160749195982965, 0.25279750408796164, 0.23645086455554576, 0.31234070222307064, 0.16122696784384916, 0.24371138857133856, 0.2647959168794185, 0.26707347890915045, 0.20495101626221546, 0.08489308518932959, 0.18773137085963398, 0.2352624601051745, 0.2360705239478491, 0.21564377614803265, 0.19959852401498424, 0.2625583588939223, 0.2418590107005607, 0.21413510269175184, 0.18671591906568197, 0.15696114934605487, 0.20628266759996072, 0.16658098562137547, 0.1691119388081057, 0.1962791457502393, 0.17512676430586138, 0.1661337329144208, 0.19909314686869495, 0.2205252033192795, 0.19339300228320322, 0.21607901020174658, 0.19698078463185886, 0.20747353991256934, 0.20673392772546173, 0.19777973486781686, 0.216988218417542, 0.1809825873657228, 0.7785010139591603, 0.1699040967738913, 0.15442381838372854, 0.8096477224949112, 0.2013805151468253, 0.19857471415995565, 0.09996194147590964, 0.16883398990898346, 0.20933562984003806, 0.6585775015591186, 0.1565264810846666, 0.6747232276022948, 0.711544677011742, 0.16627126863993957, 0.2031166638598202, 0.6013315805308783, 0.2123735051323954, 0.6351541225751778, 0.18071172627273535, 0.21476418467934655, 0.19727074902737973, 0.185507419737862, 0.18293996732199724, 0.17722100430340448, 0.19392979445708958, 0.1978026179692698, 0.1925405812510106, 0.07261446171747121, 0.05961976109437306, 0.07410391191279397, 0.0697646558762457, 0.07651362292869257, 0.06304966848233673, 0.07943137531753997, 0.08021549049041754, 0.06741498167562554]}, "mutation_prompt": null}
{"id": "6f81718c-6564-431c-a065-a7e046c183dc", "solution": "import numpy as np\n\nclass EnhancedHybridDynamicAlgorithm(HybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.probability = 0.016129032258064516\n\n    def _fine_tune_de_component(self, population, func):\n        for i in range(self.population_size):\n            if np.random.rand() < self.probability:\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.gamma * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.uniform(0, 1, self.dim) < self.alpha, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n        return population\n\n    def _fine_tune_fa_component(self, population, func):\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        attractiveness = 1 / (1 + np.sqrt(np.sum((population - best_solution) ** 2, axis=1)))\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if fitness[i] > fitness[j] and np.random.rand() < self.probability:\n                    population[i] += attractiveness[j] * (population[j] - population[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n        return population\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        for _ in range(self.budget // self.population_size):\n            population = self._fine_tune_de_component(population, func)\n            population = self._fine_tune_fa_component(population, func)\n            population = self._pso(population, func)\n            population = self._levy_flight(population)\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedHybridDynamicAlgorithm", "description": "Enhancing the HybridDynamicAlgorithm by fine-tuning the Differential Evolution and Firefly Algorithm components using a probability-based strategy.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7a75737f-d636-4479-81ca-9a41a5911d41", "metadata": {"aucs": [0.5195243148267417, 0.5195181361886687, 0.4954909293487755, 0.49313113769898087, 0.518560741429011, 0.5215112702811967, 0.5150607528460107, 0.5184978049846578, 0.49960097089756483, 0.0808178793925114, 0.03640692449579397, 0.11426094261327802, 0.10744434153020843, 0.06938555681128566, 0.037264814157646264, 0.05965213039173689, 0.03014556653013678, 0.06962872933038211, 0.09387217304540518, 0.07770115042462655, 0.10515537898093885, 0.11154761403226343, 0.11586431406401265, 0.13229110273050115, 0.13082887388629294, 0.11473193258668402, 0.1341324565071509, 0.09189635393535556, 0.1013967442118825, 0.09392676371462605, 0.10096160853745495, 0.0826049863167162, 0.11240703579598266, 0.11912455043121428, 0.0756684598370928, 0.09595553594710782, 0.9848128377945953, 0.9886405406443316, 0.9879350924253315, 0.9766962380509541, 0.9811209637894069, 0.9755361886289197, 0.9831741051104911, 0.9752455986424469, 0.9815650576050227, 0.35274254020319473, 0.3189921840287764, 0.3427231597297903, 0.3762140793004837, 0.37084954575267703, 0.3505402211497243, 0.3012755671671563, 0.28734188240699754, 0.3255208587590135, 0.6560233846077604, 0.12606341365153273, 0.27560758573846567, 0.24861441717260235, 0.20008531673877428, 0.3470243655635219, 0.210587415420174, 0.18062426885994665, 0.4430417682425597, 0.24785402059369643, 0.2183088339679441, 0.18855135181921312, 0.21020684939388312, 0.17273521952454285, 0.1247077850738042, 0.24876345428868396, 0.18075297977035987, 0.22106691319921778, 0.13140851885809401, 0.21542900546276322, 0.1297706161896176, 0.19648667648043794, 0.2366070253160013, 0.13382389729202004, 0.18695168274092167, 0.13077392642456087, 0.10309540124624439, 9.999999999998899e-05, 0.003005728670981256, 9.999999999998899e-05, 0.024436373909328957, 0.053355468471129264, 0.03471704149254018, 0.008779734282392537, 0.001342545950221763, 0.06193746623876972, 0.06894383261547987, 0.08136441046510101, 0.10135253474317507, 0.04287369279209574, 0.02483374073456468, 0.07574989747956373, 0.11258055614729778, 0.0760186436444028, 0.05020398069584331, 0.015498424582665593, 0.004851807076698078, 9.999999999998899e-05, 0.05150521640302108, 0.012679244608612472, 0.005296342262088416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06739024191788212, 0.08563832279237305, 0.08932570789791394, 0.041799172677023266, 0.0897279052552653, 0.13209407907197201, 0.08248890618882454, 0.15306917662184882, 0.12477663697247932, 0.4336115351968799, 0.44002085266510005, 0.43544135377406823, 0.4520755704239632, 0.4338928512018162, 0.43998703126667915, 0.4551817103258763, 0.42528683234430964, 0.454026793954011, 0.10356598285406504, 0.05881982662356933, 0.06820866032160722, 0.08341899791132945, 0.10376146466017167, 0.08757883478955975, 0.1100923185425785, 0.12247346175583573, 0.06539001498342567, 0.31680235367862397, 0.2848931747780481, 0.21435193548253595, 0.2953805082774855, 0.3212318838117254, 0.1502283238450367, 0.3511079996294344, 0.1798250280021917, 0.2246855726738035, 0.2160749195982965, 0.25279750408796164, 0.23645086455554576, 0.31234070222307064, 0.16122696784384916, 0.24371138857133856, 0.2647959168794185, 0.26707347890915045, 0.20495101626221546, 0.08489308518932959, 0.18773137085963398, 0.2352624601051745, 0.2360705239478491, 0.21564377614803265, 0.19959852401498424, 0.2625583588939223, 0.2418590107005607, 0.21413510269175184, 0.18671591906568197, 0.15696114934605487, 0.20628266759996072, 0.16658098562137547, 0.1691119388081057, 0.1962791457502393, 0.17512676430586138, 0.1661337329144208, 0.19909314686869495, 0.2205252033192795, 0.19339300228320322, 0.21607901020174658, 0.19698078463185886, 0.20747353991256934, 0.20673392772546173, 0.19777973486781686, 0.216988218417542, 0.1809825873657228, 0.7785010139591603, 0.1699040967738913, 0.15442381838372854, 0.8096477224949112, 0.2013805151468253, 0.19857471415995565, 0.09996194147590964, 0.16883398990898346, 0.20933562984003806, 0.6585775015591186, 0.1565264810846666, 0.6747232276022948, 0.711544677011742, 0.16627126863993957, 0.2031166638598202, 0.6013315805308783, 0.2123735051323954, 0.6351541225751778, 0.18071172627273535, 0.21476418467934655, 0.19727074902737973, 0.185507419737862, 0.18293996732199724, 0.17722100430340448, 0.19392979445708958, 0.1978026179692698, 0.1925405812510106, 0.07261446171747121, 0.05961976109437306, 0.07410391191279397, 0.0697646558762457, 0.07651362292869257, 0.06304966848233673, 0.07943137531753997, 0.08021549049041754, 0.06741498167562554]}, "mutation_prompt": null}
{"id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridDynamicAlgorithm(EnhancedHybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.probability = 0.07317073170731707", "name": "ImprovedEnhancedHybridDynamicAlgorithm", "description": "Improving the EnhancedHybridDynamicAlgorithm by adjusting the probability of fine-tuning components based on a probability-based strategy.", "configspace": "", "generation": 73, "fitness": 0.2413860153688356, "feedback": "The algorithm ImprovedEnhancedHybridDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "7a75737f-d636-4479-81ca-9a41a5911d41", "metadata": {"aucs": [0.5220733983437351, 0.5090350542185891, 0.5224854981606093, 0.5155106075386626, 0.5080216896421592, 0.5425300026223975, 0.5324877494206564, 0.5770370395433515, 0.5434707492281163, 0.06775451088735573, 0.027847228677613578, 0.02537701423245542, 0.16402494599728812, 0.04038363291431446, 0.09293431550033804, 0.07279170060053053, 0.054802394046010505, 0.06287515859213888, 0.1032109860095296, 0.09449627897658808, 0.09831545307244272, 0.1007451421797938, 0.11377351797950086, 0.1173687878966102, 0.1277053182478749, 0.10389341344440672, 0.1301328969976313, 0.12182071125133931, 0.09998416767146412, 0.15193824428833702, 0.11219608007173942, 0.07261304948899594, 0.10526328124334727, 0.13554947034539455, 0.08511967133553067, 0.09847276574094577, 0.983218817449318, 0.9844042553621357, 0.9860197896969047, 0.9738606778459753, 0.9842242135131235, 0.9746515587806693, 0.9791048188902381, 0.9775208678460473, 0.9770695271015767, 0.3625358043566125, 0.33862205044574867, 0.37611208374156835, 0.36380151042862585, 0.33209402086557716, 0.3319675431865585, 0.33247800529685356, 0.3495879673497587, 0.3377432589314563, 0.40398415690700895, 0.20715129130086885, 0.17101855611124395, 0.21642986916628648, 0.8204198097207464, 0.21237523113740375, 0.14140660904367142, 0.18223617763961808, 0.23161377051255927, 0.22305265423094134, 0.21394430260601716, 0.1970963246321561, 0.22595131408956703, 0.2646690287703082, 0.21309145298391663, 0.21266646823661672, 0.25047432694903704, 0.234032294548574, 0.2525952241529883, 0.1761954975665465, 0.32318188401479286, 0.27126908751006396, 0.28247940095054425, 0.24665933966970133, 0.22156740479313308, 0.18258182916757415, 0.10867363145059661, 0.029246765268280628, 0.003936002400313887, 0.0023865140240290073, 0.047822949442310914, 0.10163307995589133, 0.018244076509280838, 0.0462008951900883, 0.0016759772183942978, 0.017385939772482706, 0.09776275872380868, 0.06553627299854958, 0.12652590841997557, 0.10304401905285465, 0.07626757013466778, 0.06283448970591377, 0.08691679237074712, 0.08978465327290686, 0.09540702546291235, 9.999999999998899e-05, 0.002452424330668501, 0.010745333016817682, 9.999999999998899e-05, 0.01478090764790796, 0.018815584126980367, 0.041115143707314394, 0.013940249187603171, 9.999999999998899e-05, 0.10919823068513557, 0.10399123382367093, 0.07923007272277593, 0.10062818215597213, 0.0941321474230915, 0.13232290087291498, 0.12783221969571057, 0.16315946692407557, 0.10405517198352132, 0.4532855650479707, 0.48555575918804283, 0.4479117041028565, 0.4676174751481862, 0.43325108158015924, 0.4394251992644189, 0.45308819338781114, 0.45987397699703314, 0.44219631382990043, 0.05123386580933598, 0.07683573937046295, 0.0678338885890325, 0.1102374507638102, 0.08835253162478873, 0.11778453853110948, 0.08105391949578733, 0.07545467937015304, 0.07483813843462228, 0.35363808403464314, 0.31904483456090504, 0.2134203598336949, 0.33236666362770273, 0.3606084534113704, 0.20572311880027183, 0.34781352480419336, 0.2594245013570985, 0.282244239801152, 0.15307311996809514, 0.18688208638309056, 0.17074535829249837, 0.24133197540712759, 0.1499044035692445, 0.2062719755363711, 0.22491993059159054, 0.30829194248869396, 0.2541971019312518, 0.23073038502898446, 0.07653113757488494, 0.13730320081211012, 0.12079286112336518, 0.13290627666068644, 0.18559728973698064, 0.15071265552039237, 0.265014036353192, 0.17294733197506862, 0.2335551990607545, 0.14080711598294804, 0.19030471053086973, 0.19898179649597314, 0.19995140817872636, 0.17397693075316423, 0.2142231232138424, 0.18957398672902148, 0.19988375715401696, 0.21945271952503853, 0.19893526366095682, 0.19323742565971957, 0.21237106341102785, 0.21655787382699287, 0.18678283492613468, 0.18888419278873747, 0.2074062042751168, 0.18651228638607587, 0.7826185681249825, 0.1270435176364899, 0.1545794382360438, 0.8057240944344374, 0.20179985575165882, 0.19952747787733305, 0.10004523756797168, 0.16883397771832553, 0.8072170239567689, 0.7975592198621879, 0.1573849899368135, 0.7675726188513574, 0.2082674508714898, 0.7394444092807835, 0.20566769129921125, 0.21307047822983882, 0.09459659319061553, 0.5899244190113793, 0.1842765565431559, 0.20083320964115148, 0.18954021114691266, 0.18309251507295965, 0.18584465267524464, 0.1852794483511211, 0.18756207477436904, 0.18037318689348392, 0.19543826521689944, 0.07345181713079363, 0.1023552987715195, 0.08420081781022659, 0.07709302330210066, 0.08598304268459722, 0.07787776514860267, 0.0737938580269587, 0.074679601880977, 0.08197555689387825]}, "mutation_prompt": null}
{"id": "c75e005d-bf31-4a02-b050-a7c72066af1f", "solution": "import numpy as np\n\nclass AdaptiveDEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.strategy_prob = 0.16666666666666666\n\n    def mutate(self, target_idx, population):\n        idxs = [idx for idx in range(len(population)) if idx != target_idx]\n        a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.F * (b - c), -5, 5)\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.rand() > self.CR:\n                trial[i] = mutant[i]\n        return trial\n\n    def fitness(self, func, candidate):\n        return func(candidate)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                target = population[i]\n                mutant = self.mutate(i, population)\n                trial = self.crossover(target, mutant)\n                if self.fitness(func, trial) < self.fitness(func, target):\n                    population[i] = trial\n        return population[np.argmin([self.fitness(func, p) for p in population])]", "name": "AdaptiveDEAlgorithm", "description": "Utilizing an Adaptive Differential Evolution Algorithm with enhanced mutation strategies for efficient black box optimization.", "configspace": "", "generation": 74, "fitness": 0.12950140954568606, "feedback": "The algorithm AdaptiveDEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.15.", "error": "", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.2859698695336962, 0.2655182458521449, 0.28951030251678855, 0.28123351650941275, 0.268168576309857, 0.28312463976160085, 0.28280429327323087, 0.2980670284406627, 0.30253609856485186, 0.01691946078324058, 0.009501272035620012, 0.01214525692973989, 0.012827322354132975, 0.015856288209036062, 0.016847436508628966, 0.01620253158592755, 0.015795769491016465, 0.016716339214125076, 0.09338274932799084, 0.08861043808449487, 0.08540062414487604, 0.101713327352845, 0.08488317550814539, 0.0968859841964208, 0.08329436290105352, 0.07681108851038843, 0.079131935755962, 0.06351035389634618, 0.07107754553393919, 0.07394253080936575, 0.0722690796046529, 0.07305518657250742, 0.06578680917700186, 0.0714734110300127, 0.06910270053170753, 0.06907399634934774, 0.7170057320085568, 0.6880465789322596, 0.7477361344199414, 0.7933074433671579, 0.7028065446058466, 0.7923038901787816, 0.8456523517871847, 0.7398146939052139, 0.7206584237582605, 0.08354854827484837, 0.06371781721278635, 0.08677407121292124, 0.07037681768371118, 0.06406742199013238, 0.0652952093337622, 0.07411580590385858, 0.06872600225456316, 0.09652469020007448, 0.11152441543369951, 0.1552312662428339, 0.10963049954570214, 0.15041467759467775, 0.13671437637097206, 0.12694491712462608, 0.11972894718497828, 0.11487517069485054, 0.1164305269077871, 0.0521703999797446, 0.040401827891168196, 0.03668362978752482, 0.02687631308359506, 0.04024493644264271, 0.043484612809787215, 0.047385814746655486, 0.032169446164202586, 0.06356361654401221, 0.04703461893414751, 0.03299048138079019, 0.020974863123790377, 0.0406674644298648, 0.048161412333298736, 0.04914501087742429, 0.054714905790623325, 0.0376353909053041, 0.055286050758549976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04621937118103159, 0.03111883792487702, 0.027918223970857747, 0.08663582275587955, 0.03772138269794323, 0.028026435390911653, 0.07281146031364716, 0.03892131864191983, 0.028177123170698537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00922884397841095, 0.001364968012786294, 0.01071504875387741, 0.020046113093994622, 0.02542625946343391, 0.019084141803581978, 0.014505943132273602, 0.012024755666555031, 0.012528809756116921, 0.23998772900609544, 0.24808022524016082, 0.24669767052448865, 0.27159826751944693, 0.2170625281672418, 0.22539638434531029, 0.2356649645279092, 0.2393664512560859, 0.26685154788160537, 0.05931488201529678, 0.05066659094134174, 0.05125051972645489, 0.046845401042752255, 0.03678043292573585, 0.06528158002846884, 0.04984251330023348, 0.05637172349430253, 0.05919265777758009, 0.13791930115052342, 0.12741630038051444, 0.1241253564800574, 0.13153062061286014, 0.14126550781421754, 0.13154777848005417, 0.12099011818258454, 0.12625025762994013, 0.11614287387173339, 0.15324558403336974, 0.16630861608734526, 0.18392773772783022, 0.16548424241949056, 0.16000563739099638, 0.1640719763905767, 0.16736763003430843, 0.19909796332851282, 0.1547711974167001, 0.10876382114770455, 0.13072226786430907, 0.09962436648716377, 0.12264887334130459, 0.1063484812124127, 0.11404645447108674, 0.11411937259931781, 0.13894845657460697, 0.12474750211053687, 0.16270294691573894, 0.17783065426443523, 0.17502558661599654, 0.1385927469596272, 0.16222027275714246, 0.16706262194315347, 0.187088737042595, 0.15541206474059321, 0.15206570145101428, 0.16141689788631863, 0.15745688535539704, 0.17364326352645, 0.15342176551140163, 0.14870106021737606, 0.15659450309107237, 0.14548965215455933, 0.14178797173423685, 0.13921723734942915, 0.15492826778655144, 0.1987506752035807, 0.16366448363724684, 0.18553074883021237, 0.15585492755601205, 0.13883498023601493, 0.1311068776069464, 0.16437636905491126, 0.11861386160523657, 0.14689366719375063, 0.18641427628165563, 0.15516098966948788, 0.1283612225090186, 0.1437826457357121, 0.11303753763682178, 0.12779316483607106, 0.13702515487432432, 0.14188416839388285, 0.17793317310849166, 0.16474469663581714, 0.1634166565434847, 0.16503971863954825, 0.16672404354239223, 0.16714990247698003, 0.16885266439374813, 0.17952083696362298, 0.1908010291509532, 0.05996198611257242, 0.04952023455059895, 0.0525315385899241, 0.06928476604359401, 0.05574640002702402, 0.051630618028042585, 0.0622176943609154, 0.06192514442259012, 0.054880228170666845]}, "mutation_prompt": null}
{"id": "37d9f907-3917-4bdc-8669-079d7298b287", "solution": "import numpy as np\n\nclass MetaEvolve:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.probability = 0.16666666666666666\n    \n    def __call__(self, func):\n        # Algorithm implementation here\n        pass", "name": "MetaEvolve", "description": "A novel algorithm, MetaEvolve, that dynamically evolves its strategy based on the performance of fine-tuning components with a probability of 0.16666666666666666.", "configspace": "", "generation": 75, "fitness": 0.0, "feedback": "The algorithm MetaEvolve got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "17ce9627-4656-4dec-b837-3d21a3982424", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridDynamicAlgorithm(EnhancedHybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.probability = 0.07317073170731707", "name": "ImprovedEnhancedHybridDynamicAlgorithm", "description": "Improving the EnhancedHybridDynamicAlgorithm by adjusting the probability of fine-tuning components based on a probability-based strategy.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.5220733983437351, 0.5090350542185891, 0.5224854981606093, 0.5155106075386626, 0.5080216896421592, 0.5425300026223975, 0.5324877494206564, 0.5770370395433515, 0.5434707492281163, 0.06775451088735573, 0.027847228677613578, 0.02537701423245542, 0.16402494599728812, 0.04038363291431446, 0.09293431550033804, 0.07279170060053053, 0.054802394046010505, 0.06287515859213888, 0.1032109860095296, 0.09449627897658808, 0.09831545307244272, 0.1007451421797938, 0.11377351797950086, 0.1173687878966102, 0.1277053182478749, 0.10389341344440672, 0.1301328969976313, 0.12182071125133931, 0.09998416767146412, 0.15193824428833702, 0.11219608007173942, 0.07261304948899594, 0.10526328124334727, 0.13554947034539455, 0.08511967133553067, 0.09847276574094577, 0.983218817449318, 0.9844042553621357, 0.9860197896969047, 0.9738606778459753, 0.9842242135131235, 0.9746515587806693, 0.9791048188902381, 0.9775208678460473, 0.9770695271015767, 0.3625358043566125, 0.33862205044574867, 0.37611208374156835, 0.36380151042862585, 0.33209402086557716, 0.3319675431865585, 0.33247800529685356, 0.3495879673497587, 0.3377432589314563, 0.40398415690700895, 0.20715129130086885, 0.17101855611124395, 0.21642986916628648, 0.8204198097207464, 0.21237523113740375, 0.14140660904367142, 0.18223617763961808, 0.23161377051255927, 0.22305265423094134, 0.21394430260601716, 0.1970963246321561, 0.22595131408956703, 0.2646690287703082, 0.21309145298391663, 0.21266646823661672, 0.25047432694903704, 0.234032294548574, 0.2525952241529883, 0.1761954975665465, 0.32318188401479286, 0.27126908751006396, 0.28247940095054425, 0.24665933966970133, 0.22156740479313308, 0.18258182916757415, 0.10867363145059661, 0.029246765268280628, 0.003936002400313887, 0.0023865140240290073, 0.047822949442310914, 0.10163307995589133, 0.018244076509280838, 0.0462008951900883, 0.0016759772183942978, 0.017385939772482706, 0.09776275872380868, 0.06553627299854958, 0.12652590841997557, 0.10304401905285465, 0.07626757013466778, 0.06283448970591377, 0.08691679237074712, 0.08978465327290686, 0.09540702546291235, 9.999999999998899e-05, 0.002452424330668501, 0.010745333016817682, 9.999999999998899e-05, 0.01478090764790796, 0.018815584126980367, 0.041115143707314394, 0.013940249187603171, 9.999999999998899e-05, 0.10919823068513557, 0.10399123382367093, 0.07923007272277593, 0.10062818215597213, 0.0941321474230915, 0.13232290087291498, 0.12783221969571057, 0.16315946692407557, 0.10405517198352132, 0.4532855650479707, 0.48555575918804283, 0.4479117041028565, 0.4676174751481862, 0.43325108158015924, 0.4394251992644189, 0.45308819338781114, 0.45987397699703314, 0.44219631382990043, 0.05123386580933598, 0.07683573937046295, 0.0678338885890325, 0.1102374507638102, 0.08835253162478873, 0.11778453853110948, 0.08105391949578733, 0.07545467937015304, 0.07483813843462228, 0.35363808403464314, 0.31904483456090504, 0.2134203598336949, 0.33236666362770273, 0.3606084534113704, 0.20572311880027183, 0.34781352480419336, 0.2594245013570985, 0.282244239801152, 0.15307311996809514, 0.18688208638309056, 0.17074535829249837, 0.24133197540712759, 0.1499044035692445, 0.2062719755363711, 0.22491993059159054, 0.30829194248869396, 0.2541971019312518, 0.23073038502898446, 0.07653113757488494, 0.13730320081211012, 0.12079286112336518, 0.13290627666068644, 0.18559728973698064, 0.15071265552039237, 0.265014036353192, 0.17294733197506862, 0.2335551990607545, 0.14080711598294804, 0.19030471053086973, 0.19898179649597314, 0.19995140817872636, 0.17397693075316423, 0.2142231232138424, 0.18957398672902148, 0.19988375715401696, 0.21945271952503853, 0.19893526366095682, 0.19323742565971957, 0.21237106341102785, 0.21655787382699287, 0.18678283492613468, 0.18888419278873747, 0.2074062042751168, 0.18651228638607587, 0.7826185681249825, 0.1270435176364899, 0.1545794382360438, 0.8057240944344374, 0.20179985575165882, 0.19952747787733305, 0.10004523756797168, 0.16883397771832553, 0.8072170239567689, 0.7975592198621879, 0.1573849899368135, 0.7675726188513574, 0.2082674508714898, 0.7394444092807835, 0.20566769129921125, 0.21307047822983882, 0.09459659319061553, 0.5899244190113793, 0.1842765565431559, 0.20083320964115148, 0.18954021114691266, 0.18309251507295965, 0.18584465267524464, 0.1852794483511211, 0.18756207477436904, 0.18037318689348392, 0.19543826521689944, 0.07345181713079363, 0.1023552987715195, 0.08420081781022659, 0.07709302330210066, 0.08598304268459722, 0.07787776514860267, 0.0737938580269587, 0.074679601880977, 0.08197555689387825]}, "mutation_prompt": null}
{"id": "9584d983-5e6b-4fae-826f-e55d7b269e3b", "solution": "import numpy as np\n\nclass StochasticAdaptiveSearchStrategy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        evaluations = 0\n        while evaluations < self.budget:\n            fitness_values = [func(individual) for individual in population]\n            best_idx = np.argmin(fitness_values)\n            best_individual = population[best_idx]\n            centroid = np.mean(population, axis=0)\n            population = 0.9 * population + 0.1 * centroid + 0.1 * np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n            evaluations += self.budget\n        return best_individual", "name": "StochasticAdaptiveSearchStrategy", "description": "Introducing a Novel Metaheuristic Algorithm - Stochastic Adaptive Search Strategy for Black Box Optimization.", "configspace": "", "generation": 77, "fitness": 0.09144843562834938, "feedback": "The algorithm StochasticAdaptiveSearchStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "45066648-1fe7-4065-ac9a-45f30cad9351", "solution": "import numpy as np\n\nclass HybridEvolutionaryStrategy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        # Algorithm implementation here\n        pass", "name": "HybridEvolutionaryStrategy", "description": "A Novel Metaheuristic Algorithm incorporating a Hybridized Evolution Strategy with Adaptive Mutation Rates", "configspace": "", "generation": 78, "fitness": 0.0, "feedback": "The algorithm HybridEvolutionaryStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "ea8479bb-3f92-4437-b407-311ed9aa5354", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        evaluations = 0\n        while evaluations < self.budget:\n            fitness = [func(ind) for ind in population]\n            best_idx = np.argmin(fitness)\n            best_ind = population[best_idx]\n            mean_ind = np.mean(population, axis=0)\n            new_population = 0.5 * population + 0.5 * mean_ind\n            new_population[best_idx] = best_ind\n            population = new_population\n            evaluations += self.budget\n        return best_ind", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Introducing a Novel Quantum-Inspired Evolutionary Algorithm for Black Box Optimization", "configspace": "", "generation": 79, "fitness": 0.09144843562834938, "feedback": "The algorithm QuantumInspiredEvolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d5033caa-0016-4889-bf71-999fef6021e3", "solution": "import numpy as np\n\nclass AdaptiveEnhancedHybridDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.probability = 0.3333333333333333\n\n    def __call__(self, func):\n        # Algorithm implementation goes here\n        pass", "name": "AdaptiveEnhancedHybridDynamicAlgorithm", "description": "Utilizing a Novel Adaptive Enhanced Hybrid Dynamic Algorithm to optimize black box functions efficiently.", "configspace": "", "generation": 80, "fitness": 0.0, "feedback": "The algorithm AdaptiveEnhancedHybridDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "67cc821b-3d7b-491a-af03-0058d6053fa0", "solution": "import numpy as np\n\nclass QuantumInspiredEnhancedExplorationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        best_solution = population[np.argmin([func(x) for x in population])]\n\n        for _ in range(self.budget):\n            new_population = population + np.random.normal(0, 1, (self.budget, self.dim))\n            current_fitness = [func(x) for x in population]\n            new_fitness = [func(x) for x in new_population]\n\n            population = new_population[new_fitness < current_fitness]\n            best_solution = population[np.argmin([func(x) for x in population])]\n\n        return best_solution", "name": "QuantumInspiredEnhancedExplorationAlgorithm", "description": "Novel Metaheuristic Algorithm: Quantum-Inspired Enhanced Exploration Algorithm with Adaptive Search Strategy", "configspace": "", "generation": 81, "fitness": 0.09144843562834938, "feedback": "The algorithm QuantumInspiredEnhancedExplorationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b3fa3f12-263d-4ef9-a01b-72bcb5c16889", "solution": "import numpy as np\n\nclass AdaptiveDynamicProbabilityAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.probability = 0.16666666666666666\n\n    def __call__(self, func):\n        # Algorithm implementation goes here\n        pass", "name": "AdaptiveDynamicProbabilityAlgorithm", "description": "Hybrid Metaheuristic Optimization using Adaptive Dynamic Probability Adjustment", "configspace": "", "generation": 82, "fitness": 0.0, "feedback": "The algorithm AdaptiveDynamicProbabilityAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "ce3ca0e0-c6cb-41c2-bdd0-5aaa9764e6a2", "solution": "import numpy as np\n\nclass EnhancedDynamicMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.probability = 0.16666666666666666\n        \n    def __call__(self, func):\n        # Algorithm implementation here\n        pass", "name": "EnhancedDynamicMetaheuristicAlgorithm", "description": "Enhanced Dynamic Metaheuristic Algorithm with Adaptive Probability Strategy", "configspace": "", "generation": 83, "fitness": 0.0, "feedback": "The algorithm EnhancedDynamicMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "aab397d8-b09d-4eca-b5ed-2362fa40a741", "solution": "import numpy as np\n\nclass AdaptiveDEMTLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        # Algorithm implementation here\n        pass", "name": "AdaptiveDEMTLS", "description": "A Novel Metaheuristic Algorithm using Adaptive Differential Evolution with Multiple Trajectories and Local Search", "configspace": "", "generation": 84, "fitness": 0.0, "feedback": "The algorithm AdaptiveDEMTLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "85b8d8de-b609-4a5c-b6b0-b5658b2b5be6", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridDynamicAlgorithm(EnhancedHybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.probability = 0.07317073170731707", "name": "ImprovedEnhancedHybridDynamicAlgorithm", "description": "Improving the EnhancedHybridDynamicAlgorithm by adjusting the probability of fine-tuning components based on a probability-based strategy.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.5220733983437351, 0.5090350542185891, 0.5224854981606093, 0.5155106075386626, 0.5080216896421592, 0.5425300026223975, 0.5324877494206564, 0.5770370395433515, 0.5434707492281163, 0.06775451088735573, 0.027847228677613578, 0.02537701423245542, 0.16402494599728812, 0.04038363291431446, 0.09293431550033804, 0.07279170060053053, 0.054802394046010505, 0.06287515859213888, 0.1032109860095296, 0.09449627897658808, 0.09831545307244272, 0.1007451421797938, 0.11377351797950086, 0.1173687878966102, 0.1277053182478749, 0.10389341344440672, 0.1301328969976313, 0.12182071125133931, 0.09998416767146412, 0.15193824428833702, 0.11219608007173942, 0.07261304948899594, 0.10526328124334727, 0.13554947034539455, 0.08511967133553067, 0.09847276574094577, 0.983218817449318, 0.9844042553621357, 0.9860197896969047, 0.9738606778459753, 0.9842242135131235, 0.9746515587806693, 0.9791048188902381, 0.9775208678460473, 0.9770695271015767, 0.3625358043566125, 0.33862205044574867, 0.37611208374156835, 0.36380151042862585, 0.33209402086557716, 0.3319675431865585, 0.33247800529685356, 0.3495879673497587, 0.3377432589314563, 0.40398415690700895, 0.20715129130086885, 0.17101855611124395, 0.21642986916628648, 0.8204198097207464, 0.21237523113740375, 0.14140660904367142, 0.18223617763961808, 0.23161377051255927, 0.22305265423094134, 0.21394430260601716, 0.1970963246321561, 0.22595131408956703, 0.2646690287703082, 0.21309145298391663, 0.21266646823661672, 0.25047432694903704, 0.234032294548574, 0.2525952241529883, 0.1761954975665465, 0.32318188401479286, 0.27126908751006396, 0.28247940095054425, 0.24665933966970133, 0.22156740479313308, 0.18258182916757415, 0.10867363145059661, 0.029246765268280628, 0.003936002400313887, 0.0023865140240290073, 0.047822949442310914, 0.10163307995589133, 0.018244076509280838, 0.0462008951900883, 0.0016759772183942978, 0.017385939772482706, 0.09776275872380868, 0.06553627299854958, 0.12652590841997557, 0.10304401905285465, 0.07626757013466778, 0.06283448970591377, 0.08691679237074712, 0.08978465327290686, 0.09540702546291235, 9.999999999998899e-05, 0.002452424330668501, 0.010745333016817682, 9.999999999998899e-05, 0.01478090764790796, 0.018815584126980367, 0.041115143707314394, 0.013940249187603171, 9.999999999998899e-05, 0.10919823068513557, 0.10399123382367093, 0.07923007272277593, 0.10062818215597213, 0.0941321474230915, 0.13232290087291498, 0.12783221969571057, 0.16315946692407557, 0.10405517198352132, 0.4532855650479707, 0.48555575918804283, 0.4479117041028565, 0.4676174751481862, 0.43325108158015924, 0.4394251992644189, 0.45308819338781114, 0.45987397699703314, 0.44219631382990043, 0.05123386580933598, 0.07683573937046295, 0.0678338885890325, 0.1102374507638102, 0.08835253162478873, 0.11778453853110948, 0.08105391949578733, 0.07545467937015304, 0.07483813843462228, 0.35363808403464314, 0.31904483456090504, 0.2134203598336949, 0.33236666362770273, 0.3606084534113704, 0.20572311880027183, 0.34781352480419336, 0.2594245013570985, 0.282244239801152, 0.15307311996809514, 0.18688208638309056, 0.17074535829249837, 0.24133197540712759, 0.1499044035692445, 0.2062719755363711, 0.22491993059159054, 0.30829194248869396, 0.2541971019312518, 0.23073038502898446, 0.07653113757488494, 0.13730320081211012, 0.12079286112336518, 0.13290627666068644, 0.18559728973698064, 0.15071265552039237, 0.265014036353192, 0.17294733197506862, 0.2335551990607545, 0.14080711598294804, 0.19030471053086973, 0.19898179649597314, 0.19995140817872636, 0.17397693075316423, 0.2142231232138424, 0.18957398672902148, 0.19988375715401696, 0.21945271952503853, 0.19893526366095682, 0.19323742565971957, 0.21237106341102785, 0.21655787382699287, 0.18678283492613468, 0.18888419278873747, 0.2074062042751168, 0.18651228638607587, 0.7826185681249825, 0.1270435176364899, 0.1545794382360438, 0.8057240944344374, 0.20179985575165882, 0.19952747787733305, 0.10004523756797168, 0.16883397771832553, 0.8072170239567689, 0.7975592198621879, 0.1573849899368135, 0.7675726188513574, 0.2082674508714898, 0.7394444092807835, 0.20566769129921125, 0.21307047822983882, 0.09459659319061553, 0.5899244190113793, 0.1842765565431559, 0.20083320964115148, 0.18954021114691266, 0.18309251507295965, 0.18584465267524464, 0.1852794483511211, 0.18756207477436904, 0.18037318689348392, 0.19543826521689944, 0.07345181713079363, 0.1023552987715195, 0.08420081781022659, 0.07709302330210066, 0.08598304268459722, 0.07787776514860267, 0.0737938580269587, 0.074679601880977, 0.08197555689387825]}, "mutation_prompt": null}
{"id": "321397b1-74f5-4ccb-baf0-ca6a6b5e6279", "solution": "import numpy as np\n\nclass AdaptiveDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.harmony_memory_size = 100\n        self.bandwidth = 0.02\n        self.pitch_adjustment_rate = 0.5\n        self.diversity_rate = 0.7\n        self.convergence_threshold = 0.1\n        self.convergence_counter = 0\n        self.best_solution = None\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            harmony = np.random.uniform(-5.0, 5.0, self.dim)\n            fitness = func(harmony)\n            if self.best_solution is None or fitness < func(self.best_solution):\n                self.best_solution = harmony\n            if self.convergence_counter > self.convergence_threshold * self.budget:\n                self.adapt_strategy()\n            self.update_harmony_memory(harmony, fitness)\n        return self.best_solution\n\n    def adapt_strategy(self):\n        self.bandwidth *= 0.9\n        self.pitch_adjustment_rate *= 0.9\n        self.diversity_rate *= 1.1\n        self.convergence_counter = 0\n\n    def update_harmony_memory(self, harmony, fitness):\n        worst_idx = np.argmax([func(h) for h in self.harmony_memory])\n        if fitness < func(self.harmony_memory[worst_idx]):\n            self.harmony_memory[worst_idx] = harmony\n\n        self.convergence_counter += 1", "name": "AdaptiveDifferentialHarmonySearch", "description": "Introducing the Adaptive Differential Harmony Search algorithm which dynamically adjusts the diversity and pitch adjustment strategies based on the solution space characteristics.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {}, "mutation_prompt": null}
{"id": "684fbe5b-03fe-44e6-a6ac-925749affb4a", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridDynamicAlgorithm(EnhancedHybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.probability = 0.07317073170731707", "name": "ImprovedEnhancedHybridDynamicAlgorithm", "description": "Improving the EnhancedHybridDynamicAlgorithm by adjusting the probability of fine-tuning components based on a probability-based strategy.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.5220733983437351, 0.5090350542185891, 0.5224854981606093, 0.5155106075386626, 0.5080216896421592, 0.5425300026223975, 0.5324877494206564, 0.5770370395433515, 0.5434707492281163, 0.06775451088735573, 0.027847228677613578, 0.02537701423245542, 0.16402494599728812, 0.04038363291431446, 0.09293431550033804, 0.07279170060053053, 0.054802394046010505, 0.06287515859213888, 0.1032109860095296, 0.09449627897658808, 0.09831545307244272, 0.1007451421797938, 0.11377351797950086, 0.1173687878966102, 0.1277053182478749, 0.10389341344440672, 0.1301328969976313, 0.12182071125133931, 0.09998416767146412, 0.15193824428833702, 0.11219608007173942, 0.07261304948899594, 0.10526328124334727, 0.13554947034539455, 0.08511967133553067, 0.09847276574094577, 0.983218817449318, 0.9844042553621357, 0.9860197896969047, 0.9738606778459753, 0.9842242135131235, 0.9746515587806693, 0.9791048188902381, 0.9775208678460473, 0.9770695271015767, 0.3625358043566125, 0.33862205044574867, 0.37611208374156835, 0.36380151042862585, 0.33209402086557716, 0.3319675431865585, 0.33247800529685356, 0.3495879673497587, 0.3377432589314563, 0.40398415690700895, 0.20715129130086885, 0.17101855611124395, 0.21642986916628648, 0.8204198097207464, 0.21237523113740375, 0.14140660904367142, 0.18223617763961808, 0.23161377051255927, 0.22305265423094134, 0.21394430260601716, 0.1970963246321561, 0.22595131408956703, 0.2646690287703082, 0.21309145298391663, 0.21266646823661672, 0.25047432694903704, 0.234032294548574, 0.2525952241529883, 0.1761954975665465, 0.32318188401479286, 0.27126908751006396, 0.28247940095054425, 0.24665933966970133, 0.22156740479313308, 0.18258182916757415, 0.10867363145059661, 0.029246765268280628, 0.003936002400313887, 0.0023865140240290073, 0.047822949442310914, 0.10163307995589133, 0.018244076509280838, 0.0462008951900883, 0.0016759772183942978, 0.017385939772482706, 0.09776275872380868, 0.06553627299854958, 0.12652590841997557, 0.10304401905285465, 0.07626757013466778, 0.06283448970591377, 0.08691679237074712, 0.08978465327290686, 0.09540702546291235, 9.999999999998899e-05, 0.002452424330668501, 0.010745333016817682, 9.999999999998899e-05, 0.01478090764790796, 0.018815584126980367, 0.041115143707314394, 0.013940249187603171, 9.999999999998899e-05, 0.10919823068513557, 0.10399123382367093, 0.07923007272277593, 0.10062818215597213, 0.0941321474230915, 0.13232290087291498, 0.12783221969571057, 0.16315946692407557, 0.10405517198352132, 0.4532855650479707, 0.48555575918804283, 0.4479117041028565, 0.4676174751481862, 0.43325108158015924, 0.4394251992644189, 0.45308819338781114, 0.45987397699703314, 0.44219631382990043, 0.05123386580933598, 0.07683573937046295, 0.0678338885890325, 0.1102374507638102, 0.08835253162478873, 0.11778453853110948, 0.08105391949578733, 0.07545467937015304, 0.07483813843462228, 0.35363808403464314, 0.31904483456090504, 0.2134203598336949, 0.33236666362770273, 0.3606084534113704, 0.20572311880027183, 0.34781352480419336, 0.2594245013570985, 0.282244239801152, 0.15307311996809514, 0.18688208638309056, 0.17074535829249837, 0.24133197540712759, 0.1499044035692445, 0.2062719755363711, 0.22491993059159054, 0.30829194248869396, 0.2541971019312518, 0.23073038502898446, 0.07653113757488494, 0.13730320081211012, 0.12079286112336518, 0.13290627666068644, 0.18559728973698064, 0.15071265552039237, 0.265014036353192, 0.17294733197506862, 0.2335551990607545, 0.14080711598294804, 0.19030471053086973, 0.19898179649597314, 0.19995140817872636, 0.17397693075316423, 0.2142231232138424, 0.18957398672902148, 0.19988375715401696, 0.21945271952503853, 0.19893526366095682, 0.19323742565971957, 0.21237106341102785, 0.21655787382699287, 0.18678283492613468, 0.18888419278873747, 0.2074062042751168, 0.18651228638607587, 0.7826185681249825, 0.1270435176364899, 0.1545794382360438, 0.8057240944344374, 0.20179985575165882, 0.19952747787733305, 0.10004523756797168, 0.16883397771832553, 0.8072170239567689, 0.7975592198621879, 0.1573849899368135, 0.7675726188513574, 0.2082674508714898, 0.7394444092807835, 0.20566769129921125, 0.21307047822983882, 0.09459659319061553, 0.5899244190113793, 0.1842765565431559, 0.20083320964115148, 0.18954021114691266, 0.18309251507295965, 0.18584465267524464, 0.1852794483511211, 0.18756207477436904, 0.18037318689348392, 0.19543826521689944, 0.07345181713079363, 0.1023552987715195, 0.08420081781022659, 0.07709302330210066, 0.08598304268459722, 0.07787776514860267, 0.0737938580269587, 0.074679601880977, 0.08197555689387825]}, "mutation_prompt": null}
{"id": "dac68b5f-6627-4e41-b64c-2678dd9af4de", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n    \n    def attractiveness(self, light_intensity, distance):\n        return light_intensity / (1 + distance)\n    \n    def move_firefly(self, source, target, attractiveness, beta):\n        return source + attractiveness * np.exp(-beta * np.linalg.norm(target - source)) * (target - source) + 0.01 * np.random.randn(self.dim)\n    \n    def optimize(self, func):\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        attractiveness_ij = self.attractiveness(1, np.linalg.norm(self.population[i] - self.population[j]))\n                        self.population[i] = self.move_firefly(self.population[i], self.population[j], attractiveness_ij, 1.0)\n        return self.population[np.argmin([func(x) for x in self.population])]", "name": "FireflyOptimization", "description": "Implementing a Metaheuristic Algorithm based on Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'FireflyOptimization' object is not callable\").", "error": "TypeError(\"'FireflyOptimization' object is not callable\")", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {}, "mutation_prompt": null}
{"id": "d1cde801-86ad-4bd4-b96d-bf8e2228417e", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridDynamicAlgorithm(EnhancedHybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.probability = 0.07317073170731707", "name": "ImprovedEnhancedHybridDynamicAlgorithm", "description": "Improving the EnhancedHybridDynamicAlgorithm by adjusting the probability of fine-tuning components based on a probability-based strategy.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.5220733983437351, 0.5090350542185891, 0.5224854981606093, 0.5155106075386626, 0.5080216896421592, 0.5425300026223975, 0.5324877494206564, 0.5770370395433515, 0.5434707492281163, 0.06775451088735573, 0.027847228677613578, 0.02537701423245542, 0.16402494599728812, 0.04038363291431446, 0.09293431550033804, 0.07279170060053053, 0.054802394046010505, 0.06287515859213888, 0.1032109860095296, 0.09449627897658808, 0.09831545307244272, 0.1007451421797938, 0.11377351797950086, 0.1173687878966102, 0.1277053182478749, 0.10389341344440672, 0.1301328969976313, 0.12182071125133931, 0.09998416767146412, 0.15193824428833702, 0.11219608007173942, 0.07261304948899594, 0.10526328124334727, 0.13554947034539455, 0.08511967133553067, 0.09847276574094577, 0.983218817449318, 0.9844042553621357, 0.9860197896969047, 0.9738606778459753, 0.9842242135131235, 0.9746515587806693, 0.9791048188902381, 0.9775208678460473, 0.9770695271015767, 0.3625358043566125, 0.33862205044574867, 0.37611208374156835, 0.36380151042862585, 0.33209402086557716, 0.3319675431865585, 0.33247800529685356, 0.3495879673497587, 0.3377432589314563, 0.40398415690700895, 0.20715129130086885, 0.17101855611124395, 0.21642986916628648, 0.8204198097207464, 0.21237523113740375, 0.14140660904367142, 0.18223617763961808, 0.23161377051255927, 0.22305265423094134, 0.21394430260601716, 0.1970963246321561, 0.22595131408956703, 0.2646690287703082, 0.21309145298391663, 0.21266646823661672, 0.25047432694903704, 0.234032294548574, 0.2525952241529883, 0.1761954975665465, 0.32318188401479286, 0.27126908751006396, 0.28247940095054425, 0.24665933966970133, 0.22156740479313308, 0.18258182916757415, 0.10867363145059661, 0.029246765268280628, 0.003936002400313887, 0.0023865140240290073, 0.047822949442310914, 0.10163307995589133, 0.018244076509280838, 0.0462008951900883, 0.0016759772183942978, 0.017385939772482706, 0.09776275872380868, 0.06553627299854958, 0.12652590841997557, 0.10304401905285465, 0.07626757013466778, 0.06283448970591377, 0.08691679237074712, 0.08978465327290686, 0.09540702546291235, 9.999999999998899e-05, 0.002452424330668501, 0.010745333016817682, 9.999999999998899e-05, 0.01478090764790796, 0.018815584126980367, 0.041115143707314394, 0.013940249187603171, 9.999999999998899e-05, 0.10919823068513557, 0.10399123382367093, 0.07923007272277593, 0.10062818215597213, 0.0941321474230915, 0.13232290087291498, 0.12783221969571057, 0.16315946692407557, 0.10405517198352132, 0.4532855650479707, 0.48555575918804283, 0.4479117041028565, 0.4676174751481862, 0.43325108158015924, 0.4394251992644189, 0.45308819338781114, 0.45987397699703314, 0.44219631382990043, 0.05123386580933598, 0.07683573937046295, 0.0678338885890325, 0.1102374507638102, 0.08835253162478873, 0.11778453853110948, 0.08105391949578733, 0.07545467937015304, 0.07483813843462228, 0.35363808403464314, 0.31904483456090504, 0.2134203598336949, 0.33236666362770273, 0.3606084534113704, 0.20572311880027183, 0.34781352480419336, 0.2594245013570985, 0.282244239801152, 0.15307311996809514, 0.18688208638309056, 0.17074535829249837, 0.24133197540712759, 0.1499044035692445, 0.2062719755363711, 0.22491993059159054, 0.30829194248869396, 0.2541971019312518, 0.23073038502898446, 0.07653113757488494, 0.13730320081211012, 0.12079286112336518, 0.13290627666068644, 0.18559728973698064, 0.15071265552039237, 0.265014036353192, 0.17294733197506862, 0.2335551990607545, 0.14080711598294804, 0.19030471053086973, 0.19898179649597314, 0.19995140817872636, 0.17397693075316423, 0.2142231232138424, 0.18957398672902148, 0.19988375715401696, 0.21945271952503853, 0.19893526366095682, 0.19323742565971957, 0.21237106341102785, 0.21655787382699287, 0.18678283492613468, 0.18888419278873747, 0.2074062042751168, 0.18651228638607587, 0.7826185681249825, 0.1270435176364899, 0.1545794382360438, 0.8057240944344374, 0.20179985575165882, 0.19952747787733305, 0.10004523756797168, 0.16883397771832553, 0.8072170239567689, 0.7975592198621879, 0.1573849899368135, 0.7675726188513574, 0.2082674508714898, 0.7394444092807835, 0.20566769129921125, 0.21307047822983882, 0.09459659319061553, 0.5899244190113793, 0.1842765565431559, 0.20083320964115148, 0.18954021114691266, 0.18309251507295965, 0.18584465267524464, 0.1852794483511211, 0.18756207477436904, 0.18037318689348392, 0.19543826521689944, 0.07345181713079363, 0.1023552987715195, 0.08420081781022659, 0.07709302330210066, 0.08598304268459722, 0.07787776514860267, 0.0737938580269587, 0.074679601880977, 0.08197555689387825]}, "mutation_prompt": null}
{"id": "e6008602-002c-417b-be4a-730240d1a0ab", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridDynamicAlgorithm(EnhancedHybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.probability = 0.07317073170731707", "name": "ImprovedEnhancedHybridDynamicAlgorithm", "description": "Improving the EnhancedHybridDynamicAlgorithm by adjusting the probability of fine-tuning components based on a probability-based strategy.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.5220733983437351, 0.5090350542185891, 0.5224854981606093, 0.5155106075386626, 0.5080216896421592, 0.5425300026223975, 0.5324877494206564, 0.5770370395433515, 0.5434707492281163, 0.06775451088735573, 0.027847228677613578, 0.02537701423245542, 0.16402494599728812, 0.04038363291431446, 0.09293431550033804, 0.07279170060053053, 0.054802394046010505, 0.06287515859213888, 0.1032109860095296, 0.09449627897658808, 0.09831545307244272, 0.1007451421797938, 0.11377351797950086, 0.1173687878966102, 0.1277053182478749, 0.10389341344440672, 0.1301328969976313, 0.12182071125133931, 0.09998416767146412, 0.15193824428833702, 0.11219608007173942, 0.07261304948899594, 0.10526328124334727, 0.13554947034539455, 0.08511967133553067, 0.09847276574094577, 0.983218817449318, 0.9844042553621357, 0.9860197896969047, 0.9738606778459753, 0.9842242135131235, 0.9746515587806693, 0.9791048188902381, 0.9775208678460473, 0.9770695271015767, 0.3625358043566125, 0.33862205044574867, 0.37611208374156835, 0.36380151042862585, 0.33209402086557716, 0.3319675431865585, 0.33247800529685356, 0.3495879673497587, 0.3377432589314563, 0.40398415690700895, 0.20715129130086885, 0.17101855611124395, 0.21642986916628648, 0.8204198097207464, 0.21237523113740375, 0.14140660904367142, 0.18223617763961808, 0.23161377051255927, 0.22305265423094134, 0.21394430260601716, 0.1970963246321561, 0.22595131408956703, 0.2646690287703082, 0.21309145298391663, 0.21266646823661672, 0.25047432694903704, 0.234032294548574, 0.2525952241529883, 0.1761954975665465, 0.32318188401479286, 0.27126908751006396, 0.28247940095054425, 0.24665933966970133, 0.22156740479313308, 0.18258182916757415, 0.10867363145059661, 0.029246765268280628, 0.003936002400313887, 0.0023865140240290073, 0.047822949442310914, 0.10163307995589133, 0.018244076509280838, 0.0462008951900883, 0.0016759772183942978, 0.017385939772482706, 0.09776275872380868, 0.06553627299854958, 0.12652590841997557, 0.10304401905285465, 0.07626757013466778, 0.06283448970591377, 0.08691679237074712, 0.08978465327290686, 0.09540702546291235, 9.999999999998899e-05, 0.002452424330668501, 0.010745333016817682, 9.999999999998899e-05, 0.01478090764790796, 0.018815584126980367, 0.041115143707314394, 0.013940249187603171, 9.999999999998899e-05, 0.10919823068513557, 0.10399123382367093, 0.07923007272277593, 0.10062818215597213, 0.0941321474230915, 0.13232290087291498, 0.12783221969571057, 0.16315946692407557, 0.10405517198352132, 0.4532855650479707, 0.48555575918804283, 0.4479117041028565, 0.4676174751481862, 0.43325108158015924, 0.4394251992644189, 0.45308819338781114, 0.45987397699703314, 0.44219631382990043, 0.05123386580933598, 0.07683573937046295, 0.0678338885890325, 0.1102374507638102, 0.08835253162478873, 0.11778453853110948, 0.08105391949578733, 0.07545467937015304, 0.07483813843462228, 0.35363808403464314, 0.31904483456090504, 0.2134203598336949, 0.33236666362770273, 0.3606084534113704, 0.20572311880027183, 0.34781352480419336, 0.2594245013570985, 0.282244239801152, 0.15307311996809514, 0.18688208638309056, 0.17074535829249837, 0.24133197540712759, 0.1499044035692445, 0.2062719755363711, 0.22491993059159054, 0.30829194248869396, 0.2541971019312518, 0.23073038502898446, 0.07653113757488494, 0.13730320081211012, 0.12079286112336518, 0.13290627666068644, 0.18559728973698064, 0.15071265552039237, 0.265014036353192, 0.17294733197506862, 0.2335551990607545, 0.14080711598294804, 0.19030471053086973, 0.19898179649597314, 0.19995140817872636, 0.17397693075316423, 0.2142231232138424, 0.18957398672902148, 0.19988375715401696, 0.21945271952503853, 0.19893526366095682, 0.19323742565971957, 0.21237106341102785, 0.21655787382699287, 0.18678283492613468, 0.18888419278873747, 0.2074062042751168, 0.18651228638607587, 0.7826185681249825, 0.1270435176364899, 0.1545794382360438, 0.8057240944344374, 0.20179985575165882, 0.19952747787733305, 0.10004523756797168, 0.16883397771832553, 0.8072170239567689, 0.7975592198621879, 0.1573849899368135, 0.7675726188513574, 0.2082674508714898, 0.7394444092807835, 0.20566769129921125, 0.21307047822983882, 0.09459659319061553, 0.5899244190113793, 0.1842765565431559, 0.20083320964115148, 0.18954021114691266, 0.18309251507295965, 0.18584465267524464, 0.1852794483511211, 0.18756207477436904, 0.18037318689348392, 0.19543826521689944, 0.07345181713079363, 0.1023552987715195, 0.08420081781022659, 0.07709302330210066, 0.08598304268459722, 0.07787776514860267, 0.0737938580269587, 0.074679601880977, 0.08197555689387825]}, "mutation_prompt": null}
{"id": "f3679d6b-ff2d-4954-9c19-b47d31df1e78", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridDynamicAlgorithm(EnhancedHybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.probability = 0.07317073170731707", "name": "ImprovedEnhancedHybridDynamicAlgorithm", "description": "Improving the EnhancedHybridDynamicAlgorithm by adjusting the probability of fine-tuning components based on a probability-based strategy.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.5220733983437351, 0.5090350542185891, 0.5224854981606093, 0.5155106075386626, 0.5080216896421592, 0.5425300026223975, 0.5324877494206564, 0.5770370395433515, 0.5434707492281163, 0.06775451088735573, 0.027847228677613578, 0.02537701423245542, 0.16402494599728812, 0.04038363291431446, 0.09293431550033804, 0.07279170060053053, 0.054802394046010505, 0.06287515859213888, 0.1032109860095296, 0.09449627897658808, 0.09831545307244272, 0.1007451421797938, 0.11377351797950086, 0.1173687878966102, 0.1277053182478749, 0.10389341344440672, 0.1301328969976313, 0.12182071125133931, 0.09998416767146412, 0.15193824428833702, 0.11219608007173942, 0.07261304948899594, 0.10526328124334727, 0.13554947034539455, 0.08511967133553067, 0.09847276574094577, 0.983218817449318, 0.9844042553621357, 0.9860197896969047, 0.9738606778459753, 0.9842242135131235, 0.9746515587806693, 0.9791048188902381, 0.9775208678460473, 0.9770695271015767, 0.3625358043566125, 0.33862205044574867, 0.37611208374156835, 0.36380151042862585, 0.33209402086557716, 0.3319675431865585, 0.33247800529685356, 0.3495879673497587, 0.3377432589314563, 0.40398415690700895, 0.20715129130086885, 0.17101855611124395, 0.21642986916628648, 0.8204198097207464, 0.21237523113740375, 0.14140660904367142, 0.18223617763961808, 0.23161377051255927, 0.22305265423094134, 0.21394430260601716, 0.1970963246321561, 0.22595131408956703, 0.2646690287703082, 0.21309145298391663, 0.21266646823661672, 0.25047432694903704, 0.234032294548574, 0.2525952241529883, 0.1761954975665465, 0.32318188401479286, 0.27126908751006396, 0.28247940095054425, 0.24665933966970133, 0.22156740479313308, 0.18258182916757415, 0.10867363145059661, 0.029246765268280628, 0.003936002400313887, 0.0023865140240290073, 0.047822949442310914, 0.10163307995589133, 0.018244076509280838, 0.0462008951900883, 0.0016759772183942978, 0.017385939772482706, 0.09776275872380868, 0.06553627299854958, 0.12652590841997557, 0.10304401905285465, 0.07626757013466778, 0.06283448970591377, 0.08691679237074712, 0.08978465327290686, 0.09540702546291235, 9.999999999998899e-05, 0.002452424330668501, 0.010745333016817682, 9.999999999998899e-05, 0.01478090764790796, 0.018815584126980367, 0.041115143707314394, 0.013940249187603171, 9.999999999998899e-05, 0.10919823068513557, 0.10399123382367093, 0.07923007272277593, 0.10062818215597213, 0.0941321474230915, 0.13232290087291498, 0.12783221969571057, 0.16315946692407557, 0.10405517198352132, 0.4532855650479707, 0.48555575918804283, 0.4479117041028565, 0.4676174751481862, 0.43325108158015924, 0.4394251992644189, 0.45308819338781114, 0.45987397699703314, 0.44219631382990043, 0.05123386580933598, 0.07683573937046295, 0.0678338885890325, 0.1102374507638102, 0.08835253162478873, 0.11778453853110948, 0.08105391949578733, 0.07545467937015304, 0.07483813843462228, 0.35363808403464314, 0.31904483456090504, 0.2134203598336949, 0.33236666362770273, 0.3606084534113704, 0.20572311880027183, 0.34781352480419336, 0.2594245013570985, 0.282244239801152, 0.15307311996809514, 0.18688208638309056, 0.17074535829249837, 0.24133197540712759, 0.1499044035692445, 0.2062719755363711, 0.22491993059159054, 0.30829194248869396, 0.2541971019312518, 0.23073038502898446, 0.07653113757488494, 0.13730320081211012, 0.12079286112336518, 0.13290627666068644, 0.18559728973698064, 0.15071265552039237, 0.265014036353192, 0.17294733197506862, 0.2335551990607545, 0.14080711598294804, 0.19030471053086973, 0.19898179649597314, 0.19995140817872636, 0.17397693075316423, 0.2142231232138424, 0.18957398672902148, 0.19988375715401696, 0.21945271952503853, 0.19893526366095682, 0.19323742565971957, 0.21237106341102785, 0.21655787382699287, 0.18678283492613468, 0.18888419278873747, 0.2074062042751168, 0.18651228638607587, 0.7826185681249825, 0.1270435176364899, 0.1545794382360438, 0.8057240944344374, 0.20179985575165882, 0.19952747787733305, 0.10004523756797168, 0.16883397771832553, 0.8072170239567689, 0.7975592198621879, 0.1573849899368135, 0.7675726188513574, 0.2082674508714898, 0.7394444092807835, 0.20566769129921125, 0.21307047822983882, 0.09459659319061553, 0.5899244190113793, 0.1842765565431559, 0.20083320964115148, 0.18954021114691266, 0.18309251507295965, 0.18584465267524464, 0.1852794483511211, 0.18756207477436904, 0.18037318689348392, 0.19543826521689944, 0.07345181713079363, 0.1023552987715195, 0.08420081781022659, 0.07709302330210066, 0.08598304268459722, 0.07787776514860267, 0.0737938580269587, 0.074679601880977, 0.08197555689387825]}, "mutation_prompt": null}
{"id": "7c1efa57-f65d-43c4-b226-6564870e40c1", "solution": "import numpy as np\n\nclass PopulationBasedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n    \n    def optimize(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            fitness_values = [func(individual) for individual in self.population]\n            sorted_indices = np.argsort(fitness_values)\n            best_individual = self.population[sorted_indices[0]]\n            new_population = [best_individual + np.random.normal(0, 0.1, self.dim) for _ in range(self.population_size)]\n            self.population = new_population\n            evaluations += self.population_size\n        return best_individual", "name": "PopulationBasedMetaheuristicAlgorithm", "description": "Implementing a Population-based Metaheuristic Algorithm with Dynamic Adjustments based on Probability for Black Box Optimization.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'PopulationBasedMetaheuristicAlgorithm' object is not callable\").", "error": "TypeError(\"'PopulationBasedMetaheuristicAlgorithm' object is not callable\")", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {}, "mutation_prompt": null}
{"id": "64ea71f9-80e4-49cd-9580-ce3236d22395", "solution": "import numpy as np\n\nclass ButterflyOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        # Implementation of BOA for black box optimization\n        pass", "name": "ButterflyOptimizationAlgorithm", "description": "Implementing a Butterfly Optimization Algorithm (BOA) that mimics the behavior of butterflies in the search for optimal solutions.", "configspace": "", "generation": 93, "fitness": 0.0, "feedback": "The algorithm ButterflyOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "e4f79904-3520-4fac-9aa6-05c29325d5af", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridDynamicAlgorithm(EnhancedHybridDynamicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.probability = 0.07317073170731707", "name": "ImprovedEnhancedHybridDynamicAlgorithm", "description": "Improving the EnhancedHybridDynamicAlgorithm by adjusting the probability of fine-tuning components based on a probability-based strategy.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.5220733983437351, 0.5090350542185891, 0.5224854981606093, 0.5155106075386626, 0.5080216896421592, 0.5425300026223975, 0.5324877494206564, 0.5770370395433515, 0.5434707492281163, 0.06775451088735573, 0.027847228677613578, 0.02537701423245542, 0.16402494599728812, 0.04038363291431446, 0.09293431550033804, 0.07279170060053053, 0.054802394046010505, 0.06287515859213888, 0.1032109860095296, 0.09449627897658808, 0.09831545307244272, 0.1007451421797938, 0.11377351797950086, 0.1173687878966102, 0.1277053182478749, 0.10389341344440672, 0.1301328969976313, 0.12182071125133931, 0.09998416767146412, 0.15193824428833702, 0.11219608007173942, 0.07261304948899594, 0.10526328124334727, 0.13554947034539455, 0.08511967133553067, 0.09847276574094577, 0.983218817449318, 0.9844042553621357, 0.9860197896969047, 0.9738606778459753, 0.9842242135131235, 0.9746515587806693, 0.9791048188902381, 0.9775208678460473, 0.9770695271015767, 0.3625358043566125, 0.33862205044574867, 0.37611208374156835, 0.36380151042862585, 0.33209402086557716, 0.3319675431865585, 0.33247800529685356, 0.3495879673497587, 0.3377432589314563, 0.40398415690700895, 0.20715129130086885, 0.17101855611124395, 0.21642986916628648, 0.8204198097207464, 0.21237523113740375, 0.14140660904367142, 0.18223617763961808, 0.23161377051255927, 0.22305265423094134, 0.21394430260601716, 0.1970963246321561, 0.22595131408956703, 0.2646690287703082, 0.21309145298391663, 0.21266646823661672, 0.25047432694903704, 0.234032294548574, 0.2525952241529883, 0.1761954975665465, 0.32318188401479286, 0.27126908751006396, 0.28247940095054425, 0.24665933966970133, 0.22156740479313308, 0.18258182916757415, 0.10867363145059661, 0.029246765268280628, 0.003936002400313887, 0.0023865140240290073, 0.047822949442310914, 0.10163307995589133, 0.018244076509280838, 0.0462008951900883, 0.0016759772183942978, 0.017385939772482706, 0.09776275872380868, 0.06553627299854958, 0.12652590841997557, 0.10304401905285465, 0.07626757013466778, 0.06283448970591377, 0.08691679237074712, 0.08978465327290686, 0.09540702546291235, 9.999999999998899e-05, 0.002452424330668501, 0.010745333016817682, 9.999999999998899e-05, 0.01478090764790796, 0.018815584126980367, 0.041115143707314394, 0.013940249187603171, 9.999999999998899e-05, 0.10919823068513557, 0.10399123382367093, 0.07923007272277593, 0.10062818215597213, 0.0941321474230915, 0.13232290087291498, 0.12783221969571057, 0.16315946692407557, 0.10405517198352132, 0.4532855650479707, 0.48555575918804283, 0.4479117041028565, 0.4676174751481862, 0.43325108158015924, 0.4394251992644189, 0.45308819338781114, 0.45987397699703314, 0.44219631382990043, 0.05123386580933598, 0.07683573937046295, 0.0678338885890325, 0.1102374507638102, 0.08835253162478873, 0.11778453853110948, 0.08105391949578733, 0.07545467937015304, 0.07483813843462228, 0.35363808403464314, 0.31904483456090504, 0.2134203598336949, 0.33236666362770273, 0.3606084534113704, 0.20572311880027183, 0.34781352480419336, 0.2594245013570985, 0.282244239801152, 0.15307311996809514, 0.18688208638309056, 0.17074535829249837, 0.24133197540712759, 0.1499044035692445, 0.2062719755363711, 0.22491993059159054, 0.30829194248869396, 0.2541971019312518, 0.23073038502898446, 0.07653113757488494, 0.13730320081211012, 0.12079286112336518, 0.13290627666068644, 0.18559728973698064, 0.15071265552039237, 0.265014036353192, 0.17294733197506862, 0.2335551990607545, 0.14080711598294804, 0.19030471053086973, 0.19898179649597314, 0.19995140817872636, 0.17397693075316423, 0.2142231232138424, 0.18957398672902148, 0.19988375715401696, 0.21945271952503853, 0.19893526366095682, 0.19323742565971957, 0.21237106341102785, 0.21655787382699287, 0.18678283492613468, 0.18888419278873747, 0.2074062042751168, 0.18651228638607587, 0.7826185681249825, 0.1270435176364899, 0.1545794382360438, 0.8057240944344374, 0.20179985575165882, 0.19952747787733305, 0.10004523756797168, 0.16883397771832553, 0.8072170239567689, 0.7975592198621879, 0.1573849899368135, 0.7675726188513574, 0.2082674508714898, 0.7394444092807835, 0.20566769129921125, 0.21307047822983882, 0.09459659319061553, 0.5899244190113793, 0.1842765565431559, 0.20083320964115148, 0.18954021114691266, 0.18309251507295965, 0.18584465267524464, 0.1852794483511211, 0.18756207477436904, 0.18037318689348392, 0.19543826521689944, 0.07345181713079363, 0.1023552987715195, 0.08420081781022659, 0.07709302330210066, 0.08598304268459722, 0.07787776514860267, 0.0737938580269587, 0.074679601880977, 0.08197555689387825]}, "mutation_prompt": null}
{"id": "94916558-9ef7-40be-a0b3-14f3aeaf0725", "solution": "import numpy as np\n\nclass DynamicGroupingEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_generations = budget // self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness_values = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.max_generations):\n            # Perform selection, crossover, mutation\n            # Update population based on fitness\n            new_population = self.evolve_population(population, fitness_values)\n            population = new_population\n            fitness_values = np.array([func(individual) for individual in population])\n        \n        best_individual = population[np.argmin(fitness_values)]\n        return best_individual\n\n    def evolve_population(self, population, fitness_values):\n        # Perform evolutionary operations\n        # Return the evolved population\n        return evolved_population", "name": "DynamicGroupingEvolutionaryAlgorithm", "description": "A Novel Metaheuristic Algorithm based on Dynamic Grouping and Evolutionary Strategy for Black Box Optimization", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'evolved_population' is not defined\").", "error": "NameError(\"name 'evolved_population' is not defined\")", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {}, "mutation_prompt": null}
{"id": "7f0b588e-cc4c-4357-aaa7-e336c44ba760", "solution": "import numpy as np\n\nclass HarmonySearchDifferentialEvolutionAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.p_accept = 0.7\n        self.bandwidth = 0.01\n        self.f = 0.5\n\n    def __call__(self, func):\n        def generate_new_solution(bounds):\n            return np.random.uniform(bounds[0], bounds[1], self.dim)\n\n        def clipToBounds(solution, bounds):\n            return np.clip(solution, bounds[0], bounds[1])\n\n        def objective_function(solution):\n            return func(solution)\n\n        def harmony_search(bounds):\n            harmonies = [generate_new_solution(bounds) for _ in range(self.population_size)]\n\n            for _ in range(self.budget):\n                new_harmony = generate_new_solution(bounds)\n                for j in range(self.dim):\n                    if np.random.rand() < self.p_accept:\n                        new_harmony[j] = harmonies[np.random.randint(self.population_size)][j]\n                        if np.random.rand() < self.bandwidth:\n                            new_harmony[j] += self.f * (harmonies[np.random.randint(self.population_size)][j] - harmonies[np.random.randint(self.population_size)][j])\n\n                new_harmony = clipToBounds(new_harmony, bounds)\n                if objective_function(new_harmony) < min([objective_function(h) for h in harmonies]):\n                    harmonies[np.argmax([objective_function(h) for h in harmonies])] = new_harmony\n\n            return min(harmonies, key=objective_function)\n\n        search_space = [(-5.0, 5.0) for _ in range(self.dim)]\n        return harmony_search(search_space)", "name": "HarmonySearchDifferentialEvolutionAlgorithm", "description": "A Novel Metaheuristic Algorithm utilizing Harmony Search and Differential Evolution for Black Box Optimization", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (5,) and arg 1 with shape (2,).').", "error": "ValueError('shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (5,) and arg 1 with shape (2,).')", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {}, "mutation_prompt": null}
{"id": "0ea37bfd-5eff-44ef-9102-3e5ead68123d", "solution": "import numpy as np\n\nclass CooperativeCoevolutionaryDEAPC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.subpopulation_size = 10\n        self.num_subpopulations = dim // 2\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialization\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            # Implement Cooperative Coevolutionary Differential Evolution with Adaptive Parameter Control\n            \n            # Update best_solution and best_fitness if a better solution is found\n        \n        return best_solution", "name": "CooperativeCoevolutionaryDEAPC", "description": "Introducing a Novel Metaheuristic Algorithm based on Cooperative Coevolutionary Differential Evolution with Adaptive Parameter Control.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: IndentationError('expected an indented block', ('<string>', 23, 9, '        return best_solution\\n')).", "error": "IndentationError('expected an indented block', ('<string>', 23, 9, '        return best_solution\\n'))", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {}, "mutation_prompt": null}
{"id": "81f31147-5e3b-494d-b436-36ada536bba0", "solution": "import numpy as np\n\nclass SwarmIntelligenceDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n    \n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            fitness = [func(individual) for individual in self.population]\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n            new_population = [individual + 0.1 * np.random.randn(self.dim) for individual in self.population]\n            self.population = np.clip(new_population, self.lower_bound, self.upper_bound)\n        return best_individual", "name": "SwarmIntelligenceDynamicAlgorithm", "description": "Utilizing a Swarm Intelligence Optimization Algorithm with Dynamic Adaptation for Black Box Optimization.", "configspace": "", "generation": 98, "fitness": 0.0643674092348486, "feedback": "The algorithm SwarmIntelligenceDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.12082267276336622, 0.09969613649990838, 0.12623493438841216, 0.09935558668899103, 0.06264947135572851, 0.12375401005918996, 0.10246797933670748, 0.09518063001321475, 0.08139547312570339, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008064881525059908, 0.03566184876880074, 0.010789548076318933, 0.03108535497134779, 0.03852743487751065, 0.03242021049405175, 0.0391797296805797, 0.028399551172815896, 0.04237711897553653, 0.002256717701450306, 0.009792548686643254, 9.999999999998899e-05, 0.034431216572191614, 0.03012299676547814, 9.999999999998899e-05, 0.02669194107059536, 0.007598369263389082, 0.006041562779340204, 0.0613715342415857, 0.049050895618965695, 0.04874792528333205, 0.05357016851326479, 0.058792971166197305, 0.050630343360137164, 0.0639220283623636, 0.057152107512907224, 0.049411080486970294, 0.05991908262116008, 0.008625761044378844, 0.02449508868798944, 0.043905484353156665, 0.028574564015741655, 0.058864550547401806, 0.07981505905967912, 0.013627038384243284, 9.999999999998899e-05, 0.12593496534379678, 0.12152137548457687, 0.038479714656327046, 0.05610543206946861, 0.05378708922852693, 0.00037712890677632505, 0.07332080531550089, 0.11932904404747802, 0.15114332573423594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002018407852288684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07056944059121051, 0.04795555836120691, 0.0796674311859571, 0.0586165692433398, 0.020113798366845903, 0.034209199647683985, 0.0968221589217032, 0.037225761977062066, 0.021246855247939678, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16641905019214354, 0.15366763724050292, 0.17749090274064816, 0.11943457085025544, 0.13136568082432565, 0.1008884862877596, 0.1651715565206694, 0.1263920080534714, 0.13523758919915418, 0.021936983846899794, 0.02463076883909765, 9.999999999998899e-05, 0.022344218574350094, 0.019450615152229567, 0.03393320579867509, 0.030298306790587648, 0.029998004909674636, 0.03562568191440185, 0.12496361746406859, 0.10762298048211483, 0.1569582676580229, 0.13009732064274782, 0.1627703436375234, 0.12327198706140663, 0.19364404274367086, 0.11613590955017594, 0.12597306331996805, 0.14017351110187104, 0.1261213555451246, 0.1322021390801167, 0.1484296240936499, 0.16466461409956923, 0.1360866598484266, 0.14288495639583088, 0.20344633723628514, 0.11045848678389791, 0.07371159033492836, 0.0679878236440411, 0.08533205821443501, 0.09247602808740452, 0.1089057233246804, 0.08949892780728319, 0.07526933237950884, 0.13138692192525725, 0.053872957107809594, 0.14587719133152222, 0.13112769041680006, 0.15451026449050065, 0.1609558501770767, 0.143706577521042, 0.149972619623727, 0.17236478491785379, 0.13735449535011557, 0.15725515761743503, 9.999999999998899e-05, 0.07412755793420744, 0.013853593489783766, 0.11178973286147542, 0.04225662496919835, 0.02347857569214029, 9.999999999998899e-05, 0.1173410800188498, 9.999999999998899e-05, 0.09660113293414907, 0.11130571787393273, 0.10600688921821566, 0.07934087270976375, 0.1385356857208666, 0.10528439704289672, 0.1009492534773564, 0.10928527430207813, 0.15845129175053985, 0.11380359029545273, 0.16005068238887943, 0.087941237412959, 0.07141248833583902, 0.0996734382729404, 0.0914184083913806, 0.10233930486844434, 0.10693478481106244, 0.07389657851832487, 0.1918984294092595, 0.1781087396354294, 0.1941276563459019, 0.19285660144819639, 0.20010680531644331, 0.17809461046629638, 0.1938130830713668, 0.19242083782667196, 0.18158895162213207, 0.05118169229167524, 0.03820601695202752, 0.0533147796576563, 0.04442790430304666, 0.049831790352187655, 0.03781329417642976, 0.047468023968788464, 0.04007330146962362, 0.05027553331895651]}, "mutation_prompt": null}
{"id": "7abf5249-e2be-4966-a838-a0621ab61578", "solution": "import numpy as np\n\nclass AdaptiveDynamicMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.probability = 0.5  # Initial probability\n\n    def __call__(self, func):\n        # Algorithm implementation here\n        pass", "name": "AdaptiveDynamicMetaheuristic", "description": "Designing a Novel Adaptive Dynamic Metaheuristic Algorithm with Dynamic Probability Adjustment for Black Box Optimization.", "configspace": "", "generation": 99, "fitness": 0.0, "feedback": "The algorithm AdaptiveDynamicMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "51ea2ad8-45f1-4353-84a7-d990320e4a38", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
