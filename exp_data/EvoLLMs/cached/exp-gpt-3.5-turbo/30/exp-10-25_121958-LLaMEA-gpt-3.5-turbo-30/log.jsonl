{"id": "a66ce8d4-b02c-4170-8393-555b5db9c100", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "8ab7afe6-792d-4e71-bd05-8b124ea1f2f2", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a66ce8d4-b02c-4170-8393-555b5db9c100", "metadata": {}, "mutation_prompt": null}
{"id": "a5ad0bd4-6ac0-4583-8124-becfe6acfd5d", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a66ce8d4-b02c-4170-8393-555b5db9c100", "metadata": {}, "mutation_prompt": null}
{"id": "b2084772-ef46-47ba-97ac-a90682c09630", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a66ce8d4-b02c-4170-8393-555b5db9c100", "metadata": {}, "mutation_prompt": null}
{"id": "837827eb-b1bc-4c08-8009-986d51393996", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a66ce8d4-b02c-4170-8393-555b5db9c100", "metadata": {}, "mutation_prompt": null}
{"id": "1c4b32c2-a6f1-4ff1-95e7-52644cd11c0a", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a66ce8d4-b02c-4170-8393-555b5db9c100", "metadata": {}, "mutation_prompt": null}
{"id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "HybridPSOLocalSearch", "description": "A novel metaheuristic algorithm that combines particle swarm optimization with local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 6, "fitness": 0.13998587845733074, "feedback": "The algorithm HybridPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "a66ce8d4-b02c-4170-8393-555b5db9c100", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "0f43d744-f196-4722-affb-9fd7f7e23245", "solution": "import numpy as np\n\nclass DynamicHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def local_search(x, local_iter):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n        local_iter = self.max_local_iter\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = local_search(new_position, local_iter)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n                        local_iter = min(local_iter+1, self.max_local_iter)\n\n        return best_solution", "name": "DynamicHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch by introducing dynamic parameter adaptation to improve convergence speed and solution quality.", "configspace": "", "generation": 7, "fitness": 0.13998587845733074, "feedback": "The algorithm DynamicHybridPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "e782b6f2-cd53-4dba-909d-08767489b5a6", "solution": "import numpy as np\n\nclass HybridPSORandomRestartHillClimbing:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def random_restart_hill_climbing(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = random_restart_hill_climbing(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "HybridPSORandomRestartHillClimbing", "description": "A hybrid metaheuristic algorithm integrating Particle Swarm Optimization (PSO) with Random Restart Hill Climbing for enhanced global and local search capabilities.", "configspace": "", "generation": 8, "fitness": 0.13998587845733074, "feedback": "The algorithm HybridPSORandomRestartHillClimbing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "d3768aa1-cec1-453e-8688-18957af3f284", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "HybridPSOLocalSearch", "description": "A novel metaheuristic algorithm that combines particle swarm optimization with local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "d9a5ec84-cb74-46a6-96ba-92c0872601d5", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "HybridPSOLocalSearch", "description": "A novel metaheuristic algorithm that combines particle swarm optimization with local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "6c751442-27cb-4c0d-97ca-885d35359a1b", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "HybridPSOLocalSearch", "description": "A novel metaheuristic algorithm that combines particle swarm optimization with local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "3a1d92a1-480c-4733-9a30-4b4ef070bd37", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "HybridPSOLocalSearch", "description": "A novel metaheuristic algorithm that combines particle swarm optimization with local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "205d0d3b-6405-4053-95ed-f36562aecaf7", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "HybridPSOLocalSearch", "description": "A novel metaheuristic algorithm that combines particle swarm optimization with local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "8ce55705-dc28-4d3f-a97a-8d9df9890dfd", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "HybridPSOLocalSearch", "description": "A novel metaheuristic algorithm that combines particle swarm optimization with local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "49d3312d-cb4d-40d1-b54f-b130255b9ec3", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                perturbation = np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_x = x + perturbation\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                exploration_factor = np.random.uniform(-1, 1, size=self.dim)\n                new_position = swarm[i] + exploration_factor * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Combining Particle Swarm Optimization with Local Search for efficient global and local exploration in optimization problems.", "configspace": "", "generation": 15, "fitness": 0.13998587845733074, "feedback": "The algorithm EnhancedHybridPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "452cf79e-b0ce-4fff-b7ba-b6adc029529b", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "HybridPSOLocalSearch", "description": "A novel metaheuristic algorithm that combines particle swarm optimization with local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "17cd7907-3110-480b-a104-e4dc01136412", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "HybridPSOLocalSearch", "description": "A novel metaheuristic algorithm that combines particle swarm optimization with local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "31e1c681-cdc2-4009-af68-53cb85b5ce9b", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "HybridPSOLocalSearch", "description": "A novel metaheuristic algorithm that combines particle swarm optimization with local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "217b6f50-5d17-4b3b-8bcb-60408085c690", "solution": "import numpy as np\n\nclass HybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "HybridPSOLocalSearch", "description": "A novel metaheuristic algorithm that combines particle swarm optimization with local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3568999019602891, 0.365679324044214, 0.4039522450824993, 0.30022649950149793, 0.27775899010903227, 0.40791502969344484, 0.33677522631397483, 0.377885198075967, 0.2645221323333725, 0.030436407297088075, 0.09892519692501522, 0.04412313142556901, 0.06047249598000526, 0.07720082766150627, 0.03466920528391837, 0.04271406756343421, 0.07993715009172031, 0.0535374944023842, 0.080002827951276, 0.07863560356356025, 0.06227033820999184, 0.08873609202872323, 0.07582850388969142, 0.07230268322617484, 0.09553710952306971, 0.14025848562511223, 0.1133753096958997, 0.09364265428395413, 0.08535137953428018, 0.04372073598844761, 0.08386036378082395, 0.06489525277422858, 0.07666284068365004, 0.05167487532673809, 0.08673126312094215, 0.054836965573250795, 0.13699765930150387, 0.13924008379688824, 0.12525267178331456, 0.1340506014608812, 0.4757890824619535, 0.12757920661342892, 0.20725342054903317, 0.14083514122714058, 0.1924497394802408, 0.1197475099937334, 0.08669876911074659, 0.1176504331327789, 0.14825628246574052, 0.11195392590829056, 0.12320419190025311, 0.15558201856557174, 0.13091745923818743, 0.11295296962835832, 0.19816392637435332, 0.162404684234717, 0.17265304202297227, 0.2351288405314469, 0.1935426837090014, 0.21045420907496593, 0.13724528483183862, 0.196195640246691, 0.24140423665892274, 0.09271455035551968, 0.09426555823777472, 0.04791061234260119, 0.11065857472651319, 0.14527191989772814, 0.08742165428159077, 0.11750187232144071, 0.14224528768007372, 0.07618116972445643, 0.14498518958191364, 0.07038055339329186, 0.1066027421321818, 0.10232768998577868, 0.07918693698331769, 0.10842502422070088, 0.10234832465700872, 0.08887785878909404, 0.12980347781312518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017004255959163106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00317103853170031, 0.08764917723325727, 0.08569821325477822, 0.11923883858620843, 0.06438073454320015, 0.056118234732395966, 0.05005080920195282, 0.08761523942116234, 0.06978339110916021, 0.05585130084376011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009498392198893368, 9.999999999998899e-05, 9.999999999998899e-05, 0.06649341428683497, 0.06346133608895976, 0.06510177692520558, 0.03891202534044136, 0.062078694302987736, 0.059093230887776516, 0.05926169402246373, 0.0878796968297032, 0.04044766894683127, 0.3636453133523361, 0.34259743413942056, 0.31286531974961884, 0.3525121094675945, 0.2978336738500278, 0.30231274176265976, 0.3778258085646998, 0.291300558946896, 0.24577516341040495, 0.08910096592577044, 0.10151228312678717, 0.06628922911673163, 0.08995653175675833, 0.07599737531233841, 0.09202147010750372, 0.07591126733511644, 0.09253041347938229, 0.1323721379806777, 0.1756212576770234, 0.16459833670212043, 0.1496516129119373, 0.1497067704340871, 0.2150391070663049, 0.14603500802407876, 0.17272259521784583, 0.18808541810552415, 0.1417496840784339, 0.19716513815747416, 0.19976403616940264, 0.17337811764751754, 0.26328437290916507, 0.2138514028060623, 0.1848027802533474, 0.1951288658955237, 0.26459691774124083, 0.19527612395191485, 0.1404010288262607, 0.1337940562301312, 0.14080760523763658, 0.14338498491764662, 0.14155242739696716, 0.15687425560015378, 0.15017841737335968, 0.1612103630895042, 0.13058863983303703, 0.21552362137030134, 0.2217258602543809, 0.18163837632317548, 0.2102489229977489, 0.19557463598306235, 0.17481762023391823, 0.18855296232359176, 0.18036720183191368, 0.1839964596819854, 0.16136293968489157, 0.16237040477423925, 0.16240060030626535, 0.1762853635255618, 0.15912714858196286, 0.16988642076175908, 0.17721024255257745, 0.16260869048500626, 0.15848475857977284, 0.212586482516388, 0.1258877791323917, 0.17874342017327927, 0.43652140848481236, 0.18426305664469367, 0.18082180229112432, 0.13283360943007572, 0.15892470007611503, 0.2815755460079107, 0.322711767298954, 0.14836676055749798, 0.15356586904989977, 0.3096334267641849, 0.11125758045528822, 0.14651029425438322, 0.14927038823896, 0.13872024128759786, 0.20399918663214833, 0.18120928900338773, 0.20101976626703988, 0.20393670102661055, 0.17508284990612955, 0.18421678670375763, 0.17733775413607877, 0.19081100407297857, 0.17848067136084445, 0.19441746397602422, 0.07024618092351087, 0.07597724516129511, 0.06923301835635065, 0.07867676431690784, 0.0711609614826697, 0.060201949964622914, 0.07534198746118148, 0.08384666075152925, 0.07136089050663119]}, "mutation_prompt": null}
{"id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 20, "fitness": 0.14605675269311807, "feedback": "The algorithm EnhancedHybridPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.10.", "error": "", "parent_id": "3f53060a-b9fa-40a1-8a41-8b90fa9e23f4", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "9f74125b-e18d-4862-bfde-86ca71ec7dbc", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "154a1c97-9191-4933-935d-c8b06bcd0791", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "7adc5ddd-e941-4e7c-9fea-06688258610a", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "b393fe37-7cd4-4fda-9108-daea50ad545d", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "43b5933f-0f21-480f-9948-12def4b9341f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "891085fa-2d5a-4a71-9d58-ab3a0996edab", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "06e7797b-60d9-44d2-8d66-71f86aa8e4a7", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "1b1a1fc8-96ca-4697-98fd-443bb8955a7f", "solution": "import numpy as np\n\nclass DifferentialEvolutionLocalSearch:\n    def __init__(self, budget, dim, population_size=50, differential_weight=0.5, crossover_prob=0.9, local_search_iter=5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.differential_weight = differential_weight\n        self.crossover_prob = crossover_prob\n        self.local_search_iter = local_search_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.local_search_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        population_fitness = np.array([func(p) for p in population])\n        best_idx = np.argmin(population_fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget // self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = population[i] + self.differential_weight * (a - b)\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n\n                trial = np.clip(trial, -5.0, 5.0)\n                \n                trial = local_search(trial)\n                trial_fitness = func(trial)\n\n                if trial_fitness < population_fitness[i]:\n                    population[i] = trial\n                    population_fitness[i] = trial_fitness\n\n                    if trial_fitness < func(best_solution):\n                        best_solution = trial\n\n        return best_solution", "name": "DifferentialEvolutionLocalSearch", "description": "Improving population diversity through dynamic exploration and exploitation balance using Differential Evolution with Local Search.", "configspace": "", "generation": 28, "fitness": 0.09879262696080499, "feedback": "The algorithm DifferentialEvolutionLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.18792305972247958, 0.17837856582097933, 0.15911651903935764, 0.19323895622145004, 0.20781132713727812, 0.18620070426535995, 0.17005325173622787, 0.19486432035645385, 0.16982886046231138, 9.999999999998899e-05, 9.999999999998899e-05, 0.010760778746325528, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0046058507300978935, 9.999999999998899e-05, 9.999999999998899e-05, 0.05493761514476936, 0.04629467195145209, 0.05405163417344683, 0.04879787129347535, 0.05107080289140775, 0.04627147908277052, 0.04687765705077673, 0.046002996107973426, 0.049770767877805544, 0.03740404107117323, 0.035813910829677664, 0.04216786109586845, 0.051086045129803415, 0.029032961295827775, 0.029746884351416925, 0.049860713132338974, 0.0361829260211467, 0.035163428679446995, 0.16975755954607574, 0.15854693709560486, 0.17890753066234777, 0.1517257692794447, 0.11300775163280974, 0.29081948394038126, 0.3594898771074678, 0.2531980276849044, 0.6482862384843007, 0.08437804484406008, 0.06309052452619723, 0.0700766461820791, 0.08504745434725136, 0.05640009021161385, 0.10284660969469261, 0.07151672452848379, 0.0634095751875513, 0.061088672250567466, 0.13067253143864377, 0.14176100479106712, 0.17257991666624106, 0.11461108628801253, 0.12961760663007538, 0.15205278434313008, 0.12105437551562859, 0.12866945810545438, 0.13663663731632625, 0.01071268263698455, 0.008537142283267851, 0.020827947631648525, 0.015361550204700647, 0.024405483562911057, 0.01496803187473994, 0.008626702631516103, 0.00519931505189819, 0.011460072350155337, 0.05158266599505912, 0.031994640153894416, 0.017777562803428237, 0.013747396633334907, 0.009684647472674834, 0.008496092924250465, 0.0068618503969885, 0.020668656447872524, 0.03344922512515003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08360685836928572, 0.10763148072085638, 0.07165815289281963, 0.11150653394248689, 0.051605553024490436, 0.06504944754748487, 0.08427964072917615, 0.05118877738456307, 0.07283801740970319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025679860318499337, 0.0026920827055731955, 0.0126315944513683, 0.00022207485234826407, 0.00019483691448007878, 0.007280708127040958, 0.004166740993682638, 0.0006269742099626052, 0.009415084186517597, 0.2004608614858937, 0.2393791192849125, 0.19778640496620903, 0.19550767751848253, 0.1914975004109979, 0.207583851775052, 0.20435952913489885, 0.20029988961358047, 0.1914294274455346, 0.04949996750187724, 0.04405319973157418, 0.058072409899736166, 0.06428253054823474, 0.04841169538078194, 0.04793159501001587, 0.055055369874285276, 0.04524944865272429, 0.048151946181056116, 0.12865595768614002, 0.11758756395309489, 0.126354366530102, 0.13232477714732793, 0.13827677533475258, 0.14146345943327143, 0.17873277705178736, 0.13243522004383834, 0.11593226706767801, 0.15809109389415354, 0.14078790833422172, 0.17238429313498016, 0.16760869220095043, 0.15729436642407868, 0.16945093811268486, 0.15571039283732369, 0.174538439395038, 0.15521157846650235, 0.12523889076765427, 0.09151997169644166, 0.11206127921536901, 0.11650987429121684, 0.10718218774929877, 0.14305208817994974, 0.11844504963750513, 0.11886753476233392, 0.105793023928903, 0.15581844403317302, 0.1683854463678397, 0.17509079747161782, 0.16783482629453284, 0.1715447729461963, 0.18211379192198818, 0.17201947345950663, 0.17540688822877182, 0.1780428528528526, 0.1411541157869597, 0.1446197991671917, 0.1436722625950244, 0.15186987298672971, 0.1366076873497546, 0.12723134638523792, 0.1484271302962883, 0.13250168140624097, 0.15001666127000446, 0.13118597416943323, 0.1528964842386742, 0.18231646043294203, 0.17070787035634782, 0.14572121056837384, 0.15441427281780107, 0.1515713587751507, 0.13542325195086669, 0.1883872405626379, 0.1308472660968253, 0.13824309906721033, 0.1485475336911477, 0.09706923979159077, 0.1996929301879693, 0.1456569210884331, 0.10495819897601066, 0.1334629489523984, 0.11250571042110569, 0.17178420689142126, 0.20204165880518443, 0.185210041161181, 0.17757179406667944, 0.20568507999504893, 0.17851642303388293, 0.1800747196617415, 0.19280579443380608, 0.1814223677313067, 0.054251092680473234, 0.05219225238539038, 0.06163756311819779, 0.06244491387407347, 0.0542652374067899, 0.05865448918784588, 0.057882032002219086, 0.05326503283105155, 0.054424119216832656]}, "mutation_prompt": null}
{"id": "f5d7aa4a-2175-40a0-b2f5-8aef78cb4ca0", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "d82c2b8d-ac56-4272-b7dd-942fbd20d90d", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "612bc3b2-58e5-4cd9-90f4-75e6b4fd8d74", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "bdd8a9cd-e754-4003-8547-4141b3cbf2a0", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "2a5615ce-17aa-4a80-a73c-f2192fd92a48", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "a23282e4-b7be-4446-bf38-e281be3ebecc", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "1d957a63-319b-4691-a9d2-adfa7fa3e1e0", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "5ed07f8f-5ff6-4686-a819-c1c0e5b381d3", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "8429573e-57c5-4380-bc85-5180998833bb", "solution": "import numpy as np\n\nclass ADELS:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_factor=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_factor = adaptive_factor\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n                    if np.random.rand() < self.adaptive_factor:\n                        self.mutation_rate *= np.random.uniform(0.9, 1.1)\n\n        return best_solution", "name": "ADELS", "description": "Introducing Adaptive Differential Evolution with Local Search (ADELS) for enhanced global optimization through adaptive mutation control and local refinement.", "configspace": "", "generation": 37, "fitness": 0.14045854561105423, "feedback": "The algorithm ADELS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.10.", "error": "", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.37706226170883494, 0.36517793984332425, 0.3749676176795542, 0.35445071266185146, 0.1780617241084803, 0.3226914141744034, 0.36482105457299596, 0.41103713479941184, 0.28591233095339674, 0.04816440022409152, 0.04809097882145219, 0.05935984246691495, 0.07022457802941084, 0.11312517613125606, 0.007393318572784802, 0.04761538452883485, 0.09263404462109559, 0.08619155023132119, 0.08736632652671905, 0.09816470662141297, 0.07953782658505137, 0.11162724130890789, 0.10843784344905127, 0.12261088841403434, 0.08857717890310446, 0.07999927902208803, 0.06602625310477528, 0.08603419020767034, 0.07936788416633611, 0.05961266093352313, 0.08220716249333004, 0.08727372389683297, 0.06669429180835273, 0.08714083602133393, 0.057227699159583034, 0.04058264793463817, 0.46790716913517627, 0.3892460749054528, 0.10338590677820447, 0.13794796544422439, 0.4748819808987216, 0.148366746007091, 0.4059659766467528, 0.37233559841565367, 0.1309561177234596, 0.10068566655443922, 0.10254822117214113, 0.09219330131049952, 0.10468549232253588, 0.0708757712570266, 0.10319551546729944, 0.08653694249351951, 0.12590310204786803, 0.07047081183873383, 0.1877468807663767, 0.11641575013209882, 0.14681968178914195, 0.1851386036656214, 0.24045734774657224, 0.16398340652978172, 0.16451643530887228, 0.17414629449832886, 0.1652209003175179, 0.13846525182838942, 0.09653377647165506, 0.0953426073864122, 0.10206613826907363, 0.05171079927873412, 0.12484640681110959, 0.13881797201027135, 0.08577089574728436, 0.11192167934328467, 0.12608945373536096, 0.07779598790063702, 0.10917837695665489, 0.1015464754328228, 0.02833044733290646, 0.108327912635246, 0.0985654431895111, 0.1575140454119648, 0.12706812261670763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00039474540611406095, 0.0010948709779317056, 9.999999999998899e-05, 0.0963589588996665, 0.04503649585409608, 0.08911895838431116, 0.07481413407195081, 0.05657693429652044, 0.046825997895466376, 0.09480188342673723, 0.07838938150799435, 0.1026713488391211, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029008321809941284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010696117373513503, 9.999999999998899e-05, 9.999999999998899e-05, 0.06855948457520267, 0.08207325194982495, 0.05041947257927426, 0.042643106489282046, 0.029671879794365252, 0.053077629700691964, 0.04414784975548103, 0.08928917940516345, 0.04020370656884775, 0.3379076068470016, 0.31646946392988995, 0.37456015851270874, 0.2997337185321758, 0.3402811699223981, 0.26924415272609403, 0.3767805750220695, 0.28212456768939764, 0.34886420029235443, 0.04963950978750875, 0.06852236957237368, 0.06366622010811884, 0.07880539267972886, 0.05609483995305187, 0.08120571246463792, 0.08373042777450534, 0.08266940303724446, 0.08642523840773197, 0.11387752899378556, 0.1537055432075033, 0.16091682254751993, 0.13792311605133722, 0.176927239696811, 0.17577570998835912, 0.20322626858937898, 0.14621905104355537, 0.13884370136329416, 0.18879647431234747, 0.19949196878387432, 0.234825736318639, 0.19642504328416932, 0.24182371819682802, 0.21759285980101817, 0.194667172841822, 0.2308403175867626, 0.17557933990486219, 0.13904953241893037, 0.14675330951176346, 0.09143066673556277, 0.19047889275777197, 0.16266531976797705, 0.15157218912646164, 0.15979643649331643, 0.17399348590885289, 0.1701576921781267, 0.19014701295297998, 0.21177123355850547, 0.18328264158257213, 0.18200759631106556, 0.189769286569205, 0.2296411632922034, 0.1905583919242012, 0.1902863989111706, 0.18817958925820943, 0.16855666516189272, 0.14323643545315168, 0.1636755472732513, 0.17794047416073955, 0.16900270206224355, 0.17253957479232718, 0.16853995478199324, 0.1731672069433302, 0.17752433244640886, 0.16194354188637716, 0.13748067651903206, 0.13768160672914764, 0.14805666855545008, 0.18273199931428474, 0.39240576585669085, 0.15749088332821193, 0.1589330748058181, 0.142325831682944, 0.31794158127510397, 0.14774709669177177, 0.3290484155631077, 0.20103395467253826, 0.17369234087088403, 0.15034392991641854, 0.09579549678078714, 0.12034767359651888, 0.11654847861911877, 0.190742890994674, 0.17939321638350847, 0.18375327158582266, 0.1883302873097189, 0.18415031537953186, 0.17481777542205323, 0.18180285628577963, 0.18746875571323884, 0.1796665329541407, 0.08238732664699622, 0.07047223555269722, 0.0696929913148957, 0.07591946709780117, 0.08415218959068549, 0.07571570278127004, 0.06876676042952967, 0.06966566196404311, 0.0716307476622009]}, "mutation_prompt": null}
{"id": "342a1d0d-66eb-455d-895b-408f72398f9e", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "0f1b6ffd-31ec-4e08-9fc5-08b3d17d96ea", "solution": "import numpy as np\n\nclass CustomMetaheuristicAlgorithm:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "CustomMetaheuristicAlgorithm", "description": "Hybridizing Differential Evolution with Local Search and Adaptive Mutation for Enhanced Exploration and Exploitation in Black Box Optimization.", "configspace": "", "generation": 39, "fitness": 0.14605675269311807, "feedback": "The algorithm CustomMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.10.", "error": "", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "858b0b85-289b-44f6-9f9a-e0361cbba91a", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "98d928f0-8173-4e0a-a650-06fffe805bf6", "solution": "import numpy as np\n\nclass ADELS:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adapt_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n        mutation_rates = np.full(self.n_particles, self.mutation_rate)\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < mutation_rates[i]:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n                    mutation_rates[i] *= (1 - self.adapt_rate) + self.adapt_rate * np.random.rand()\n\n        return best_solution", "name": "ADELS", "description": "Introducing Adaptive Differential Evolution with Local Search (ADELS) to enhance exploration and exploitation balance by dynamically adjusting mutation rates and incorporating local search for improved performance in black box optimization.", "configspace": "", "generation": 41, "fitness": 0.13841673698439436, "feedback": "The algorithm ADELS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.375363765106303, 0.3446454837170554, 0.3789219916417983, 0.37425160670363666, 0.30592854580349993, 0.3758196565183184, 0.33818706320635306, 0.3374058140388124, 0.3520981686381828, 0.08897006054554424, 0.059257555727900035, 0.06409938521222702, 0.05211471849537097, 0.034925539334242806, 0.07120602922425845, 0.02864150286044309, 0.05846354707021417, 0.09699921333947037, 0.08694357444125833, 0.09604823331713652, 0.10534309689284016, 0.09978102326437288, 0.07467719575956666, 0.08597991869963972, 0.08820584393776987, 0.11474593357143115, 0.09829555004619672, 0.09357630100175396, 0.05962888744570771, 0.06756833209123703, 0.07926061014673558, 0.06602178779811874, 0.05712591397114697, 0.07914192570770917, 0.08578095796529428, 0.03512189672695476, 0.14917408814189625, 0.3712964678162368, 0.12823518248164834, 0.2922398024728071, 0.25142051413064204, 0.14620919883189054, 0.3789063284766818, 0.17600613698241463, 0.15947696400423406, 0.12467724652438006, 0.1486661767454992, 0.12043813594544028, 0.13442953246075617, 0.12085627679508049, 0.12598012994013574, 0.0860841075481078, 0.11949522589106432, 0.07732320378245583, 0.2024278832553218, 0.09577116300510113, 0.15448422917820714, 0.2279390073364005, 0.22619429313270156, 0.20318800304640094, 0.18669214716508598, 0.17278220363310104, 0.13686787084825314, 0.15864315807225193, 0.11867773616854649, 0.13367259153791589, 0.09253272180965455, 0.03393758416634374, 0.10433357646683672, 0.11209801643127104, 0.08233886807731416, 0.09630101416461401, 0.15001612140942855, 0.06850504383582123, 0.06398568577350638, 0.13316559790914284, 0.026822941642926534, 0.12044611621732915, 0.10559352788049925, 0.06656156386258194, 0.02522605418299606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001981811965321434, 9.999999999998899e-05, 0.06768302397702297, 0.07479913482994649, 0.09868001868124177, 0.07369653567594991, 0.06979322006917132, 0.04702757848602601, 0.1320051038617015, 0.07157801245514328, 0.10704914105619279, 9.999999999998899e-05, 0.0007132668946582266, 0.0016309277410713197, 0.0033005912113328595, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008118225175614002, 9.999999999998899e-05, 0.0005731686127470326, 0.041682169877893416, 0.05310792072234849, 0.052511044821573205, 0.0621491734905496, 0.013549471907252308, 0.05084089883339815, 0.034289507108873685, 0.06957377310148638, 0.0376048773655675, 0.31723572446174386, 0.33625866423063855, 0.3737979698321957, 0.3157196067759295, 0.27301559605256176, 0.3239772707667916, 0.3761411812873955, 0.3085394558179154, 0.343951252105805, 0.07384975691407059, 0.07249873448425692, 0.03377373385714255, 0.07345719753121427, 0.060323692485754865, 0.08355615462953214, 0.08715948139927188, 0.08618294505154156, 0.07810376122150886, 0.13544825552713224, 0.15780266989582759, 0.17029246927311525, 0.13554615100868161, 0.1820302368318889, 0.18686046875925488, 0.2117307554408806, 0.12298833829989764, 0.13501041803979863, 0.18332945776988274, 0.19562310336716981, 0.18654674062692478, 0.21982593784503401, 0.16117210188837616, 0.24243227485388175, 0.21161061500285183, 0.24279513607773573, 0.17144246487850745, 0.11774990217360137, 0.15974280610406555, 0.1492536509746043, 0.13862070712434338, 0.18062823745638124, 0.18565820690644608, 0.13913605385398986, 0.15400303257884518, 0.15984208685816592, 0.20539326497534172, 0.20004076325310338, 0.19305610738593337, 0.1990464168122359, 0.18673018166997957, 0.1779661255218321, 0.24130017653545333, 0.17404706981227025, 0.1990707004642026, 0.17077141960134323, 0.1472844180698536, 0.1779379425321127, 0.1564505431712978, 0.18029670123738362, 0.15581720071649852, 0.1764946222051138, 0.16014315081581632, 0.1622538128727783, 0.1476055449192949, 0.12149084697750567, 0.19143325237646636, 0.1370291494594117, 0.23520849118600784, 0.32074367249314495, 0.11015790661289993, 0.16069765983493467, 0.3259826380932451, 0.37382027467248946, 0.1432141129562522, 0.1492084226774758, 0.11475306682449848, 0.18756370912172737, 0.14399972913404313, 0.18312147950516278, 0.1794691998841661, 0.10671549669583213, 0.1860036527262191, 0.1788032541297745, 0.17475407701385248, 0.16888235098468407, 0.1784060536001444, 0.17332294216859678, 0.19324817618697399, 0.17688972915022683, 0.18485683201180125, 0.0807427694493259, 0.07925497494247613, 0.06053527678401183, 0.07382635175772534, 0.07888601413579677, 0.06948436652665935, 0.06969387384548575, 0.0683402122839738, 0.06438991788712523]}, "mutation_prompt": null}
{"id": "71746e31-5e15-4661-8180-dbe9dc730079", "solution": "import numpy as np\n\nclass ADELS:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n                if np.random.rand() < 0.3:\n                    # Adaptive mutation rate adjustment\n                    self.mutation_rate = max(0.05, min(0.5, self.mutation_rate + np.random.normal(0, 0.1)))\n\n        return best_solution", "name": "ADELS", "description": "Introducing Adaptive Differential Evolution with Local Search (ADELS) to enhance exploration and exploitation balance by dynamically adjusting mutation rates and incorporating local search.", "configspace": "", "generation": 42, "fitness": 0.1424097091877292, "feedback": "The algorithm ADELS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.10.", "error": "", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3417995057404706, 0.31911797937449804, 0.3384303582105409, 0.2490219306160809, 0.30697189414944526, 0.35487454451411693, 0.27709517680630935, 0.31644508337518884, 0.28780561000013516, 0.03741477773434032, 0.061458182753350465, 0.05639652578832499, 0.01768061215916894, 0.0596801444667866, 0.0818550457333731, 0.008030642258488263, 0.04495855867799159, 0.06300444961426088, 0.08691113613503254, 0.08885769104588404, 0.057677621769298804, 0.09400227822016605, 0.08910938861832707, 0.08766406493534573, 0.07986179951816552, 0.0973232239503744, 0.07994547200216162, 0.07411519009553702, 0.09390554725994138, 0.055112027231002836, 0.0748071986639548, 0.04817241256243865, 0.0853580485872577, 0.08438628174451102, 0.0646133188979946, 0.0815631652308152, 0.43449830049849203, 0.4319551183393593, 0.14845729131321694, 0.2351917666281208, 0.22497532536360332, 0.33430358898040224, 0.20710337245161403, 0.20843028703985533, 0.24280871917109548, 0.14191714098289698, 0.10784006173291405, 0.1541272320184689, 0.09875558824896635, 0.0876490980978133, 0.11476705435308454, 0.1324580135773935, 0.10693402957914844, 0.11965450451895066, 0.17957840882126785, 0.23435083110059995, 0.14115012513184488, 0.2507590087017434, 0.20419626420678694, 0.2121920249475484, 0.13524875715065954, 0.23938013336683173, 0.15466352056101118, 0.10156975180791872, 0.07993375683797277, 0.1184148555593516, 0.10418510423856353, 0.07117109933080779, 0.07885650759622187, 0.1714441924995912, 0.104814010762324, 0.11753799130765052, 0.1035150443146966, 0.06751879154880991, 0.09789248431772335, 0.08100183628983104, 0.10585084705971126, 0.08449465701280201, 0.15371715098169936, 0.03242320433343027, 0.07441775702601372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004748045360649877, 9.999999999998899e-05, 0.00123630364605265, 9.999999999998899e-05, 9.999999999998899e-05, 0.0746982678475262, 0.07558049720459425, 0.07541430094424217, 0.06817660432400063, 0.10028426310219607, 0.07339952940300265, 0.09828771885328824, 0.06656005124392561, 0.09114886975857894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002715908243737797, 9.999999999998899e-05, 9.999999999998899e-05, 0.07540477588355243, 0.0654568781457312, 0.08039979165374056, 0.05923489838516982, 0.061361181675239296, 0.07151325666395114, 0.03405921872303219, 0.06559870602556617, 0.0529442916953089, 0.34152904326661204, 0.2915461919331095, 0.3105845109418388, 0.3116012681448419, 0.2831449163229731, 0.3569309334458025, 0.33828592583829153, 0.30921840915954746, 0.29817923929297274, 0.05257160446143849, 0.06739064044776444, 0.08112972636324378, 0.06897349902864591, 0.06767278946061384, 0.07709389349155205, 0.06389285304883796, 0.08993078064909676, 0.08785998029876096, 0.18473822073012802, 0.14151354328848953, 0.1836780955852626, 0.19581917079574507, 0.17822150973499196, 0.13122894996563483, 0.18450043640339042, 0.17612542730856473, 0.15545405932074896, 0.1486934535543447, 0.18634029966365884, 0.21088439604900722, 0.21074938041886393, 0.2207821401718707, 0.2233651081596152, 0.187234395208161, 0.25718745680914923, 0.20526093273323265, 0.11188525872259691, 0.19701914242673746, 0.1357850590612223, 0.1706258877749951, 0.1635197046577641, 0.18676517621622601, 0.13931993056232317, 0.17378111588905487, 0.14970485320046678, 0.19882176581053457, 0.20266093816700903, 0.1850383663277415, 0.19757824635872756, 0.1913355214374205, 0.22990924843639737, 0.17977099824648324, 0.19558540580786965, 0.19409175719094596, 0.17059791830950344, 0.16771366332407212, 0.17602599497657123, 0.16339421207512783, 0.1788404279217224, 0.14989748052907326, 0.15981217497018496, 0.1810722181440706, 0.1578519996408264, 0.1297979035465172, 0.15436823650850295, 0.13880642660061115, 0.33612747264981, 0.2511096063473559, 0.3903224691802356, 0.3804329393848318, 0.15819353826147398, 0.16230722020378796, 0.3497375323473507, 0.1916402773276087, 0.43148200621402943, 0.1629710573220574, 0.1594606324615182, 0.1344315838744493, 0.14541078838274402, 0.13223593306630277, 0.09464126981788012, 0.18981377847827974, 0.17747111183439424, 0.18297214239552184, 0.18041546038872913, 0.1806609617852991, 0.1798512336083934, 0.19555948184896088, 0.187949971916746, 0.1860515328765645, 0.07126605082328619, 0.06992872021094332, 0.06483474849166027, 0.06904531542789316, 0.06512703862896829, 0.07574935488786982, 0.0705668508256877, 0.06988350896077444, 0.07734484046638168]}, "mutation_prompt": null}
{"id": "e9d0bc46-5cc4-47a6-88e7-e40269db2b70", "solution": "import numpy as np\n\nclass ADELS:\n    def __init__(self, budget, dim, n_individuals=50, max_local_iter=15, mutation_rate=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.n_individuals = n_individuals\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.05, 0.05, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.n_individuals, self.dim))\n        population_fitness = np.array([func(p) for p in population])\n        best_idx = np.argmin(population_fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget // self.n_individuals):\n            for i in range(self.n_individuals):\n                new_position = population[i] + np.random.uniform(-0.5, 0.5, size=self.dim) * (best_solution - population[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.3, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < population_fitness[i]:\n                    population[i] = new_position\n                    population_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "ADELS", "description": "Introducing Adaptive Differential Evolution with Local Search (ADELS) for enhanced exploration-exploitation balance in black box optimization.", "configspace": "", "generation": 43, "fitness": 0.0801546830831972, "feedback": "The algorithm ADELS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.15098033191769722, 0.13527047881102883, 0.1630955721557491, 0.10847324230724664, 0.14796837250226869, 0.1533587414488211, 0.14505237822750028, 0.12877256724348918, 0.11366330427936921, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04045349558589717, 0.044665332386601975, 0.05969913824579276, 0.05584055102647856, 0.037376601635380924, 0.03767679148186032, 0.036782768435961954, 0.0832983780088814, 0.04386008332872571, 0.04176897305428007, 0.025288491191329365, 0.03743847754439833, 0.04904170710523792, 0.029806760497459672, 0.030282753896917702, 0.04296945573554367, 0.06862227334069826, 0.024506961679800043, 0.06898502277820828, 0.0611133612417285, 0.056864481780625864, 0.0764722346252864, 0.051960678490851064, 0.05079174876850101, 0.07581489194163737, 0.0563073377021317, 0.06277409226040942, 0.07032650187266076, 0.03435117914594088, 0.041529390363900576, 0.07842599319072119, 0.030822887423341716, 0.0421399707875697, 0.02931469423121158, 0.04982081831904639, 9.999999999998899e-05, 0.12238162653203832, 0.11282241538587168, 0.10408746380448597, 0.13931891909797467, 0.14196031755755756, 0.06221872451292598, 0.06729467732977024, 0.09267182559492793, 0.07894286331192468, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029088984461795864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003427411051963869, 9.999999999998899e-05, 9.999999999998899e-05, 0.009597127677181239, 9.999999999998899e-05, 0.008631101791449547, 0.0007700790414648662, 9.999999999998899e-05, 0.015497973248542296, 0.012896716044715872, 0.0038267355182499685, 0.0018924913513079789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13393026809106923, 0.05261971663763432, 0.09383116793770918, 0.056006756175660866, 0.048720890157905705, 0.028827139624233444, 0.044595050333110176, 0.05501078859473074, 0.04163404495481404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003082337010288372, 9.999999999998899e-05, 9.999999999998899e-05, 0.006078341467529724, 0.15685260178045024, 0.17290378663287487, 0.16956465675156474, 0.1730609742864111, 0.13949776857565066, 0.16073214183637896, 0.21602687924203257, 0.1424677594518471, 0.18054530102019783, 0.039354995976496276, 0.020310768238672394, 0.044423358582832195, 0.044845913388694814, 0.01634381292937126, 0.057453558749665734, 0.055733297232448575, 0.0528759848050846, 0.06296495935912294, 0.1246445123791855, 0.16697756668943697, 0.14983224471211398, 0.12458709063965889, 0.13469251935202886, 0.13790196213424932, 0.1348398766089406, 0.13273631772519767, 0.12810968329762762, 0.1312677518570492, 0.14159457237409112, 0.19261764220854316, 0.1699669130073127, 0.14771842633274024, 0.15366669705897562, 0.15538329869918233, 0.1837640610902861, 0.1594111956489851, 0.08988053454418365, 0.08829871207449469, 0.10338343755286517, 0.10055546847082752, 0.0935631898792415, 0.09080335829332287, 0.12218188836847133, 0.11896927505194455, 0.1116155970037318, 0.17425069542788185, 0.17037442255682456, 0.17598212539191305, 0.1912876025924033, 0.1531541747810219, 0.17708675556082576, 0.18499041006562833, 0.1693855199598695, 0.16075048165324424, 0.12149704685263207, 0.12461429003763258, 0.10509872987696378, 0.12939697176134346, 0.12210163141711927, 0.12826341855986334, 0.1478585639729223, 0.05236216069361621, 0.1163937625536342, 0.13129110221871199, 0.1222888671932143, 0.10480783536195581, 0.14716239759973448, 0.15117002006352764, 0.12569863805733406, 0.12057553350519101, 0.14361326819516107, 0.14526008332719686, 0.15993391291942194, 0.19593646264963804, 0.2345465347306216, 0.09039188614581639, 0.09823697864017544, 0.1325229559133273, 0.1307002476893504, 0.1208860264720315, 0.141407105676721, 0.18687632655879516, 0.18708487079320435, 0.18242249382330578, 0.18798104962528894, 0.1762500082349776, 0.18199719062217412, 0.17570648704623748, 0.18993836488886828, 0.1847072554181144, 0.05965002001567843, 0.05735329279875112, 0.06424667190459843, 0.055195751590149666, 0.05977977563280601, 0.07266300580971952, 0.05119850852576091, 0.05995587001350866, 0.06634930767432268]}, "mutation_prompt": null}
{"id": "beb500ab-2b50-42f8-917c-06516506e8f4", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "8721d4b0-49bf-43e4-97ea-fc9ab81f14cb", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "2013e922-c0cb-40eb-9cba-8d9473e7dabd", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "7d4a8d34-a9bd-4465-b47d-5391392355cd", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "70d02e38-df5e-4f02-938f-a6c5c818e29f", "solution": "import numpy as np\n\nclass AdaptiveDEWithLocalSearch:\n    def __init__(self, budget, dim, pop_size=50, mutation_factor=0.8, crossover_prob=0.9, local_search_iter=5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.mutation_factor = mutation_factor\n        self.crossover_prob = crossover_prob\n        self.local_search_iter = local_search_iter\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.local_search_iter):\n                new_x = x + np.random.normal(0, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n        population_fitness = np.array([func(p) for p in population])\n        best_idx = np.argmin(population_fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget // self.pop_size):\n            for i in range(self.pop_size):\n                target = population[i]\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), -5.0, 5.0)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover_mask, mutant, target)\n\n                trial = local_search(trial)\n                trial_fitness = func(trial)\n\n                if trial_fitness < population_fitness[i]:\n                    population[i] = trial\n                    population_fitness[i] = trial_fitness\n\n                    if trial_fitness < func(best_solution):\n                        best_solution = trial\n\n        return best_solution", "name": "AdaptiveDEWithLocalSearch", "description": "Introducing Adaptive Differential Evolution with Local Search - a hybrid optimization algorithm combining Differential Evolution with adaptive strategies and local search for enhanced exploration-exploitation balance.", "configspace": "", "generation": 48, "fitness": 0.12093702114072281, "feedback": "The algorithm AdaptiveDEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.13.", "error": "", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.19969721026765463, 0.22814531234371338, 0.2083785600182516, 0.23818085803615663, 0.24069597524977082, 0.26374162296615045, 0.24393175123404431, 0.21520969550256597, 0.23463463119117345, 0.01454824132677568, 0.026238563215433164, 0.01727340005882738, 0.013989983014803697, 0.021993413628504266, 0.010552037520609181, 0.01790616081829899, 0.012752935239693564, 0.010694544568351394, 0.05288495045342656, 0.04728636044821344, 0.06089826296528755, 0.05348256336026447, 0.05374946746975695, 0.07408724471162709, 0.06724468601742306, 0.06143485519872871, 0.06984744184561464, 0.04125437414837274, 0.0481139948859749, 0.04673480511930772, 0.05524142227927531, 0.04149205203576711, 0.041590619546751806, 0.052364861016848785, 0.03397490247693369, 0.04338421713674556, 0.6252603417449754, 0.8293989426838566, 0.63160952717649, 0.5833501636097624, 0.6193736478447567, 0.6726727985658738, 0.658943379216077, 0.6735732964723262, 0.7357769954941662, 0.09264798177544997, 0.07157257222424673, 0.0738554599339073, 0.08504578639386906, 0.05098445049705802, 0.09659680924809422, 0.10001135082048662, 0.10032936682655813, 0.09357329007596671, 0.17318013021801903, 0.13951458778051107, 0.14433918794000788, 0.14408711126523344, 0.1527802707505218, 0.14236146409386308, 0.13027302546980313, 0.15493773717915227, 0.15413558937956418, 0.031958241393978626, 0.013092506315761754, 0.015563026024874804, 0.02280692405096474, 0.014985912503242771, 0.030706448206500703, 0.03303028234649519, 0.012149692351363095, 0.03040880291348036, 0.06781996433918225, 0.05806157170061654, 0.035842901821392714, 0.024756578650818706, 0.01282344131784885, 0.011129778559307857, 0.044955614904457764, 0.03215970810428226, 0.016323363713426575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004464771108109389, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07308236161487713, 0.07829412816627013, 0.09399043856035294, 0.07466784991610387, 0.06341663577859036, 0.06581542136125429, 0.08025181303562567, 0.09644962744216534, 0.06251133808696219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007865737216407931, 0.023216832604474935, 0.018441813231535376, 0.012871139749585758, 0.007347133091599289, 0.01525456425070626, 0.022987779877618797, 0.03431652502541127, 0.02061797893641193, 0.23698466130625961, 0.21357547834957835, 0.21409725288885706, 0.2190073389295656, 0.22524658941140507, 0.21557095845901308, 0.20251415832298958, 0.21981514728764406, 0.20388693788635115, 0.058775670667593705, 0.07076261217823243, 0.05033969238917557, 0.06994464896700647, 0.05449959089322076, 0.07020870997870476, 0.06561869024487865, 0.058976887789809584, 0.04825489964711638, 0.12992353024363523, 0.16263968807973594, 0.11842175776965747, 0.12553438903983938, 0.12383948160036107, 0.1335087167017498, 0.11247279961661694, 0.13812339829018672, 0.11785003763309487, 0.17636898504864917, 0.17037759917999806, 0.17838256215919723, 0.1588281830093632, 0.17368401585334237, 0.16846911854304303, 0.17959807446014964, 0.18883646724897984, 0.16523070770954051, 0.10567734736625245, 0.11083019760934598, 0.12540017562202388, 0.1299643890355041, 0.11443531014128605, 0.12800486969018277, 0.11253582115483518, 0.12985769520436874, 0.10797589970250299, 0.15714384104865697, 0.14514993915157193, 0.15349714881539622, 0.16825055028170732, 0.16092212266827777, 0.15500923035189862, 0.1694921823988581, 0.1532542701494567, 0.18671334857478328, 0.12416939190319431, 0.0977725396505339, 0.14035413857700552, 0.14716634998956468, 0.11241938354417291, 0.14448586358147897, 0.12196580947754387, 0.13348619727117061, 0.1396875008253592, 0.1502124104332121, 0.1524020797393859, 0.13417253777085447, 0.13849836767153678, 0.14452281989069649, 0.1315883948794011, 0.12766563247684448, 0.15470146538995289, 0.13442195804913026, 0.1264574413954721, 0.15014153790117835, 0.09693143659297132, 0.09934775150627628, 0.0861756428036089, 0.12463212146436686, 0.15520085860859567, 0.15343914484978682, 0.11780471171863338, 0.1853476122325628, 0.185058263458452, 0.1822189487563739, 0.1840862586560852, 0.19035054723152356, 0.19941307018363008, 0.17948334137500843, 0.1932850716338046, 0.18859662619762763, 0.049646293855792445, 0.05309356155561529, 0.06266491361220072, 0.056702397682081074, 0.05351009973980558, 0.0584809967027875, 0.05793925564885827, 0.054572784138354424, 0.05388336875242972]}, "mutation_prompt": null}
{"id": "b03097d2-dbb1-4f8c-b34c-6c009625bc8b", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "72e0474c-ac5f-41ee-9c40-62b502eb6e7b", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "0d608e8a-64a9-49bc-b50d-92561d489b9c", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "c7a60453-7e5e-4d3e-b0db-2845b542880b", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "4f4b2a0b-ff88-4105-ace0-bc2ab439f2b1", "solution": "import numpy as np\n\nclass AdaptiveMutationEnhancedHybridPSOLocalSearch(EnhancedHybridPSOLocalSearch):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10):\n        super().__init__(budget, dim, n_particles, max_local_iter)\n    \n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                mutation_rate = 0.1 + 0.2 * (1 - swarm_fitness[i] / np.max(swarm_fitness))  # Adaptive mutation strategy\n                if np.random.rand() < mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveMutationEnhancedHybridPSOLocalSearch", "description": "Refining EnhancedHybridPSOLocalSearch by introducing a novel adaptive mutation strategy based on individual performance to enhance exploration and exploitation balance.", "configspace": "", "generation": 53, "fitness": 0.1400550145538359, "feedback": "The algorithm AdaptiveMutationEnhancedHybridPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.10.", "error": "", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.37319460408228233, 0.35386294883213987, 0.3954287833479829, 0.2946522889883486, 0.40209242375510124, 0.38412447367386693, 0.2576322081761323, 0.32427633098530684, 0.2940371111847604, 0.018236610084458316, 0.08604872277597986, 0.06474955696672335, 0.019617328914933174, 0.0447008753865894, 0.008291961826564886, 0.0452707210720078, 0.06940947834852673, 0.05641734714569757, 0.06399136278348583, 0.09586664196047545, 0.07277814746148104, 0.08096802903843692, 0.11663642559597953, 0.08626773161211587, 0.0830381075087786, 0.08179590986106955, 0.11086682633958611, 0.07931056425854999, 0.06290215120872822, 0.06880618842274855, 0.09239752776105381, 0.060211665214922494, 0.05087013633539905, 0.09330099945434667, 0.055397870731788146, 0.055347617505024704, 0.33935491422243425, 0.1541177229835663, 0.2068205601215214, 0.2464873066446185, 0.14614005449985012, 0.21450227520699072, 0.49752272825539323, 0.45407369716146784, 0.3087269503335438, 0.08656247130452444, 0.11600701731519514, 0.08440028794949683, 0.18580259464045135, 0.08928596695648061, 0.11207056459785691, 0.18611296714318215, 0.10294374266545725, 0.09626163250378772, 0.2183459601305956, 0.11005464080040961, 0.154962796388171, 0.2781257863744351, 0.16479982975336083, 0.16426485221934983, 0.14660722738737697, 0.1550798558709282, 0.1628969191660823, 0.09846906957510759, 0.11534264193905652, 0.1402826112345983, 0.039287510267060455, 0.10294500905193804, 0.11637523704772812, 0.09085042009720001, 0.09896877766870804, 0.11165450966088175, 0.1466326839680493, 0.10151616661771645, 0.08586268851682943, 0.10231445774905445, 0.07095109675075728, 0.09224078329936625, 0.07850366154429433, 0.10744524300045688, 0.08420788050932737, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009826760381725919, 0.010078230977812241, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002581306032894859, 0.08469787755838065, 0.07055360016814027, 0.09851900075359354, 0.06422316639073689, 0.025331540477459558, 0.0446344924224783, 0.08852196442548721, 0.06840121118162701, 0.0541152668642364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0582648744600166, 0.06186640515164599, 0.0650120126107313, 0.07005646875060234, 0.06831156090413804, 0.041367694514854336, 0.06867444955801816, 0.04036460117975149, 0.05804647967144261, 0.3296922171598776, 0.3405916605584425, 0.3258063120807073, 0.3564536387828863, 0.263533141613871, 0.2853308812975578, 0.31486513732758414, 0.32287116569710295, 0.35239713391543004, 0.0729407146141624, 0.10293392876143348, 0.07946659341155249, 0.10855826210856645, 0.08773052610981436, 0.0921730988912508, 0.07977829853968466, 0.06583943170233253, 0.0663475569831824, 0.13807641945076699, 0.15273221509051071, 0.16398114843603473, 0.1395512292002561, 0.17274665811453072, 0.15076835287148682, 0.19802789097968843, 0.18275839870115096, 0.14595383266233508, 0.13924983555922954, 0.21492727259660738, 0.18935526971469663, 0.243693196780425, 0.1806443867011137, 0.16083750749177106, 0.17740495843176396, 0.2528345819242198, 0.1998290525064612, 0.15134456134993957, 0.17534463687372026, 0.10991087875170147, 0.15177578690682292, 0.1504724927237483, 0.16068016645115857, 0.1658416151605554, 0.17699519573053024, 0.19522224539748545, 0.17680142660281695, 0.1823423552220499, 0.20859107712675662, 0.18780582883534946, 0.1907639526971866, 0.17102271502899036, 0.18663580258521317, 0.1739780828152827, 0.1912950118550879, 0.18307023287123037, 0.13980649365757092, 0.17323361466501352, 0.1654037668320434, 0.1964561098620441, 0.17318700803044618, 0.17213191528709737, 0.1555704317391019, 0.15987611199991048, 0.1296865823695914, 0.1558783155574669, 0.1529955417245581, 0.2793671105016797, 0.16270750888496455, 0.17843130830684018, 0.12155540470638138, 0.16024379847547843, 0.18959489281988173, 0.3571561939126444, 0.14895684131329967, 0.26972256934069305, 0.18157457133894606, 0.17835056586145348, 0.35821366495633467, 0.09432386699485618, 0.11851673590873235, 0.15105776638484092, 0.18835214703036285, 0.20043397604299784, 0.18033492798712691, 0.18525625047749805, 0.20686178904009433, 0.18884760642283382, 0.17263876327731287, 0.20004148217057294, 0.18709746609101807, 0.06411503957545306, 0.060025052191965744, 0.06661198429205484, 0.07531593314448948, 0.08581538012317946, 0.09006790939803411, 0.06804822052117032, 0.0728755198694111, 0.07064061865518811]}, "mutation_prompt": null}
{"id": "da91e156-561d-4d83-b91d-75e8e4ad906b", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "73f7a290-d106-4df7-9e86-f4150b6e3790", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "585cc6bc-6243-48df-96a3-877d95fda507", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "419061d4-b60c-40c6-aec0-c8ecadacd4ef", "solution": "import numpy as np\nfrom cma import CMAEvolutionStrategy\n\nclass DynamicCMALocalSearch:\n    def __init__(self, budget, dim, population_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n\n    def __call__(self, func):\n        es = CMAEvolutionStrategy(0.5 * np.random.randn(self.dim), 0.1, {'popsize': self.population_size})\n        while not es.stop():\n            solutions = es.ask()\n            fitness_values = [func(x) for x in solutions]\n            es.tell(solutions, fitness_values)\n        return es.result[0]", "name": "DynamicCMALocalSearch", "description": "Introducing Dynamic Covariance Matrix Adaptation Evolution Strategy (CMA-ES) for enhancing exploration and exploitation balance in optimization.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'cma'\").", "error": "ModuleNotFoundError(\"No module named 'cma'\")", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {}, "mutation_prompt": null}
{"id": "36d9e3e9-5170-4351-ae0a-4352c5f5cc3f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "205c1381-b273-4124-8afa-774d20539a58", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearch:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-0.1, 0.1, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EnhancedHybridPSOLocalSearch", "description": "Enhancing HybridPSOLocalSearch algorithm by incorporating mutation operators and dynamic parameter adaptation for improved exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3278068329086107, 0.3913708159528667, 0.3963439990040678, 0.31613194849285575, 0.2997839122235445, 0.38651224899607606, 0.32982569663605366, 0.3457968487571563, 0.34725734166098976, 0.0656030055777379, 0.04210610925438196, 0.05493552113400835, 0.07634330550222312, 0.03572508078160663, 0.08839483911587853, 9.999999999998899e-05, 0.012980691343699058, 0.10041620357337377, 0.07725668349151815, 0.09488022725280931, 0.07976206990843471, 0.10422643106228713, 0.08159792564258128, 0.0888240318824679, 0.08218541746733188, 0.10104845539918694, 0.07770811471921657, 0.08262270963599438, 0.0629228135643296, 0.045022234878624334, 0.0888781771701237, 0.06179919626942887, 0.07245775398929521, 0.07239501374043811, 0.06810243758960566, 0.07364165909274656, 0.3009086337947071, 0.25686554011866924, 0.30197140588407256, 0.3633310742624567, 0.48265522910972936, 0.21783870644775838, 0.46118099936773493, 0.2982407867025255, 0.2444645493034221, 0.1644470924648258, 0.12239831863426842, 0.09276355591123497, 0.12030698205327861, 0.1575383385649446, 0.14427073486698938, 0.11688495113009245, 0.10549434576208627, 0.09074469058680656, 0.18666362084802446, 0.18537999521113502, 0.16488011690203908, 0.28728808554434027, 0.28510927973930644, 0.2278842705850932, 0.10419592667819011, 0.1289581028745801, 0.1299540463821286, 0.11021975418326435, 0.10103480797581488, 0.09260907073515368, 0.08184081723475778, 0.07531437028903365, 0.08199333651795915, 0.11802782925435873, 0.08441733152910147, 0.1035734270757297, 0.1174183533092521, 0.11352443055701811, 0.11622933427417736, 0.09228708166803423, 0.19182401039766162, 0.11011200452547998, 0.11821576551754243, 0.0029734594153453253, 0.07913900591497147, 9.999999999998899e-05, 9.999999999998899e-05, 0.004717729748757282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005414712562820112, 9.999999999998899e-05, 0.076642945892064, 0.05358021807801305, 0.11596853141883856, 0.07023612339537155, 0.03730749455052318, 0.052452318534526476, 0.09009896561170028, 0.04712057255582203, 0.06040542348570288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004537672819530103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016597579660446726, 0.06214855148480114, 0.052490693125516574, 0.046560357762692406, 0.05313210166549509, 0.08856622065607045, 0.04624756523958462, 0.03546969671000966, 0.05420800701655515, 0.05564126569325978, 0.35164358303266796, 0.3665582209852408, 0.3739235169764733, 0.2913830567917478, 0.29762740602972515, 0.2977812141475623, 0.37015783631095267, 0.29781284092479365, 0.33727293458231267, 0.07180690261430789, 0.1076262590822269, 0.05981538776961692, 0.07281965713871319, 0.07987485839338204, 0.09318323561527309, 0.0825172798062036, 0.09910607638618207, 0.08247041242150677, 0.1884501145220303, 0.14484450808168603, 0.14609264813977374, 0.14412737978896495, 0.15483427414079365, 0.18005261457754584, 0.21218484677157212, 0.15001432541676296, 0.13547796318596006, 0.17299005668476597, 0.20030294621571287, 0.20222946439373468, 0.2103711651733936, 0.1948963835780837, 0.22580025984970686, 0.1779575800391423, 0.24268850986697676, 0.23539468114229356, 0.1283525886659378, 0.13709826132556957, 0.13218946963609524, 0.13375235369220773, 0.1540025758903215, 0.13328600336471041, 0.18840271105746964, 0.19560854241095427, 0.15102934124535294, 0.18279179131698953, 0.20810197870749703, 0.1837937158446853, 0.18903866019161875, 0.20411972519042976, 0.1929181301949262, 0.2058900913955799, 0.1963822853466215, 0.17831226758853425, 0.15642428030773992, 0.2148386817107938, 0.18020159412156467, 0.19868068352592505, 0.1777026456720805, 0.17523096263004012, 0.1835767908998529, 0.2028106468522305, 0.17229568781320326, 0.1938715676201901, 0.1599352807689971, 0.1367513889125972, 0.29562373872743886, 0.18526934172084752, 0.17521427102891973, 0.1593182663601025, 0.1584058166083172, 0.1913472655152948, 0.3209815312551114, 0.14891017975954457, 0.23948847471021595, 0.3037726935044408, 0.14396843829887407, 0.3573241305249367, 0.2161662701741166, 0.24651157027537762, 0.1271797535566841, 0.1866809417780082, 0.17742846941515122, 0.18873827847628255, 0.18434648011258692, 0.17617284263264754, 0.17449092464063165, 0.17112011658660942, 0.1766613462915142, 0.17935514501207495, 0.06978507335376871, 0.0815516581407092, 0.06429139597915712, 0.07066863081472508, 0.08654712334447145, 0.07732117195952248, 0.09834713048835653, 0.07473280352422973, 0.06786709975810168]}, "mutation_prompt": null}
{"id": "4f7caa40-df39-4de3-9021-71ea998bd835", "solution": "import numpy as np\n\nclass EvolvedHybridPSO:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_rate = adaptive_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EvolvedHybridPSO", "description": "Evolving HybridPSO algorithm by integrating a dynamic adaptive mutation strategy and rule-based parameter adjustment to enhance exploration and exploitation in optimization tasks.", "configspace": "", "generation": 60, "fitness": 0.1678766915882142, "feedback": "The algorithm EvolvedHybridPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.13.", "error": "", "parent_id": "b1a666b1-1c1f-4c2d-aaa1-f29cd5f563c8", "metadata": {"aucs": [0.3362422247336708, 0.3830731216995019, 0.38771597906893573, 0.3414374142069889, 0.37547546274554333, 0.3988307720386821, 0.3722143828824024, 0.37959594438877076, 0.3716414097130445, 0.040093527565164155, 0.0795994465206904, 0.05676355827383628, 0.011872718686716688, 0.022086161830337736, 0.12897935094902857, 0.05532169461128944, 0.04575126320555878, 9.999999999998899e-05, 0.1180215798660823, 0.09479447625780468, 0.07809623914572461, 0.09344029549664268, 0.08042383506888817, 0.09247638819480586, 0.08582183342869953, 0.08897500896922084, 0.10851494223361602, 0.0747419635864135, 0.08255778169617245, 0.073891132329309, 0.07954879338393406, 0.07538374721037466, 0.06715649149496927, 0.05946480558041256, 0.06381496899882422, 0.07752186441539521, 0.6822281086128983, 0.5153993006157054, 0.43762058699790285, 0.24771502558086955, 0.5531996720117711, 0.5319266340103923, 0.6123494790726107, 0.5182138610567407, 0.6482391439880517, 0.21235293994657656, 0.16241600951343538, 0.1566457327566967, 0.16546884043534116, 0.1764002768501568, 0.19546973643424648, 0.1784525441691197, 0.18173144343992576, 0.11396563841365603, 0.2579915134772498, 0.3769397531533, 0.196785541147245, 0.27937297786125814, 0.34278391023257093, 0.2570128162119254, 0.1509861668852196, 0.15775168941056472, 0.1868216986092468, 0.11575441523251684, 0.0872512843248594, 0.11732568894148787, 0.09883523796069182, 0.13432798438918947, 0.10188289307549747, 0.10520070700113215, 0.11465862301074481, 0.11022350366058131, 0.14845495102294026, 0.12572309486479194, 0.12924174384047515, 0.1341405012290794, 0.1185267313821392, 0.11733336779164183, 0.11699996441472416, 0.03112204569728605, 0.09206548135487158, 9.999999999998899e-05, 9.999999999998899e-05, 0.018895953475556282, 9.999999999998899e-05, 0.017630455218337726, 0.007206714862645791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06357951624753189, 0.05082158528635772, 0.09593893270425413, 0.11204926085289613, 0.033100747116108, 0.03666407134599703, 0.11180955074236676, 0.03717322688288527, 0.08464702081063846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026977970104103965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053794181150317866, 0.059515986194732085, 0.07865375900468607, 0.052996603596294656, 0.09547907328247984, 0.07880839946989238, 0.06870720946334163, 0.06861540918546638, 0.058967919367861055, 0.3284678538017535, 0.33944908135453067, 0.39360306343248297, 0.3230549381100033, 0.3360166219238052, 0.32088404990120467, 0.3884824374694047, 0.3077400149052354, 0.33074248151087426, 0.07026716510324071, 0.06720601276455984, 0.06084489196721843, 0.08199222522502081, 0.07013796671697115, 0.07888678520834802, 0.08593346783102807, 0.07285150236698423, 0.08573961659517226, 0.14516933810765076, 0.20357384271206025, 0.15353017120792645, 0.21916130578275272, 0.216470961827104, 0.19280287216097025, 0.17425460694052586, 0.16094120520822985, 0.21820196262808844, 0.2007948735948729, 0.2681623336126363, 0.18930646187294065, 0.24425914975313245, 0.17601403574967045, 0.22041040546024337, 0.18500556876277996, 0.25981253688710004, 0.22362880437387656, 0.14191500334151375, 0.18440329741775885, 0.1506887911852347, 0.16210178384009855, 0.13554646945443616, 0.1746644044921266, 0.16349261807611803, 0.18880904528125209, 0.16433701196965322, 0.2112694891815794, 0.19473898476078644, 0.21041817357781645, 0.18097754238894004, 0.19732069515345163, 0.21180933893293552, 0.17920253952294407, 0.17627842029291263, 0.21406576900109153, 0.16663465506433817, 0.21351680241972648, 0.17900638756427178, 0.19725977986479137, 0.21061982124820544, 0.17030028674487008, 0.18768774598274696, 0.19292833865731773, 0.1641481655347028, 0.1772440554908884, 0.15863581565289442, 0.15294467038298976, 0.25727863861822653, 0.19404763413399084, 0.41964767880638953, 0.1794593623161692, 0.16365896139265645, 0.19392145462114208, 0.3513602124645404, 0.14988785661886117, 0.4553084221331537, 0.36833505355872864, 0.15519240339236262, 0.41642729185134364, 0.17290176574783656, 0.374085342850318, 0.16845846155782496, 0.17561104805440408, 0.17874899682216894, 0.1977178487993353, 0.20637784333155973, 0.17558417805534499, 0.1851993538156499, 0.1819901725804528, 0.20404372840510632, 0.20133509804581373, 0.07645900956670015, 0.06030102531299675, 0.07034650468610748, 0.06869296196937502, 0.08507365186392912, 0.09155755807395094, 0.07388006696787885, 0.06721197793796041, 0.06859408955536506]}, "mutation_prompt": null}
{"id": "b0250de1-c09b-4eff-910e-1a9691f89a3f", "solution": "import numpy as np\n\nclass EvolvedHybridPSO:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_rate = adaptive_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EvolvedHybridPSO", "description": "Evolving HybridPSO algorithm by integrating a dynamic adaptive mutation strategy and rule-based parameter adjustment to enhance exploration and exploitation in optimization tasks.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa40-df39-4de3-9021-71ea998bd835", "metadata": {"aucs": [0.3362422247336708, 0.3830731216995019, 0.38771597906893573, 0.3414374142069889, 0.37547546274554333, 0.3988307720386821, 0.3722143828824024, 0.37959594438877076, 0.3716414097130445, 0.040093527565164155, 0.0795994465206904, 0.05676355827383628, 0.011872718686716688, 0.022086161830337736, 0.12897935094902857, 0.05532169461128944, 0.04575126320555878, 9.999999999998899e-05, 0.1180215798660823, 0.09479447625780468, 0.07809623914572461, 0.09344029549664268, 0.08042383506888817, 0.09247638819480586, 0.08582183342869953, 0.08897500896922084, 0.10851494223361602, 0.0747419635864135, 0.08255778169617245, 0.073891132329309, 0.07954879338393406, 0.07538374721037466, 0.06715649149496927, 0.05946480558041256, 0.06381496899882422, 0.07752186441539521, 0.6822281086128983, 0.5153993006157054, 0.43762058699790285, 0.24771502558086955, 0.5531996720117711, 0.5319266340103923, 0.6123494790726107, 0.5182138610567407, 0.6482391439880517, 0.21235293994657656, 0.16241600951343538, 0.1566457327566967, 0.16546884043534116, 0.1764002768501568, 0.19546973643424648, 0.1784525441691197, 0.18173144343992576, 0.11396563841365603, 0.2579915134772498, 0.3769397531533, 0.196785541147245, 0.27937297786125814, 0.34278391023257093, 0.2570128162119254, 0.1509861668852196, 0.15775168941056472, 0.1868216986092468, 0.11575441523251684, 0.0872512843248594, 0.11732568894148787, 0.09883523796069182, 0.13432798438918947, 0.10188289307549747, 0.10520070700113215, 0.11465862301074481, 0.11022350366058131, 0.14845495102294026, 0.12572309486479194, 0.12924174384047515, 0.1341405012290794, 0.1185267313821392, 0.11733336779164183, 0.11699996441472416, 0.03112204569728605, 0.09206548135487158, 9.999999999998899e-05, 9.999999999998899e-05, 0.018895953475556282, 9.999999999998899e-05, 0.017630455218337726, 0.007206714862645791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06357951624753189, 0.05082158528635772, 0.09593893270425413, 0.11204926085289613, 0.033100747116108, 0.03666407134599703, 0.11180955074236676, 0.03717322688288527, 0.08464702081063846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026977970104103965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053794181150317866, 0.059515986194732085, 0.07865375900468607, 0.052996603596294656, 0.09547907328247984, 0.07880839946989238, 0.06870720946334163, 0.06861540918546638, 0.058967919367861055, 0.3284678538017535, 0.33944908135453067, 0.39360306343248297, 0.3230549381100033, 0.3360166219238052, 0.32088404990120467, 0.3884824374694047, 0.3077400149052354, 0.33074248151087426, 0.07026716510324071, 0.06720601276455984, 0.06084489196721843, 0.08199222522502081, 0.07013796671697115, 0.07888678520834802, 0.08593346783102807, 0.07285150236698423, 0.08573961659517226, 0.14516933810765076, 0.20357384271206025, 0.15353017120792645, 0.21916130578275272, 0.216470961827104, 0.19280287216097025, 0.17425460694052586, 0.16094120520822985, 0.21820196262808844, 0.2007948735948729, 0.2681623336126363, 0.18930646187294065, 0.24425914975313245, 0.17601403574967045, 0.22041040546024337, 0.18500556876277996, 0.25981253688710004, 0.22362880437387656, 0.14191500334151375, 0.18440329741775885, 0.1506887911852347, 0.16210178384009855, 0.13554646945443616, 0.1746644044921266, 0.16349261807611803, 0.18880904528125209, 0.16433701196965322, 0.2112694891815794, 0.19473898476078644, 0.21041817357781645, 0.18097754238894004, 0.19732069515345163, 0.21180933893293552, 0.17920253952294407, 0.17627842029291263, 0.21406576900109153, 0.16663465506433817, 0.21351680241972648, 0.17900638756427178, 0.19725977986479137, 0.21061982124820544, 0.17030028674487008, 0.18768774598274696, 0.19292833865731773, 0.1641481655347028, 0.1772440554908884, 0.15863581565289442, 0.15294467038298976, 0.25727863861822653, 0.19404763413399084, 0.41964767880638953, 0.1794593623161692, 0.16365896139265645, 0.19392145462114208, 0.3513602124645404, 0.14988785661886117, 0.4553084221331537, 0.36833505355872864, 0.15519240339236262, 0.41642729185134364, 0.17290176574783656, 0.374085342850318, 0.16845846155782496, 0.17561104805440408, 0.17874899682216894, 0.1977178487993353, 0.20637784333155973, 0.17558417805534499, 0.1851993538156499, 0.1819901725804528, 0.20404372840510632, 0.20133509804581373, 0.07645900956670015, 0.06030102531299675, 0.07034650468610748, 0.06869296196937502, 0.08507365186392912, 0.09155755807395094, 0.07388006696787885, 0.06721197793796041, 0.06859408955536506]}, "mutation_prompt": null}
{"id": "fff63d2d-226f-4044-a8fe-b7aedba197a3", "solution": "import numpy as np\n\nclass EvolvedHybridPSO:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_rate = adaptive_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EvolvedHybridPSO", "description": "Evolving HybridPSO algorithm by integrating a dynamic adaptive mutation strategy and rule-based parameter adjustment to enhance exploration and exploitation in optimization tasks.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa40-df39-4de3-9021-71ea998bd835", "metadata": {"aucs": [0.3362422247336708, 0.3830731216995019, 0.38771597906893573, 0.3414374142069889, 0.37547546274554333, 0.3988307720386821, 0.3722143828824024, 0.37959594438877076, 0.3716414097130445, 0.040093527565164155, 0.0795994465206904, 0.05676355827383628, 0.011872718686716688, 0.022086161830337736, 0.12897935094902857, 0.05532169461128944, 0.04575126320555878, 9.999999999998899e-05, 0.1180215798660823, 0.09479447625780468, 0.07809623914572461, 0.09344029549664268, 0.08042383506888817, 0.09247638819480586, 0.08582183342869953, 0.08897500896922084, 0.10851494223361602, 0.0747419635864135, 0.08255778169617245, 0.073891132329309, 0.07954879338393406, 0.07538374721037466, 0.06715649149496927, 0.05946480558041256, 0.06381496899882422, 0.07752186441539521, 0.6822281086128983, 0.5153993006157054, 0.43762058699790285, 0.24771502558086955, 0.5531996720117711, 0.5319266340103923, 0.6123494790726107, 0.5182138610567407, 0.6482391439880517, 0.21235293994657656, 0.16241600951343538, 0.1566457327566967, 0.16546884043534116, 0.1764002768501568, 0.19546973643424648, 0.1784525441691197, 0.18173144343992576, 0.11396563841365603, 0.2579915134772498, 0.3769397531533, 0.196785541147245, 0.27937297786125814, 0.34278391023257093, 0.2570128162119254, 0.1509861668852196, 0.15775168941056472, 0.1868216986092468, 0.11575441523251684, 0.0872512843248594, 0.11732568894148787, 0.09883523796069182, 0.13432798438918947, 0.10188289307549747, 0.10520070700113215, 0.11465862301074481, 0.11022350366058131, 0.14845495102294026, 0.12572309486479194, 0.12924174384047515, 0.1341405012290794, 0.1185267313821392, 0.11733336779164183, 0.11699996441472416, 0.03112204569728605, 0.09206548135487158, 9.999999999998899e-05, 9.999999999998899e-05, 0.018895953475556282, 9.999999999998899e-05, 0.017630455218337726, 0.007206714862645791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06357951624753189, 0.05082158528635772, 0.09593893270425413, 0.11204926085289613, 0.033100747116108, 0.03666407134599703, 0.11180955074236676, 0.03717322688288527, 0.08464702081063846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026977970104103965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053794181150317866, 0.059515986194732085, 0.07865375900468607, 0.052996603596294656, 0.09547907328247984, 0.07880839946989238, 0.06870720946334163, 0.06861540918546638, 0.058967919367861055, 0.3284678538017535, 0.33944908135453067, 0.39360306343248297, 0.3230549381100033, 0.3360166219238052, 0.32088404990120467, 0.3884824374694047, 0.3077400149052354, 0.33074248151087426, 0.07026716510324071, 0.06720601276455984, 0.06084489196721843, 0.08199222522502081, 0.07013796671697115, 0.07888678520834802, 0.08593346783102807, 0.07285150236698423, 0.08573961659517226, 0.14516933810765076, 0.20357384271206025, 0.15353017120792645, 0.21916130578275272, 0.216470961827104, 0.19280287216097025, 0.17425460694052586, 0.16094120520822985, 0.21820196262808844, 0.2007948735948729, 0.2681623336126363, 0.18930646187294065, 0.24425914975313245, 0.17601403574967045, 0.22041040546024337, 0.18500556876277996, 0.25981253688710004, 0.22362880437387656, 0.14191500334151375, 0.18440329741775885, 0.1506887911852347, 0.16210178384009855, 0.13554646945443616, 0.1746644044921266, 0.16349261807611803, 0.18880904528125209, 0.16433701196965322, 0.2112694891815794, 0.19473898476078644, 0.21041817357781645, 0.18097754238894004, 0.19732069515345163, 0.21180933893293552, 0.17920253952294407, 0.17627842029291263, 0.21406576900109153, 0.16663465506433817, 0.21351680241972648, 0.17900638756427178, 0.19725977986479137, 0.21061982124820544, 0.17030028674487008, 0.18768774598274696, 0.19292833865731773, 0.1641481655347028, 0.1772440554908884, 0.15863581565289442, 0.15294467038298976, 0.25727863861822653, 0.19404763413399084, 0.41964767880638953, 0.1794593623161692, 0.16365896139265645, 0.19392145462114208, 0.3513602124645404, 0.14988785661886117, 0.4553084221331537, 0.36833505355872864, 0.15519240339236262, 0.41642729185134364, 0.17290176574783656, 0.374085342850318, 0.16845846155782496, 0.17561104805440408, 0.17874899682216894, 0.1977178487993353, 0.20637784333155973, 0.17558417805534499, 0.1851993538156499, 0.1819901725804528, 0.20404372840510632, 0.20133509804581373, 0.07645900956670015, 0.06030102531299675, 0.07034650468610748, 0.06869296196937502, 0.08507365186392912, 0.09155755807395094, 0.07388006696787885, 0.06721197793796041, 0.06859408955536506]}, "mutation_prompt": null}
{"id": "69f3a3a7-c1a7-4ec1-9b01-08bcc9dc28b6", "solution": "import numpy as np\n\nclass EvolvedHybridPSO:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_rate = adaptive_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EvolvedHybridPSO", "description": "Evolving HybridPSO algorithm by integrating a dynamic adaptive mutation strategy and rule-based parameter adjustment to enhance exploration and exploitation in optimization tasks.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa40-df39-4de3-9021-71ea998bd835", "metadata": {"aucs": [0.3362422247336708, 0.3830731216995019, 0.38771597906893573, 0.3414374142069889, 0.37547546274554333, 0.3988307720386821, 0.3722143828824024, 0.37959594438877076, 0.3716414097130445, 0.040093527565164155, 0.0795994465206904, 0.05676355827383628, 0.011872718686716688, 0.022086161830337736, 0.12897935094902857, 0.05532169461128944, 0.04575126320555878, 9.999999999998899e-05, 0.1180215798660823, 0.09479447625780468, 0.07809623914572461, 0.09344029549664268, 0.08042383506888817, 0.09247638819480586, 0.08582183342869953, 0.08897500896922084, 0.10851494223361602, 0.0747419635864135, 0.08255778169617245, 0.073891132329309, 0.07954879338393406, 0.07538374721037466, 0.06715649149496927, 0.05946480558041256, 0.06381496899882422, 0.07752186441539521, 0.6822281086128983, 0.5153993006157054, 0.43762058699790285, 0.24771502558086955, 0.5531996720117711, 0.5319266340103923, 0.6123494790726107, 0.5182138610567407, 0.6482391439880517, 0.21235293994657656, 0.16241600951343538, 0.1566457327566967, 0.16546884043534116, 0.1764002768501568, 0.19546973643424648, 0.1784525441691197, 0.18173144343992576, 0.11396563841365603, 0.2579915134772498, 0.3769397531533, 0.196785541147245, 0.27937297786125814, 0.34278391023257093, 0.2570128162119254, 0.1509861668852196, 0.15775168941056472, 0.1868216986092468, 0.11575441523251684, 0.0872512843248594, 0.11732568894148787, 0.09883523796069182, 0.13432798438918947, 0.10188289307549747, 0.10520070700113215, 0.11465862301074481, 0.11022350366058131, 0.14845495102294026, 0.12572309486479194, 0.12924174384047515, 0.1341405012290794, 0.1185267313821392, 0.11733336779164183, 0.11699996441472416, 0.03112204569728605, 0.09206548135487158, 9.999999999998899e-05, 9.999999999998899e-05, 0.018895953475556282, 9.999999999998899e-05, 0.017630455218337726, 0.007206714862645791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06357951624753189, 0.05082158528635772, 0.09593893270425413, 0.11204926085289613, 0.033100747116108, 0.03666407134599703, 0.11180955074236676, 0.03717322688288527, 0.08464702081063846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026977970104103965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053794181150317866, 0.059515986194732085, 0.07865375900468607, 0.052996603596294656, 0.09547907328247984, 0.07880839946989238, 0.06870720946334163, 0.06861540918546638, 0.058967919367861055, 0.3284678538017535, 0.33944908135453067, 0.39360306343248297, 0.3230549381100033, 0.3360166219238052, 0.32088404990120467, 0.3884824374694047, 0.3077400149052354, 0.33074248151087426, 0.07026716510324071, 0.06720601276455984, 0.06084489196721843, 0.08199222522502081, 0.07013796671697115, 0.07888678520834802, 0.08593346783102807, 0.07285150236698423, 0.08573961659517226, 0.14516933810765076, 0.20357384271206025, 0.15353017120792645, 0.21916130578275272, 0.216470961827104, 0.19280287216097025, 0.17425460694052586, 0.16094120520822985, 0.21820196262808844, 0.2007948735948729, 0.2681623336126363, 0.18930646187294065, 0.24425914975313245, 0.17601403574967045, 0.22041040546024337, 0.18500556876277996, 0.25981253688710004, 0.22362880437387656, 0.14191500334151375, 0.18440329741775885, 0.1506887911852347, 0.16210178384009855, 0.13554646945443616, 0.1746644044921266, 0.16349261807611803, 0.18880904528125209, 0.16433701196965322, 0.2112694891815794, 0.19473898476078644, 0.21041817357781645, 0.18097754238894004, 0.19732069515345163, 0.21180933893293552, 0.17920253952294407, 0.17627842029291263, 0.21406576900109153, 0.16663465506433817, 0.21351680241972648, 0.17900638756427178, 0.19725977986479137, 0.21061982124820544, 0.17030028674487008, 0.18768774598274696, 0.19292833865731773, 0.1641481655347028, 0.1772440554908884, 0.15863581565289442, 0.15294467038298976, 0.25727863861822653, 0.19404763413399084, 0.41964767880638953, 0.1794593623161692, 0.16365896139265645, 0.19392145462114208, 0.3513602124645404, 0.14988785661886117, 0.4553084221331537, 0.36833505355872864, 0.15519240339236262, 0.41642729185134364, 0.17290176574783656, 0.374085342850318, 0.16845846155782496, 0.17561104805440408, 0.17874899682216894, 0.1977178487993353, 0.20637784333155973, 0.17558417805534499, 0.1851993538156499, 0.1819901725804528, 0.20404372840510632, 0.20133509804581373, 0.07645900956670015, 0.06030102531299675, 0.07034650468610748, 0.06869296196937502, 0.08507365186392912, 0.09155755807395094, 0.07388006696787885, 0.06721197793796041, 0.06859408955536506]}, "mutation_prompt": null}
{"id": "83c5d3f3-e6a3-45b8-9509-66738e0e8b53", "solution": "import numpy as np\n\nclass DynamicallyEnhancedHybridPSO:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_rate = adaptive_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "DynamicallyEnhancedHybridPSO", "description": "Enhancing EvolvedHybridPSO by incorporating a dynamic probability mechanism to selectively update individual lines of the algorithm based on predefined rules.", "configspace": "", "generation": 64, "fitness": 0.1678766915882142, "feedback": "The algorithm DynamicallyEnhancedHybridPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.13.", "error": "", "parent_id": "4f7caa40-df39-4de3-9021-71ea998bd835", "metadata": {"aucs": [0.3362422247336708, 0.3830731216995019, 0.38771597906893573, 0.3414374142069889, 0.37547546274554333, 0.3988307720386821, 0.3722143828824024, 0.37959594438877076, 0.3716414097130445, 0.040093527565164155, 0.0795994465206904, 0.05676355827383628, 0.011872718686716688, 0.022086161830337736, 0.12897935094902857, 0.05532169461128944, 0.04575126320555878, 9.999999999998899e-05, 0.1180215798660823, 0.09479447625780468, 0.07809623914572461, 0.09344029549664268, 0.08042383506888817, 0.09247638819480586, 0.08582183342869953, 0.08897500896922084, 0.10851494223361602, 0.0747419635864135, 0.08255778169617245, 0.073891132329309, 0.07954879338393406, 0.07538374721037466, 0.06715649149496927, 0.05946480558041256, 0.06381496899882422, 0.07752186441539521, 0.6822281086128983, 0.5153993006157054, 0.43762058699790285, 0.24771502558086955, 0.5531996720117711, 0.5319266340103923, 0.6123494790726107, 0.5182138610567407, 0.6482391439880517, 0.21235293994657656, 0.16241600951343538, 0.1566457327566967, 0.16546884043534116, 0.1764002768501568, 0.19546973643424648, 0.1784525441691197, 0.18173144343992576, 0.11396563841365603, 0.2579915134772498, 0.3769397531533, 0.196785541147245, 0.27937297786125814, 0.34278391023257093, 0.2570128162119254, 0.1509861668852196, 0.15775168941056472, 0.1868216986092468, 0.11575441523251684, 0.0872512843248594, 0.11732568894148787, 0.09883523796069182, 0.13432798438918947, 0.10188289307549747, 0.10520070700113215, 0.11465862301074481, 0.11022350366058131, 0.14845495102294026, 0.12572309486479194, 0.12924174384047515, 0.1341405012290794, 0.1185267313821392, 0.11733336779164183, 0.11699996441472416, 0.03112204569728605, 0.09206548135487158, 9.999999999998899e-05, 9.999999999998899e-05, 0.018895953475556282, 9.999999999998899e-05, 0.017630455218337726, 0.007206714862645791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06357951624753189, 0.05082158528635772, 0.09593893270425413, 0.11204926085289613, 0.033100747116108, 0.03666407134599703, 0.11180955074236676, 0.03717322688288527, 0.08464702081063846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026977970104103965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053794181150317866, 0.059515986194732085, 0.07865375900468607, 0.052996603596294656, 0.09547907328247984, 0.07880839946989238, 0.06870720946334163, 0.06861540918546638, 0.058967919367861055, 0.3284678538017535, 0.33944908135453067, 0.39360306343248297, 0.3230549381100033, 0.3360166219238052, 0.32088404990120467, 0.3884824374694047, 0.3077400149052354, 0.33074248151087426, 0.07026716510324071, 0.06720601276455984, 0.06084489196721843, 0.08199222522502081, 0.07013796671697115, 0.07888678520834802, 0.08593346783102807, 0.07285150236698423, 0.08573961659517226, 0.14516933810765076, 0.20357384271206025, 0.15353017120792645, 0.21916130578275272, 0.216470961827104, 0.19280287216097025, 0.17425460694052586, 0.16094120520822985, 0.21820196262808844, 0.2007948735948729, 0.2681623336126363, 0.18930646187294065, 0.24425914975313245, 0.17601403574967045, 0.22041040546024337, 0.18500556876277996, 0.25981253688710004, 0.22362880437387656, 0.14191500334151375, 0.18440329741775885, 0.1506887911852347, 0.16210178384009855, 0.13554646945443616, 0.1746644044921266, 0.16349261807611803, 0.18880904528125209, 0.16433701196965322, 0.2112694891815794, 0.19473898476078644, 0.21041817357781645, 0.18097754238894004, 0.19732069515345163, 0.21180933893293552, 0.17920253952294407, 0.17627842029291263, 0.21406576900109153, 0.16663465506433817, 0.21351680241972648, 0.17900638756427178, 0.19725977986479137, 0.21061982124820544, 0.17030028674487008, 0.18768774598274696, 0.19292833865731773, 0.1641481655347028, 0.1772440554908884, 0.15863581565289442, 0.15294467038298976, 0.25727863861822653, 0.19404763413399084, 0.41964767880638953, 0.1794593623161692, 0.16365896139265645, 0.19392145462114208, 0.3513602124645404, 0.14988785661886117, 0.4553084221331537, 0.36833505355872864, 0.15519240339236262, 0.41642729185134364, 0.17290176574783656, 0.374085342850318, 0.16845846155782496, 0.17561104805440408, 0.17874899682216894, 0.1977178487993353, 0.20637784333155973, 0.17558417805534499, 0.1851993538156499, 0.1819901725804528, 0.20404372840510632, 0.20133509804581373, 0.07645900956670015, 0.06030102531299675, 0.07034650468610748, 0.06869296196937502, 0.08507365186392912, 0.09155755807395094, 0.07388006696787885, 0.06721197793796041, 0.06859408955536506]}, "mutation_prompt": null}
{"id": "775d9bd5-550b-4314-8d29-69077dc125ed", "solution": "import numpy as np\n\nclass EvolvedHybridPSO:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_rate = adaptive_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EvolvedHybridPSO", "description": "Evolving HybridPSO algorithm by integrating a dynamic adaptive mutation strategy and rule-based parameter adjustment to enhance exploration and exploitation in optimization tasks.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa40-df39-4de3-9021-71ea998bd835", "metadata": {"aucs": [0.3362422247336708, 0.3830731216995019, 0.38771597906893573, 0.3414374142069889, 0.37547546274554333, 0.3988307720386821, 0.3722143828824024, 0.37959594438877076, 0.3716414097130445, 0.040093527565164155, 0.0795994465206904, 0.05676355827383628, 0.011872718686716688, 0.022086161830337736, 0.12897935094902857, 0.05532169461128944, 0.04575126320555878, 9.999999999998899e-05, 0.1180215798660823, 0.09479447625780468, 0.07809623914572461, 0.09344029549664268, 0.08042383506888817, 0.09247638819480586, 0.08582183342869953, 0.08897500896922084, 0.10851494223361602, 0.0747419635864135, 0.08255778169617245, 0.073891132329309, 0.07954879338393406, 0.07538374721037466, 0.06715649149496927, 0.05946480558041256, 0.06381496899882422, 0.07752186441539521, 0.6822281086128983, 0.5153993006157054, 0.43762058699790285, 0.24771502558086955, 0.5531996720117711, 0.5319266340103923, 0.6123494790726107, 0.5182138610567407, 0.6482391439880517, 0.21235293994657656, 0.16241600951343538, 0.1566457327566967, 0.16546884043534116, 0.1764002768501568, 0.19546973643424648, 0.1784525441691197, 0.18173144343992576, 0.11396563841365603, 0.2579915134772498, 0.3769397531533, 0.196785541147245, 0.27937297786125814, 0.34278391023257093, 0.2570128162119254, 0.1509861668852196, 0.15775168941056472, 0.1868216986092468, 0.11575441523251684, 0.0872512843248594, 0.11732568894148787, 0.09883523796069182, 0.13432798438918947, 0.10188289307549747, 0.10520070700113215, 0.11465862301074481, 0.11022350366058131, 0.14845495102294026, 0.12572309486479194, 0.12924174384047515, 0.1341405012290794, 0.1185267313821392, 0.11733336779164183, 0.11699996441472416, 0.03112204569728605, 0.09206548135487158, 9.999999999998899e-05, 9.999999999998899e-05, 0.018895953475556282, 9.999999999998899e-05, 0.017630455218337726, 0.007206714862645791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06357951624753189, 0.05082158528635772, 0.09593893270425413, 0.11204926085289613, 0.033100747116108, 0.03666407134599703, 0.11180955074236676, 0.03717322688288527, 0.08464702081063846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026977970104103965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053794181150317866, 0.059515986194732085, 0.07865375900468607, 0.052996603596294656, 0.09547907328247984, 0.07880839946989238, 0.06870720946334163, 0.06861540918546638, 0.058967919367861055, 0.3284678538017535, 0.33944908135453067, 0.39360306343248297, 0.3230549381100033, 0.3360166219238052, 0.32088404990120467, 0.3884824374694047, 0.3077400149052354, 0.33074248151087426, 0.07026716510324071, 0.06720601276455984, 0.06084489196721843, 0.08199222522502081, 0.07013796671697115, 0.07888678520834802, 0.08593346783102807, 0.07285150236698423, 0.08573961659517226, 0.14516933810765076, 0.20357384271206025, 0.15353017120792645, 0.21916130578275272, 0.216470961827104, 0.19280287216097025, 0.17425460694052586, 0.16094120520822985, 0.21820196262808844, 0.2007948735948729, 0.2681623336126363, 0.18930646187294065, 0.24425914975313245, 0.17601403574967045, 0.22041040546024337, 0.18500556876277996, 0.25981253688710004, 0.22362880437387656, 0.14191500334151375, 0.18440329741775885, 0.1506887911852347, 0.16210178384009855, 0.13554646945443616, 0.1746644044921266, 0.16349261807611803, 0.18880904528125209, 0.16433701196965322, 0.2112694891815794, 0.19473898476078644, 0.21041817357781645, 0.18097754238894004, 0.19732069515345163, 0.21180933893293552, 0.17920253952294407, 0.17627842029291263, 0.21406576900109153, 0.16663465506433817, 0.21351680241972648, 0.17900638756427178, 0.19725977986479137, 0.21061982124820544, 0.17030028674487008, 0.18768774598274696, 0.19292833865731773, 0.1641481655347028, 0.1772440554908884, 0.15863581565289442, 0.15294467038298976, 0.25727863861822653, 0.19404763413399084, 0.41964767880638953, 0.1794593623161692, 0.16365896139265645, 0.19392145462114208, 0.3513602124645404, 0.14988785661886117, 0.4553084221331537, 0.36833505355872864, 0.15519240339236262, 0.41642729185134364, 0.17290176574783656, 0.374085342850318, 0.16845846155782496, 0.17561104805440408, 0.17874899682216894, 0.1977178487993353, 0.20637784333155973, 0.17558417805534499, 0.1851993538156499, 0.1819901725804528, 0.20404372840510632, 0.20133509804581373, 0.07645900956670015, 0.06030102531299675, 0.07034650468610748, 0.06869296196937502, 0.08507365186392912, 0.09155755807395094, 0.07388006696787885, 0.06721197793796041, 0.06859408955536506]}, "mutation_prompt": null}
{"id": "97989d37-c976-4e73-b834-30138cd9d606", "solution": "import numpy as np\n\nclass ProbabilisticRefinedHybridPSO:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, prob_refine=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_rate = adaptive_rate\n        self.prob_refine = prob_refine\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n            if np.random.rand() < self.prob_refine:\n                # Probabilistic line refinement\n                line_to_refine = np.random.randint(0, len(inspect.getsourcelines(local_search)[0]))\n                new_local_search_code = inspect.getsourcelines(local_search)[0]\n                new_local_search_code[line_to_refine] = \"new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\\n\"\n                exec(\"\".join(new_local_search_code))\n\n        return best_solution", "name": "ProbabilisticRefinedHybridPSO", "description": "Improving the EvolvedHybridPSO algorithm by incorporating a probabilistic line refinement strategy to enhance its optimization performance.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'inspect' is not defined\").", "error": "NameError(\"name 'inspect' is not defined\")", "parent_id": "4f7caa40-df39-4de3-9021-71ea998bd835", "metadata": {}, "mutation_prompt": null}
{"id": "2c32f84a-786a-489d-82f2-f438df734d72", "solution": "import numpy as np\n\nclass EvolvedHybridPSO:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_rate = adaptive_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EvolvedHybridPSO", "description": "Evolving HybridPSO algorithm by integrating a dynamic adaptive mutation strategy and rule-based parameter adjustment to enhance exploration and exploitation in optimization tasks.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa40-df39-4de3-9021-71ea998bd835", "metadata": {"aucs": [0.3362422247336708, 0.3830731216995019, 0.38771597906893573, 0.3414374142069889, 0.37547546274554333, 0.3988307720386821, 0.3722143828824024, 0.37959594438877076, 0.3716414097130445, 0.040093527565164155, 0.0795994465206904, 0.05676355827383628, 0.011872718686716688, 0.022086161830337736, 0.12897935094902857, 0.05532169461128944, 0.04575126320555878, 9.999999999998899e-05, 0.1180215798660823, 0.09479447625780468, 0.07809623914572461, 0.09344029549664268, 0.08042383506888817, 0.09247638819480586, 0.08582183342869953, 0.08897500896922084, 0.10851494223361602, 0.0747419635864135, 0.08255778169617245, 0.073891132329309, 0.07954879338393406, 0.07538374721037466, 0.06715649149496927, 0.05946480558041256, 0.06381496899882422, 0.07752186441539521, 0.6822281086128983, 0.5153993006157054, 0.43762058699790285, 0.24771502558086955, 0.5531996720117711, 0.5319266340103923, 0.6123494790726107, 0.5182138610567407, 0.6482391439880517, 0.21235293994657656, 0.16241600951343538, 0.1566457327566967, 0.16546884043534116, 0.1764002768501568, 0.19546973643424648, 0.1784525441691197, 0.18173144343992576, 0.11396563841365603, 0.2579915134772498, 0.3769397531533, 0.196785541147245, 0.27937297786125814, 0.34278391023257093, 0.2570128162119254, 0.1509861668852196, 0.15775168941056472, 0.1868216986092468, 0.11575441523251684, 0.0872512843248594, 0.11732568894148787, 0.09883523796069182, 0.13432798438918947, 0.10188289307549747, 0.10520070700113215, 0.11465862301074481, 0.11022350366058131, 0.14845495102294026, 0.12572309486479194, 0.12924174384047515, 0.1341405012290794, 0.1185267313821392, 0.11733336779164183, 0.11699996441472416, 0.03112204569728605, 0.09206548135487158, 9.999999999998899e-05, 9.999999999998899e-05, 0.018895953475556282, 9.999999999998899e-05, 0.017630455218337726, 0.007206714862645791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06357951624753189, 0.05082158528635772, 0.09593893270425413, 0.11204926085289613, 0.033100747116108, 0.03666407134599703, 0.11180955074236676, 0.03717322688288527, 0.08464702081063846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026977970104103965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053794181150317866, 0.059515986194732085, 0.07865375900468607, 0.052996603596294656, 0.09547907328247984, 0.07880839946989238, 0.06870720946334163, 0.06861540918546638, 0.058967919367861055, 0.3284678538017535, 0.33944908135453067, 0.39360306343248297, 0.3230549381100033, 0.3360166219238052, 0.32088404990120467, 0.3884824374694047, 0.3077400149052354, 0.33074248151087426, 0.07026716510324071, 0.06720601276455984, 0.06084489196721843, 0.08199222522502081, 0.07013796671697115, 0.07888678520834802, 0.08593346783102807, 0.07285150236698423, 0.08573961659517226, 0.14516933810765076, 0.20357384271206025, 0.15353017120792645, 0.21916130578275272, 0.216470961827104, 0.19280287216097025, 0.17425460694052586, 0.16094120520822985, 0.21820196262808844, 0.2007948735948729, 0.2681623336126363, 0.18930646187294065, 0.24425914975313245, 0.17601403574967045, 0.22041040546024337, 0.18500556876277996, 0.25981253688710004, 0.22362880437387656, 0.14191500334151375, 0.18440329741775885, 0.1506887911852347, 0.16210178384009855, 0.13554646945443616, 0.1746644044921266, 0.16349261807611803, 0.18880904528125209, 0.16433701196965322, 0.2112694891815794, 0.19473898476078644, 0.21041817357781645, 0.18097754238894004, 0.19732069515345163, 0.21180933893293552, 0.17920253952294407, 0.17627842029291263, 0.21406576900109153, 0.16663465506433817, 0.21351680241972648, 0.17900638756427178, 0.19725977986479137, 0.21061982124820544, 0.17030028674487008, 0.18768774598274696, 0.19292833865731773, 0.1641481655347028, 0.1772440554908884, 0.15863581565289442, 0.15294467038298976, 0.25727863861822653, 0.19404763413399084, 0.41964767880638953, 0.1794593623161692, 0.16365896139265645, 0.19392145462114208, 0.3513602124645404, 0.14988785661886117, 0.4553084221331537, 0.36833505355872864, 0.15519240339236262, 0.41642729185134364, 0.17290176574783656, 0.374085342850318, 0.16845846155782496, 0.17561104805440408, 0.17874899682216894, 0.1977178487993353, 0.20637784333155973, 0.17558417805534499, 0.1851993538156499, 0.1819901725804528, 0.20404372840510632, 0.20133509804581373, 0.07645900956670015, 0.06030102531299675, 0.07034650468610748, 0.06869296196937502, 0.08507365186392912, 0.09155755807395094, 0.07388006696787885, 0.06721197793796041, 0.06859408955536506]}, "mutation_prompt": null}
{"id": "20a7f6a1-6adf-4708-b6df-4b8a460bd2b8", "solution": "import numpy as np\n\nclass EvolvedHybridPSO:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_rate = adaptive_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EvolvedHybridPSO", "description": "Evolving HybridPSO algorithm by integrating a dynamic adaptive mutation strategy and rule-based parameter adjustment to enhance exploration and exploitation in optimization tasks.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa40-df39-4de3-9021-71ea998bd835", "metadata": {"aucs": [0.3362422247336708, 0.3830731216995019, 0.38771597906893573, 0.3414374142069889, 0.37547546274554333, 0.3988307720386821, 0.3722143828824024, 0.37959594438877076, 0.3716414097130445, 0.040093527565164155, 0.0795994465206904, 0.05676355827383628, 0.011872718686716688, 0.022086161830337736, 0.12897935094902857, 0.05532169461128944, 0.04575126320555878, 9.999999999998899e-05, 0.1180215798660823, 0.09479447625780468, 0.07809623914572461, 0.09344029549664268, 0.08042383506888817, 0.09247638819480586, 0.08582183342869953, 0.08897500896922084, 0.10851494223361602, 0.0747419635864135, 0.08255778169617245, 0.073891132329309, 0.07954879338393406, 0.07538374721037466, 0.06715649149496927, 0.05946480558041256, 0.06381496899882422, 0.07752186441539521, 0.6822281086128983, 0.5153993006157054, 0.43762058699790285, 0.24771502558086955, 0.5531996720117711, 0.5319266340103923, 0.6123494790726107, 0.5182138610567407, 0.6482391439880517, 0.21235293994657656, 0.16241600951343538, 0.1566457327566967, 0.16546884043534116, 0.1764002768501568, 0.19546973643424648, 0.1784525441691197, 0.18173144343992576, 0.11396563841365603, 0.2579915134772498, 0.3769397531533, 0.196785541147245, 0.27937297786125814, 0.34278391023257093, 0.2570128162119254, 0.1509861668852196, 0.15775168941056472, 0.1868216986092468, 0.11575441523251684, 0.0872512843248594, 0.11732568894148787, 0.09883523796069182, 0.13432798438918947, 0.10188289307549747, 0.10520070700113215, 0.11465862301074481, 0.11022350366058131, 0.14845495102294026, 0.12572309486479194, 0.12924174384047515, 0.1341405012290794, 0.1185267313821392, 0.11733336779164183, 0.11699996441472416, 0.03112204569728605, 0.09206548135487158, 9.999999999998899e-05, 9.999999999998899e-05, 0.018895953475556282, 9.999999999998899e-05, 0.017630455218337726, 0.007206714862645791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06357951624753189, 0.05082158528635772, 0.09593893270425413, 0.11204926085289613, 0.033100747116108, 0.03666407134599703, 0.11180955074236676, 0.03717322688288527, 0.08464702081063846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026977970104103965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053794181150317866, 0.059515986194732085, 0.07865375900468607, 0.052996603596294656, 0.09547907328247984, 0.07880839946989238, 0.06870720946334163, 0.06861540918546638, 0.058967919367861055, 0.3284678538017535, 0.33944908135453067, 0.39360306343248297, 0.3230549381100033, 0.3360166219238052, 0.32088404990120467, 0.3884824374694047, 0.3077400149052354, 0.33074248151087426, 0.07026716510324071, 0.06720601276455984, 0.06084489196721843, 0.08199222522502081, 0.07013796671697115, 0.07888678520834802, 0.08593346783102807, 0.07285150236698423, 0.08573961659517226, 0.14516933810765076, 0.20357384271206025, 0.15353017120792645, 0.21916130578275272, 0.216470961827104, 0.19280287216097025, 0.17425460694052586, 0.16094120520822985, 0.21820196262808844, 0.2007948735948729, 0.2681623336126363, 0.18930646187294065, 0.24425914975313245, 0.17601403574967045, 0.22041040546024337, 0.18500556876277996, 0.25981253688710004, 0.22362880437387656, 0.14191500334151375, 0.18440329741775885, 0.1506887911852347, 0.16210178384009855, 0.13554646945443616, 0.1746644044921266, 0.16349261807611803, 0.18880904528125209, 0.16433701196965322, 0.2112694891815794, 0.19473898476078644, 0.21041817357781645, 0.18097754238894004, 0.19732069515345163, 0.21180933893293552, 0.17920253952294407, 0.17627842029291263, 0.21406576900109153, 0.16663465506433817, 0.21351680241972648, 0.17900638756427178, 0.19725977986479137, 0.21061982124820544, 0.17030028674487008, 0.18768774598274696, 0.19292833865731773, 0.1641481655347028, 0.1772440554908884, 0.15863581565289442, 0.15294467038298976, 0.25727863861822653, 0.19404763413399084, 0.41964767880638953, 0.1794593623161692, 0.16365896139265645, 0.19392145462114208, 0.3513602124645404, 0.14988785661886117, 0.4553084221331537, 0.36833505355872864, 0.15519240339236262, 0.41642729185134364, 0.17290176574783656, 0.374085342850318, 0.16845846155782496, 0.17561104805440408, 0.17874899682216894, 0.1977178487993353, 0.20637784333155973, 0.17558417805534499, 0.1851993538156499, 0.1819901725804528, 0.20404372840510632, 0.20133509804581373, 0.07645900956670015, 0.06030102531299675, 0.07034650468610748, 0.06869296196937502, 0.08507365186392912, 0.09155755807395094, 0.07388006696787885, 0.06721197793796041, 0.06859408955536506]}, "mutation_prompt": null}
{"id": "b376d9c3-683d-4a13-b4e8-371e5dcbfeff", "solution": "import numpy as np\n\nclass EvolvedHybridPSO:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_rate = adaptive_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "EvolvedHybridPSO", "description": "Evolving HybridPSO algorithm by integrating a dynamic adaptive mutation strategy and rule-based parameter adjustment to enhance exploration and exploitation in optimization tasks.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4f7caa40-df39-4de3-9021-71ea998bd835", "metadata": {"aucs": [0.3362422247336708, 0.3830731216995019, 0.38771597906893573, 0.3414374142069889, 0.37547546274554333, 0.3988307720386821, 0.3722143828824024, 0.37959594438877076, 0.3716414097130445, 0.040093527565164155, 0.0795994465206904, 0.05676355827383628, 0.011872718686716688, 0.022086161830337736, 0.12897935094902857, 0.05532169461128944, 0.04575126320555878, 9.999999999998899e-05, 0.1180215798660823, 0.09479447625780468, 0.07809623914572461, 0.09344029549664268, 0.08042383506888817, 0.09247638819480586, 0.08582183342869953, 0.08897500896922084, 0.10851494223361602, 0.0747419635864135, 0.08255778169617245, 0.073891132329309, 0.07954879338393406, 0.07538374721037466, 0.06715649149496927, 0.05946480558041256, 0.06381496899882422, 0.07752186441539521, 0.6822281086128983, 0.5153993006157054, 0.43762058699790285, 0.24771502558086955, 0.5531996720117711, 0.5319266340103923, 0.6123494790726107, 0.5182138610567407, 0.6482391439880517, 0.21235293994657656, 0.16241600951343538, 0.1566457327566967, 0.16546884043534116, 0.1764002768501568, 0.19546973643424648, 0.1784525441691197, 0.18173144343992576, 0.11396563841365603, 0.2579915134772498, 0.3769397531533, 0.196785541147245, 0.27937297786125814, 0.34278391023257093, 0.2570128162119254, 0.1509861668852196, 0.15775168941056472, 0.1868216986092468, 0.11575441523251684, 0.0872512843248594, 0.11732568894148787, 0.09883523796069182, 0.13432798438918947, 0.10188289307549747, 0.10520070700113215, 0.11465862301074481, 0.11022350366058131, 0.14845495102294026, 0.12572309486479194, 0.12924174384047515, 0.1341405012290794, 0.1185267313821392, 0.11733336779164183, 0.11699996441472416, 0.03112204569728605, 0.09206548135487158, 9.999999999998899e-05, 9.999999999998899e-05, 0.018895953475556282, 9.999999999998899e-05, 0.017630455218337726, 0.007206714862645791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06357951624753189, 0.05082158528635772, 0.09593893270425413, 0.11204926085289613, 0.033100747116108, 0.03666407134599703, 0.11180955074236676, 0.03717322688288527, 0.08464702081063846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026977970104103965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053794181150317866, 0.059515986194732085, 0.07865375900468607, 0.052996603596294656, 0.09547907328247984, 0.07880839946989238, 0.06870720946334163, 0.06861540918546638, 0.058967919367861055, 0.3284678538017535, 0.33944908135453067, 0.39360306343248297, 0.3230549381100033, 0.3360166219238052, 0.32088404990120467, 0.3884824374694047, 0.3077400149052354, 0.33074248151087426, 0.07026716510324071, 0.06720601276455984, 0.06084489196721843, 0.08199222522502081, 0.07013796671697115, 0.07888678520834802, 0.08593346783102807, 0.07285150236698423, 0.08573961659517226, 0.14516933810765076, 0.20357384271206025, 0.15353017120792645, 0.21916130578275272, 0.216470961827104, 0.19280287216097025, 0.17425460694052586, 0.16094120520822985, 0.21820196262808844, 0.2007948735948729, 0.2681623336126363, 0.18930646187294065, 0.24425914975313245, 0.17601403574967045, 0.22041040546024337, 0.18500556876277996, 0.25981253688710004, 0.22362880437387656, 0.14191500334151375, 0.18440329741775885, 0.1506887911852347, 0.16210178384009855, 0.13554646945443616, 0.1746644044921266, 0.16349261807611803, 0.18880904528125209, 0.16433701196965322, 0.2112694891815794, 0.19473898476078644, 0.21041817357781645, 0.18097754238894004, 0.19732069515345163, 0.21180933893293552, 0.17920253952294407, 0.17627842029291263, 0.21406576900109153, 0.16663465506433817, 0.21351680241972648, 0.17900638756427178, 0.19725977986479137, 0.21061982124820544, 0.17030028674487008, 0.18768774598274696, 0.19292833865731773, 0.1641481655347028, 0.1772440554908884, 0.15863581565289442, 0.15294467038298976, 0.25727863861822653, 0.19404763413399084, 0.41964767880638953, 0.1794593623161692, 0.16365896139265645, 0.19392145462114208, 0.3513602124645404, 0.14988785661886117, 0.4553084221331537, 0.36833505355872864, 0.15519240339236262, 0.41642729185134364, 0.17290176574783656, 0.374085342850318, 0.16845846155782496, 0.17561104805440408, 0.17874899682216894, 0.1977178487993353, 0.20637784333155973, 0.17558417805534499, 0.1851993538156499, 0.1819901725804528, 0.20404372840510632, 0.20133509804581373, 0.07645900956670015, 0.06030102531299675, 0.07034650468610748, 0.06869296196937502, 0.08507365186392912, 0.09155755807395094, 0.07388006696787885, 0.06721197793796041, 0.06859408955536506]}, "mutation_prompt": null}
{"id": "ad58f76c-f1a1-47b6-a72d-9dfe8e9e96ca", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_rate = adaptive_rate\n\n    def __call__(self, func):\n        def local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                new_position = local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveHybridPSO", "description": "Enhancing exploration and exploitation in optimization tasks through a novel Adaptive Hybrid Particle Swarm Optimization algorithm with dynamic mutation and local search.", "configspace": "", "generation": 70, "fitness": 0.1678766915882142, "feedback": "The algorithm AdaptiveHybridPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.13.", "error": "", "parent_id": "4f7caa40-df39-4de3-9021-71ea998bd835", "metadata": {"aucs": [0.3362422247336708, 0.3830731216995019, 0.38771597906893573, 0.3414374142069889, 0.37547546274554333, 0.3988307720386821, 0.3722143828824024, 0.37959594438877076, 0.3716414097130445, 0.040093527565164155, 0.0795994465206904, 0.05676355827383628, 0.011872718686716688, 0.022086161830337736, 0.12897935094902857, 0.05532169461128944, 0.04575126320555878, 9.999999999998899e-05, 0.1180215798660823, 0.09479447625780468, 0.07809623914572461, 0.09344029549664268, 0.08042383506888817, 0.09247638819480586, 0.08582183342869953, 0.08897500896922084, 0.10851494223361602, 0.0747419635864135, 0.08255778169617245, 0.073891132329309, 0.07954879338393406, 0.07538374721037466, 0.06715649149496927, 0.05946480558041256, 0.06381496899882422, 0.07752186441539521, 0.6822281086128983, 0.5153993006157054, 0.43762058699790285, 0.24771502558086955, 0.5531996720117711, 0.5319266340103923, 0.6123494790726107, 0.5182138610567407, 0.6482391439880517, 0.21235293994657656, 0.16241600951343538, 0.1566457327566967, 0.16546884043534116, 0.1764002768501568, 0.19546973643424648, 0.1784525441691197, 0.18173144343992576, 0.11396563841365603, 0.2579915134772498, 0.3769397531533, 0.196785541147245, 0.27937297786125814, 0.34278391023257093, 0.2570128162119254, 0.1509861668852196, 0.15775168941056472, 0.1868216986092468, 0.11575441523251684, 0.0872512843248594, 0.11732568894148787, 0.09883523796069182, 0.13432798438918947, 0.10188289307549747, 0.10520070700113215, 0.11465862301074481, 0.11022350366058131, 0.14845495102294026, 0.12572309486479194, 0.12924174384047515, 0.1341405012290794, 0.1185267313821392, 0.11733336779164183, 0.11699996441472416, 0.03112204569728605, 0.09206548135487158, 9.999999999998899e-05, 9.999999999998899e-05, 0.018895953475556282, 9.999999999998899e-05, 0.017630455218337726, 0.007206714862645791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06357951624753189, 0.05082158528635772, 0.09593893270425413, 0.11204926085289613, 0.033100747116108, 0.03666407134599703, 0.11180955074236676, 0.03717322688288527, 0.08464702081063846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026977970104103965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053794181150317866, 0.059515986194732085, 0.07865375900468607, 0.052996603596294656, 0.09547907328247984, 0.07880839946989238, 0.06870720946334163, 0.06861540918546638, 0.058967919367861055, 0.3284678538017535, 0.33944908135453067, 0.39360306343248297, 0.3230549381100033, 0.3360166219238052, 0.32088404990120467, 0.3884824374694047, 0.3077400149052354, 0.33074248151087426, 0.07026716510324071, 0.06720601276455984, 0.06084489196721843, 0.08199222522502081, 0.07013796671697115, 0.07888678520834802, 0.08593346783102807, 0.07285150236698423, 0.08573961659517226, 0.14516933810765076, 0.20357384271206025, 0.15353017120792645, 0.21916130578275272, 0.216470961827104, 0.19280287216097025, 0.17425460694052586, 0.16094120520822985, 0.21820196262808844, 0.2007948735948729, 0.2681623336126363, 0.18930646187294065, 0.24425914975313245, 0.17601403574967045, 0.22041040546024337, 0.18500556876277996, 0.25981253688710004, 0.22362880437387656, 0.14191500334151375, 0.18440329741775885, 0.1506887911852347, 0.16210178384009855, 0.13554646945443616, 0.1746644044921266, 0.16349261807611803, 0.18880904528125209, 0.16433701196965322, 0.2112694891815794, 0.19473898476078644, 0.21041817357781645, 0.18097754238894004, 0.19732069515345163, 0.21180933893293552, 0.17920253952294407, 0.17627842029291263, 0.21406576900109153, 0.16663465506433817, 0.21351680241972648, 0.17900638756427178, 0.19725977986479137, 0.21061982124820544, 0.17030028674487008, 0.18768774598274696, 0.19292833865731773, 0.1641481655347028, 0.1772440554908884, 0.15863581565289442, 0.15294467038298976, 0.25727863861822653, 0.19404763413399084, 0.41964767880638953, 0.1794593623161692, 0.16365896139265645, 0.19392145462114208, 0.3513602124645404, 0.14988785661886117, 0.4553084221331537, 0.36833505355872864, 0.15519240339236262, 0.41642729185134364, 0.17290176574783656, 0.374085342850318, 0.16845846155782496, 0.17561104805440408, 0.17874899682216894, 0.1977178487993353, 0.20637784333155973, 0.17558417805534499, 0.1851993538156499, 0.1819901725804528, 0.20404372840510632, 0.20133509804581373, 0.07645900956670015, 0.06030102531299675, 0.07034650468610748, 0.06869296196937502, 0.08507365186392912, 0.09155755807395094, 0.07388006696787885, 0.06721197793796041, 0.06859408955536506]}, "mutation_prompt": null}
{"id": "b542d46a-86ff-4584-b809-3a66de466120", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 71, "fitness": 0.1888758431544911, "feedback": "The algorithm AdaptiveLocalSearchEnhancedEvolvedHybridPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "4f7caa40-df39-4de3-9021-71ea998bd835", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "e9726e04-0ab2-4e4e-9730-d938579a7030", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "438940dd-26ae-46d0-b9fd-d745ce208bff", "solution": "import numpy as np\n\nclass RefinedAdaptiveLocalSearchEnhancedEvolvedHybridPSO(AdaptiveLocalSearchEnhancedEvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate, local_search_rate)\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "RefinedAdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Introducing a novel adaptive local search mechanism in EvolvedHybridPSO for optimization tasks, with a refined balance between exploitation and exploration.", "configspace": "", "generation": 73, "fitness": 0.1888758431544911, "feedback": "The algorithm RefinedAdaptiveLocalSearchEnhancedEvolvedHybridPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "453a243f-c32b-477c-a5d1-0d10aa14b1b7", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.15, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Introducing a novel mutation strategy in the AdaptiveLocalSearchEnhancedEvolvedHybridPSO algorithm to improve exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": 0.18770841018323964, "feedback": "The algorithm AdaptiveLocalSearchEnhancedEvolvedHybridPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.4340446357514084, 0.47059632077558455, 0.44740097500906295, 0.40304367141897834, 0.4502311391099165, 0.44348632603738014, 0.4050201878325592, 0.4491757693340813, 0.42816846161044764, 0.0992792569976898, 0.08686148171528929, 0.09070479837596068, 0.11045820823182961, 0.08779871914414905, 0.14870977051897916, 0.12094715389073207, 0.17433120973321725, 0.17809287411581032, 0.10906786769671872, 0.09561127762277333, 0.10747569146745883, 0.1024934336724167, 0.10510732660664013, 0.07995219071097925, 0.08711332172182595, 0.09935520088528305, 0.09775751690743983, 0.07949691221107036, 0.07949254635152325, 0.07109859263190843, 0.08829211609521792, 0.07072244374940218, 0.08947857170993812, 0.08927466101257231, 0.07405173666621756, 0.08261841916873114, 0.7169742314865721, 0.5438294039947671, 0.6240029720611446, 0.7160407325829476, 0.675225125360581, 0.6907323565988397, 0.6901289589742823, 0.5488019801374375, 0.622039741716343, 0.2370680289989313, 0.22236969713269417, 0.2053989923514722, 0.2315625803713678, 0.2139852276986638, 0.1915060994904073, 0.20971695523957345, 0.19464640163820346, 0.2048399115491525, 0.24158165002700704, 0.25237539931136466, 0.1722401470639625, 0.32704670533141933, 0.3977651123006566, 0.20038215958720962, 0.15259403988906184, 0.21795440639763242, 0.26428041306078953, 0.10818925375883359, 0.10703500734285298, 0.13615500226242716, 0.11239888958097177, 0.11344198580520826, 0.14401433412462372, 0.1277194570852589, 0.11893972934471853, 0.14028727432357735, 0.15159465486695223, 0.12230727948776954, 0.10203695569013072, 0.14634806088911667, 0.12314269264885169, 0.1442670452876953, 0.11879370458453287, 0.15524615336585612, 0.13746811616641585, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005577285686811928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06166243228305135, 9.999999999998899e-05, 0.03149513640910295, 0.09174498777757567, 0.10473578640996495, 0.04640046083862448, 0.03688591069209446, 0.032800624052947036, 0.09624755227364856, 0.10014056481873013, 0.0715123380095245, 0.051985821626310824, 0.00034226070545406717, 0.007465644132898519, 0.008957739006757448, 0.027077407234842976, 0.007406148470016749, 0.015159952528946086, 0.04286087480805567, 0.0029355463497678924, 9.999999999998899e-05, 0.07237472811538082, 0.05799344822173935, 0.03647643286053137, 0.06664918328490876, 0.052409950551154494, 0.051464945861439126, 0.06690395274352579, 0.08829354774073639, 0.06014139272866925, 0.3931947549302749, 0.39749669988763436, 0.37128310298563894, 0.4035837661735018, 0.37503121704718556, 0.362146876881589, 0.37739917165496073, 0.36542644213311837, 0.3736274847956833, 0.08023093141820314, 0.08582808624692695, 0.08290132252656635, 0.0818730416611948, 0.06399867571025863, 0.10229156137760287, 0.09419412800504467, 0.10001892299015958, 0.09842045347378547, 0.15950998969859553, 0.12002394873239008, 0.1722446387165133, 0.14504676434649533, 0.1899222685418085, 0.15015248966516648, 0.1415832554325983, 0.20607729379703688, 0.16404563372415015, 0.20184168695895943, 0.24035203095785995, 0.18111521899331062, 0.26345300851445075, 0.2760723528022482, 0.25818572365622094, 0.261752268873933, 0.27415835621349194, 0.20739504521177554, 0.16989543615922997, 0.2066456074786832, 0.19187623961320766, 0.15905254796884216, 0.13301531593797167, 0.18095721015040866, 0.1781624538585851, 0.23860990938791016, 0.15033187208421728, 0.2153338983967673, 0.18615722389018508, 0.19023644952171104, 0.20463081437805675, 0.19946531037008386, 0.19124875739354819, 0.18988267502403355, 0.19552878560348974, 0.18822315272457824, 0.17876313765301255, 0.1894389617017217, 0.17952245364914565, 0.16507646211659688, 0.17464130206411776, 0.1893816047378999, 0.20356213305262327, 0.1856764849345761, 0.16662911774269018, 0.5407414128074295, 0.1671420158632938, 0.1829602855748491, 0.5287641845831603, 0.3628659109979282, 0.4750283076454973, 0.44619299400951307, 0.12235864272155828, 0.16742189782716177, 0.368890702622341, 0.1523033206997938, 0.15532238438227575, 0.1921052785416847, 0.16346770042791436, 0.44363943691713303, 0.27892455726189935, 0.15945842577625513, 0.19181465641976192, 0.1760329181715411, 0.1817875770834283, 0.179709561613288, 0.1971198146013986, 0.18002676854454747, 0.1717323362470815, 0.19920376912633408, 0.17350236786787632, 0.18081451782511315, 0.06785278027263664, 0.07613779488021077, 0.07691805838320087, 0.06872613410407447, 0.0800586247302294, 0.07173077163317498, 0.07430836700292454, 0.08983844528040408, 0.07322163223806588]}, "mutation_prompt": null}
{"id": "df858b30-562d-4272-a567-f6f51cdca240", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "64703f95-3198-46fb-89bc-d50c47992755", "solution": "import numpy as np\n\nclass HybridAdaptiveEvolvedPSO:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_rate = adaptive_rate\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "HybridAdaptiveEvolvedPSO", "description": "Introducing a novel metaheuristic algorithm, HybridAdaptiveEvolvedPSO, combining adaptive local search with evolved particle swarm optimization for enhanced exploration and exploitation in black box optimization tasks.", "configspace": "", "generation": 76, "fitness": 0.1888758431544911, "feedback": "The algorithm HybridAdaptiveEvolvedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "e87dabdc-c8eb-402d-989b-ed42348ec83b", "solution": "import numpy as np\n\nclass RefinedAdaptiveLocalSearchEnhancedEvolvedHybridPSO(AdaptiveLocalSearchEnhancedEvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate, local_search_rate)\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate * 1.3:  # Refining the local search rate\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "RefinedAdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks, with a refined local search rate.", "configspace": "", "generation": 77, "fitness": 0.17130613674766185, "feedback": "The algorithm RefinedAdaptiveLocalSearchEnhancedEvolvedHybridPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.13.", "error": "", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.41734315760278373, 0.4194779571332653, 0.3932634480541173, 0.3851733019162733, 0.3785527061703662, 0.42402899045723075, 0.4614903215970384, 0.40363486261595105, 0.33704681797717284, 0.126657548836288, 0.09192121394943875, 0.038068851617366284, 0.10025588277217723, 0.09411627581056181, 0.07428215980438313, 0.13216214479869082, 0.09429690401598378, 0.047490824883215876, 0.09737000268229568, 0.11101374617764725, 0.08606232503142996, 0.10364980398419998, 0.10604013279693303, 0.09626413821191693, 0.11963899713324777, 0.0938340064915476, 0.08276203388860615, 0.08077595246978397, 0.10019727763982123, 0.06904991420815243, 0.08539742723594013, 0.10206363982492528, 0.06828334981745554, 0.0786628868292053, 0.08174288371721905, 0.07992447084029686, 0.405130212954818, 0.5827470784747558, 0.4838384678850214, 0.5476049815558259, 0.512211003072575, 0.466579142116491, 0.6617156891700269, 0.6022056919005782, 0.35463562765658985, 0.18301386069746117, 0.19570971042725893, 0.223164553531486, 0.18472547867316946, 0.18066384977983196, 0.18062863541467977, 0.20620027340777192, 0.2022640180209122, 0.12935482054704406, 0.38392387383702686, 0.1470478786131174, 0.1874270517894936, 0.2644940961356408, 0.23818476932620303, 0.19399582463487985, 0.1754268382015678, 0.22234519447440293, 0.1892127334677437, 0.17436498051883842, 0.11104351045910932, 0.14654813300257286, 0.09125455582863307, 0.13019486614291287, 0.11909070795729726, 0.1570931890523598, 0.13074426947421347, 0.10623921215282972, 0.10820401775362976, 0.10991313513013123, 0.11697347761456134, 0.15851606671271368, 0.08783112393719017, 0.09962373139731606, 0.13464235626050558, 0.10060093212124632, 0.11761683139464785, 9.999999999998899e-05, 0.0032793502599950397, 9.999999999998899e-05, 0.0012557985262101612, 0.010060761530365392, 9.999999999998899e-05, 9.999999999998899e-05, 0.004377002578297651, 0.005944398633392689, 0.06699716269487488, 0.054603221635694865, 0.08080643179471914, 0.05305520300622524, 0.019564343735260836, 0.03278248235316883, 0.09832524704694257, 0.06975709482490655, 0.051506252777179684, 0.013719284953377597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007117099438617158, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05236986823664125, 0.08089823128742168, 0.07133435884971606, 0.054185676360038126, 0.060053986650911106, 0.07992260904360204, 0.11034368272561645, 0.09276140126614196, 0.06782029995772898, 0.3854970584008819, 0.3792386625098647, 0.39560278708201146, 0.34445580149179034, 0.3594545258328371, 0.37485203795931454, 0.40450736073635984, 0.3617667837013009, 0.37063064364578213, 0.10754131230331221, 0.08800740198196477, 0.061682447800428974, 0.07282832210780854, 0.0772280879810634, 0.09802548061336092, 0.08976924398372899, 0.0878488920106909, 0.07084939775333299, 0.15888101484658967, 0.20703635071936377, 0.16142192598799376, 0.1732637020255503, 0.20761705089320248, 0.18711476010775407, 0.14273958229750838, 0.1558286224585188, 0.15337020891175956, 0.19692559533191922, 0.2616847134038591, 0.20926454712816422, 0.23560916848654023, 0.2703753218088737, 0.261370512301098, 0.24070728948402398, 0.27179360357292726, 0.20932485644145704, 0.12046680852968261, 0.21778422714102963, 0.14988580093989, 0.1707655030242955, 0.1696433406757536, 0.1946089911541874, 0.17566544040759768, 0.1754617804883043, 0.167515864262463, 0.20386865463456627, 0.19277506502235542, 0.17626622618807253, 0.18737553126573792, 0.19879705464567798, 0.19305661044292755, 0.203542993269329, 0.16919141712049646, 0.21248469505365342, 0.2021514608084135, 0.1742494906165939, 0.1679944710942851, 0.17152657583374553, 0.19844721585503844, 0.1854568339888356, 0.1707122043353373, 0.18429082718780143, 0.18723108434167757, 0.14387575835557165, 0.15873096933862885, 0.17531829946604993, 0.4140667042230237, 0.19150261037223515, 0.1392229756994342, 0.4576553678198838, 0.1611166245054677, 0.2398504049764083, 0.3775494514758716, 0.14950759983020723, 0.24107972892275487, 0.1962268923767181, 0.16248153954037625, 0.39999596129111537, 0.188613186433766, 0.13526023481319394, 0.18139157847916543, 0.20022253127802114, 0.17141602329907724, 0.1846784543582487, 0.18743198903213176, 0.1867424414044846, 0.18385477856184596, 0.19487027336647733, 0.17685632532919082, 0.18265425658356838, 0.07156530753011325, 0.07485402147754905, 0.07425345084182189, 0.07573993860929895, 0.08173827758198915, 0.06944044307716013, 0.06599232438811975, 0.07557803175596622, 0.07098086632703637]}, "mutation_prompt": null}
{"id": "6b3f1259-6565-4641-ae5e-208adf588acf", "solution": "import numpy as np\n\nclass DynamicEvolutionaryOptimizationMetaheuristic:\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.max_local_iter = max_local_iter\n        self.mutation_rate = mutation_rate\n        self.adaptive_rate = adaptive_rate\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "DynamicEvolutionaryOptimizationMetaheuristic", "description": "Introducing a Dynamic Evolutionary Optimization Metaheuristic (DEOM) that adapts the evolution strategy dynamically using a probability-driven line refinement mechanism to enhance optimization performance.", "configspace": "", "generation": 78, "fitness": 0.1888758431544911, "feedback": "The algorithm DynamicEvolutionaryOptimizationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "a0a14b2c-73d3-4aa2-89d3-df35f432a8ed", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "46b4c5f3-2b77-49b3-9e27-ca0768b4c9c4", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "a5aa5a05-0f82-41dd-88c8-cb63d0797b26", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "c6afe1f1-daf6-451c-a3c8-5f133f77d8b5", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "7e8b8206-99ec-4a0b-8a30-713f5a986f15", "solution": "import numpy as np\n\nclass DiversityEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, diversity_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.diversity_rate = diversity_rate\n\n    def __call__(self, func):\n        def update_particle(particle, func):\n            current_fitness = func(particle)\n            new_particle = particle + np.random.uniform(-1, 1, size=self.dim) * (best_global_position - particle)\n            new_particle = np.clip(new_particle, -5.0, 5.0)\n\n            if np.random.rand() < self.mutation_rate:\n                new_particle += np.random.normal(0, 0.5, size=self.dim)\n\n            if np.random.rand() < self.diversity_rate:\n                new_particle = adaptive_local_search(new_particle)\n\n            new_fitness = func(new_particle)\n            if new_fitness < current_fitness:\n                return new_particle\n            else:\n                return particle\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_global_position = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                swarm[i] = update_particle(swarm[i], func)\n                if func(swarm[i]) < func(best_global_position):\n                    best_global_position = swarm[i]\n\n        return best_global_position", "name": "DiversityEnhancedEvolvedHybridPSO", "description": "Introducing a Novel Diversity Maintenance Mechanism in EvolvedHybridPSO algorithm to enhance the exploration capability and improve convergence on black box optimization tasks.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'adaptive_local_search' is not defined\").", "error": "NameError(\"name 'adaptive_local_search' is not defined\")", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {}, "mutation_prompt": null}
{"id": "1566e2ea-e08c-428f-b9a5-b611ed6f2656", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "45c212d4-cd3f-4cd0-b6ef-b7150d965524", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "6386a29c-04d3-48d2-8bc5-99987b17b9ba", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "9eeccb70-a412-4740-b6bd-d682b1c79301", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "613d1a89-b75d-4bc0-8497-68d3d75da894", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Adaptively enhancing the EvolvedHybridPSO algorithm by incorporating a local search strategy with adaptive step sizes to improve exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 88, "fitness": 0.1888758431544911, "feedback": "The algorithm AdaptiveLocalSearchEnhancedEvolvedHybridPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "df405474-daf4-45e9-82ae-47070c199c36", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "7a2434e3-e3e0-46c1-abd8-cf6b75037c02", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "8a419620-cf5e-48c4-91cd-cc8544917e75", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "a7bc32bb-a719-4ceb-b048-71c6f9d520e8", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "ddd2e176-a985-4e06-b61b-4a10243531ec", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "cf3b76f5-ad79-414e-81dc-27f57c2d313c", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "12e25cc2-3055-40e4-a3d6-9ace13942f3b", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "c5a8de2c-6d25-46a8-a94e-48b9c0915ad0", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "d7b5d7e7-fb29-4bdc-9fc2-1eab1b79e37d", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "9f525e77-faee-446a-a01b-e4ea3c4904bd", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
{"id": "86cf9b4d-63b2-4d74-8453-1862257c2997", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchEnhancedEvolvedHybridPSO(EvolvedHybridPSO):\n    def __init__(self, budget, dim, n_particles=30, max_local_iter=10, mutation_rate=0.1, adaptive_rate=0.3, local_search_rate=0.5):\n        super().__init__(budget, dim, n_particles, max_local_iter, mutation_rate, adaptive_rate)\n        self.local_search_rate = local_search_rate\n\n    def __call__(self, func):\n        def adaptive_local_search(x):\n            best_x = x.copy()\n            best_fitness = func(x)\n            for _ in range(self.max_local_iter):\n                new_x = x + np.random.uniform(-self.adaptive_rate, self.adaptive_rate, size=self.dim)\n                new_fitness = func(new_x)\n                if new_fitness < best_fitness:\n                    best_x = new_x\n                    best_fitness = new_fitness\n            return best_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        swarm_fitness = np.array([func(p) for p in swarm])\n        best_idx = np.argmin(swarm_fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget // self.n_particles):\n            for i in range(self.n_particles):\n                new_position = swarm[i] + np.random.uniform(-1, 1, size=self.dim) * (best_solution - swarm[i])\n                new_position = np.clip(new_position, -5.0, 5.0)\n\n                if np.random.rand() < self.mutation_rate:\n                    new_position += np.random.normal(0, 0.5, size=self.dim)\n\n                if np.random.rand() < self.local_search_rate:\n                    new_position = adaptive_local_search(new_position)\n                new_fitness = func(new_position)\n\n                if new_fitness < swarm_fitness[i]:\n                    swarm[i] = new_position\n                    swarm_fitness[i] = new_fitness\n\n                    if new_fitness < func(best_solution):\n                        best_solution = new_position\n\n        return best_solution", "name": "AdaptiveLocalSearchEnhancedEvolvedHybridPSO", "description": "Enhancing EvolvedHybridPSO algorithm by introducing a novel adaptive local search mechanism to improve exploitation and exploration balance in optimization tasks.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b542d46a-86ff-4584-b809-3a66de466120", "metadata": {"aucs": [0.48798553333979666, 0.4849469722026225, 0.44571864141625106, 0.4212544449803647, 0.4640437671698904, 0.4667304244088166, 0.4670568132596431, 0.46520270412885756, 0.40406162188556505, 0.0819608316653434, 0.0732085902404449, 0.07870063497443625, 0.12873215290136975, 0.057895900824475044, 0.14046528220650767, 0.07848706227898661, 0.11894047091431625, 0.11690261084008213, 0.1116218925849003, 0.10760279747717538, 0.1147250482168547, 0.08728815500206943, 0.10969480305154411, 0.08213698767250865, 0.10156392079723542, 0.09215869303124835, 0.12011022847524977, 0.09092605369223727, 0.0820362793968814, 0.11201578982500637, 0.10977104567635054, 0.08263755803074602, 0.0871411634496364, 0.11908497560602338, 0.07322870294048678, 0.0849027416350957, 0.7224142909322963, 0.5880510603292188, 0.696624687284803, 0.6869854046222872, 0.6451554576339942, 0.6527329354122531, 0.7397952962327718, 0.7032995615055649, 0.4705609036839321, 0.18204471469025252, 0.18315140353523107, 0.1835941978050427, 0.2043406229875402, 0.16141465096468677, 0.20690245723813527, 0.20117123113789703, 0.1601343160607468, 0.16310061296506706, 0.2661150871075506, 0.18002258377471447, 0.16752158825474184, 0.31085842429737043, 0.24442684222712674, 0.2197827415298037, 0.20540426743908324, 0.19059028048102045, 0.14637176679270525, 0.1446447059042545, 0.146937464901706, 0.1252309146360432, 0.17095027756573622, 0.13234227328595227, 0.12262214175133812, 0.15347796584383, 0.1005664547217322, 0.13384305458172074, 0.13058455649726441, 0.13019066605219232, 0.1775322043685288, 0.12931024119834944, 0.11194442928499504, 0.1276610737502697, 0.14134098090644598, 0.13685159211131215, 0.14285484022592065, 0.027242901182295998, 9.999999999998899e-05, 9.999999999998899e-05, 0.004946461816229153, 9.999999999998899e-05, 9.999999999998899e-05, 0.020748631699650244, 0.061982979733192, 9.999999999998899e-05, 0.05683020346466494, 0.10160579820786975, 0.12264870529136496, 0.07734889503689069, 0.03450355575295472, 0.06274920923373228, 0.10096393100325729, 0.0712571395675593, 0.04909836636834697, 0.006554125577098779, 0.001982181230396951, 0.008311749127076662, 0.006513579579009221, 0.0002230046668700858, 0.015357997676813229, 0.005241638660177572, 0.0347920505836693, 9.999999999998899e-05, 0.08801479987373151, 0.07475732856796624, 0.0670578446299227, 0.08653816342210396, 0.04343068765132463, 0.09889112002656764, 0.08929766784724924, 0.09511531289039044, 0.071657702181807, 0.40694913920869835, 0.3708649997491835, 0.3864041685316426, 0.37899845834036505, 0.37115379030248263, 0.35891386768014877, 0.40384758383608144, 0.3544999877556344, 0.42290368262702005, 0.10540226577346057, 0.07251200957080095, 0.08931364808179265, 0.07589171722449606, 0.0841254478488932, 0.08587273034935039, 0.09104823486343316, 0.08715266274599853, 0.11146626427902862, 0.18041365054069214, 0.1226356058992576, 0.1996419035184993, 0.1672311096501815, 0.20317198348342858, 0.17474528176825532, 0.14107670524337623, 0.14363867935696162, 0.1930902740165672, 0.16963421433005987, 0.24937293349139722, 0.22759480479444183, 0.2400664844992818, 0.18850595138288073, 0.22205231750886256, 0.24438520044676093, 0.27755638884868905, 0.2613556485722567, 0.1586796889166482, 0.17616669897201498, 0.19424223627246806, 0.14581053270006628, 0.16583283812606842, 0.22031011216596663, 0.17938429065538852, 0.20465690222912636, 0.17921928541037546, 0.19150222975410292, 0.20912760046314982, 0.24002188076982034, 0.2020950227315701, 0.20337570719647524, 0.1946941655266814, 0.18870958698750528, 0.21376206694068234, 0.18084342179673618, 0.2793670411121236, 0.21259016304126366, 0.2058577714025296, 0.1873074316136688, 0.20330971865617864, 0.22228685509452217, 0.18597986829374324, 0.19658082974119828, 0.18234192347123057, 0.4408316368917313, 0.14402051078214828, 0.19203056120156559, 0.19151337618759756, 0.19199657727435604, 0.4152250594221044, 0.404957925309103, 0.16220869510800096, 0.49214945065830484, 0.39127734454895746, 0.3124121458662886, 0.18584690984889474, 0.19783168011120045, 0.28969733923679564, 0.240413479882298, 0.29456506774362734, 0.13040049082241478, 0.2857267930056273, 0.18544803047670633, 0.18266608719474609, 0.19751469016876888, 0.18897212153085763, 0.19275146701422197, 0.18423296656794352, 0.18636362529450035, 0.1709223861372159, 0.18765596814359098, 0.06692424485353388, 0.07294831197595153, 0.06954005226146964, 0.08085826911078908, 0.08308989633165398, 0.07637793372001178, 0.08950945788189424, 0.07321469456089813, 0.07888295482001306]}, "mutation_prompt": null}
