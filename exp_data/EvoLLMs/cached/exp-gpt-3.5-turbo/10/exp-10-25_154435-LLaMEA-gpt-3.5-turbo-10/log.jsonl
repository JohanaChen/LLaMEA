{"id": "8cd0af3d-ac2e-4ceb-afb8-1280fd80cd0e", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "ec3fed0b-5e98-4661-ab23-7e9a8ffd80d9", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cd0af3d-ac2e-4ceb-afb8-1280fd80cd0e", "metadata": {}, "mutation_prompt": null}
{"id": "63accafa-c9c9-4cdd-bd5c-0d8ba55d9207", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cd0af3d-ac2e-4ceb-afb8-1280fd80cd0e", "metadata": {}, "mutation_prompt": null}
{"id": "85529ed2-8ad5-4483-931b-d553e2b5e72b", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cd0af3d-ac2e-4ceb-afb8-1280fd80cd0e", "metadata": {}, "mutation_prompt": null}
{"id": "34886e2b-d693-4e0c-bc14-276d70e72e32", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cd0af3d-ac2e-4ceb-afb8-1280fd80cd0e", "metadata": {}, "mutation_prompt": null}
{"id": "ef556054-e5c1-483b-b5cf-67185f106fb2", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cd0af3d-ac2e-4ceb-afb8-1280fd80cd0e", "metadata": {}, "mutation_prompt": null}
{"id": "53674b88-7200-40c3-b391-e924d903eaef", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cd0af3d-ac2e-4ceb-afb8-1280fd80cd0e", "metadata": {}, "mutation_prompt": null}
{"id": "4698bede-7cd9-4766-b18f-194083fc2980", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cd0af3d-ac2e-4ceb-afb8-1280fd80cd0e", "metadata": {}, "mutation_prompt": null}
{"id": "b0fad5c3-2db8-4617-bd03-4f20f6afc2ad", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cd0af3d-ac2e-4ceb-afb8-1280fd80cd0e", "metadata": {}, "mutation_prompt": null}
{"id": "42a73847-4c00-4e0f-84fa-3322060c1c12", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cd0af3d-ac2e-4ceb-afb8-1280fd80cd0e", "metadata": {}, "mutation_prompt": null}
{"id": "aac2f062-3b50-41bd-a0f2-4fc55a770ceb", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cd0af3d-ac2e-4ceb-afb8-1280fd80cd0e", "metadata": {}, "mutation_prompt": null}
{"id": "7347c525-d61c-4a9d-b64b-f233d63af460", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 11, "fitness": 0.07552281445202864, "feedback": "The algorithm PSOLSolver got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.08.", "error": "", "parent_id": "8cd0af3d-ac2e-4ceb-afb8-1280fd80cd0e", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "7ac63014-2c15-41b4-853b-0cd3d5a592d3", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "950f829e-a12f-4bf3-9210-4b5c3ef6cb55", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "25a08a8f-253a-426d-b373-5eb16d90b664", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "19ad3648-2e3d-4faf-9819-7b5001713edd", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "94097a7b-e29c-4ba7-b148-c538c3c65e96", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "4bc34d38-38af-4ace-bda3-4a41fa66c86f", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "a4df1a60-fd4f-4b26-ab68-974fe8c31a3b", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "4085237e-74f8-4065-af05-7301fe4ec6e6", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "e6b3a947-5b9d-400e-a670-1d011405fbe8", "solution": "import numpy as np\n\nclass AdaptivePSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                \n                if np.random.rand() < self.mutation_prob:\n                    swarm[i] += np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                    swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                    \n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "AdaptivePSOLSolver", "description": "Enhancing PSOLSolver algorithm with adaptive mutation rate for improved exploration and exploitation.", "configspace": "", "generation": 20, "fitness": 0.07358699268610032, "feedback": "The algorithm AdaptivePSOLSolver got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.07.", "error": "", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.1399108556766585, 0.147405691684814, 0.11593897978462242, 0.08952233024927114, 0.06692536916454717, 0.07982568347043995, 0.08324322474469659, 0.09074989966921765, 0.09108484636604319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046786623845309405, 0.03792276458696908, 0.027488677898767078, 0.020499091127725633, 0.03404455974669596, 0.006669962766643223, 0.018248263482334326, 0.016685888699608742, 0.015624837137930392, 0.03918569392625848, 0.051877610516160355, 0.03490059047420768, 0.03429656670929604, 0.012989168061873668, 0.009856455056057478, 0.016777467923489886, 0.008795551452593697, 0.009772650350460044, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.004395221215624967, 9.999999999998899e-05, 0.030462783745080713, 0.03682586382542663, 0.015995980042428304, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.17288720100243848, 0.13259400483143113, 0.1514991895004436, 0.0667108215001172, 0.029664078869454547, 0.003825185212386728, 0.026279303607937843, 0.06978764550432826, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14285361583436496, 0.16127366601372362, 0.11810289072616775, 0.1426908033566644, 0.12985782755791953, 0.14364543943519748, 0.13353092276447986, 0.10869496759383224, 0.1473300460971423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025739296856323035, 9.999999999998899e-05, 0.014274010613154364, 9.999999999998899e-05, 0.052986311049280976, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002945766009886386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17766733190271045, 0.1695006842865605, 0.14838054695461433, 0.12441024280110036, 0.11308954387354575, 0.12671619131656098, 0.20494410312497724, 0.2099973239537688, 0.19202060621684558, 0.03311452562598405, 0.0004971730779885775, 9.999999999998899e-05, 0.013784306903779853, 0.008077676685549928, 0.02078961118156386, 0.019424234338404456, 0.02128127926293577, 0.0267656688986897, 0.08785449668980672, 0.11567190321182874, 0.06393062833995444, 0.10673162991676455, 0.10852972522114013, 0.08710995479641281, 0.08808199726801991, 0.06566840564327225, 0.07726393575557644, 0.13178303995182616, 0.1422499555813327, 0.16453060008341747, 0.16002033535194515, 0.17923795468881676, 0.17005336523206172, 0.13531672773124193, 0.17377774300845283, 0.12612743269295912, 0.06692364782216331, 0.05052668867390675, 0.07486551895006832, 0.10473940041553598, 0.1231614157314378, 0.13041823415939213, 0.08552315595636484, 0.0997711199450243, 0.07534447544537892, 0.2860005220435553, 0.30015199739873766, 0.27131678927562475, 0.28099389045119105, 0.2647059439501058, 0.2624358527852645, 0.29331669974759556, 0.2791096005292384, 0.2712106893594609, 0.1486023189634308, 0.15257664085274192, 0.1527672826747697, 0.1484846150753406, 0.13822944130735648, 0.13254352724199836, 0.1555204985536155, 0.15314966480844883, 0.13968136457253733, 0.10874755378767009, 0.08256047303247183, 0.08957595304421373, 0.1563852144431368, 0.1207914665021157, 0.10046313214981406, 0.07245568600050101, 0.09643604708838482, 0.07010668194134972, 0.1456084228178861, 0.10051730792859848, 0.03552010189809529, 0.0506857903344724, 0.04254436021003005, 0.048450802876996546, 0.09018622568430223, 0.05474582730158817, 0.06541345187998071, 0.17367115964757174, 0.185435389853295, 0.18240715792335815, 0.19877677078049039, 0.17657266371038471, 0.18446830676224768, 0.18680204879826734, 0.16521408865630105, 0.16336639479391302, 0.057633816070302823, 0.05448348346965537, 0.04564015007440536, 0.060642388082860266, 0.05589456739506171, 0.04681008121186825, 0.044911307261766176, 0.05556262643426202, 0.056088194691206406]}, "mutation_prompt": null}
{"id": "bf697d2b-7dda-489c-b81b-e4153836909a", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "3486d938-54b6-49d7-97ac-42b745687603", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "a1ef3e32-c0f7-4bd1-97f5-37607e6bc4c7", "solution": "import numpy as np\n\nclass AdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim, population_size=30, alpha=0.1, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n        self.population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        self.best_solution = self.population[np.argmin([func(x) for x in self.population])]\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if func(self.population[j]) < func(self.population[i]):\n                        beta = self.beta0 * np.exp(-self.gamma * np.linalg.norm(self.population[j] - self.population[i]))\n                        self.population[i] += beta * (self.population[j] - self.population[i]) + self.alpha * np.random.uniform(-1, 1, self.dim)\n                self.population[i] = np.clip(self.population[i], -5.0, 5.0)\n            self.best_solution = self.population[np.argmin([func(x) for x in self.population])]\n\n        return self.best_solution", "name": "AdaptiveFireflyAlgorithm", "description": "An adaptive Firefly Algorithm with dynamic attraction and randomness for global optimization.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {}, "mutation_prompt": null}
{"id": "e1d1cb30-fea6-4903-bb7a-0ffaa48e7350", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "c464049b-9762-4346-aceb-d3f2786c4d49", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "727ad7f1-1b3d-4434-8a20-c7a3a8170527", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "256e0187-af4a-4608-a695-9ce50b159f8b", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "b84c4734-2de3-4a43-ad74-bb746521c765", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "2a91300b-7f0a-4ada-a98d-dea079fe420b", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "cbccb54d-6642-43a3-bc1f-0d46279fd513", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "e89acfb2-61e6-4226-b44e-a416f051201e", "solution": "import numpy as np\n\nclass HarmonySearchSolver:\n    def __init__(self, budget, dim, harmony_memory_size=20, band_width=0.01, pitch_adjust_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.band_width = band_width\n        self.pitch_adjust_rate = pitch_adjust_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def explore_new_solution(harmony_memory):\n            new_solution = np.clip(harmony_memory[np.random.randint(0, len(harmony_memory))] +\n                                    np.random.uniform(-self.band_width, self.band_width, size=self.dim), -5.0, 5.0)\n            return new_solution\n\n        harmony_memory = np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n        harmony_costs = np.array([objective_function(x) for x in harmony_memory])\n        best_idx = np.argmin(harmony_costs)\n        best_harmony = harmony_memory[best_idx]\n\n        for _ in range(self.budget - self.harmony_memory_size):\n            new_solution = explore_new_solution(harmony_memory)\n            new_solution_cost = objective_function(new_solution)\n            if new_solution_cost < harmony_costs[best_idx]:\n                harmony_memory[best_idx] = new_solution\n                harmony_costs[best_idx] = new_solution_cost\n                best_idx = np.argmax(harmony_costs)\n                best_harmony = harmony_memory[best_idx]\n\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    harmony_memory[i, :] = np.clip(harmony_memory[i, :] + np.random.uniform(-self.band_width, self.band_width), -5.0, 5.0)\n\n        return best_harmony", "name": "HarmonySearchSolver", "description": "Utilizing a novel Metaheuristic Algorithm inspired by the concept of Harmony Search to improve exploration and exploitation in optimization problems.", "configspace": "", "generation": 31, "fitness": 0.0708266695387173, "feedback": "The algorithm HarmonySearchSolver got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.07.", "error": "", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13245420225992788, 0.10761951753056331, 0.17086298378124376, 0.15887664241789246, 0.10581684012068693, 0.13688586489603383, 0.1405757849911885, 0.12588337206312572, 0.11429029361143461, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00042124458542747156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019437742694220494, 0.032403638539180046, 9.999999999998899e-05, 0.023424192817061873, 0.007626478893126065, 0.033411708179255206, 0.0363042329073181, 0.014048936977819726, 0.06617777796663327, 0.004016379716453633, 9.999999999998899e-05, 9.999999999998899e-05, 0.061672774816890485, 0.022245844047854346, 9.999999999998899e-05, 9.999999999998899e-05, 0.002796234928064356, 9.999999999998899e-05, 0.06629404791029936, 0.047233084495100774, 0.06806990389790457, 0.06778730416456424, 0.06443652428105728, 0.05685877377654891, 0.08472978196800562, 0.06840703463321773, 0.060917612597072734, 0.028781611090850645, 0.008129382709538002, 0.011085359293725228, 0.01902345998217203, 0.037537986167630155, 0.014705932787755782, 0.06216439896502701, 0.03953521221718548, 0.005554786951099566, 0.10027683525177622, 0.03775594762470191, 0.01900149318508415, 0.00468605150207424, 0.02725496812965944, 9.999999999998899e-05, 0.026279303607937843, 0.05931056463008866, 0.03820952147650858, 0.09376968728000468, 0.07488017195833196, 9.999999999998899e-05, 9.999999999998899e-05, 0.02556727802814507, 9.999999999998899e-05, 0.04682465788400736, 9.999999999998899e-05, 0.04558535968926969, 0.0967192074608405, 9.999999999998899e-05, 9.999999999998899e-05, 0.04018412227723622, 9.999999999998899e-05, 0.04240170267577248, 0.11695942282237737, 9.999999999998899e-05, 0.05719307085595993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05191484894685783, 0.024716233674138666, 0.06533831783704991, 0.06483246604600412, 9.999999999998899e-05, 9.999999999998899e-05, 0.11784499808208515, 0.05233312535652768, 0.03699753023775443, 9.999999999998899e-05, 0.020338673597967483, 0.03509329478939727, 0.00039511936234726264, 9.999999999998899e-05, 0.0007551690069680372, 0.035058009212531216, 9.999999999998899e-05, 0.005642778774590629, 0.0001220820268533762, 0.010571435226606418, 0.11073975930342894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009526091511811496, 0.00012481856267476665, 0.04965805768152898, 0.17807875279565777, 0.1522113257254306, 0.14838054695461433, 0.12631994846234307, 0.12757857324161537, 0.11889397805741497, 0.18842693174801783, 0.12664016749919715, 0.19448089134918667, 0.016159120812970884, 0.0019870573380156298, 9.999999999998899e-05, 0.023206763013842835, 0.01625088349937942, 0.0628510184565042, 0.0019557282181545954, 0.016163360387525194, 0.0727278114573564, 0.08569085509519869, 0.13399979235836523, 0.10502405258505787, 0.16265032175439287, 0.13741653253989095, 0.11237884647447882, 0.1843665479800034, 0.07911747786929668, 0.1022984114980029, 0.112288169613187, 0.1258851282325244, 0.12038215738830949, 0.1313128492383019, 0.12429508897546315, 0.1304837286170023, 0.1386557460125568, 0.18520538006710563, 0.10235044484235278, 0.05887440833013857, 0.04103899030983538, 0.06129405920479836, 0.08267854999290702, 0.07779106407096292, 0.07257734433151486, 0.07071523643843391, 0.1343467632453459, 0.05064032993339351, 0.17744789270260386, 0.10634041445110265, 0.15971579784363732, 0.17755627032580779, 0.12674222738822594, 0.14983939082649378, 0.18883656765418888, 0.10883541064719338, 0.15785088094943744, 0.04137300942411659, 0.05825364806911182, 0.1476997650284484, 0.15365512646867607, 0.0566921224912752, 0.14862614566853904, 0.04368311892095722, 0.06269985911446252, 0.05834484998018674, 0.09581608469036307, 0.12307456222011537, 0.1403319740489205, 0.13690236756766094, 0.19017914474668052, 0.17301525877174317, 0.0964521956692952, 0.15612977635910907, 0.09436460893153109, 0.07231355627896896, 0.13339504938745195, 0.042800324260739986, 0.08889875240347778, 0.11367464644151115, 0.10395429729487693, 0.08815839328482367, 0.1817171419017779, 0.16462373374872818, 0.21425761109154007, 0.2306388799960145, 0.17802340759587987, 0.2622158934553065, 0.25670667453276785, 0.244109893425134, 0.23063264434099817, 0.2555469895310636, 0.2446752829185097, 0.03208364438475875, 0.028844595512487636, 0.06435832654256424, 0.047130831824986674, 0.055575372913500676, 0.047350474724004776, 0.0415663688231076, 0.037736587949002254, 0.05106854504076397]}, "mutation_prompt": null}
{"id": "7aa930bf-7967-4fcd-a0fe-0b21934ee1a7", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "32043be2-5e58-471c-a559-06b366560bdd", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "505258da-b8d0-4982-bfbe-806b5ad43252", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "192b18d0-f7c1-4219-9ce2-6aa9228933e2", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "db7feabc-caf6-4375-98f6-203d169895ea", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "72fe2e18-8abc-461c-a264-b242ddacf9a3", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "166fd807-f010-437b-8618-034e8a375d3f", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "19da7af0-5a06-4dc8-9831-6a48aaccc5dd", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "c5029833-a121-4724-b81d-27bb93ff9d9d", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "8133902a-eec9-46cb-92a7-8f5ca0559737", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "42341dec-aa82-4a61-a6ef-8722fca4d912", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "d60528fb-0e85-4626-b9ad-1cb4feef23fa", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "0ac2823f-935d-42b4-b633-e056c3e8357b", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "791596a8-9e30-4d91-8e01-a3048575dcee", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "1620839e-1bc9-4e03-b91c-3b48ef6e69f2", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "94a202ea-8868-406d-a80e-890bd45729e9", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "d222e85b-f8bf-41bd-a0c9-f99720a23f68", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "a2b4840c-fb76-44d9-8df6-7910ac36cf6d", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "a128b52a-eaad-4700-a801-111322c8578c", "solution": "import numpy as np\n\nclass PSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, phi_p=0.5, phi_g=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + self.phi_p * r_p * (p_best - swarm[i]) + self.phi_g * r_g * (g_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "PSOLSolver", "description": "A novel algorithm that combines particle swarm optimization with local search for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.13049408407292884, 0.28357792260801373, 0.20525461973328307, 0.08952233024927114, 0.07342736482134149, 0.09732599596013458, 0.11214071106395862, 0.10337523397208603, 0.08032494900678888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03403407226607391, 0.023249400414058652, 0.019442216011824498, 0.033359225239573465, 0.06097763769049469, 0.015235983265102004, 0.018248263482334326, 0.011967530045513541, 0.028387899409896056, 0.027026341846612234, 0.023321019018031075, 0.014958582763306416, 0.028205417866431715, 0.024691649306287533, 0.0070618302696940916, 0.00753813923781832, 0.02926467640972019, 0.0022415264355145625, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.03760735707249152, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 9.999999999998899e-05, 0.032760465636055947, 9.999999999998899e-05, 0.019123384615481354, 0.02756059728975957, 0.006935222647743267, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15209105142331358, 0.13241021274876585, 0.13248467988478918, 0.0667108215001172, 0.02725496812965944, 0.004391884799647805, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016989300789495565, 9.999999999998899e-05, 9.999999999998899e-05, 0.11197661819473326, 0.13702287325957785, 0.15486043822051287, 0.11035635995775961, 0.15013407034301052, 0.13325579961329326, 0.14930087944492554, 0.20012488088993163, 0.15552235238210976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938623269889009, 0.05008829934479886, 9.999999999998899e-05, 0.04833346611841027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1719988134374527, 0.17476838886790336, 0.1544785702166075, 0.10173950810823995, 0.11721839422309277, 0.09580441870675127, 0.2021830661310683, 0.19933630395564284, 0.20728130882692508, 0.007907197883662231, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365027260707233, 0.0338616377827351, 0.01776326734474809, 0.027596653132313298, 0.030280501193388987, 0.034450150478825714, 0.07037543064596374, 0.08609370886951495, 0.08416890611650973, 0.09855305120349966, 0.10852972522114013, 0.08889720412969304, 0.08808199726801991, 0.08240442942776427, 0.10445231407166189, 0.12197489590651933, 0.13672144046931534, 0.1441733872420018, 0.17393603343501696, 0.18047393579096538, 0.1663249830819704, 0.13049412360625467, 0.17377774300845283, 0.1205729014063387, 0.04895115440393272, 0.06743216924105322, 0.07270324909627235, 0.10338836494440984, 0.10985785795516845, 0.12621811430523544, 0.12164007888231987, 0.0997711199450243, 0.07297175086938701, 0.289068840367079, 0.26596405664818634, 0.26651811966248196, 0.2607104226508795, 0.27653198204670515, 0.2910428928798171, 0.29701124528321565, 0.2976714645250549, 0.27145671191674314, 0.14372063298941118, 0.15114699327451508, 0.14766714219465216, 0.16490455801864723, 0.1387714621162479, 0.13988946570357152, 0.14175945509048593, 0.15539319680490804, 0.13194120856129432, 0.1083432470363398, 0.09209779018983077, 0.107289602084774, 0.1669027216032264, 0.1207914665021157, 0.08996186100407444, 0.07245568600050101, 0.09643604708838482, 0.07124075927305784, 0.11040265245322212, 0.10051730792859848, 0.08856252978782009, 0.07275876006305715, 0.03738259240699027, 0.047159241785789674, 0.05885648339948801, 0.08012458174094883, 0.07333424735702898, 0.17922974900354516, 0.1759747512106964, 0.174916658401152, 0.1799783526731551, 0.16672775439258736, 0.19371950028561846, 0.1830884939196935, 0.1782350869316438, 0.17362149093017565, 0.04816841443566422, 0.05886151965967035, 0.04919534324711272, 0.05210190067716702, 0.04930972087189944, 0.07352144080029899, 0.05634866964937535, 0.04864119879665629, 0.05596608742398379]}, "mutation_prompt": null}
{"id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 51, "fitness": 0.07697400996098916, "feedback": "The algorithm HybridPSOLSolver got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "7347c525-d61c-4a9d-b64b-f233d63af460", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "e852dd29-2d49-4f47-8079-aa0846d201c5", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "852bf459-88b3-4918-8d65-53f67ce0615c", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "3cb605a0-af86-4caa-ae53-55a97ba43d4e", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "77972510-c56b-4882-bc43-5184a5d99eb1", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "39fe8cb0-bd8a-44ef-a6ca-125ea472b680", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "6a641332-af81-4ac0-b72e-8ddef3921f62", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "f855552d-8189-4190-a179-1d262d192dc8", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "24d786f5-32cf-41df-bf94-51ee98189e8b", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "976a4cb8-e856-4d41-bbbe-e259ad46d41a", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "84a0fc83-3347-40fd-b40e-3ad06a513ef0", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "5eba1872-1035-4180-918a-650f4923ee9b", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "f105046a-60ff-4571-9f46-65834912b09b", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "ca3b64ea-734b-4bcf-aa43-87cec7c98823", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "2f6238a2-dc28-49cf-aa7b-a189e2822d96", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "524f1926-ab87-4275-9109-7a37d65fd7e2", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "19366aad-8095-4622-8257-164487f04fe7", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "28a4615f-0742-4e37-9ac4-c2ceb642d13d", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "5a3976bb-b1e7-4087-a3c6-d20f0122b43a", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "bdd84041-7f39-4b2e-adfd-382921bf9c49", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "cb7c849a-5c4f-451d-943f-220e8ec73001", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "4b48f543-435a-454d-8128-55f8a99bd1ef", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "81ad49e9-df59-4120-8f39-bd5dc7270b65", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "cd79bd3c-bb88-4ef6-be6c-4d5511e2ce21", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "1dce9db8-6022-47c8-ba03-83470ac5fdfa", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "c29a9725-c052-4c26-952c-528cbabb9339", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "4506f954-5b07-4b75-8fa1-546ca3be8de1", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "8182d21a-a792-4b62-b57a-e37ea2b0172a", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "ef1e4f59-06be-4b9a-a217-528c068b476f", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "de3ebb4c-ef37-4fcc-92d9-74479c27a0e9", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "4a4ec2df-3c28-462e-902a-01fefd0ae77f", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "bcf0d2ca-6a4e-4283-b231-cfc641b5d1c4", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "2b1fbcc1-0da0-4c05-ad87-fc8cc78ecb03", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "bf65e665-5175-44eb-9dd8-93c86a40860d", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "a677af0e-1704-4221-8ff7-a8515b971042", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "d5d0cc1d-c62b-4cc0-9cc4-ddaef942a09a", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "e1dc9d34-87d2-4967-b8e0-cb74e08bb289", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "cc4f7721-34bd-46fb-8fa1-b6527a33d3f5", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "070d39dd-ca14-4542-959b-6331b74d81ae", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "0e1b70fc-95a0-4b6d-9a14-7d4ee2e3d6d0", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "494aaec1-1684-4ddb-b3db-c1e49941e9bf", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "ef45b452-432f-4d3a-b43f-49fa63e2074e", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "c9eb8c35-7bf4-4158-a8c1-4eaca2572863", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "498bfb7e-b325-47c4-ad80-b6002c93a73c", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "27f79edc-096d-4d80-b099-4863857351f4", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "c0010a52-7dbb-4ac7-81bb-ea1bd1814fcc", "solution": "import numpy as np\n\nclass HybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-self.alpha, self.alpha, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i])\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n        return g_best", "name": "HybridPSOLSolver", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization with local search and dynamic parameter adaptation for improved exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.16299075466994983, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.0890857483773283, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.02858758547452267, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.010539189264327287, 0.014983635286774377, 0.0017348186343913996, 0.001577682042442019, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15217388196567805, 0.13224822902097733, 0.13250795569487306, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15581138280622286, 0.1302382900589426, 0.14198130071552695, 0.13017448953339916, 0.12900654449912796, 0.15884640223897806, 0.11772666023637213, 0.1965098432527479, 0.160068875742303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09689149284279852, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.16452148684948353, 0.1856375288503922, 0.16166619164117035, 0.1368279869270378, 0.17377774300845283, 0.13703135716254888, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.1099407478582396, 0.1137366296138198, 0.11012923588556134, 0.10693556961349315, 0.13634733769581708, 0.09319214946772048, 0.27765857708269104, 0.2820138184835438, 0.2599995165995289, 0.26271739011569584, 0.2656878553397193, 0.2689066567673972, 0.3058760555550827, 0.2543146488183272, 0.25785086589154105, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11793974825582532, 0.1070236494560175, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.03808563567907408, 0.045511073114331335, 0.0616675859604644, 0.07740113606345134, 0.06419953747183793, 0.1975271622618744, 0.19634763959545443, 0.18144869617230774, 0.17703197319057584, 0.18424055400907624, 0.17805394294909238, 0.1722512492473599, 0.17809175654058595, 0.18087917412086507, 0.04636947667332114, 0.04490389931541727, 0.04828363337363284, 0.0487791782347764, 0.04957625361235696, 0.04598709936844647, 0.04677349531262409, 0.05263107289592994, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "d7852cc4-dcf1-4d08-bef5-814e2188790c", "solution": "class AdaptiveHybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x, mutation_rate):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-mutation_rate, mutation_rate, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        mutation_rate = self.alpha\n\n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i], mutation_rate)\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n            # Update mutation rate adaptively based on the best cost\n            mutation_rate *= 0.95 if swarm_cost[i] < objective_function(g_best) else 1.05\n\n        return g_best", "name": "AdaptiveHybridPSOLSolver", "description": "Enhancing the HybridPSOLSolver algorithm by introducing adaptive mutation rates for improved local search exploration in the particle swarm optimization.", "configspace": "", "generation": 97, "fitness": 0.07722877496041755, "feedback": "The algorithm AdaptiveHybridPSOLSolver got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "79ab4c20-81be-4bc6-8810-859e06fb1fa6", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.1631544867403505, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.08912254551010579, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.028334062693897377, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.011114522482661426, 0.014983635286774377, 0.0017348186343913996, 0.001658127641935736, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.1521727306482611, 0.13215661994669192, 0.13250682084948096, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16150831887191686, 0.14168231980522072, 0.1422290788762568, 0.13899495044159615, 0.13706577275276455, 0.15788478936189454, 0.1389941609349833, 0.20634084634950622, 0.15723860540011736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09656542861601558, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.1619792531383868, 0.1856375288503922, 0.15798215508747637, 0.1368279869270378, 0.17377774300845283, 0.13789763773654506, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.10709049236781232, 0.11057103663914736, 0.10613584697581813, 0.10693556961349315, 0.13634733769581708, 0.0924025960793119, 0.2610658853964066, 0.26709684213602436, 0.2791171917560754, 0.27611988500625184, 0.2813104166438595, 0.26043696553492424, 0.2628812068201237, 0.29292640104648515, 0.2780264525418221, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11901653492266284, 0.10728657811888753, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.038466274811100765, 0.045511073114331335, 0.06202551041199711, 0.07923950744594876, 0.06419953747183793, 0.17886364550794864, 0.19055570493076646, 0.18264600622686755, 0.16355831036427604, 0.20490100480257312, 0.17545040850144, 0.18245359300295105, 0.18377012847145702, 0.17027344231991648, 0.04660395977325371, 0.04486584151604989, 0.045915137311161924, 0.0487791782347764, 0.04957625361235696, 0.04525229325183666, 0.046953925514967576, 0.050315051850326586, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "cbb4a349-e888-4846-a78a-478d2d75ae35", "solution": "class AdaptiveHybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x, mutation_rate):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-mutation_rate, mutation_rate, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        mutation_rate = self.alpha\n\n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i], mutation_rate)\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n            # Update mutation rate adaptively based on the best cost\n            mutation_rate *= 0.95 if swarm_cost[i] < objective_function(g_best) else 1.05\n\n        return g_best", "name": "AdaptiveHybridPSOLSolver", "description": "Enhancing the HybridPSOLSolver algorithm by introducing adaptive mutation rates for improved local search exploration in the particle swarm optimization.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7852cc4-dcf1-4d08-bef5-814e2188790c", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.1631544867403505, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.08912254551010579, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.028334062693897377, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.011114522482661426, 0.014983635286774377, 0.0017348186343913996, 0.001658127641935736, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.1521727306482611, 0.13215661994669192, 0.13250682084948096, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16150831887191686, 0.14168231980522072, 0.1422290788762568, 0.13899495044159615, 0.13706577275276455, 0.15788478936189454, 0.1389941609349833, 0.20634084634950622, 0.15723860540011736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09656542861601558, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.1619792531383868, 0.1856375288503922, 0.15798215508747637, 0.1368279869270378, 0.17377774300845283, 0.13789763773654506, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.10709049236781232, 0.11057103663914736, 0.10613584697581813, 0.10693556961349315, 0.13634733769581708, 0.0924025960793119, 0.2610658853964066, 0.26709684213602436, 0.2791171917560754, 0.27611988500625184, 0.2813104166438595, 0.26043696553492424, 0.2628812068201237, 0.29292640104648515, 0.2780264525418221, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11901653492266284, 0.10728657811888753, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.038466274811100765, 0.045511073114331335, 0.06202551041199711, 0.07923950744594876, 0.06419953747183793, 0.17886364550794864, 0.19055570493076646, 0.18264600622686755, 0.16355831036427604, 0.20490100480257312, 0.17545040850144, 0.18245359300295105, 0.18377012847145702, 0.17027344231991648, 0.04660395977325371, 0.04486584151604989, 0.045915137311161924, 0.0487791782347764, 0.04957625361235696, 0.04525229325183666, 0.046953925514967576, 0.050315051850326586, 0.05399959391033049]}, "mutation_prompt": null}
{"id": "e40734c8-4984-4349-a8bb-2b13bd5b06e8", "solution": "class AdaptiveHybridPSOLSolver:\n    def __init__(self, budget, dim, swarm_size=30, omega=0.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.omega = omega\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def local_search(x, f_x, mutation_rate):\n            for _ in range(5):\n                x_new = x + np.random.uniform(-mutation_rate, mutation_rate, size=self.dim)\n                f_x_new = objective_function(x_new)\n                if f_x_new < f_x:\n                    x, f_x = x_new, f_x_new\n            return x, f_x\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        swarm_cost = np.array([objective_function(x) for x in swarm])\n        g_best_idx = np.argmin(swarm_cost)\n        g_best = swarm[g_best_idx]\n        \n        mutation_rate = self.alpha\n\n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                p_best = swarm[i] if swarm_cost[i] < objective_function(swarm[i]) else g_best\n                r_p = np.random.rand(self.dim)\n                swarm[i] = self.omega * swarm[i] + r_p * (p_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                swarm[i], swarm_cost[i] = local_search(swarm[i], swarm_cost[i], mutation_rate)\n                if swarm_cost[i] < objective_function(g_best):\n                    g_best = swarm[i]\n\n            # Update mutation rate adaptively based on the best cost\n            mutation_rate *= 0.95 if swarm_cost[i] < objective_function(g_best) else 1.05\n\n        return g_best", "name": "AdaptiveHybridPSOLSolver", "description": "Enhancing the HybridPSOLSolver algorithm by introducing adaptive mutation rates for improved local search exploration in the particle swarm optimization.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7852cc4-dcf1-4d08-bef5-814e2188790c", "metadata": {"aucs": [0.1812584198727072, 0.18437746865624272, 0.1631544867403505, 0.09169327139186534, 0.07922352036352331, 0.10728845430367129, 0.11433370837898438, 0.08912254551010579, 0.09939709550820042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04938542385552713, 0.05704628256489741, 0.0198611852137367, 0.03713116847310827, 0.0162982817064391, 0.02988122893581535, 0.04531637215603912, 0.010660679762599878, 0.028334062693897377, 0.02918035731350188, 0.033080501536240425, 0.01966684858424228, 0.04484043649031033, 0.011831784689163793, 0.011114522482661426, 0.014983635286774377, 0.0017348186343913996, 0.001658127641935736, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.013655303733502877, 0.018748765877226625, 0.02915245680492551, 0.05167784489546845, 0.06051175746747817, 0.031403458792672256, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.1521727306482611, 0.13215661994669192, 0.13250682084948096, 0.0667108215001172, 0.02725496812965944, 0.032159764882844, 0.026279303607937843, 0.09094002373887777, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16150831887191686, 0.14168231980522072, 0.1422290788762568, 0.13899495044159615, 0.13706577275276455, 0.15788478936189454, 0.1389941609349833, 0.20634084634950622, 0.15723860540011736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06311669138774323, 0.023145608074311763, 0.02835493234267228, 0.03103575868901065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16456259587070943, 0.1817736106083948, 0.14838054695461433, 0.12970410910602836, 0.12002135995406238, 0.10866434493807686, 0.18431501162560593, 0.19733738805619994, 0.20122841009768433, 0.007043105142196637, 0.01834644967228427, 9.999999999998899e-05, 0.030091164227596723, 0.03156673573174118, 0.037614408938975386, 0.03740569020723783, 0.054980678735156996, 0.06192150852950784, 0.10573851710768523, 0.0928732320417619, 0.08290834579532624, 0.09855305120349966, 0.10852972522114013, 0.09656542861601558, 0.11611090191568041, 0.07547159991142982, 0.10694953849605626, 0.13752623552056664, 0.13562485336446173, 0.15612820057192844, 0.1619792531383868, 0.1856375288503922, 0.15798215508747637, 0.1368279869270378, 0.17377774300845283, 0.13789763773654506, 0.05191950059620576, 0.05484947477830282, 0.07773114516629942, 0.10709049236781232, 0.11057103663914736, 0.10613584697581813, 0.10693556961349315, 0.13634733769581708, 0.0924025960793119, 0.2610658853964066, 0.26709684213602436, 0.2791171917560754, 0.27611988500625184, 0.2813104166438595, 0.26043696553492424, 0.2628812068201237, 0.29292640104648515, 0.2780264525418221, 0.1469122156397441, 0.1478521543901523, 0.13380215812014828, 0.14218563391008887, 0.15521481441045648, 0.1455873998020194, 0.155987989765901, 0.1652974699135653, 0.1391373480888911, 0.11901653492266284, 0.10728657811888753, 0.12245550839412978, 0.1791654990355389, 0.1207914665021157, 0.10422288431073734, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.04448251830388095, 0.05241056505422226, 0.038466274811100765, 0.045511073114331335, 0.06202551041199711, 0.07923950744594876, 0.06419953747183793, 0.17886364550794864, 0.19055570493076646, 0.18264600622686755, 0.16355831036427604, 0.20490100480257312, 0.17545040850144, 0.18245359300295105, 0.18377012847145702, 0.17027344231991648, 0.04660395977325371, 0.04486584151604989, 0.045915137311161924, 0.0487791782347764, 0.04957625361235696, 0.04525229325183666, 0.046953925514967576, 0.050315051850326586, 0.05399959391033049]}, "mutation_prompt": null}
