{"id": "24e28ae0-d0f1-4036-ad2a-04bf7c7df650", "solution": "import numpy as np\n\nclass DynamicSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.p_best_positions = np.copy(self.positions)\n        self.global_best_position = np.copy(self.positions[0])\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            # Evaluate current population\n            scores = np.array([func(pos) for pos in self.positions])\n            self.func_evaluations += self.population_size\n\n            # Update personal bests\n            better_p_best_mask = scores < np.array([func(p) for p in self.p_best_positions])\n            self.p_best_positions[better_p_best_mask] = self.positions[better_p_best_mask]\n\n            # Update global best\n            min_index = np.argmin(scores)\n            if scores[min_index] < self.best_score:\n                self.global_best_position = self.positions[min_index]\n                self.best_score = scores[min_index]\n\n            # Dynamic adjustment of mutation rate\n            self.mutation_rate = max(0.01, 0.2 * (1 - self.func_evaluations / self.budget))\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = np.random.random(self.dim) * (self.p_best_positions[i] - self.positions[i])\n                social_component = np.random.random(self.dim) * (self.global_best_position - self.positions[i])\n                inertia_component = 0.7 * self.velocities[i]\n\n                self.velocities[i] = inertia_component + cognitive_component + social_component\n                self.positions[i] += self.velocities[i]\n\n                # Apply mutation\n                mutation = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n                self.positions[i] += mutation\n\n                # Boundary check\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "DynamicSwarmOptimizer", "description": "A dynamic swarm-based algorithm integrating adaptive mutation rates and local search to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.20042878829555574, "feedback": "The algorithm DynamicSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3764527157014037, 0.4096145606666569, 0.3965517232389879, 0.3763984549626078, 0.3801046225819945, 0.39657904702610536, 0.3958077814324472, 0.36666833339848637, 0.3995636103435457, 0.028504295057230622, 0.028418771257512687, 0.004928254957173306, 0.008356425080581764, 0.04902745045312096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1100264858304919, 0.09043848406908506, 0.0976021313375921, 0.10083283343420424, 0.09638220207925974, 0.09467516048943947, 0.09856548299365464, 0.10324010567687436, 0.09975960489036295, 0.0918097785552503, 0.09579662063968353, 0.08813702930934375, 0.08669386580283622, 0.07508566012609941, 0.08897596703395305, 0.07713925641281782, 0.07666466568262498, 0.06585157551197496, 0.9818588081519845, 0.9838365112286301, 0.9872095329189747, 0.9838131699000114, 0.9789556806891162, 0.9819254548134423, 0.9837168247326764, 0.9834692636435145, 0.9814964921938847, 0.24297381951457586, 0.2557988906705543, 0.2555431721036524, 0.24767137942608475, 0.29987465835855653, 0.2513500084047059, 0.23995339354999634, 0.25897397021649804, 0.24702100926757098, 0.25307190854376627, 0.2084910601564417, 0.3819865158216097, 0.3336260784720504, 0.20653437850141376, 0.30911879673102405, 0.31247040657327485, 0.2359784803367726, 0.2311023061517753, 0.11450615505912409, 0.03607289304203276, 0.06105931276601273, 0.140922276626824, 0.11987978484906159, 0.1701107902652248, 0.14779965817613594, 0.14283197822831295, 0.14616077548758366, 0.12394212141750582, 0.13354502149802372, 0.1285123416457884, 0.12777354498305726, 0.14259163754629522, 0.13888865328845457, 0.1538907331705035, 9.999999999998899e-05, 0.1543402117288709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000988996773378159, 9.999999999998899e-05, 0.0034411019897555573, 9.999999999998899e-05, 9.999999999998899e-05, 0.009559253816743163, 0.04348724205286325, 0.044636416548955116, 0.04576922242280257, 0.05234156911980703, 0.00013968120238483372, 0.017691912922258912, 0.10145678177160411, 0.057079954133639865, 0.038420197326675454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08336728742029886, 0.06014837018120267, 0.039779913100357, 0.06524225757102209, 0.0627374255151586, 0.056159764865220674, 0.061596857881345946, 0.07163221880132731, 0.09661005235221987, 0.3930236869855638, 0.35802688631778623, 0.3588392226739633, 0.3696640132718044, 0.36085079039840917, 0.37093399967835594, 0.377677752566526, 0.39068161553069425, 0.3628064999228059, 0.09569042091404867, 0.0731887292637381, 0.0810127035484256, 0.10407623903639773, 0.09184962593936508, 0.10397769646511967, 0.09581367474841773, 0.11338593752415949, 0.09335220446994685, 0.21164605570970574, 0.20364889716245183, 0.24903200213183085, 0.2423311105636199, 0.2524202958222369, 0.15654287969309466, 0.2071885136508449, 0.20277173919725933, 0.15782775470281996, 0.2576880909358984, 0.2624110429966857, 0.2774821027351341, 0.2784398113421729, 0.2814336993397568, 0.26679004466196765, 0.20548915002170864, 0.26692976210520347, 0.18685628460411374, 0.22383429877016148, 0.21331602231308322, 0.1561348439130481, 0.1832488762202581, 0.21909729925868682, 0.20248029261305056, 0.16611225562405585, 0.15286798797488022, 0.08819874509760617, 0.1912328695944845, 0.19068765098557872, 0.19162915743475883, 0.20822285199137236, 0.23440686317999104, 0.21717879888331748, 0.20092791487486406, 0.19455360789824383, 0.21427105931737356, 0.18246794828262303, 0.1673774222515887, 0.20379822250895907, 0.23597521814081224, 0.21976175364481954, 0.19879316171787875, 0.17608923919710984, 0.1904863247881754, 0.18629118571686065, 0.52277207372298, 0.5960429714257391, 0.15447506855542215, 0.17016847862003215, 0.19863335038044616, 0.5763503511274382, 0.16674313248297967, 0.11080870556660372, 0.15054971573749065, 0.08263487791102031, 0.11152379168229709, 0.4457048589164031, 0.20684842691993377, 0.3369618881326909, 0.5359512939755706, 0.10418800687730767, 0.41456131432110765, 0.3538991356833421, 0.2024824700292569, 0.18023545859134427, 0.18218244479148227, 0.19720751160436734, 0.17460256692172715, 0.1790526973829608, 0.17987474368847034, 0.17466433098078016, 0.17527781577012735, 0.07648255942766069, 0.07525174077231533, 0.08633443034971056, 0.0988017384241584, 0.06994685799799116, 0.10746319320282072, 0.07970978014350172, 0.08928305913691925, 0.08413532710617144]}, "mutation_prompt": null}
{"id": "44c53742-45ad-4572-ae9e-0f85e343cb7c", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.probability_amplitudes = np.random.uniform(0, 1, (self.population_size, dim))\n        self.best_global_position = np.copy(self.positions[0])\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            scores = np.array([func(pos) for pos in self.positions])\n            self.func_evaluations += self.population_size\n\n            min_index = np.argmin(scores)\n            if scores[min_index] < self.best_score:\n                self.best_global_position = self.positions[min_index]\n                self.best_score = scores[min_index]\n\n            exploration_intensity = 0.5 * (1 - self.func_evaluations / self.budget)\n            \n            for i in range(self.population_size):\n                quantum_state = np.sign(np.random.uniform(-1, 1, self.dim)) * self.probability_amplitudes[i]\n                self.positions[i] += exploration_intensity * quantum_state * (self.best_global_position - self.positions[i])\n                \n                # Ensure positions remain within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n                # Update probability amplitudes for adaptive exploration\n                self.probability_amplitudes[i] = np.random.uniform(0, 1, self.dim) * exploration_intensity\n\n        return self.best_global_position", "name": "AdaptiveQuantumInspiredOptimizer", "description": "The Adaptive Quantum-Inspired Optimization (AQIO) uses principles of quantum mechanics to explore the search space through superposition and entanglement, adapting exploration intensity dynamically.", "configspace": "", "generation": 1, "fitness": 0.08056094091765073, "feedback": "The algorithm AdaptiveQuantumInspiredOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "24e28ae0-d0f1-4036-ad2a-04bf7c7df650", "metadata": {"aucs": [0.14132798224616272, 0.1289924304243959, 0.16221927284667637, 0.0724124144838002, 0.08082176132730479, 0.15986625190639803, 0.12509032907040074, 0.1369576386104151, 0.10349703185591808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04898881866972993, 0.03914921056710152, 0.04934296992784837, 0.05463784168067798, 0.04850942962060234, 0.09106964937077078, 0.03849852441770307, 0.04665840676568478, 0.05935814523547145, 0.026782181945150252, 0.050704282568931225, 0.029640078531509073, 0.050803161167039645, 0.03839903328634009, 0.0070040633150930676, 0.02394815065910838, 0.022493550910394844, 0.020406256931299493, 0.05258831591123614, 0.0554836505288544, 0.04287777107098589, 0.05943457367326721, 0.04687545855643349, 0.05134637826597466, 0.051785033034817074, 0.048986754550083944, 0.05865863663643234, 0.074463376031498, 0.020720152966215433, 0.12604174534040302, 0.06410924769838444, 0.05051821056631345, 0.07562394217571033, 0.0004943306660425417, 0.016554164728454834, 9.999999999998899e-05, 0.1356515930887826, 0.11231719949896357, 0.08351220988727781, 0.0745582909119934, 0.020119881954997476, 0.029076626324664567, 0.07183790045617333, 0.0577774129127685, 0.1439756723388519, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017187289618845192, 0.02269512701199783, 0.04066311621579666, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002155719850846838, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022358069798542823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06198082339276023, 0.058965167567212484, 0.10774172626337619, 0.06318276900188868, 0.002273392230008886, 0.020717729427136677, 0.08097230967552316, 0.08120597757187098, 0.06926006114629146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007046656727856093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2192778641673705, 0.19982657165114992, 0.17640554186111568, 0.14939812809283426, 0.1613468820821996, 0.160720828183471, 0.20903201309819774, 0.20052123269966216, 0.24310389301127877, 0.036274795261237336, 0.00717990384949152, 0.006005458571919142, 0.05047679856931031, 0.05836958560513816, 0.06660218026656661, 0.06023217469616704, 0.04998741590227762, 0.07843732795004721, 0.1354065688071341, 0.11937821457530284, 0.11703102434250634, 0.16479071247266708, 0.13840245104072035, 0.1563640677138466, 0.14120697072106925, 0.11844610237500441, 0.13095535112970047, 0.13956801215475423, 0.18611974292968825, 0.1616643238217781, 0.15639439282741352, 0.17116572622839044, 0.17640568255685374, 0.13589639773986872, 0.15058480973674704, 0.14883640831662248, 0.07864419381486254, 0.12646416490196932, 0.09142707068676159, 0.12135910931787763, 0.12681881726760091, 0.09552523943946833, 0.07331655252500036, 0.08715554762109112, 0.08554210699886877, 0.16792494047980067, 0.21275492470178325, 0.22012069646869092, 0.19065446000208786, 0.19521844938505428, 0.21185983037446154, 0.1956461822625799, 0.21407891581604443, 0.19975502169136827, 0.1494863171394325, 0.14892297188222325, 0.14660675702673798, 0.128869504218451, 0.16607498437405344, 0.14713069189643957, 0.12788071575530446, 0.1559398741313871, 0.15019525143618961, 0.10596518078962014, 0.15209771700742492, 0.10771724355860313, 0.14851698188802653, 0.1226634453411336, 0.20801020930449066, 0.10718273388986965, 0.10982335547380373, 0.09280100377950296, 0.11468115426982373, 0.0990030301541619, 0.15612052752416927, 0.09717764699547027, 0.14838252192381007, 0.10295341172315642, 0.05361003984155377, 0.1452686518616234, 0.12312622209162583, 0.18040333402634057, 0.19397532869089606, 0.19092179323043657, 0.1848069377182202, 0.18522869312917778, 0.17090712539572672, 0.18512340226482638, 0.177117289079183, 0.18346233387241906, 0.06442136227237139, 0.06911105887512858, 0.061064932555611406, 0.06923795917486275, 0.06980114004111126, 0.10663085610709622, 0.06784340907428399, 0.05838558765698887, 0.05962599804441071]}, "mutation_prompt": null}
{"id": "8b51ec18-3ccf-44ee-9a61-d651559e24f2", "solution": "import numpy as np\n\nclass GradientDrivenAdaptiveParticle:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.best_positions = np.copy(self.positions)\n        self.global_best_position = np.copy(self.positions[0])\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.learning_rate = 0.1\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            # Evaluate current population\n            scores = np.array([func(pos) for pos in self.positions])\n            self.func_evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < func(self.best_positions[i]):\n                    self.best_positions[i] = self.positions[i]\n                if scores[i] < self.best_score:\n                    self.global_best_position = self.positions[i]\n                    self.best_score = scores[i]\n\n            # Adaptive learning rate adjustment\n            self.learning_rate = 0.1 * (1 - self.func_evaluations / self.budget)\n\n            # Estimate gradient and update velocities and positions\n            for i in range(self.population_size):\n                gradient_approx = np.zeros(self.dim)\n                epsilon = 1e-8\n                for d in range(self.dim):\n                    step = np.zeros(self.dim)\n                    step[d] = epsilon\n                    gradient_approx[d] = (func(self.positions[i] + step) - func(self.positions[i] - step)) / (2 * epsilon)\n                    self.func_evaluations += 2\n\n                inertia_component = 0.5 * self.velocities[i]\n                cognitive_component = np.random.random(self.dim) * (self.best_positions[i] - self.positions[i])\n                social_component = np.random.random(self.dim) * (self.global_best_position - self.positions[i])\n                gradient_component = -self.learning_rate * gradient_approx\n\n                self.velocities[i] = inertia_component + cognitive_component + social_component + gradient_component\n                self.positions[i] += self.velocities[i]\n\n                # Boundary check\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "GradientDrivenAdaptiveParticle", "description": "Gradient-Driven Adaptive Particle (GDAP) algorithm combining gradient estimations with adaptive learning rates for enhanced convergence in optimization.", "configspace": "", "generation": 2, "fitness": 0.12681764007725654, "feedback": "The algorithm GradientDrivenAdaptiveParticle got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.22.", "error": "", "parent_id": "24e28ae0-d0f1-4036-ad2a-04bf7c7df650", "metadata": {"aucs": [0.6811252392902609, 0.7330951274261048, 0.6796879361132846, 0.7079401347460685, 0.7210316519102633, 0.6907629748570385, 0.6904838537766093, 0.6699125625158764, 0.7114994947663018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0060447311592773945, 0.016034737296541923, 0.011243740474165653, 0.00047980178932194306, 0.0012186517320337265, 0.006711708145028195, 0.018248265002116515, 0.008487530235581797, 0.004925396256732939, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019599722652575702, 0.00039131868220099175, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029652306600003175, 9.999999999998899e-05, 0.9375268456589361, 0.7374493920901399, 0.9424530341507682, 0.8788015846688255, 0.8971539297188518, 0.882078583627998, 0.8480105278164598, 0.9398583204131841, 0.8638566522275847, 0.05818654183010907, 0.012447385666097599, 0.01247336182857084, 0.08917442069565773, 0.04507568989109856, 0.08990047818522684, 9.999999999998899e-05, 0.011293333840821318, 9.999999999998899e-05, 0.1578785144903424, 0.08654381369601083, 0.08322265282180197, 0.21581844082783708, 0.1518143944277166, 0.16989334074075957, 0.06973624963378844, 0.0797937851528564, 0.08417467692285285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001500740337200268, 9.999999999998899e-05, 9.999999999998899e-05, 0.00036468349969231983, 9.999999999998899e-05, 0.0011304584801102857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4401270211961321, 0.43651175628152206, 0.38872650277575727, 0.3845572659902816, 0.40563537960979223, 0.3784074483786548, 0.4113749930042728, 0.38733976488740174, 0.4037612112767127, 0.025169893051866565, 0.016456363960591025, 0.0354600957568838, 0.012190848103616148, 0.011841766310603075, 0.01992645902593526, 0.0034867114553585044, 0.007696783860073442, 0.02676567005419639, 0.09301931869782343, 0.09301498925135854, 0.09085440878221429, 0.09855319337838997, 0.10852978109348299, 0.07636412684404859, 0.06995759418114045, 0.051298533960804193, 0.07891534683893009, 0.16873094186135418, 0.1418203006353257, 0.17559761148378805, 0.1446804736628705, 0.14529164702369235, 0.14506905753521715, 0.13286243967691935, 0.13734454873710655, 0.12547184651578114, 0.04196858853505692, 0.04592536401437319, 0.044107745750575855, 0.04465067805455625, 0.028142292435925254, 0.038486411649062524, 0.05814014182010829, 0.04032781110466255, 0.03766092969714396, 0.09163481239161486, 0.060896221809414564, 0.13345160431209402, 0.10289081304058323, 0.07855268225514633, 0.08176257628921813, 0.12245983641155345, 0.06494059246838568, 0.12619726600077452, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.30510545430666114, 0.2842348272123113, 0.1427707572375999, 0.16924510564732576, 0.19893946128684703, 0.1645944016090305, 0.3283433207985583, 0.11387732899066705, 0.1549475862760601, 0.08262282997764436, 0.20557412847357803, 0.14764788486243818, 0.1525925718646316, 0.16455611951626747, 0.18128440680375435, 0.10453835836723102, 0.1107432475729272, 0.1927547146511307, 0.12265051628858015, 0.12077296800772386, 0.1476302678149215, 0.14256806818495438, 0.12977387140575103, 0.14441370922969543, 0.13864020838083002, 0.1378584849018214, 0.15037418917915735, 0.002930529279078331, 0.013478148669468615, 0.03139349866535235, 0.0007997187015648111, 0.018136040347311755, 0.008260915169614247, 0.010255236858448424, 0.0010544343021418046, 0.01905621373498556]}, "mutation_prompt": null}
{"id": "7fcc7d5c-4500-4f83-8e67-ae8eafbbaf90", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.temperature = 1.0\n        self.func_evaluations = 0\n        self.alpha = 0.98  # Cooling rate\n        self.position = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n        self.best_position = np.copy(self.position)\n        self.best_score = float('inf')\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            # Quantum-inspired superposition: generate new candidate solutions\n            superposed_state = np.random.uniform(-1, 1, self.dim) * self.temperature\n            candidate_position = self.position + superposed_state\n            candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n            \n            # Evaluate candidate solution\n            candidate_score = func(candidate_position)\n            self.func_evaluations += 1\n            \n            # Accept or reject the new candidate\n            if candidate_score < self.best_score or np.random.rand() < np.exp((self.best_score - candidate_score) / self.temperature):\n                self.position = candidate_position\n                if candidate_score < self.best_score:\n                    self.best_score = candidate_score\n                    self.best_position = candidate_position\n\n            # Adaptive cooling schedule\n            self.temperature = max(0.01, self.alpha * (1 - self.func_evaluations / self.budget) * self.temperature)\n\n        return self.best_position", "name": "QuantumInspiredAdaptiveSimulatedAnnealing", "description": "Quantum-Inspired Adaptive Simulated Annealing (QIASA) uses quantum-inspired superposition principles to enhance global search with adaptive cooling schedules for efficient optimization.", "configspace": "", "generation": 3, "fitness": 0.14776823968533756, "feedback": "The algorithm QuantumInspiredAdaptiveSimulatedAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.13.", "error": "", "parent_id": "24e28ae0-d0f1-4036-ad2a-04bf7c7df650", "metadata": {"aucs": [0.4907120856904674, 0.5255897726985412, 0.5063544973147727, 0.46187093442908345, 0.48621080015480656, 0.48896914669758385, 0.43150202828067286, 0.19872114283842413, 0.4373865798963894, 0.055276976637870234, 0.04973407778198502, 9.999999999998899e-05, 0.08386113724763822, 0.004351102169194432, 9.999999999998899e-05, 0.05965604737089647, 9.999999999998899e-05, 9.999999999998899e-05, 0.03484756628482322, 9.999999999998899e-05, 9.999999999998899e-05, 0.034839291325933996, 0.019570368379039582, 0.019601821910096295, 0.05092566138649113, 0.05084344349608505, 0.018232626989053258, 0.08525340184299679, 9.999999999998899e-05, 9.999999999998899e-05, 0.020227501083890265, 0.007824673390365966, 0.009923628084072655, 0.004358029868665625, 9.999999999998899e-05, 9.999999999998899e-05, 0.0867342656392357, 0.0915661580326741, 0.09278655248321233, 0.13070655920024765, 0.08562531270706109, 0.14679399167774632, 0.12966283545030366, 0.4279878587131931, 0.4138276267991571, 0.41414068398836235, 0.32133679369385904, 0.32716542181612107, 0.3721946657662415, 0.3783553064695624, 0.3956627225218037, 0.34091201653702496, 0.24797457242491483, 0.27773819299101266, 0.10739819607123513, 0.09881208882279757, 0.07449449968398625, 0.28665157371893046, 0.03512074594260817, 0.0864237907444605, 0.10403277119867615, 0.019789838917525282, 0.01789070919524005, 0.2098204438593927, 0.29317743231264304, 0.30805992815157046, 0.26105643293513403, 0.30989429821803305, 0.29217386412120094, 0.30503466574884675, 0.30674935815816895, 0.2762969226970712, 0.34923578536164235, 0.24028104540164164, 0.2566421865951768, 0.2905152602145641, 0.13356105257696804, 0.27725927669515904, 0.2703195045320639, 0.21422625496353787, 0.26143675489434337, 0.07747067980008104, 9.999999999998899e-05, 0.007045623974356041, 0.1133708740950704, 0.006290567138774739, 0.11292728952190723, 0.006438733283142262, 9.999999999998899e-05, 0.043086031912420775, 0.034333436912690196, 0.09969997035593947, 0.10100160923283452, 0.06964506554398797, 0.01859793149692579, 0.014577054066317707, 0.13607129106725935, 0.022778831812202638, 0.06319119327426614, 0.13836696898503287, 0.08102853787301789, 0.17761637262221652, 0.07972997727707076, 0.14928844533356933, 0.07839316547267117, 0.14826036070514215, 0.12702946084355804, 0.15822829561372054, 0.0321112492479626, 0.21128277073061663, 0.06245383387372416, 0.08445831031651718, 0.10172271901840813, 0.09157238275337565, 0.15504303645952222, 0.07324818622985718, 0.1302667771317394, 0.21807602912609314, 0.3774026374394611, 0.21408935862362466, 0.3299061859983916, 0.11262814899491536, 0.3393313829224276, 0.4214412172483779, 0.3615550210548514, 0.40066892681641353, 0.031171261147329266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0223738245515126, 0.07192676639626139, 0.04676360676043245, 0.045626530671416754, 0.050896920551839475, 0.18882076648230928, 0.17973719493936258, 0.23619658054678117, 0.15451355961696733, 0.16279946341366736, 0.12616716967693065, 0.21414384096015426, 0.10569412324029237, 0.12098772425804749, 0.12839438027614214, 0.10068425515326185, 0.1105882179235187, 0.12332666196003006, 0.12767966118003793, 0.13256231503286287, 0.14423857205257196, 0.07646987678596762, 0.09042791399191685, 0.09965154968322398, 0.04930751705310543, 0.03615646026050712, 0.06972830473314606, 0.008275976168841015, 0.06752205685730917, 0.0676394585866732, 0.030138774615604547, 0.015759076205669742, 0.18126080127492017, 0.1644495394740385, 0.1442372911541433, 0.16019109809770127, 0.10178134078065637, 0.0978911568893629, 0.1290629198224813, 0.12305401419718309, 0.14432319245600078, 0.2037389283848583, 0.16180032775455366, 0.1813723922896009, 0.1699233236700497, 0.16835091253403245, 0.18174690590046438, 0.2141541776682081, 0.1768285603609997, 0.1635022825503536, 0.15945935891537866, 0.13792702388642397, 0.0716503659313199, 0.17332200494367023, 0.11108529007463042, 0.06170481668020311, 0.05260909553728821, 0.11862668229454698, 0.1680459205755187, 0.29681607483658656, 0.11345819153260794, 0.08282832544861962, 0.08353219159440706, 0.4500192382987802, 0.20104415017184174, 0.11357538392155075, 0.05931696917716012, 0.09399014530661187, 0.2675841683104533, 0.2355922562756786, 0.22966778333902294, 0.266241399592531, 0.24353850083800865, 0.18846792991229644, 0.23278949263659476, 0.1875775398642262, 0.2237934283750186, 0.026248772958101685, 0.07394648204025966, 0.029090128517793357, 0.03246363888144366, 0.019299406832963384, 0.056728643878849794, 0.07470413092823747, 0.020862429935305737, 0.06889637870103293]}, "mutation_prompt": null}
{"id": "0c4f9250-ac6a-494f-94f2-e133ecf25b44", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.q_population = np.pi * np.random.uniform(-1, 1, (self.population_size, dim))  # Quantum states (angles)\n        self.best_solution = None\n        self.best_score = float('inf')\n        self.func_evaluations = 0\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            # Convert quantum states to real values via quantum observation (superposition)\n            real_population = self.lower_bound + (self.upper_bound - self.lower_bound) * (0.5 * (1 + np.cos(self.q_population)))\n\n            # Evaluate\n            scores = np.array([func(ind) for ind in real_population])\n            self.func_evaluations += self.population_size\n\n            # Update best solution\n            min_index = np.argmin(scores)\n            if scores[min_index] < self.best_score:\n                self.best_solution = real_population[min_index]\n                self.best_score = scores[min_index]\n\n            # Quantum interference: update using the best found solution\n            best_angles = np.arccos((2 * (self.best_solution - self.lower_bound) / (self.upper_bound - self.lower_bound)) - 1)\n            self.q_population += np.random.uniform(-0.1, 0.1, (self.population_size, self.dim)) * (best_angles - self.q_population)\n\n            # Maintain boundaries in quantum states\n            self.q_population = np.clip(self.q_population, -np.pi, np.pi)\n\n        return self.best_solution", "name": "QuantumInspiredEvolutionaryOptimizer", "description": "Quantum-Inspired Evolutionary Algorithm leveraging quantum superposition and interference for enhanced exploration and exploitation.", "configspace": "", "generation": 4, "fitness": 0.06930277741972136, "feedback": "The algorithm QuantumInspiredEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "24e28ae0-d0f1-4036-ad2a-04bf7c7df650", "metadata": {"aucs": [0.12281805387658007, 0.10650555896525982, 0.10549167995954811, 0.10386577087820026, 0.09814911148699246, 0.0825277087742401, 0.10299932021323532, 0.17803830992380465, 0.15094883477880683, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03988756469683563, 0.035361233148036075, 0.01170602360680606, 0.04520556030551548, 0.034644723711085845, 0.011582252683059013, 0.0307489415871518, 0.04140224162058681, 0.024102112674834864, 0.0377625765429177, 0.040895556235242325, 0.02588410817804887, 0.03963553099489714, 0.024164680806390226, 0.012971928634690322, 0.016827959993581998, 0.03958830783602574, 0.002632590895295994, 0.09441891137916503, 0.10332720746892732, 0.1689708334776353, 0.0708092585104263, 0.06254488630841315, 0.07925184971106192, 0.07152843658603925, 0.07366410730589046, 0.06447078232863745, 0.07138138912979464, 0.05400997785298767, 0.05479122899074407, 0.0047732961555484454, 0.02119728208132543, 0.05286917540081726, 0.04912925948701741, 0.0503735519887496, 0.01630876057060482, 0.05829235681567313, 0.11513299595554927, 0.07156805145113199, 0.07290284398700919, 0.09013039529265299, 0.06300919108731362, 0.11346225178150193, 0.12492566656942383, 0.12288168652490006, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03257257012231163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008784237715299015, 0.04276087014045027, 0.0196403698023514, 0.07642833925600245, 0.044386445488356574, 0.0502629393170253, 0.03552328117202819, 0.04887330039837667, 0.057470364473174995, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14971785567232687, 0.14089028983002538, 0.13892783773043993, 0.1566223014740522, 0.15315790551106534, 0.13189397831981442, 0.14721555481415194, 0.12319732240950143, 0.16295497672770376, 0.026316645612275313, 0.041735428415431874, 0.042702068733387, 0.025828137933528894, 0.019523553221386658, 0.03645166432279423, 0.02089981052306178, 0.017188875813952675, 0.024050838675921615, 0.13559777698099584, 0.1862432002401454, 0.1300312989984579, 0.13565609620878372, 0.1473456986474444, 0.14845210346902227, 0.1360506849732399, 0.14509369968312735, 0.1595991656872977, 0.1774157021464633, 0.15354719050394838, 0.1529408463234393, 0.15156843095566142, 0.14510018839117633, 0.1390363822978734, 0.13108137971471168, 0.15451615089812476, 0.15501993238771195, 0.09230885451399284, 0.08250992384793021, 0.08887477747007855, 0.08241310878554198, 0.09178032870756614, 0.09477876765789384, 0.08835710615160186, 0.09535614298535222, 0.08222652879664871, 0.13892247526434154, 0.14434254268518365, 0.135144770923306, 0.1312792127749599, 0.14206739400844404, 0.12836885531054743, 0.12094881827634651, 0.12252239656442365, 0.12441079045165027, 0.0300693540379241, 0.017772280804129514, 0.042286100180508934, 0.006602159266644647, 0.12590826421759427, 9.999999999998899e-05, 0.0009687908083048091, 0.04974251504316596, 9.999999999998899e-05, 0.15304095486919467, 0.10632953135627354, 0.17094723644943732, 0.11364111703401236, 0.12287264505718298, 0.11432967942628547, 0.12614151608859114, 0.1600417181019026, 0.1292746077447704, 0.09563622176764508, 0.15423311251582073, 0.11441419135327124, 0.10433658711450422, 0.23977457573442484, 0.09179708500025208, 0.12843916840540437, 0.09030732040987821, 0.1672743153972993, 0.1847696791209169, 0.1774881340494494, 0.1872871116419188, 0.18766716443325526, 0.20028129530595007, 0.2025991447137231, 0.1973066186776118, 0.19745174952233469, 0.1834051660626156, 0.035384250445032794, 0.06131877866743929, 0.03140335797507465, 0.050341383293763475, 0.043750280022120225, 0.04308950789542032, 0.044185209118953184, 0.046464951628287454, 0.02416472738527986]}, "mutation_prompt": null}
{"id": "c823413b-22fd-4a32-a0c8-d78b6384e18b", "solution": "import numpy as np\n\nclass DynamicSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.p_best_positions = np.copy(self.positions)\n        self.global_best_position = np.copy(self.positions[0])\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            # Evaluate current population\n            scores = np.array([func(pos) for pos in self.positions])\n            self.func_evaluations += self.population_size\n\n            # Update personal bests\n            better_p_best_mask = scores < np.array([func(p) for p in self.p_best_positions])\n            self.p_best_positions[better_p_best_mask] = self.positions[better_p_best_mask]\n\n            # Update global best\n            min_index = np.argmin(scores)\n            if scores[min_index] < self.best_score:\n                self.global_best_position = self.positions[min_index]\n                self.best_score = scores[min_index]\n\n            # Dynamic adjustment of mutation rate\n            self.mutation_rate = max(0.01, 0.2 * (1 - self.func_evaluations / self.budget))\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = np.random.random(self.dim) * (self.p_best_positions[i] - self.positions[i])\n                social_component = np.random.random(self.dim) * (self.global_best_position - self.positions[i])\n                inertia_component = 0.7 * self.velocities[i]\n\n                self.velocities[i] = inertia_component + cognitive_component + social_component\n                self.positions[i] += self.velocities[i]\n\n                # Apply mutation\n                mutation = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n                self.positions[i] += mutation\n\n                # Boundary check\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "DynamicSwarmOptimizer", "description": "A dynamic swarm-based algorithm integrating adaptive mutation rates and local search to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "24e28ae0-d0f1-4036-ad2a-04bf7c7df650", "metadata": {"aucs": [0.3764527157014037, 0.4096145606666569, 0.3965517232389879, 0.3763984549626078, 0.3801046225819945, 0.39657904702610536, 0.3958077814324472, 0.36666833339848637, 0.3995636103435457, 0.028504295057230622, 0.028418771257512687, 0.004928254957173306, 0.008356425080581764, 0.04902745045312096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1100264858304919, 0.09043848406908506, 0.0976021313375921, 0.10083283343420424, 0.09638220207925974, 0.09467516048943947, 0.09856548299365464, 0.10324010567687436, 0.09975960489036295, 0.0918097785552503, 0.09579662063968353, 0.08813702930934375, 0.08669386580283622, 0.07508566012609941, 0.08897596703395305, 0.07713925641281782, 0.07666466568262498, 0.06585157551197496, 0.9818588081519845, 0.9838365112286301, 0.9872095329189747, 0.9838131699000114, 0.9789556806891162, 0.9819254548134423, 0.9837168247326764, 0.9834692636435145, 0.9814964921938847, 0.24297381951457586, 0.2557988906705543, 0.2555431721036524, 0.24767137942608475, 0.29987465835855653, 0.2513500084047059, 0.23995339354999634, 0.25897397021649804, 0.24702100926757098, 0.25307190854376627, 0.2084910601564417, 0.3819865158216097, 0.3336260784720504, 0.20653437850141376, 0.30911879673102405, 0.31247040657327485, 0.2359784803367726, 0.2311023061517753, 0.11450615505912409, 0.03607289304203276, 0.06105931276601273, 0.140922276626824, 0.11987978484906159, 0.1701107902652248, 0.14779965817613594, 0.14283197822831295, 0.14616077548758366, 0.12394212141750582, 0.13354502149802372, 0.1285123416457884, 0.12777354498305726, 0.14259163754629522, 0.13888865328845457, 0.1538907331705035, 9.999999999998899e-05, 0.1543402117288709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000988996773378159, 9.999999999998899e-05, 0.0034411019897555573, 9.999999999998899e-05, 9.999999999998899e-05, 0.009559253816743163, 0.04348724205286325, 0.044636416548955116, 0.04576922242280257, 0.05234156911980703, 0.00013968120238483372, 0.017691912922258912, 0.10145678177160411, 0.057079954133639865, 0.038420197326675454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08336728742029886, 0.06014837018120267, 0.039779913100357, 0.06524225757102209, 0.0627374255151586, 0.056159764865220674, 0.061596857881345946, 0.07163221880132731, 0.09661005235221987, 0.3930236869855638, 0.35802688631778623, 0.3588392226739633, 0.3696640132718044, 0.36085079039840917, 0.37093399967835594, 0.377677752566526, 0.39068161553069425, 0.3628064999228059, 0.09569042091404867, 0.0731887292637381, 0.0810127035484256, 0.10407623903639773, 0.09184962593936508, 0.10397769646511967, 0.09581367474841773, 0.11338593752415949, 0.09335220446994685, 0.21164605570970574, 0.20364889716245183, 0.24903200213183085, 0.2423311105636199, 0.2524202958222369, 0.15654287969309466, 0.2071885136508449, 0.20277173919725933, 0.15782775470281996, 0.2576880909358984, 0.2624110429966857, 0.2774821027351341, 0.2784398113421729, 0.2814336993397568, 0.26679004466196765, 0.20548915002170864, 0.26692976210520347, 0.18685628460411374, 0.22383429877016148, 0.21331602231308322, 0.1561348439130481, 0.1832488762202581, 0.21909729925868682, 0.20248029261305056, 0.16611225562405585, 0.15286798797488022, 0.08819874509760617, 0.1912328695944845, 0.19068765098557872, 0.19162915743475883, 0.20822285199137236, 0.23440686317999104, 0.21717879888331748, 0.20092791487486406, 0.19455360789824383, 0.21427105931737356, 0.18246794828262303, 0.1673774222515887, 0.20379822250895907, 0.23597521814081224, 0.21976175364481954, 0.19879316171787875, 0.17608923919710984, 0.1904863247881754, 0.18629118571686065, 0.52277207372298, 0.5960429714257391, 0.15447506855542215, 0.17016847862003215, 0.19863335038044616, 0.5763503511274382, 0.16674313248297967, 0.11080870556660372, 0.15054971573749065, 0.08263487791102031, 0.11152379168229709, 0.4457048589164031, 0.20684842691993377, 0.3369618881326909, 0.5359512939755706, 0.10418800687730767, 0.41456131432110765, 0.3538991356833421, 0.2024824700292569, 0.18023545859134427, 0.18218244479148227, 0.19720751160436734, 0.17460256692172715, 0.1790526973829608, 0.17987474368847034, 0.17466433098078016, 0.17527781577012735, 0.07648255942766069, 0.07525174077231533, 0.08633443034971056, 0.0988017384241584, 0.06994685799799116, 0.10746319320282072, 0.07970978014350172, 0.08928305913691925, 0.08413532710617144]}, "mutation_prompt": null}
{"id": "4dde7e64-cfc3-439b-9e25-f7380ab5665a", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.individuals = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_individual = np.copy(self.individuals[0])\n        self.best_score = float('inf')\n        self.func_evaluations = 0\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            # Evaluate current population\n            scores = np.array([func(ind) for ind in self.individuals])\n            self.func_evaluations += self.population_size\n\n            # Update global best\n            min_index = np.argmin(scores)\n            if scores[min_index] < self.best_score:\n                self.best_individual = self.individuals[min_index]\n                self.best_score = scores[min_index]\n\n            # Quantum-inspired rotation gate\n            theta = np.random.uniform(0, np.pi, (self.population_size, self.dim))\n            rotation_matrix = np.array([[np.cos(theta), -np.sin(theta)], [np.sin(theta), np.cos(theta)]])\n            \n            for i in range(self.population_size):\n                probability_amplitude = np.random.random(self.dim)\n                qubit = np.array([np.sqrt(probability_amplitude), np.sqrt(1 - probability_amplitude)])\n                rotated_qubit = rotation_matrix[i] @ qubit\n                self.individuals[i] = self.lower_bound + (self.upper_bound - self.lower_bound) * rotated_qubit[0]\n\n            # Adaptive crossover based on diversity\n            diversity = np.std(self.individuals, axis=0)\n            crossover_rate = np.clip(0.2 + 0.8 * (1 - diversity / np.ptp(self.individuals, axis=0)), 0.2, 0.9)\n\n            for i in range(0, self.population_size, 2):\n                if i + 1 < self.population_size and np.random.random() < crossover_rate.mean():\n                    crossover_point = np.random.randint(1, self.dim)\n                    self.individuals[i][:crossover_point], self.individuals[i+1][:crossover_point] = (\n                        self.individuals[i+1][:crossover_point].copy(),\n                        self.individuals[i][:crossover_point].copy(),\n                    )\n\n            # Boundary check\n            self.individuals = np.clip(self.individuals, self.lower_bound, self.upper_bound)\n\n        return self.best_individual", "name": "AdaptiveQuantumInspiredEA", "description": "Adaptive Quantum-Inspired Evolutionary Algorithm (AQIEA) that utilizes quantum superposition for diverse exploration and adaptive crossover for convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 5)').", "error": "ValueError('matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 5)')", "parent_id": "24e28ae0-d0f1-4036-ad2a-04bf7c7df650", "metadata": {}, "mutation_prompt": null}
{"id": "f62d7454-4678-4fcb-9843-4d73524fef43", "solution": "import numpy as np\n\nclass HybridGeneticParticleAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.p_best_positions = np.copy(self.positions)\n        self.global_best_position = np.copy(self.positions[0])\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        while self.func_evaluations + self.population_size <= self.budget:\n            # Evaluate current population\n            scores = np.array([func(pos) for pos in self.positions])\n            self.func_evaluations += self.population_size\n\n            # Update personal bests\n            better_p_best_mask = scores < np.array([func(p) for p in self.p_best_positions])\n            self.p_best_positions[better_p_best_mask] = self.positions[better_p_best_mask]\n\n            # Update global best\n            min_index = np.argmin(scores)\n            if scores[min_index] < self.best_score:\n                self.global_best_position = self.positions[min_index]\n                self.best_score = scores[min_index]\n\n            # Dynamic adjustment of mutation rate\n            self.mutation_rate = max(0.01, 0.2 * (1 - self.func_evaluations / self.budget))\n\n            # Hybrid crossover and particle swarm update\n            new_positions = np.copy(self.positions)\n            for i in range(self.population_size):\n                # Genetic crossover with global best\n                mate_index = np.random.choice(self.population_size)\n                crossover_point = np.random.randint(1, self.dim)\n                new_positions[i, :crossover_point] = self.p_best_positions[mate_index, :crossover_point]\n                new_positions[i, crossover_point:] = self.positions[i, crossover_point:]\n\n                # Particle swarm dynamics\n                cognitive_component = np.random.random(self.dim) * (self.p_best_positions[i] - new_positions[i])\n                social_component = np.random.random(self.dim) * (self.global_best_position - new_positions[i])\n                inertia_component = 0.7 * self.velocities[i]\n\n                self.velocities[i] = inertia_component + cognitive_component + social_component\n                new_positions[i] += self.velocities[i]\n\n                # Apply mutation\n                mutation = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n                new_positions[i] += mutation\n\n                # Boundary check\n                new_positions[i] = np.clip(new_positions[i], self.lower_bound, self.upper_bound)\n            \n            self.positions = new_positions\n\n        return self.global_best_position", "name": "HybridGeneticParticleAlgorithm", "description": "Hybrid Genetic-Particle Algorithm (HGPA) blending genetic crossover and particle swarm dynamics to enhance exploration and precision in convergence.", "configspace": "", "generation": 7, "fitness": 0.18259498588101714, "feedback": "The algorithm HybridGeneticParticleAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "24e28ae0-d0f1-4036-ad2a-04bf7c7df650", "metadata": {"aucs": [0.38169593644823696, 0.3902408881491638, 0.393396026085965, 0.40019256086528354, 0.40516855128984064, 0.3927758031959455, 0.3917056162933481, 0.39856053778228684, 0.39453294029873054, 0.025330322769823055, 0.05786916006545284, 0.009630508836331542, 0.010231693104285844, 0.01515438136736813, 0.018535017617464455, 0.0135449938768476, 0.035073672008820944, 0.00859052830592244, 0.08025833530670623, 0.08617617341868267, 0.0867058812014988, 0.08062436899605585, 0.07618201561735227, 0.08213697797148811, 0.08659298328729415, 0.06998503269088574, 0.08234392369213694, 0.06806244408696638, 0.07082507576633779, 0.07757430683728528, 0.07825258810394675, 0.07041557336844939, 0.07617525705348871, 0.07472121054655867, 0.07340948301787997, 0.06160555393962097, 0.9846438990604773, 0.9888463122694251, 0.9860296800223793, 0.9859105566239258, 0.9819634254722535, 0.9887278766856856, 0.9883837110226824, 0.9870238170779554, 0.9836816148203419, 0.21868803950348548, 0.24441339236078896, 0.21785401072583777, 0.23327690960925185, 0.21370186693687587, 0.2432231957840345, 0.20548978601994028, 0.25267230044026234, 0.2495127363792805, 0.21098455258002002, 0.12572256467642362, 0.12846968831917116, 0.28361345576716246, 0.27468934901251385, 0.2832732779428153, 0.2828990644804782, 0.2607610483864409, 0.1632135131797744, 0.1206388269881743, 0.12200536853015109, 0.14701193720586803, 0.1393080439118194, 0.14153625436749573, 0.14854813444864012, 0.12253880023228703, 0.11877895830593899, 0.13877994536876925, 0.12829924621395072, 0.06049102642235449, 0.1349766868116241, 0.0898473983799849, 0.12151986225074674, 0.1121119562265005, 0.13049037563336274, 0.10272558291189926, 0.14150412744059526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06355465565690233, 0.05168918338550632, 0.05927210659830817, 0.0305388061000067, 9.999999999998899e-05, 9.999999999998899e-05, 0.08861672874398485, 0.02974369305216984, 0.048469022864491285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04685789503665805, 0.06039762340242216, 0.08567448788317578, 0.04552690105870516, 0.06925411250055535, 0.053986319448980025, 0.07480908880743808, 0.0486599637447227, 0.054495119092207056, 0.3791964431185767, 0.37141250061860265, 0.37432808765692627, 0.35797214462600413, 0.364648661122017, 0.33201777021873813, 0.36833299120136975, 0.3697548855347279, 0.37154562614315556, 0.08348867026232398, 0.08631958040339882, 0.06708346681879174, 0.08052865236006546, 0.06832557369483783, 0.08869178240816344, 0.06804397782723148, 0.07118334901566015, 0.07640652425880579, 0.13195537749552855, 0.12832337691814466, 0.23426657664167205, 0.1372905078595662, 0.15710432170604127, 0.15564203873043736, 0.17457857440106783, 0.12893924617074803, 0.14731615339722526, 0.22937146532575325, 0.27348436533701637, 0.25404499509263123, 0.24265893145730644, 0.24611319102840357, 0.2633488657576686, 0.24466704798570904, 0.27791366871449685, 0.16360998580101482, 0.10972577185996779, 0.17457692194079533, 0.1584599737600162, 0.184551023411743, 0.16103960973528608, 0.12403891612416396, 0.2014070985764519, 0.20721067526842885, 0.20028017620251493, 0.17708357433781763, 0.18840691971929813, 0.16342839836610423, 0.18629299348920392, 0.18632261627290803, 0.1835792625185826, 0.175865437343785, 0.17832630331190302, 0.19628965153470046, 0.17702003230822938, 0.1815035265874535, 0.1648354498246556, 0.17897324384909208, 0.16687609032206674, 0.17084887108467683, 0.17204278295303743, 0.172452617804569, 0.1834273736821811, 0.4071061193784129, 0.1617746377993743, 0.1486825117467091, 0.17155902278482082, 0.17802962160280256, 0.18447810784653518, 0.28761957911983005, 0.1966353877841024, 0.15604359335132667, 0.24918142903354568, 0.20753982351209388, 0.20216888735192107, 0.19472870890334548, 0.16569052625916192, 0.19924738145955134, 0.10380604570767538, 0.14367663716518686, 0.3384485315001291, 0.18126233421992288, 0.1801429138624555, 0.17874536335468272, 0.18154879398969948, 0.17381224571100595, 0.1794346447252858, 0.1862705164270062, 0.19371096836454238, 0.1726808906893733, 0.048233842144210226, 0.06566183447616514, 0.08243728880356271, 0.0679357187265458, 0.07737534200694662, 0.06456596410918114, 0.06350724900770077, 0.07280722785759497, 0.05258836276800993]}, "mutation_prompt": null}
{"id": "67ecccc3-ec3b-434e-baaf-4b72e48facec", "solution": "import numpy as np\n\nclass HybridGradientPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.p_best_positions = np.copy(self.positions)\n        self.global_best_position = np.copy(self.positions[0])\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.inertia_weight = 0.7\n\n    def estimate_gradient(self, func, position):\n        epsilon = 1e-5\n        grad = np.zeros(self.dim)\n        for i in range(self.dim):\n            step = np.zeros(self.dim)\n            step[i] = epsilon\n            grad[i] = (func(position + step) - func(position - step)) / (2 * epsilon)\n            self.func_evaluations += 2\n        return grad\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            # Evaluate current population\n            scores = np.array([func(pos) for pos in self.positions])\n            self.func_evaluations += self.population_size\n\n            # Update personal bests\n            better_p_best_mask = scores < np.array([func(p) for p in self.p_best_positions])\n            self.p_best_positions[better_p_best_mask] = self.positions[better_p_best_mask]\n\n            # Update global best\n            min_index = np.argmin(scores)\n            if scores[min_index] < self.best_score:\n                self.global_best_position = self.positions[min_index]\n                self.best_score = scores[min_index]\n\n            for i in range(self.population_size):\n                # Estimate gradient and use it to adjust position\n                gradient = self.estimate_gradient(func, self.positions[i])\n                gradient_step = -0.01 * gradient  # step size for gradient adjustment\n\n                # Particle swarm update\n                cognitive_component = self.c1 * np.random.random(self.dim) * (self.p_best_positions[i] - self.positions[i])\n                social_component = self.c2 * np.random.random(self.dim) * (self.global_best_position - self.positions[i])\n                self.velocities[i] = self.inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.positions[i] += self.velocities[i] + gradient_step\n\n                # Boundary check\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evaluations >= self.budget:\n                break\n\n        return self.global_best_position", "name": "HybridGradientPSO", "description": "Hybrid Gradient-Based Particle Swarm Optimizer (HG-PSO): Enhances dynamic swarm optimization by integrating derivative-free gradient estimation to guide convergence toward the optimum.", "configspace": "", "generation": 8, "fitness": 0.11041440124288322, "feedback": "The algorithm HybridGradientPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.18.", "error": "", "parent_id": "24e28ae0-d0f1-4036-ad2a-04bf7c7df650", "metadata": {"aucs": [0.25584186218413085, 0.24962707153316088, 0.32321378991795124, 0.2510874948795747, 0.24122317621792222, 0.2528509279305633, 0.28455103405559046, 0.17075624027926373, 0.3008604968613954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038863415001005874, 0.02766239871230103, 0.04372157542684563, 0.04646016854783608, 0.03153130581401731, 0.044641002452816214, 0.03068927978268532, 0.03394126761416738, 0.038683552037634183, 0.003118284058467591, 0.03835765523001233, 0.01097521080209285, 0.01960079781066615, 0.008814672771846332, 0.0006864980554220912, 0.017485989190112794, 0.030710530186551788, 0.02687650482900117, 0.9525976293957163, 0.8935948398478758, 0.9544881144678529, 0.9219853781349769, 0.938706571335629, 0.8750042172591441, 0.9216306917323718, 0.939142293497544, 0.6113347229533623, 0.0835034585424681, 9.999999999998899e-05, 9.999999999998899e-05, 0.03194798366405771, 0.08982240765362459, 0.003998732966260521, 9.999999999998899e-05, 0.025458125692702893, 9.999999999998899e-05, 0.15762126094884066, 0.11896827052432124, 0.16635990774142917, 0.17467612478280192, 0.12657298094889224, 0.16338139271863472, 0.11028678978912343, 0.14621750725516502, 0.09401608324000099, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013961131510473734, 0.020430371414928095, 0.014698255652563108, 9.999999999998899e-05, 0.011354052219254895, 0.002548005234627837, 0.28178295952460963, 0.2685942631747945, 0.26046353624966445, 0.27450180877494634, 0.1798615445076326, 0.20203105043049308, 0.24036665127698364, 0.26330910468440083, 0.2981710286947711, 0.041342587205921655, 0.05555155192257899, 0.04221977296377555, 0.034223153452045185, 0.02420686986798193, 0.04364917150541259, 0.0257043039741659, 0.04014413282617113, 0.04305907003377596, 0.09239515178926672, 0.09545558508041263, 0.10463223968690472, 0.10259160070666129, 0.11706942890481276, 0.10091092127847756, 0.09505306116284395, 0.08349694501486538, 0.1104771281182475, 0.18205683620602253, 0.1641195072810746, 0.1547075107575927, 0.18030981128035128, 0.17793789246989167, 0.1623903572938269, 0.1874481729360774, 0.2137090067807208, 0.205639870271896, 0.06581574349306629, 0.07744019079552067, 0.0928587630866754, 0.06726515562762214, 0.09456547549381178, 0.06249110109596079, 0.08033505482145897, 0.08398829660117912, 0.08382824244417841, 0.09182241918215606, 0.06128183225885109, 0.13417781527201045, 0.10314271143640308, 0.07877365429058769, 0.0821100870257302, 0.12253306888027837, 0.06509920183440354, 0.12709668114698758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.36153505690247423, 0.15126912060188535, 0.14507246216153802, 0.18032718734204534, 0.19087153387048084, 0.19100214315121544, 0.19555099284703303, 0.11177589400627641, 0.1499563610386131, 0.07972315519955997, 0.17469101869349857, 0.1887759927567615, 0.16905254037028805, 0.1714378454845521, 0.19867032097677662, 0.18105628916208316, 0.1372892717386428, 0.16823017606057566, 0.15176888377016895, 0.14708176574021103, 0.160043025273213, 0.15110314655768475, 0.152294274217724, 0.16333612626934524, 0.16059821483209435, 0.16220136966458887, 0.16698449655647984, 0.01883912294398482, 0.015506946876181926, 0.03292515646697447, 0.022426084965617488, 0.019459689457341334, 0.021247523983908834, 0.015840732346930286, 0.017885041780748234, 0.01779813657007978]}, "mutation_prompt": null}
{"id": "24718923-09dc-4686-811b-bc0be7ebedd4", "solution": "import numpy as np\n\nclass QuantumAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize best position using quantum wave function\n        self.best_position = self.quantum_wave_initialization(func)\n        \n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            \n            for i in range(self.population_size):\n                # Mutation: DE/rand/1 strategy\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                mutant_vector = x1 + self.F * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.copy(self.population[i])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of F and CR\n            self.F = 0.5 * (1 + np.sin(np.pi * self.func_evaluations / self.budget))\n            self.CR = 0.9 * (1 - np.sin(np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position\n\n    def quantum_wave_initialization(self, func):\n        wave_position = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        wave_amplitude = (self.upper_bound - self.lower_bound) / 2.0\n        wave_phase = np.random.uniform(0, 2 * np.pi, (self.population_size, self.dim))\n        wave_function = wave_position + wave_amplitude * np.sin(wave_phase)\n\n        best_wave_score = float('inf')\n        best_wave_position = None\n\n        for pos in wave_function:\n            score = func(pos)\n            if score < best_wave_score:\n                best_wave_score = score\n                best_wave_position = pos\n\n        self.func_evaluations += self.population_size\n        return best_wave_position", "name": "QuantumAdaptiveDifferentialEvolution", "description": "Quantum-inspired Adaptive Differential Evolution using wave functions for initialization and adaptive crossover for enhanced diversity.", "configspace": "", "generation": 9, "fitness": 0.2913080264543311, "feedback": "The algorithm QuantumAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "24e28ae0-d0f1-4036-ad2a-04bf7c7df650", "metadata": {"aucs": [0.8398201071624315, 0.8577016958407053, 0.8369599071899279, 0.8278162224863193, 0.8259164626671275, 0.18978994443421848, 0.8577921553945389, 0.8589779376320938, 0.8477289843759666, 0.6888010730272345, 0.7129419088458562, 0.7247748875254734, 0.5907915104370317, 0.7147237641223865, 0.697813821977781, 0.7227884664631052, 0.7231369647663662, 0.6827030143136157, 0.3962322279498317, 0.16225472410551844, 0.1144593535784455, 0.3112246872824841, 0.2846961547937885, 0.3071579406321, 0.42016158373369616, 0.24771143711688814, 0.2724876623874697, 0.27707654353617794, 0.22405194793410865, 0.21689789243354862, 0.2808558199747143, 0.15445258603736, 0.15756618527782995, 0.14181993258317105, 0.25953733430351533, 0.29326056886459073, 0.9514223870420948, 0.9366196908342346, 0.9651407369852438, 0.9001777902164102, 0.8923141692568636, 0.9591104871095336, 0.941829666308619, 0.9033203489400541, 0.7186819373967108, 0.2528595245025549, 0.32046899175394494, 0.3178853106405076, 0.3929185168121613, 0.3535963107903938, 0.3709487709283288, 0.3658636343095134, 0.3754128607299628, 0.30117543797278956, 0.37349458633162846, 0.3535593252203968, 0.3098972942174747, 0.3365508975665553, 0.8129967069459272, 0.3521484666964251, 0.7757261837735238, 0.7636913267898937, 0.7385347863456455, 0.16549448093728947, 0.1450406295737361, 0.18072728662631365, 0.15930924534406732, 0.18287871447527193, 0.15881215531899817, 0.15782639302706103, 0.17532907318612323, 0.20797444478609728, 0.17936162051816062, 0.2108537317499286, 0.12881929124334002, 0.15047854411752593, 0.17419657430695534, 0.13294073888004843, 0.2190266880687891, 0.1231188209759474, 0.17811139391156938, 0.030300856160022538, 0.03106357332733789, 9.999999999998899e-05, 9.999999999998899e-05, 0.008965000048225757, 9.999999999998899e-05, 0.01578954428431456, 9.999999999998899e-05, 0.08988157044312883, 0.13101723889187866, 0.07041781951704229, 0.06731851027313773, 0.09895809042680015, 0.14379121026490538, 0.12862283403879005, 0.11504659387390259, 0.20278441541282022, 0.19581451170236774, 9.999999999998899e-05, 0.004170873576671896, 0.01849777528079921, 0.017004963215725533, 9.999999999998899e-05, 0.0232918386037001, 0.10780124105545852, 0.08791267446628825, 0.021314696808619416, 0.15324137485867884, 0.05447672851185692, 0.1281155364224944, 0.17812855613999656, 0.14077698671477212, 0.1840247432247546, 0.149819500895628, 0.13156939497428155, 0.11166894453131737, 0.4919443038101945, 0.5010375699353862, 0.5401964028392847, 0.40716952245481286, 0.5024477659015189, 0.5478301251198734, 0.5484855704787863, 0.500523008005238, 0.5249758888963927, 0.11875629478280902, 0.09513313055610184, 0.09702550921239195, 0.10090632769137953, 0.08595719195454299, 0.07951157601970049, 0.09502730918991997, 0.08387686107998737, 0.1025196748349334, 0.12794187827174297, 0.1348774732043796, 0.1528412984821622, 0.14345325893727345, 0.15047910610638626, 0.1322494772244921, 0.15537327124534717, 0.14872564479541472, 0.20942478890867477, 0.29404659431973745, 0.30587270632613417, 0.328884492762912, 0.3107329782240731, 0.3075614527382211, 0.3025694501003342, 0.3043959778910844, 0.39222631203483005, 0.4043658691377867, 0.21724854691656614, 0.1989778990450617, 0.2552045486953177, 0.25453078772741256, 0.2556134751386304, 0.1841365557641027, 0.24126517778467216, 0.1868733844394218, 0.2632060860548773, 0.20058598117781767, 0.1784724109947622, 0.19905613677435308, 0.1977921056053472, 0.18388726365224084, 0.19303260277279377, 0.1987611275056993, 0.19714513740249984, 0.17436507262082102, 0.23959070396767934, 0.20039075593093958, 0.32279227732008553, 0.2041310569878101, 0.20484314119599012, 0.21516210533984026, 0.20662725517890213, 0.22068150695808686, 0.1934738315764314, 0.2543569078139467, 0.17012241057657007, 0.20177257532438198, 0.1844961249895415, 0.6969153077927298, 0.17607986383821916, 0.7544532769819983, 0.17515913835818753, 0.3266340770988132, 0.5202050911824363, 0.1759771147931226, 0.34838213531685547, 0.20275898296755124, 0.1524242408937866, 0.1990841475785221, 0.2085528820573307, 0.2075427082451109, 0.5067925576012211, 0.17014284140850322, 0.178440228488858, 0.17949540605745407, 0.1914983847692342, 0.18284691390884544, 0.16463099705020467, 0.19270049910063758, 0.17094599366769492, 0.16768055569666995, 0.07234778552076404, 0.07738213201063138, 0.08492327146660117, 0.07757306003031039, 0.08438783918954162, 0.0765405526875984, 0.08252973477045811, 0.06616107611531774, 0.0916869181857255]}, "mutation_prompt": null}
{"id": "40504615-a63f-4bc4-8f47-4785d28345db", "solution": "import numpy as np\n\nclass QuantumLevyParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.zeros((self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.inertia_weight = 0.9\n        self.cognitive_param = 2.0\n        self.social_param = 2.0\n\n    def levy_flight(self, L):\n        # Levy exponent and coefficient\n        beta = 1.5\n        sigma = (np.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step * L\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(self.population[i])\n            self.func_evaluations += 1\n            if score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = score\n                self.personal_best_positions[i] = self.population[i]\n            if score < self.best_score:\n                self.best_score = score\n                self.best_position = self.population[i]\n\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocity\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_param * r1 * (self.personal_best_positions[i] - self.population[i])\n                social_velocity = self.social_param * r2 * (self.best_position - self.population[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n\n                # Update position\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate the new position\n                score = func(self.population[i])\n                self.func_evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.best_score:\n                    self.best_score = score\n                    self.best_position = self.population[i]\n\n                # Apply Levy flight for local search\n                if np.random.rand() < 0.1:\n                    levy_step = self.levy_flight(0.1)\n                    trial_position = np.clip(self.population[i] + levy_step, self.lower_bound, self.upper_bound)\n                    trial_score = func(trial_position)\n                    self.func_evaluations += 1\n                    if trial_score < score:\n                        self.population[i] = trial_position\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial_position\n                        if trial_score < self.best_score:\n                            self.best_score = trial_score\n                            self.best_position = trial_position\n\n            # Adapt inertia weight\n            self.inertia_weight = 0.4 + 0.5 * (self.budget - self.func_evaluations) / self.budget\n\n        return self.best_position", "name": "QuantumLevyParticleSwarmOptimization", "description": "Quantum-inspired Particle Swarm Optimization with adaptive inertia and local search using Levy flights to enhance exploration and exploitation balance.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"module 'numpy' has no attribute 'gamma'\").", "error": "AttributeError(\"module 'numpy' has no attribute 'gamma'\")", "parent_id": "24718923-09dc-4686-811b-bc0be7ebedd4", "metadata": {}, "mutation_prompt": null}
{"id": "02f5ae14-4579-4223-aea9-59ce9c823f2f", "solution": "import numpy as np\n\nclass SwarmDynamicsOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate fitness\n                score = func(self.population[i])\n                self.func_evaluations += 1\n                \n                # Update personal bests\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                \n                # Update global best\n                if score < self.best_score:\n                    self.best_score = score\n                    self.best_position = self.population[i]\n\n            # Update velocity and position\n            for i in range(self.population_size):\n                inertia = self.inertia_weight * self.velocities[i]\n                cognitive_component = self.cognitive_coeff * np.random.random(self.dim) * (self.personal_best_positions[i] - self.population[i])\n                social_component = self.social_coeff * np.random.random(self.dim) * (self.best_position - self.population[i])\n                \n                self.velocities[i] = inertia + cognitive_component + social_component\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n            # Adaptively adjust coefficients\n            self.inertia_weight = 0.9 - 0.5 * (self.func_evaluations / self.budget)\n            self.cognitive_coeff = 1.5 + 0.5 * np.sin(np.pi * self.func_evaluations / self.budget)\n            self.social_coeff = 1.5 - 0.5 * np.sin(np.pi * self.func_evaluations / self.budget)\n\n        return self.best_position", "name": "SwarmDynamicsOptimization", "description": "Bio-inspired Swarm Dynamics Optimization utilizes group behavior and adaptive communication strategies to enhance global search and convergence efficiency.", "configspace": "", "generation": 11, "fitness": 0.23201706826560178, "feedback": "The algorithm SwarmDynamicsOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "24718923-09dc-4686-811b-bc0be7ebedd4", "metadata": {"aucs": [0.7298660819448406, 0.6831858779018156, 0.7617634253471071, 0.18972873290320236, 0.18910356195200684, 0.18910503965217318, 0.18290336541268593, 0.7375095468884159, 0.7713011205372132, 0.06194068618886994, 0.13471555126532953, 9.999999999998899e-05, 0.5283631709443184, 0.03837721596527932, 0.553149966911928, 0.4722801523922482, 0.01387774423547139, 0.520713536746412, 0.12628382474903443, 0.14536278964365024, 0.133727663498726, 0.48243818482220924, 0.141757961188952, 0.13400282890621962, 0.06832692694912224, 0.04937833311580331, 0.3535887398033758, 0.11514021463956892, 0.10481316950875719, 0.11618308732427085, 0.14634215701010944, 0.12808285977553713, 0.13156489475523758, 0.12933769348763813, 0.14038253740068363, 0.05632147241094576, 0.9952407173685751, 0.9897501118052577, 0.9962086259594811, 0.9936072276834942, 0.994879048198844, 0.9883489417347605, 0.9926227153781991, 0.9948919802501357, 0.9804169145588771, 0.5799043108373803, 0.5299169676507336, 0.5112738758992794, 0.1429769057595126, 0.14118498386265788, 0.564618572588673, 0.12443453574917329, 0.08719839166843979, 9.999999999998899e-05, 0.17034077373226642, 0.16041823992953363, 0.20972712269292604, 0.2035455789682038, 0.25810146546318025, 0.20525570094096401, 0.11266057819751074, 0.12557932095520896, 0.11591409291950294, 0.11586990105461592, 0.15389650691942192, 0.17035575813310866, 0.11339896552210793, 0.1689732590434594, 0.10898716789019236, 0.1762375335778077, 0.20117879214324508, 0.15605918373750172, 0.17266109632950444, 0.021619993650499048, 0.28829366838523085, 0.15698708248354742, 0.17606516211143808, 0.10934300333690095, 0.19687969769662328, 0.10395521592726309, 0.17486370474846757, 9.999999999998899e-05, 0.0536682417144253, 9.999999999998899e-05, 9.999999999998899e-05, 0.022485255879081123, 9.999999999998899e-05, 0.018735173042204623, 9.999999999998899e-05, 9.999999999998899e-05, 0.08340536760064987, 0.045730131609223235, 0.11235761086885576, 0.04290955668709573, 0.03591599776391796, 0.004605483384008235, 0.0696150889363405, 0.030124214871358856, 0.02635884672267963, 0.09914118284903439, 9.999999999998899e-05, 0.08507882229272856, 0.06468853085695392, 0.14273456778210003, 0.05655048397261708, 0.07732344842146543, 0.0729098527881481, 0.05871069988309263, 0.03749131803083239, 0.060963103578609346, 0.07653899681003751, 0.004773611113203735, 0.005448055760494008, 0.031095097012635242, 0.04379920296862405, 9.999999999998899e-05, 0.06680555798352072, 0.4710464448362359, 0.46633247557629254, 0.4848850607850914, 0.4841999012832564, 0.4162543844849923, 0.4777018001454534, 0.5028273684047777, 0.4658517952536695, 0.5367939719690724, 0.0721222010511956, 0.1338859379948092, 0.048257297231166785, 0.12174614036999631, 0.10831497307504856, 0.10113023338079952, 0.10475029209026854, 0.0871244542291586, 0.13938458777726703, 0.20078466844368126, 0.18959110355691433, 0.1665015310792889, 0.23390135418365676, 0.18257154215137406, 0.18530216884170236, 0.20069136815048505, 0.2948184360594729, 0.22634162637881483, 0.42654214059515905, 0.22742341157018664, 0.2792659068478509, 0.3429952765368911, 0.2599396919248058, 0.33018614540268665, 0.43859756568032227, 0.20108489755783898, 0.15358083706654801, 0.249542044093223, 0.16027194184615423, 0.1771443707522301, 0.21617256074653157, 0.16829873649820215, 0.182000625929288, 0.2692785885146812, 0.23223563838027095, 0.08839779743325527, 0.19993496241509667, 0.21711055600182372, 0.18914733249997673, 0.18824266270291645, 0.2317740311753792, 0.19312973787220167, 0.20442402957888772, 0.19132102237065518, 0.21340530769596489, 0.5930870517659802, 0.190151215534608, 0.20833024277098333, 0.21988192337479584, 0.21258225874775916, 0.5698761310259719, 0.23509283493792543, 0.22266928799994812, 0.19311612996172256, 0.16112286476368864, 0.15436178093059283, 0.11502622491887993, 0.7628952624213938, 0.19891254703985184, 0.1985107871894285, 0.15577286554594216, 0.14870930447458286, 0.15142231400300665, 0.16519062413605168, 0.15416271094885303, 0.16187950459952194, 0.19681964226373116, 0.4726581852682592, 0.20405620643933753, 0.20428837631847274, 0.3921917109622872, 0.6099350655478282, 0.20372077650514298, 0.18663122834637025, 0.1956452126160163, 0.19271983720243213, 0.1905710107368359, 0.20577401652331584, 0.1998284150321119, 0.22874535071760016, 0.1826864291027639, 0.08647454986385861, 0.09558047317268592, 0.12508539592112844, 0.10586827941959709, 0.07133930059894733, 0.08943768171379873, 0.07524689717088262, 0.08501531005221641, 0.08152557750309752]}, "mutation_prompt": null}
{"id": "d80c183f-8ae7-492c-9ac0-836d24639c12", "solution": "import numpy as np\n\nclass SelfAdaptiveQuantumHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = int(10 + 2 * np.sqrt(dim))\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.hmcr = 0.9  # Harmony memory consideration rate\n        self.par = 0.3   # Pitch adjustment rate\n\n    def __call__(self, func):\n        # Initialize harmony memory using quantum wave function\n        self.best_position = self.quantum_wave_initialization(func)\n\n        while self.func_evaluations < self.budget:\n            new_harmony = np.copy(self.best_position)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_harmony[i] = np.random.choice(self.harmony_memory[:, i])\n                if np.random.rand() < self.par:\n                    new_harmony[i] += np.random.uniform(-1, 1) * (self.upper_bound - self.lower_bound) * 0.1\n\n                new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n\n            new_score = func(new_harmony)\n            self.func_evaluations += 1\n\n            if new_score < self.best_score:\n                self.best_score = new_score\n                self.best_position = new_harmony\n                worst_index = np.argmax([func(h) for h in self.harmony_memory])\n                self.harmony_memory[worst_index] = new_harmony\n\n            # Self-adaptive adjustment of HMCR and PAR\n            self.hmcr = 0.9 - 0.8 * (self.func_evaluations / self.budget)\n            self.par = 0.1 + 0.2 * (self.func_evaluations / self.budget)\n\n        return self.best_position\n\n    def quantum_wave_initialization(self, func):\n        wave_position = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        wave_amplitude = (self.upper_bound - self.lower_bound) / 2.0\n        wave_phase = np.random.uniform(0, 2 * np.pi, (self.harmony_memory_size, self.dim))\n        wave_function = wave_position + wave_amplitude * np.sin(wave_phase)\n\n        best_wave_score = float('inf')\n        best_wave_position = None\n\n        for pos in wave_function:\n            score = func(pos)\n            if score < best_wave_score:\n                best_wave_score = score\n                best_wave_position = pos\n\n        self.func_evaluations += self.harmony_memory_size\n        self.harmony_memory = wave_function\n        return best_wave_position", "name": "SelfAdaptiveQuantumHarmonySearch", "description": "Self-Adaptive Quantum Harmony Search combines quantum-inspired initialization with self-adaptive parameter control for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": 0.19311473097369666, "feedback": "The algorithm SelfAdaptiveQuantumHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "24718923-09dc-4686-811b-bc0be7ebedd4", "metadata": {"aucs": [0.4269375019621957, 0.45276350381184427, 0.42496613340272826, 0.4442651703130739, 0.43714354670538036, 0.43523690340101195, 0.45515630177743194, 0.4582353475052099, 0.41834059995512074, 0.134831222054964, 0.12996638598278498, 0.031632949598538795, 0.22462612942295146, 0.09632148822304376, 0.13277071494506987, 0.1295422447308392, 0.1638591227650279, 0.08777863567337207, 0.20547421981868896, 0.20293667618264755, 0.2048719294721003, 0.18629808256838865, 0.1784204735480578, 0.17994006318138178, 0.155319644278875, 0.20790191166179772, 0.18492452385564484, 0.1458181680420545, 0.1844558893300865, 0.13935413367403593, 0.1636855574660434, 0.19184700045425518, 0.17195997561745002, 0.21254021955016567, 0.1637200696447042, 0.1643042344082296, 0.937286379166786, 0.9677403803903811, 0.7295645154204493, 0.8501812060061927, 0.7643937277868782, 0.8343561593291015, 0.8775097029826491, 0.6835702944166402, 0.9778070649639368, 0.2005919417651265, 0.19638521472142334, 0.2130282951028185, 0.16958446614468126, 0.2764554873552615, 0.16760872216598421, 0.1707812600874431, 0.23588197830603674, 0.21856051845497781, 0.20039938508097344, 0.2674859413503671, 0.16901617786695333, 0.19817258155879236, 0.27084130936282014, 0.20051647231608005, 0.21339019543544235, 0.2050789056176503, 0.18648101711759835, 0.12870382173377182, 0.12061761891869938, 0.13227768829834607, 0.12819286798662433, 0.10021766810893662, 0.12527037538368113, 0.11383182109760004, 0.12479670826884826, 0.09429627367075677, 0.12197399347298166, 0.10832178562190764, 0.09630758193910827, 0.11940282856348516, 0.14493735045369016, 0.10844240511120784, 0.14237086445265723, 0.10202103262280271, 0.10656923575510568, 9.999999999998899e-05, 0.0026164432084495592, 9.999999999998899e-05, 0.005189462399042388, 9.999999999998899e-05, 9.999999999998899e-05, 0.013731136874777117, 9.999999999998899e-05, 0.00042977854217296496, 0.03988039705960833, 0.03453222933210143, 0.08393759896939423, 0.07290148934887652, 0.05875698011113162, 0.05786368093161387, 0.06659501115980804, 0.04223745330613271, 0.061225213789533495, 0.011147188445806422, 0.01776646659431913, 9.999999999998899e-05, 0.006533930068037042, 0.0013896605276929597, 0.0021602096655164438, 9.999999999998899e-05, 0.007739048982063235, 0.002926707974848064, 0.038096503893587985, 0.0651203093244922, 0.04633087350719356, 0.044092149825487814, 0.05349250543039019, 0.0040853978246047085, 0.0764824980254376, 0.0603842241854643, 0.04572128742740533, 0.3289921261695896, 0.3532210276411253, 0.32225153331563994, 0.36863072425616916, 0.34370730583448506, 0.3534145561697497, 0.39113207279185414, 0.3565271476319857, 0.36029718408771283, 0.07001522888856904, 0.08028867349441149, 0.09741748167010811, 0.05932712366492143, 0.10385279662361446, 0.09900640459150967, 0.05926035922869999, 0.09286013991213293, 0.08566691023062578, 0.15272047135191547, 0.1428265936484059, 0.18076131809040707, 0.16379955568332794, 0.16296249189588086, 0.1511530764990916, 0.19393709231790424, 0.17885650921330398, 0.1475355523766655, 0.2053175792542048, 0.21942318953166318, 0.24265836428954057, 0.1894798975420574, 0.18905890735532438, 0.23159004589431276, 0.2405759638790269, 0.19663250043791536, 0.17774325619773912, 0.23308114316723028, 0.1140600275448731, 0.16965862770458484, 0.14262571976135985, 0.14803088028396272, 0.19926813875561034, 0.1810071019609546, 0.1664987197377641, 0.13904264886278594, 0.1939335529775994, 0.20785458833059234, 0.17497587579500684, 0.19111888177738012, 0.19294626096391143, 0.18031526022092348, 0.20231832550735385, 0.20860684673183472, 0.19522028726391694, 0.19827073770476766, 0.23128609445050852, 0.21184619663783733, 0.1972796403043089, 0.19132806945687852, 0.18739147926342803, 0.20525155865310363, 0.2062297632583473, 0.23280195335245746, 0.16173658425411064, 0.1472325017793753, 0.16306796473813434, 0.18686777322661607, 0.19621916831686326, 0.18409911580891758, 0.5180981314435573, 0.4512580620496045, 0.15749319505785064, 0.35809865742375036, 0.2896394769244417, 0.15710793802836265, 0.16746043448609305, 0.16322687575954675, 0.11921892188494643, 0.28657524987667415, 0.16207894926567767, 0.20373512582126263, 0.18598675405730414, 0.18930009221510558, 0.1797420427254126, 0.209963812496629, 0.19350510291085832, 0.1939007444426607, 0.1902579389996345, 0.18983552870655218, 0.18895369067954548, 0.0744626105081081, 0.07982689563623846, 0.08102527277342797, 0.07333159085142049, 0.08328010829959964, 0.05614565836644381, 0.07157714219571587, 0.07197768661968096, 0.07791181614363707]}, "mutation_prompt": null}
{"id": "3ba7d5da-3819-42b7-92bc-89e45191966b", "solution": "import numpy as np\n\nclass FractalInspiredSelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.F_base = 0.5\n        self.CR_base = 0.9\n\n    def __call__(self, func):\n        # Initialize best position using fractal-based initialization\n        self.best_position = self.fractal_initialization(func)\n        \n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            \n            for i in range(self.population_size):\n                # Fractal-inspired mutation: DE/rand/1 with fractal perturbation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                fractal_scale = np.cos(np.pi * self.func_evaluations / self.budget)\n                mutant_vector = x1 + self.F_base * fractal_scale * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.copy(self.population[i])\n                crossover_mask = np.random.rand(self.dim) < self.CR_base\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Self-adaptive adjustment of F and CR\n            self.F_base = 0.4 + 0.1 * np.random.rand()\n            self.CR_base = 0.8 + 0.1 * np.random.rand()\n\n        return self.best_position\n\n    def fractal_initialization(self, func):\n        fractal_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fractal_amplitude = (self.upper_bound - self.lower_bound) / 2.0\n        fractal_phase = np.random.uniform(0, 4 * np.pi, (self.population_size, self.dim))\n        fractal_function = fractal_positions + fractal_amplitude * np.cos(fractal_phase)\n\n        best_fractal_score = float('inf')\n        best_fractal_position = None\n\n        for pos in fractal_function:\n            score = func(pos)\n            if score < best_fractal_score:\n                best_fractal_score = score\n                best_fractal_position = pos\n\n        self.func_evaluations += self.population_size\n        return best_fractal_position", "name": "FractalInspiredSelfAdaptiveDifferentialEvolution", "description": "Fractal-Inspired Self-Adaptive Differential Evolution uses a fractal-based mutation strategy and self-adaptive parameter tuning to enhance exploration and exploitation.", "configspace": "", "generation": 13, "fitness": 0.2612725369177204, "feedback": "The algorithm FractalInspiredSelfAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "24718923-09dc-4686-811b-bc0be7ebedd4", "metadata": {"aucs": [0.8924861067086304, 0.6745238394014191, 0.6114719384329069, 0.8852594164769763, 0.897839449711775, 0.6282984556860898, 0.5917192086467807, 0.32126940069554744, 0.7650876905185511, 0.3151474136437641, 0.1415643032165741, 0.7529098002872202, 0.7358180684281432, 0.6221399136159373, 0.7846003428857499, 9.999999999998899e-05, 0.15267001291417925, 0.09287398544813985, 0.22182432675408503, 0.16254649940080468, 0.14955440446893375, 0.12601850343582832, 0.14287027692592658, 0.1469515831128716, 0.17041352843484914, 0.1648874446079226, 0.14650147092170518, 0.1198074618876046, 0.12926497648574564, 0.14845164225540797, 0.12308657050246496, 0.1343208108496703, 0.15469665189626725, 0.09427773756123736, 0.20662892574079605, 0.1159527807494598, 0.27898637236968493, 0.9788035875499256, 0.9616213180082905, 0.9618097670412656, 0.20819656195668368, 0.9114600766767352, 0.8546056839692949, 0.8557798119039653, 0.32832433841511444, 0.20849604648193698, 0.05950393475349813, 0.10055483531492004, 0.140662651426686, 0.07416367820010838, 0.17011513813967216, 0.10971026681032503, 0.17380747267323404, 0.10121169316973044, 0.3791428482072392, 0.37717940076730105, 0.23544689499111848, 0.8454052510512482, 0.33095699762685526, 0.8514590293202323, 0.21665000643061372, 0.24003139632503678, 0.8694424002968707, 0.17013848020255395, 0.13801897702124222, 0.136501416759219, 0.20890549002526948, 0.1319012695097339, 0.12892008070879513, 0.18605130486162436, 0.164172789272493, 0.12659446413846942, 0.16007726438473058, 0.12734382488538576, 0.22750351151444026, 0.13723608645758756, 0.16928373509129724, 0.127964751691228, 0.14466312888483557, 0.1276249268830788, 0.2154449511911628, 0.08348104729013217, 0.06191290853923803, 0.1259234949673762, 0.009593728820049163, 9.999999999998899e-05, 9.999999999998899e-05, 0.008935531089105608, 9.999999999998899e-05, 0.11134018776023791, 0.20152571040622147, 0.10278662032685626, 0.2007846640813049, 0.06316820292135106, 0.04420100276194194, 0.0919480660819163, 0.29003112896839, 0.11171932605408619, 0.11632700020699116, 0.2281910886356936, 0.1548709263254665, 0.055318187911425176, 0.09361170822533726, 0.09414866945205191, 0.10190549516510616, 0.35504014898084024, 0.14255394402120203, 0.1006759317316882, 0.10829370922699033, 0.13816270501861305, 0.17335376449473916, 0.1725416001570922, 0.21121244262527583, 0.08262751247720934, 0.15030179830820312, 0.18474617587483122, 0.0875431751332797, 0.6512731007696322, 0.5197742176215401, 0.43006271937586515, 0.4995494494710768, 0.46368444351704974, 0.4883566520317403, 0.4403993170616469, 0.4494314857507513, 0.585378692407388, 0.10786559613479607, 0.13523724258753866, 0.12422845470959532, 0.10749945216542367, 0.06884703949669024, 0.12823619260504093, 0.1359714531022801, 0.1119535753286407, 0.11715760419738219, 0.1814042092267656, 0.21066426610560096, 0.1904148660412034, 0.1337154691444815, 0.1815067354296941, 0.160935352121371, 0.14481146234297926, 0.200104283530397, 0.14528647566430486, 0.2850325764085514, 0.255459831187127, 0.46772545619402206, 0.5131424311419638, 0.24313449435377654, 0.36680349220844055, 0.28100151849274935, 0.5048294722533058, 0.44060221715187453, 0.21821431553828152, 0.2530488215153225, 0.31535448168360736, 0.36720938495667665, 0.2136446010858527, 0.230114827109144, 0.42683811566076646, 0.456863149462297, 0.4397677503323877, 0.1994017777597703, 0.1993588593472131, 0.197368639977204, 0.18412967187991303, 0.20184605768588726, 0.2080942434524552, 0.20798626490502414, 0.1977966976290212, 0.21263657471015918, 0.19529630926746244, 0.20325989902121522, 0.23578412465967524, 0.3608891453146349, 0.1990173316765621, 0.2317247329432448, 0.24624521827154577, 0.2044577490678019, 0.2366991332163505, 0.4935524368848986, 0.15942028272049225, 0.1248626824586021, 0.3178443711014667, 0.19324259172737868, 0.18054379863679137, 0.18467789243108823, 0.19903053679110383, 0.1474907421035797, 0.29425048116677, 0.1657380193159299, 0.29377984521840106, 0.8545037255347325, 0.1520225180283611, 0.8520251430248299, 0.2070206434291304, 0.10441247289773525, 0.3549784967716344, 0.17145804360093408, 0.17575380808549856, 0.17823511025669359, 0.19891595725207312, 0.18144886911100178, 0.18995440542188657, 0.17735736846738093, 0.19101125654827134, 0.17548814074521402, 0.08072853214553266, 0.08396916978793578, 0.07277884906571075, 0.09473943680545704, 0.08867196729638871, 0.09147786970340299, 0.09304603024222013, 0.08533673921920815, 0.07578410465675334]}, "mutation_prompt": null}
{"id": "009d60a9-a40b-416a-85a5-bb92897bd9e8", "solution": "import numpy as np\n\nclass QuantumHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocity = np.random.uniform(-1.0, 1.0, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.personal_best = self.population.copy()\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best = None\n        self.global_best_score = float('inf')\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize best position using quantum wave function\n        self.global_best = self.quantum_wave_initialization(func)\n\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                # PSO update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = r1 * (self.personal_best[i] - self.population[i])\n                social_component = r2 * (self.global_best - self.population[i])\n                self.velocity[i] = 0.5 * self.velocity[i] + cognitive_component + social_component\n                self.population[i] = np.clip(self.population[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n\n                # Mutation: DE/rand/1 strategy\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                mutant_vector = x1 + self.F * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.copy(self.population[i])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n\n                if trial_score < func(self.population[i]):\n                    self.population[i] = trial_vector\n\n                # Update personal and global bests\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best[i] = trial_vector\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best = trial_vector\n\n            # Adaptive adjustment of F and CR\n            self.F = 0.5 * (1 + np.sin(np.pi * self.func_evaluations / self.budget))\n            self.CR = 0.9 * (1 - np.sin(np.pi * self.func_evaluations / self.budget))\n\n        return self.global_best\n\n    def quantum_wave_initialization(self, func):\n        wave_position = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        wave_amplitude = (self.upper_bound - self.lower_bound) / 2.0\n        wave_phase = np.random.uniform(0, 2 * np.pi, (self.population_size, self.dim))\n        wave_function = wave_position + wave_amplitude * np.sin(wave_phase)\n\n        best_wave_score = float('inf')\n        best_wave_position = None\n\n        for pos in wave_function:\n            score = func(pos)\n            if score < best_wave_score:\n                best_wave_score = score\n                best_wave_position = pos\n\n        self.func_evaluations += self.population_size\n        return best_wave_position", "name": "QuantumHybridPSODE", "description": "Hybridized Quantum-Inspired Particle Swarm Optimization with Adaptive Differential Evolution to balance exploration and exploitation.", "configspace": "", "generation": 14, "fitness": 0.30248729552008674, "feedback": "The algorithm QuantumHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "24718923-09dc-4686-811b-bc0be7ebedd4", "metadata": {"aucs": [0.9295606561032423, 0.9447605168167843, 0.9424176092394103, 0.930180563364346, 0.9412805616786202, 0.9417940113905764, 0.9419216127881989, 0.9412246514179157, 0.9331058710993292, 0.8522279152864456, 0.8890391614251404, 0.8718471533244687, 0.8407231871180002, 0.7317626504519255, 0.8741575074308736, 0.8554151474568019, 0.8707843196748153, 0.873874439840039, 0.14658065005161747, 0.14145261448044766, 0.14440315858405595, 0.1702500176609446, 0.16238117477322234, 0.16146855815911498, 0.16072740496316051, 0.10789180131816178, 0.16038694415265187, 0.07665852644371385, 0.0962676646035372, 0.11005982665205816, 0.09428846744745445, 0.10169259268507103, 0.11744623165209889, 0.11633319321478552, 0.0897626228450541, 0.10530960214687735, 0.9505167631575445, 0.9648535927279975, 0.9812615253661625, 0.9810657412131654, 0.9813113324997834, 0.9627905485701976, 0.9718005664224847, 0.9694851571527636, 0.9621412254566617, 0.6810167349462211, 0.5754132356452775, 0.8267079161168528, 0.5150040093434823, 0.6647965591518472, 0.4953483482795463, 0.551207222753407, 0.4273110791480964, 0.6283128695984326, 0.1574935544365904, 0.17124181762214907, 0.39501824876421965, 0.2140262328221595, 0.27025273269028294, 0.28011947376988433, 0.15178149933474983, 0.36216718189234265, 0.12482603875093978, 0.16769300342220073, 0.1501045131880937, 0.1278351392611805, 0.1657598261851665, 0.15513828493842652, 9.999999999998899e-05, 0.2253708682909763, 0.11880222868429113, 0.12196676746522295, 0.17838793481470017, 0.13476753863158597, 0.16634745970767795, 0.13053304564098567, 0.2594910247195237, 0.16993887835217214, 0.2057540739527599, 0.21453639791162016, 0.12977884994219346, 0.05439322240539313, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06408542733411682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017647323435431628, 0.15089119345101298, 0.06828863545225883, 0.1382548102549721, 0.07503003700487731, 0.01900958186702828, 0.029889025497688237, 0.15503110404667675, 0.11092771589322414, 0.13525201423753275, 0.11614313320171166, 0.21904779696759102, 0.057097635805904656, 0.17736422231566817, 0.25523650505221107, 0.221527400147015, 0.16252874156456987, 0.16194311569722597, 0.0782845554510222, 0.012184758274441654, 0.1356938635080267, 0.2224493995264204, 0.17029994712087337, 0.07530673196716287, 0.3509253228110598, 0.10028665422260274, 0.10550110742474395, 0.16180585716363893, 0.5625622323293101, 0.5911110957789911, 0.532815695889342, 0.5368477187376806, 0.45608488926257906, 0.5389023667088917, 0.5910687831046436, 0.531996273876181, 0.5292339582729958, 0.10938513620513712, 0.1405596293762481, 0.12919263038805961, 0.12525651976526841, 0.11198452547671989, 0.1379923836462733, 0.1714925882657402, 0.09419710397144632, 0.09799613244074279, 0.17147105252929218, 0.2372486212890944, 0.18758143346660439, 0.17145771433809276, 0.22726216423616308, 0.21417276623353587, 0.24385794041993658, 0.20043018120070732, 0.26371343949561066, 0.2213862127159134, 0.3621687236764103, 0.2424013795666543, 0.4334697465823326, 0.2547478060296201, 0.45677455792522026, 0.4061778277492841, 0.5096495168699966, 0.4046309142136393, 0.21366147337010744, 0.2526160600622367, 0.23178736311120884, 0.2376652652131679, 0.22915604536588108, 0.24472518178473224, 0.23105594163632526, 0.3592004902815612, 0.23729121527416264, 0.24187817858949834, 0.21123391111001544, 0.2148868223358591, 0.2187878832288308, 0.25122636252010266, 0.20533103732642488, 0.232089108852635, 0.1927669071637378, 0.2219809704579293, 0.21203886053183119, 0.19862680638972174, 0.22294120641524262, 0.19166590473122802, 0.2079704167232157, 0.18531594129137519, 0.7691093232657409, 0.1856265888921772, 0.1856166133421101, 0.1881526617604211, 0.1490814848987968, 0.18640984741870936, 0.19890324769090106, 0.17334085397644172, 0.1580526460019872, 0.1700450423559745, 0.16051185290459813, 0.1931984273218159, 0.05218549320062682, 0.21159200744075912, 0.2991411244521849, 0.6913990874836231, 0.21080750510272406, 0.1688406490012483, 0.31998548168184693, 0.21407976814423046, 0.0948717261359483, 0.20074788593319504, 0.19854407329688317, 0.18744329142291438, 0.19509712606378793, 0.18127066725406116, 0.1861261562482771, 0.180555500595448, 0.19704358650728648, 0.1937245219642495, 0.0977574587576917, 0.09499033298515147, 0.08594586901737389, 0.09450743601187928, 0.07417253036390614, 0.08456295252014456, 0.08087736518787769, 0.09076905988210549, 0.0770451004671584]}, "mutation_prompt": null}
{"id": "68813374-bd15-4d0b-9f46-34ed81aa7be5", "solution": "import numpy as np\n\nclass QuantumEntangledGA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.mutation_rate = 0.1\n        self.entangled_points = np.zeros((2, dim))\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            # Evaluate current population\n            fitness = np.array([func(ind) for ind in self.population])\n            self.func_evaluations += self.population_size\n\n            # Track the best solution\n            min_idx = np.argmin(fitness)\n            if fitness[min_idx] < self.best_score:\n                self.best_score = fitness[min_idx]\n                self.best_position = self.population[min_idx].copy()\n\n            # Select parents (tournament selection)\n            selected_parents = self.tournament_selection(fitness)\n\n            # Crossover (uniform)\n            offspring = self.uniform_crossover(selected_parents)\n\n            # Mutation (adaptive rate)\n            self.adaptive_mutation(offspring)\n\n            # Create new population\n            self.population = offspring\n\n            # Update entangled points for quantum-inspired mutation\n            self.update_entangled_points()\n\n        return self.best_position\n\n    def tournament_selection(self, fitness):\n        selected = []\n        for _ in range(self.population_size):\n            competitors = np.random.choice(self.population_size, 3, replace=False)\n            winner = competitors[np.argmin(fitness[competitors])]\n            selected.append(self.population[winner])\n        return np.array(selected)\n\n    def uniform_crossover(self, parents):\n        offspring = np.empty_like(parents)\n        for i in range(0, self.population_size, 2):\n            if i+1 < self.population_size:\n                mask = np.random.rand(self.dim) < 0.5\n                offspring[i] = np.where(mask, parents[i], parents[i+1])\n                offspring[i+1] = np.where(mask, parents[i+1], parents[i])\n            else:\n                offspring[i] = parents[i]\n        return np.clip(offspring, self.lower_bound, self.upper_bound)\n\n    def adaptive_mutation(self, offspring):\n        mutation_probs = np.random.rand(self.population_size, self.dim)\n        mutation_factors = np.random.normal(scale=self.mutation_rate, size=(self.population_size, self.dim))\n        mutations = (mutation_probs < self.mutation_rate) * mutation_factors\n        offspring += mutations\n        np.clip(offspring, self.lower_bound, self.upper_bound, out=offspring)\n\n        # Update mutation rate\n        self.mutation_rate = 0.1 * (1 + np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n    def update_entangled_points(self):\n        sorted_idx = np.argsort([func(ind) for ind in self.population])\n        best2 = self.population[sorted_idx[:2]]\n        self.entangled_points = best2", "name": "QuantumEntangledGA", "description": "QuantumEntangledGA: A Quantum Entanglement Inspired Genetic Algorithm with Adaptive Mutation inspired by quantum entanglement principles to dynamically balance exploration and exploitation.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "009d60a9-a40b-416a-85a5-bb92897bd9e8", "metadata": {}, "mutation_prompt": null}
{"id": "c149612f-3df1-4145-a47d-7a35cb73e791", "solution": "import numpy as np\n\nclass DualLayeredMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.8\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            # Evaluate fitness\n            fitness = np.array([func(individual) for individual in self.population])\n            self.func_evaluations += self.population_size\n\n            # Update best individual\n            min_index = np.argmin(fitness)\n            if fitness[min_index] < self.best_score:\n                self.best_score = fitness[min_index]\n                self.best_position = self.population[min_index].copy()\n\n            # Selection\n            selected_indices = np.random.choice(self.population_size, self.population_size, p=fitness/fitness.sum())\n            selected_population = self.population[selected_indices]\n\n            # Crossover\n            next_population = []\n            for i in range(0, self.population_size, 2):\n                if np.random.rand() < self.crossover_rate:\n                    point = np.random.randint(1, self.dim)\n                    parent1, parent2 = selected_population[i], selected_population[i+1]\n                    child1 = np.concatenate((parent1[:point], parent2[point:]))\n                    child2 = np.concatenate((parent2[:point], parent1[point:]))\n                    next_population.extend([child1, child2])\n                else:\n                    next_population.extend([selected_population[i], selected_population[i+1]])\n\n            # Mutation\n            next_population = np.array(next_population)\n            mutation_array = np.random.rand(*next_population.shape) < self.mutation_rate\n            random_mutations = np.random.uniform(self.lower_bound, self.upper_bound, next_population.shape)\n            next_population = np.where(mutation_array, random_mutations, next_population)\n            self.population = np.clip(next_population, self.lower_bound, self.upper_bound)\n\n            # Local Search\n            for i in range(self.population_size):\n                if self.func_evaluations >= self.budget:\n                    break\n                local_best = self.local_search(self.population[i], func)\n                local_score = func(local_best)\n                self.func_evaluations += 1\n                if local_score < fitness[i]:\n                    self.population[i] = local_best\n\n        return self.best_position\n\n    def local_search(self, position, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):  # Perform 5 local search steps\n            for d in range(self.dim):\n                new_pos = position.copy()\n                new_pos[d] += np.random.uniform(-step_size, step_size)\n                new_pos[d] = np.clip(new_pos[d], self.lower_bound, self.upper_bound)\n                if func(new_pos) < func(position):\n                    position = new_pos\n        return position", "name": "DualLayeredMemeticAlgorithm", "description": "Dual-Layered Adaptive Memetic Algorithm combining Genetic operations with Local Search for enhanced convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities are not non-negative').", "error": "ValueError('probabilities are not non-negative')", "parent_id": "009d60a9-a40b-416a-85a5-bb92897bd9e8", "metadata": {}, "mutation_prompt": null}
{"id": "e4787a57-5af6-4596-9cfd-d86c72ece5e0", "solution": "import numpy as np\n\nclass AdaptiveSwarmBasedDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocity = np.zeros((self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_global_score = float('inf')\n        self.best_global_position = None\n        self.personal_best = self.population.copy()\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        self.best_global_position = self.initialize_population(func)\n\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation and Crossover: DE/current-to-best/1 strategy\n                indices = np.random.choice(self.population_size, 4, replace=False)\n                x0, x1, x2, x3 = self.population[i], self.population[indices[0]], self.population[indices[1]], self.population[indices[2]]\n                mutant_vector = x0 + self.F * (self.best_global_position - x0) + self.F * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                # Crossover operation\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, self.population[i])\n                \n                # Evaluate new solution\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                \n                # Selection\n                if trial_score < func(self.population[i]):\n                    self.population[i] = trial_vector\n\n                # Update personal bests\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best[i] = trial_vector\n\n                    # Update global best\n                    if trial_score < self.best_global_score:\n                        self.best_global_score = trial_score\n                        self.best_global_position = trial_vector\n\n            # Adaptive adjustment of F and CR based on success rate\n            success_rate = np.mean(self.personal_best_scores < self.best_global_score)\n            self.F = 0.4 + 0.2 * success_rate\n            self.CR = 0.8 + 0.1 * (1 - success_rate)\n\n        return self.best_global_position\n\n    def initialize_population(self, func):\n        for i in range(self.population_size):\n            score = func(self.population[i])\n            self.func_evaluations += 1\n            if score < self.best_global_score:\n                self.best_global_score = score\n                self.best_global_position = self.population[i]\n            self.personal_best_scores[i] = score\n            self.personal_best[i] = self.population[i]\n        return self.best_global_position", "name": "AdaptiveSwarmBasedDE", "description": "Adaptive Swarm-Based Differential Evolution (ASB-DE): Combining adaptive swarm intelligence with differential evolution to enhance convergence efficiency and robustness.", "configspace": "", "generation": 17, "fitness": 0.13198081209801235, "feedback": "The algorithm AdaptiveSwarmBasedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "009d60a9-a40b-416a-85a5-bb92897bd9e8", "metadata": {"aucs": [0.259104387217606, 0.3906318495984106, 0.4408641158758033, 0.19052198339403414, 0.13473866666147538, 0.2975490841365178, 0.4525493326000082, 0.2363028480779702, 0.20111173237103652, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07348978959802521, 0.07643725461764805, 0.050596644529098955, 0.12087025261902073, 0.11831251038736335, 0.14197140805090802, 0.09034446577648636, 0.0803277174100101, 0.09749847381709242, 0.06373602601837469, 0.06312748591016115, 0.05075113119473518, 0.09904717042025135, 0.06377808273113494, 0.04874762113050379, 0.07358499035769606, 0.057098139422152916, 0.0452831455666326, 0.08377322179473157, 0.11138390932554942, 0.08626912092345884, 0.11193302836271701, 0.08517484957776122, 0.0720856254120219, 0.11709310835672981, 0.07607792478744757, 0.0668829326114928, 0.10240829182072686, 0.06181187661280141, 0.05151705599861656, 0.1350189963135061, 0.08803723603543234, 0.13471342656311425, 0.12729376794548752, 0.0928299835660984, 0.022237724335708142, 0.9554538176696171, 0.15172660747764244, 0.14076415762401862, 0.13848257445762469, 0.01223942613936524, 0.09618070544523705, 0.10761182575047645, 0.05489344313654798, 0.14473164285350848, 0.0007212918698663584, 0.06489476625832724, 0.048482277153980013, 9.999999999998899e-05, 0.07609805399133152, 9.999999999998899e-05, 0.14065334011611352, 0.08291430742627504, 0.14810899576227587, 0.11600454637141522, 0.13470448702870075, 0.13447697182837748, 0.022501975066728463, 0.13006212806604145, 0.07895504968576683, 0.14471443950883078, 0.05610402507917822, 0.08822235651060362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13696830959172113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09567003396967344, 0.07339547845449401, 0.14797904546762963, 0.09038992364356713, 0.032848047467677444, 0.03895791036754492, 0.1363970848784778, 0.09577916714876178, 0.06175708892333098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10982667893667009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023620057730416866, 0.14226312854484935, 9.999999999998899e-05, 9.999999999998899e-05, 0.03885142412155651, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.40593087138190365, 0.30502838727295833, 0.2731990287550773, 0.1819867080639258, 0.1571970513486609, 0.33846531903763544, 0.30339164404377883, 0.3963987107830158, 0.25901418314434566, 0.021518633139629317, 0.054936982213920627, 0.04058986853046864, 0.09569281566623267, 0.03194046098318648, 0.10844699864963936, 0.11168309764925832, 0.07869907452862357, 0.08553419238520132, 0.18211134609418766, 0.18831042428313272, 0.27753126434720166, 0.18760865144455707, 0.18005434530543918, 0.17110055041619998, 0.27432539426930247, 0.19755080923803936, 0.17125063833565324, 0.24612509746788214, 0.17333845680580184, 0.22478189424669426, 0.23691055410042905, 0.27260562688563306, 0.2876960758172963, 0.1507170017222088, 0.30983944528168117, 0.15307978425433688, 0.23313181243829473, 0.1871565248639817, 0.20887188247947297, 0.23802047612368138, 0.23408829423517485, 0.16722451418950313, 0.13678366927600583, 0.2491945775788832, 0.30330336828090154, 0.21381449188133772, 0.19273818052568215, 0.19958438289082758, 0.22764702172920515, 0.21633484920219148, 0.20810882245221718, 0.23492276967624937, 0.19687947063658295, 0.21614522179388262, 0.1676611602861542, 0.18446961944175277, 0.17624303143904563, 0.1922271102162788, 0.18494241459910288, 0.17893163167412807, 0.16125800323003292, 0.18147030373607753, 0.1820391326437275, 0.15981393484748918, 0.17559843312079282, 0.1862760113208245, 0.20645358340994135, 0.19740405164553476, 0.4792272832754536, 0.1434868399805902, 0.11490228429023086, 0.1509600313165309, 0.08318329388920775, 0.16894330441272631, 0.16244083479788218, 0.22225085250651777, 0.11253084244347666, 0.4327069885001016, 0.1051085881931132, 0.15532602178766886, 0.11582721155724285, 0.1866050833945062, 0.17375612946291863, 0.18464603881456731, 0.1705484555893363, 0.1779661385089517, 0.19219447249505972, 0.18749836246962104, 0.18510726829247637, 0.19257006216971684, 0.08767840137558691, 0.06764475480335419, 0.07801391062246299, 0.09666238830107599, 0.0787146275691406, 0.07458266659536772, 0.07775498967726202, 0.08020599345178203, 0.09285617151086645]}, "mutation_prompt": null}
{"id": "f91fed45-cd1f-4f6d-b1be-3ca42d6e404a", "solution": "import numpy as np\n\nclass AdaptiveFireflyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.alpha = 0.5  # Initial attractiveness of fireflies\n        self.beta_min = 0.2\n        self.gamma = 1.0  # Absorption coefficient\n\n    def __call__(self, func):\n        scores = np.array([func(ind) for ind in self.population])\n        self.best_position = self.population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        self.func_evaluations += self.population_size\n\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if scores[i] > scores[j]:\n                        r = np.linalg.norm(self.population[i] - self.population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r**2)\n                        step = self.alpha * (np.random.rand(self.dim) - 0.5)\n                        self.population[i] = np.clip(self.population[i] * (1.0 - beta) + self.population[j] * beta + step,\n                                                     self.lower_bound, self.upper_bound)\n\n                # Differential Evolution / Best / 2 Mutation\n                indices = np.random.choice(self.population_size, 5, replace=False)\n                x_best, x1, x2, x3, x4 = self.population[np.argmin(scores)], self.population[indices[1]], self.population[indices[2]], self.population[indices[3]], self.population[indices[4]]\n                mutant_vector = x_best + self.F * (x1 - x2 + x3 - x4)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n\n                if trial_score < scores[i]:\n                    self.population[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.alpha *= 0.98  # Gradually decrease attractiveness\n\n        return self.best_position", "name": "AdaptiveFireflyDE", "description": "Adaptive Firefly-Inspired Differential Evolution (AFIDE) utilizes adaptive dynamics from firefly behavior for enhanced exploration and exploitation balance.", "configspace": "", "generation": 18, "fitness": 0.2846257041263539, "feedback": "The algorithm AdaptiveFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.28.", "error": "", "parent_id": "009d60a9-a40b-416a-85a5-bb92897bd9e8", "metadata": {"aucs": [0.845349451072151, 0.8528206685053605, 0.8535626934156424, 0.8494140229114857, 0.852582722507126, 0.8490918997274155, 0.8474674717362296, 0.8489383730757315, 0.8445560759236703, 0.3533803381305666, 0.2810558416455068, 0.28338049571950674, 0.2882878496647353, 0.270559988015572, 0.2893208708626741, 0.29314658962280915, 0.29236019458652096, 0.27085226273720653, 0.0845716267772445, 0.10797466971535763, 0.050295462895254106, 0.07880675364139023, 0.1266415953527067, 0.058132236911455415, 0.04665140479873664, 0.09750376134254934, 0.05073693174992144, 0.07116083770595139, 0.016821134863764242, 0.057703109248256834, 0.09779877568248907, 0.0598474788680281, 0.04518174986706869, 0.029718907777215975, 0.013203286925464464, 0.011510770243127633, 0.9970209489104762, 0.9825899657617161, 0.9977519779180972, 0.9775745864111061, 0.983606768813496, 0.992030547713004, 0.9900797750796961, 0.9888638279926982, 0.9898855503600114, 0.7527230344509879, 0.7551829225489823, 0.7551289536766485, 0.7607904278757043, 0.7524269223699326, 0.7556503879149644, 0.7534638961464726, 0.7503796510345815, 0.7467799506564162, 0.15849106045063488, 0.14161437384120623, 0.117790711420663, 0.17297542193573068, 0.057303938060214166, 0.12299670450860523, 0.06903671697154967, 0.05843557995360593, 0.11166199295403823, 0.19973677655335054, 0.2555042680543135, 0.26492324045533155, 0.2770829347580257, 0.28906817187437117, 0.13511487115872856, 0.29125548920942146, 0.13724394366783854, 0.3061849852916648, 0.284417410560043, 0.13577096252820098, 0.2691537289962894, 0.2883624296096995, 0.3366235780443936, 0.2181671353578778, 0.28192205420419847, 0.30564416110961223, 0.13792438117128547, 0.015548350463101324, 0.0038789995946779676, 0.17044764088844, 0.05978749326740507, 0.06404446446871548, 9.999999999998899e-05, 0.06716114198971301, 0.005222316066166632, 0.019343080152112946, 0.11273875015767831, 0.04496252751604202, 0.1202805733977822, 0.14573167281503907, 0.024410549078438648, 0.07024753168022013, 0.25978709131547817, 0.1274071849561318, 0.06416941208246485, 0.08219618205852253, 0.36339379651531734, 0.04747641814362891, 0.07412847427881264, 0.09956504304411318, 0.11300846904757067, 0.12003674488905214, 0.17256540314797109, 0.0720945913771831, 0.1479387997546544, 0.06894993461585197, 0.10766458791750133, 0.19148690560206982, 0.09955636779984256, 0.1267794267364003, 0.09410681567741486, 0.07743057595596636, 0.1664861841962738, 0.5870662964440827, 0.5906473525206629, 0.5954004065795367, 0.5836638637572029, 0.5847758597001251, 0.6055391940541929, 0.6076866045166683, 0.5827000900338328, 0.5914812853801197, 0.06678081572956962, 0.11949377934194705, 0.04416534836796815, 0.08774715773852748, 0.08437754336948855, 0.08365860285996929, 0.081794780617504, 0.06700780003817453, 0.1137690930719305, 0.11450890809285319, 0.723138252955024, 0.35251408423250685, 0.2795530447989224, 0.40676932266637456, 0.23404220656392438, 0.30414320645835136, 0.21076362669138604, 0.13324669755992724, 0.1627628827408435, 0.2827451327300303, 0.17964362554477242, 0.2295196253154963, 0.22687921179544257, 0.40717841993985926, 0.1446727296616851, 0.2116196668537641, 0.12386084794938257, 0.06754278359001187, 0.13301146991919943, 0.10722017423203467, 0.20073427466855576, 0.12202374938002536, 0.16433056645057276, 0.15889238383246962, 0.14171588184455464, 0.41578492723368576, 0.21816121662107213, 0.19434296197079293, 0.16320135940627878, 0.24738515148754336, 0.15713317715368103, 0.200800741407679, 0.21783065776359845, 0.2038446501477561, 0.15620770274624152, 0.16675506766604153, 0.2583542619972037, 0.20249918644747045, 0.17485219236200866, 0.1868395752977159, 0.19602968692221845, 0.1845711855104819, 0.20095430042976237, 0.18368208135521535, 0.10577696599833986, 0.9464383238386657, 0.15530471910703236, 0.9487270256414915, 0.20230674130042414, 0.14936378060949806, 0.9516399415317612, 0.11524792238251469, 0.10391688284122125, 0.08348798197016372, 0.21374467414093556, 0.9419894858618771, 0.2149605452690162, 0.11273086728452886, 0.2142375304227112, 0.21539925638025348, 0.0593215576236249, 0.8556426627576376, 0.2612315258857757, 0.2811104266238965, 0.20109175970068172, 0.3711921254554963, 0.2117393578688368, 0.22769266120098097, 0.2597574968985228, 0.2470895602982095, 0.27769159892688444, 0.08135634608819087, 0.08256621544554277, 0.07600525186863594, 0.08201052015275523, 0.06400892645041933, 0.024998521473105773, 0.08840440308792163, 0.06911310369868429, 0.07497776748075446]}, "mutation_prompt": null}
{"id": "a4331e74-aa47-42a9-8f66-0f21e4dc826b", "solution": "import numpy as np\n\nclass QuantumHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocity = np.random.uniform(-1.0, 1.0, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.personal_best = self.population.copy()\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best = None\n        self.global_best_score = float('inf')\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize best position using quantum wave function\n        self.global_best = self.quantum_wave_initialization(func)\n\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                # PSO update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = r1 * (self.personal_best[i] - self.population[i])\n                social_component = r2 * (self.global_best - self.population[i])\n                self.velocity[i] = 0.5 * self.velocity[i] + cognitive_component + social_component\n                self.population[i] = np.clip(self.population[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n\n                # Mutation: DE/rand/1 strategy\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                mutant_vector = x1 + self.F * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.copy(self.population[i])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n\n                if trial_score < func(self.population[i]):\n                    self.population[i] = trial_vector\n\n                # Update personal and global bests\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best[i] = trial_vector\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best = trial_vector\n\n            # Adaptive adjustment of F and CR\n            self.F = 0.5 * (1 + np.sin(np.pi * self.func_evaluations / self.budget))\n            self.CR = 0.9 * (1 - np.sin(np.pi * self.func_evaluations / self.budget))\n\n        return self.global_best\n\n    def quantum_wave_initialization(self, func):\n        wave_position = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        wave_amplitude = (self.upper_bound - self.lower_bound) / 2.0\n        wave_phase = np.random.uniform(0, 2 * np.pi, (self.population_size, self.dim))\n        wave_function = wave_position + wave_amplitude * np.sin(wave_phase)\n\n        best_wave_score = float('inf')\n        best_wave_position = None\n\n        for pos in wave_function:\n            score = func(pos)\n            if score < best_wave_score:\n                best_wave_score = score\n                best_wave_position = pos\n\n        self.func_evaluations += self.population_size\n        return best_wave_position", "name": "QuantumHybridPSODE", "description": "Hybridized Quantum-Inspired Particle Swarm Optimization with Adaptive Differential Evolution to balance exploration and exploitation.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "009d60a9-a40b-416a-85a5-bb92897bd9e8", "metadata": {"aucs": [0.9295606561032423, 0.9447605168167843, 0.9424176092394103, 0.930180563364346, 0.9412805616786202, 0.9417940113905764, 0.9419216127881989, 0.9412246514179157, 0.9331058710993292, 0.8522279152864456, 0.8890391614251404, 0.8718471533244687, 0.8407231871180002, 0.7317626504519255, 0.8741575074308736, 0.8554151474568019, 0.8707843196748153, 0.873874439840039, 0.14658065005161747, 0.14145261448044766, 0.14440315858405595, 0.1702500176609446, 0.16238117477322234, 0.16146855815911498, 0.16072740496316051, 0.10789180131816178, 0.16038694415265187, 0.07665852644371385, 0.0962676646035372, 0.11005982665205816, 0.09428846744745445, 0.10169259268507103, 0.11744623165209889, 0.11633319321478552, 0.0897626228450541, 0.10530960214687735, 0.9505167631575445, 0.9648535927279975, 0.9812615253661625, 0.9810657412131654, 0.9813113324997834, 0.9627905485701976, 0.9718005664224847, 0.9694851571527636, 0.9621412254566617, 0.6810167349462211, 0.5754132356452775, 0.8267079161168528, 0.5150040093434823, 0.6647965591518472, 0.4953483482795463, 0.551207222753407, 0.4273110791480964, 0.6283128695984326, 0.1574935544365904, 0.17124181762214907, 0.39501824876421965, 0.2140262328221595, 0.27025273269028294, 0.28011947376988433, 0.15178149933474983, 0.36216718189234265, 0.12482603875093978, 0.16769300342220073, 0.1501045131880937, 0.1278351392611805, 0.1657598261851665, 0.15513828493842652, 9.999999999998899e-05, 0.2253708682909763, 0.11880222868429113, 0.12196676746522295, 0.17838793481470017, 0.13476753863158597, 0.16634745970767795, 0.13053304564098567, 0.2594910247195237, 0.16993887835217214, 0.2057540739527599, 0.21453639791162016, 0.12977884994219346, 0.05439322240539313, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06408542733411682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017647323435431628, 0.15089119345101298, 0.06828863545225883, 0.1382548102549721, 0.07503003700487731, 0.01900958186702828, 0.029889025497688237, 0.15503110404667675, 0.11092771589322414, 0.13525201423753275, 0.11614313320171166, 0.21904779696759102, 0.057097635805904656, 0.17736422231566817, 0.25523650505221107, 0.221527400147015, 0.16252874156456987, 0.16194311569722597, 0.0782845554510222, 0.012184758274441654, 0.1356938635080267, 0.2224493995264204, 0.17029994712087337, 0.07530673196716287, 0.3509253228110598, 0.10028665422260274, 0.10550110742474395, 0.16180585716363893, 0.5625622323293101, 0.5911110957789911, 0.532815695889342, 0.5368477187376806, 0.45608488926257906, 0.5389023667088917, 0.5910687831046436, 0.531996273876181, 0.5292339582729958, 0.10938513620513712, 0.1405596293762481, 0.12919263038805961, 0.12525651976526841, 0.11198452547671989, 0.1379923836462733, 0.1714925882657402, 0.09419710397144632, 0.09799613244074279, 0.17147105252929218, 0.2372486212890944, 0.18758143346660439, 0.17145771433809276, 0.22726216423616308, 0.21417276623353587, 0.24385794041993658, 0.20043018120070732, 0.26371343949561066, 0.2213862127159134, 0.3621687236764103, 0.2424013795666543, 0.4334697465823326, 0.2547478060296201, 0.45677455792522026, 0.4061778277492841, 0.5096495168699966, 0.4046309142136393, 0.21366147337010744, 0.2526160600622367, 0.23178736311120884, 0.2376652652131679, 0.22915604536588108, 0.24472518178473224, 0.23105594163632526, 0.3592004902815612, 0.23729121527416264, 0.24187817858949834, 0.21123391111001544, 0.2148868223358591, 0.2187878832288308, 0.25122636252010266, 0.20533103732642488, 0.232089108852635, 0.1927669071637378, 0.2219809704579293, 0.21203886053183119, 0.19862680638972174, 0.22294120641524262, 0.19166590473122802, 0.2079704167232157, 0.18531594129137519, 0.7691093232657409, 0.1856265888921772, 0.1856166133421101, 0.1881526617604211, 0.1490814848987968, 0.18640984741870936, 0.19890324769090106, 0.17334085397644172, 0.1580526460019872, 0.1700450423559745, 0.16051185290459813, 0.1931984273218159, 0.05218549320062682, 0.21159200744075912, 0.2991411244521849, 0.6913990874836231, 0.21080750510272406, 0.1688406490012483, 0.31998548168184693, 0.21407976814423046, 0.0948717261359483, 0.20074788593319504, 0.19854407329688317, 0.18744329142291438, 0.19509712606378793, 0.18127066725406116, 0.1861261562482771, 0.180555500595448, 0.19704358650728648, 0.1937245219642495, 0.0977574587576917, 0.09499033298515147, 0.08594586901737389, 0.09450743601187928, 0.07417253036390614, 0.08456295252014456, 0.08087736518787769, 0.09076905988210549, 0.0770451004671584]}, "mutation_prompt": null}
{"id": "7942e601-4b07-4676-b7b2-93af752a4ca6", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocity = np.random.uniform(-1.0, 1.0, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.personal_best = self.population.copy()\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best = None\n        self.global_best_score = float('inf')\n        self.alpha = 0.5  # Momentum weight\n        self.tau = 0.1  # Quantum tunneling probability\n\n    def __call__(self, func):\n        self.global_best = self.quantum_tunneling_initialization(func)\n\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive momentum update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = r1 * (self.personal_best[i] - self.population[i])\n                social_component = r2 * (self.global_best - self.population[i])\n                self.velocity[i] = self.alpha * self.velocity[i] + cognitive_component + social_component\n                self.population[i] = np.clip(self.population[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n\n                # Quantum tunneling\n                if np.random.rand() < self.tau:\n                    tunneling_vector = self.global_best + np.random.normal(0, 1, self.dim)\n                    tunneling_vector = np.clip(tunneling_vector, self.lower_bound, self.upper_bound)\n                    trial_vector = np.copy(tunneling_vector)\n                else:\n                    trial_vector = np.copy(self.population[i])\n\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best[i] = trial_vector\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best = trial_vector\n\n            # Adaptive adjustment of alpha and tau\n            self.alpha = 0.5 * (1 + np.sin(np.pi * self.func_evaluations / self.budget))\n            self.tau = 0.1 * (1 - np.cos(np.pi * self.func_evaluations / self.budget))\n\n        return self.global_best\n\n    def quantum_tunneling_initialization(self, func):\n        wave_position = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        best_wave_score = float('inf')\n        best_wave_position = None\n\n        for pos in wave_position:\n            score = func(pos)\n            if score < best_wave_score:\n                best_wave_score = score\n                best_wave_position = pos\n\n        self.func_evaluations += self.population_size\n        return best_wave_position", "name": "EnhancedQuantumInspiredSwarm", "description": "Enhanced Quantum-Inspired Swarm (EQIS): Integrating Quantum Tunneling with Adaptive Momentum to improve exploration and convergence efficiency.", "configspace": "", "generation": 20, "fitness": 0.308662084958407, "feedback": "The algorithm EnhancedQuantumInspiredSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "009d60a9-a40b-416a-85a5-bb92897bd9e8", "metadata": {"aucs": [0.97423780075631, 0.9713358248967032, 0.973208314686405, 0.9693373648193555, 0.9459007292155495, 0.9718002151866032, 0.9699498682021077, 0.9713816971803362, 0.9714412651988793, 0.8883037242937544, 0.9068107793337571, 0.8669699124009693, 0.8827163160090452, 0.9013476948698722, 0.070645908250902, 0.9075310670366732, 0.88637011893233, 0.9080906765366774, 0.09497339343008093, 0.12122122889077969, 0.04053238392926739, 0.12871787782459776, 0.0799944959342147, 0.12864799630899892, 0.13311112773178535, 0.0674789753743682, 0.1143468760505808, 0.06178210241946669, 0.1205234685158022, 0.07514804129549357, 0.10867454441590307, 0.05177970614579552, 0.06916561429756019, 0.07222125316728722, 0.07203021470601889, 0.07355292424193627, 0.9926496080770163, 0.9908883586424095, 0.9825163249541589, 0.9909253553025557, 0.9875298289008714, 0.6608324566891668, 0.9869564580209614, 0.9886286296876303, 0.9937115790535666, 0.6304490564717301, 0.9099545099233051, 0.6942513816010836, 0.8168038274884359, 0.5226074142871568, 0.6093700080962046, 0.7265808311913855, 0.6690138094745524, 0.4760738793655438, 0.20471799156468917, 0.227369325567768, 0.21342267270102677, 0.28579959229822494, 0.21482886888929054, 0.18328558587924304, 0.19949272486981673, 0.22899773350521113, 0.4147195845817122, 0.4290012426118497, 0.13764949928910408, 0.2969869244403308, 0.11376406510957882, 0.13711036232111273, 0.3598231193549244, 0.13840595516544707, 0.309935090846748, 0.29041406223349364, 0.2710498816042225, 0.26069753228240045, 0.13762281410639554, 0.3006146163946114, 0.26054547361771174, 0.21534383074094376, 0.28804435310785703, 0.3180504331347094, 0.13864720017800647, 9.999999999998899e-05, 9.999999999998899e-05, 0.09145315865157555, 0.05460093598457494, 9.999999999998899e-05, 9.999999999998899e-05, 0.009720480614294313, 0.03343448250782399, 0.11019717571283749, 0.05388563473911834, 0.09412716147208156, 0.06100701300720446, 0.05910680929021184, 0.03347860238978795, 0.033826917308096394, 0.09706438453783772, 0.09730195105986061, 0.15256211063138947, 0.23780457672565491, 0.1855350613200193, 0.28444185455320603, 0.08759900557984779, 0.11449990956436429, 0.08774239197401279, 0.1693879452483117, 0.02369936000035322, 0.130732585335681, 0.14337696465011773, 0.06811640286252074, 0.2089685394220232, 0.04120022185491523, 0.040715745545048976, 0.10911965640540788, 0.1282367649947984, 0.05032001221471405, 0.08754777499021715, 0.5390747159267825, 0.532887772260773, 0.6413259608031566, 0.6119351454214637, 0.5602579109007133, 0.5708612595028091, 0.5934495913523826, 0.6099239322155294, 0.6329686319986307, 0.07297527909435753, 0.0843702037740246, 0.07642763237072525, 0.12488052876899292, 0.08496858722909073, 0.07347718584329233, 0.10295049199222173, 0.1081956951778753, 0.1199969380768946, 0.24113623778926818, 0.21561218057842535, 0.17972748704927877, 0.26770718412702144, 0.15878132713667914, 0.12773945989753943, 0.3972230137712732, 0.1968871005542413, 0.280510162913039, 0.19574924573228902, 0.18246906284421394, 0.18178501897960797, 0.16125601675384638, 0.17341658577218766, 0.4330181575993749, 0.3113509701484257, 0.35521449262952987, 0.2625315224721104, 0.19030778778963453, 0.08022228236867812, 0.16372945463433441, 0.14305208956763305, 0.15145461731783183, 0.1470772731875648, 0.22516246154035024, 0.22082872246888885, 0.21937377050361861, 0.19399007820482805, 0.22618426990738694, 0.23988676279525312, 0.21498880719124458, 0.15873773645140477, 0.26241605918446564, 0.24941762653013366, 0.19163615741063245, 0.2784116733770071, 0.21563800964043744, 0.19559480713070043, 0.19187483679352224, 0.19169918755430948, 0.2128700916988363, 0.18496198556941112, 0.20405324210406883, 0.18767598930432405, 0.19278886615907354, 0.18935512853164538, 0.0908597360587271, 0.9730284893047152, 0.1737648329004553, 0.1705447702267946, 0.11887471617646916, 0.963264000454202, 0.13174319405472545, 0.15981957206964903, 0.8489994053044064, 0.7072609321171646, 0.8219284762355628, 0.08332124754871506, 0.21489632324170393, 0.1555748149015983, 0.09502556740246015, 0.11141262663210072, 0.0950965673597759, 0.2303070000216837, 0.2193352391606379, 0.23898592858836953, 0.20062719386500616, 0.22504381559614783, 0.24534590048038063, 0.240329907127673, 0.18839325974986, 0.25352145260305947, 0.057074997209143996, 0.08621791071320728, 0.08182212098016717, 0.08210327747870194, 0.09903385506093088, 0.09972623473903153, 0.09531655154688046, 0.10545569152051526, 0.08194533095177137]}, "mutation_prompt": null}
{"id": "41691c4c-9697-4067-a84f-04d28a640c66", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 21, "fitness": 0.3567850612771725, "feedback": "The algorithm QuantumEnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "7942e601-4b07-4676-b7b2-93af752a4ca6", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "3bf0bdd2-e8b8-417c-8a10-448a6815abe1", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "13f4dbcf-ddff-4296-ab5f-d28028f3ec45", "solution": "import numpy as np\n\nclass QuantumInspiredParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n        self.global_best_score = float('inf')\n        self.func_evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.quantum_prob = 0.1\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate current position\n                score = func(self.particles[i])\n                self.func_evaluations += 1\n\n                # Update personal bests\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n                # Update velocities\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_coeff * r1 * (self.personal_best_positions[i] - self.particles[i])\n                    + self.social_coeff * r2 * (self.global_best_position - self.particles[i])\n                )\n\n                # Quantum tunneling\n                if np.random.rand() < self.quantum_prob:\n                    self.velocities[i] += np.random.normal(0, 1, self.dim)\n\n                # Update particles positions\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adjustment of inertia weight and quantum probability\n            self.inertia_weight = 0.7 - 0.4 * (self.func_evaluations / self.budget)\n            self.quantum_prob = 0.1 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n\n        return self.global_best_position", "name": "QuantumInspiredParticleSwarmOptimization", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO): A hybrid algorithm combining particle swarm dynamics with quantum tunneling to improve exploration and convergence.", "configspace": "", "generation": 23, "fitness": 0.25725282126431454, "feedback": "The algorithm QuantumInspiredParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.70374573432719, 0.6827178679150876, 0.7235677227869206, 0.7277803743769664, 0.7449382800039516, 0.7216996429035338, 0.7215779463845464, 0.7160373717925979, 0.6988620040097581, 0.49194068600026597, 0.0321960965312621, 0.49281470956120543, 0.44108115613076193, 0.028420794050475373, 0.42835732789095926, 0.03745336104164376, 0.4486775040652444, 0.016639561475713327, 0.1214178979844619, 0.10675267064205873, 0.11322614559882893, 0.15926839719667074, 0.16234472424192137, 0.15811104360135453, 0.13468298279540958, 0.12852618285972073, 0.11917520495149769, 0.10449223824607268, 0.13158644013022658, 0.1080948216737394, 0.13553995018918008, 0.1381655200716756, 0.1523216299449074, 0.1370478300203798, 0.12142118184296291, 0.09407712635512855, 0.9947713295548961, 0.9931164200300029, 0.9961266965347302, 0.9933341549650304, 0.9896882092473678, 0.9939128025074773, 0.9933789796019503, 0.9911834536421935, 0.9910160005596922, 0.5848257732200863, 0.44041483996641406, 0.5427910448460206, 0.37668126317712647, 0.4478694234915833, 0.5326543600382427, 0.580799129042367, 0.559493575685938, 0.5448928095145376, 0.30093966848328035, 0.21310469939179644, 0.22258869922239144, 0.6684878453839317, 0.3287512988382796, 0.2767667752093259, 0.16891514604162217, 0.6561117266887591, 0.2223794905568699, 0.11229095969321568, 0.25270945888393104, 0.1902504860387304, 0.15852148453100634, 0.12566215557248084, 0.1618953308377944, 0.16861881565683268, 0.17554349642176548, 0.1739825119614703, 0.17380263535809148, 0.09971095483078918, 0.10233559010353965, 0.17140853629621378, 0.130120295198902, 0.17422069957603448, 0.19721443555580764, 0.0834222420919184, 0.2183056191118068, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019851039011516525, 0.0036585885879000246, 9.999999999998899e-05, 0.03825337833748854, 0.0668907698455159, 0.03801212218389605, 0.0677026176429465, 0.09608391567345331, 9.999999999998899e-05, 0.04184520533245972, 0.14275742911238054, 0.022648819465770464, 0.018771420522051607, 0.043146130028039464, 0.02347279253070933, 0.03179998178463739, 0.04906636877479975, 0.06551341693026713, 0.0521074615481848, 0.2210807865149068, 0.04471037529068267, 0.04333658695108411, 0.07792092012722573, 0.09622450636453572, 0.0713256913639736, 0.15110951385169247, 0.03180798106823368, 0.11121367456490261, 0.07596541604897356, 0.061391778991555124, 0.048064317541759216, 0.4534275509435711, 0.49280034210219414, 0.4900691980659687, 0.4993622273100239, 0.4686522478111721, 0.46167177124055747, 0.4829812981315469, 0.5228732018039244, 0.4947758211437403, 0.10572052028449963, 0.14723669813469964, 0.129173106592693, 0.12082837257245116, 0.12117203781594577, 0.10403291359575428, 0.1038529870086351, 0.13845917114545792, 0.09104124960295579, 0.23521834847761924, 0.2833527808746579, 0.26536915592124255, 0.23983950312767688, 0.2731136317969617, 0.14520197285486758, 0.303440040643736, 0.18595856121062493, 0.18470539685013887, 0.3624953450552648, 0.37972089156479183, 0.24808564600495597, 0.34398985726675346, 0.19370975030557824, 0.3241125951741354, 0.299175498107461, 0.2071369119002352, 0.38227408092479376, 0.30654625569550376, 0.17188975685487162, 0.16074329053355685, 0.23952645377112824, 0.1747050107575624, 0.2854850604821808, 0.1876050398197011, 0.16395989791756183, 0.2750958066471316, 0.237543352947174, 0.2186093217488344, 0.220606156792995, 0.195625512940388, 0.23462249765488363, 0.21009532270247633, 0.20866733974436813, 0.1986108450532491, 0.20747181360730993, 0.22911708691844468, 0.22463388126572648, 0.1870072344031236, 0.21902215262522373, 0.5365755559274936, 0.199780707855844, 0.21711047304625664, 0.22901462320996935, 0.23425373457450416, 0.16294571810033798, 0.16773807779346694, 0.1532792841596422, 0.7661668565151948, 0.2005516381882846, 0.2016076227592305, 0.1656848969506418, 0.13859245950903387, 0.16302120451741064, 0.08321979400822677, 0.11035920336414695, 0.14292225597411468, 0.15520962585898546, 0.16830741447631736, 0.16702975235086792, 0.10483992595931868, 0.15625360618276485, 0.5821381917993371, 0.18123849018610605, 0.21278601985464507, 0.20352270476059864, 0.19728034889638169, 0.2023826626790568, 0.22026586847556018, 0.1937979493794516, 0.24400400980535342, 0.20071081693695025, 0.09080023529185988, 0.08974997174190957, 0.1197794973147045, 0.12532856761100852, 0.09579718630432221, 0.08818841878608286, 0.1402346726869288, 0.09568606790450762, 0.10002904839636961]}, "mutation_prompt": null}
{"id": "724e7a77-93a0-4205-8a6f-5f252d4e4ac9", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "ceed2adb-e109-4ff6-9329-07640dcbef92", "solution": "import numpy as np\n\nclass AdaptiveQuantumSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.func_evaluations = 0\n        self.temperature = 1.0  # Initial temperature\n        self.cooling_rate = 0.99  # Cooling rate\n        self.tau = 0.1  # Quantum tunneling probability\n        self.current_position = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n        self.best_position = np.copy(self.current_position)\n        self.best_score = float('inf')\n\n    def __call__(self, func):\n        current_score = func(self.current_position)\n        self.func_evaluations += 1\n        if current_score < self.best_score:\n            self.best_score = current_score\n            self.best_position = np.copy(self.current_position)\n\n        while self.func_evaluations < self.budget:\n            # Generate a neighbor solution\n            neighbor = self.current_position + np.random.normal(0, self.temperature, self.dim)\n            neighbor = np.clip(neighbor, self.lower_bound, self.upper_bound)\n\n            # Quantum tunneling\n            if np.random.rand() < self.tau:\n                quantum_jump = np.random.normal(0, 1, self.dim)\n                neighbor += quantum_jump\n                neighbor = np.clip(neighbor, self.lower_bound, self.upper_bound)\n\n            neighbor_score = func(neighbor)\n            self.func_evaluations += 1\n\n            # Acceptance criteria\n            if neighbor_score < current_score or np.exp((current_score - neighbor_score) / self.temperature) > np.random.rand():\n                self.current_position = neighbor\n                current_score = neighbor_score\n\n                if current_score < self.best_score:\n                    self.best_score = current_score\n                    self.best_position = np.copy(self.current_position)\n\n            # Adaptive cooling schedule\n            self.temperature *= self.cooling_rate ** (self.func_evaluations / self.budget)\n\n        return self.best_position", "name": "AdaptiveQuantumSimulatedAnnealing", "description": "Adaptive Quantum Simulated Annealing (AQSA): Combining adaptive temperature scheduling and quantum-inspired tunneling to enhance global search capability.", "configspace": "", "generation": 25, "fitness": 0.2328310615638183, "feedback": "The algorithm AdaptiveQuantumSimulatedAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.4037213126402419, 0.42754230989871744, 0.4415722647079914, 0.3851911450195734, 0.4113190622381433, 0.4259733513633409, 0.41260382279743146, 0.42763639052343383, 0.4431401276868845, 0.014322983194745564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14529482334998445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12138676932002346, 0.10671377916100955, 0.11322201329479953, 0.11330440342335457, 0.1514291418229895, 0.10384946536476569, 0.10972079616813823, 0.13699982871340066, 0.07158742190268497, 0.10418606041562728, 0.09133557654067248, 0.14565261957186726, 0.10115755597254517, 0.10464826047899756, 0.09452379506279518, 0.08281923138416714, 0.05622134395957401, 0.0928308624658084, 0.9874131528474112, 0.9835524495295829, 0.9827581392728045, 0.986420573364174, 0.9885350959017276, 0.977051416598244, 0.9878122190221421, 0.9851860054685624, 0.9889750961805617, 0.372052196647625, 0.39481104463130645, 0.45928601371048194, 0.3928783423268648, 0.4271474840462042, 0.41704849387869003, 0.4244710233531812, 0.38892086935313397, 0.4494920226938838, 0.22591476801365173, 0.8036185754436672, 0.2834435359288614, 0.21140163114112798, 0.24432183754262238, 0.25773996295808266, 0.2316398621697665, 0.2546981941205042, 0.34052152512769385, 0.10936364235004914, 0.18320730612320835, 0.21596060376565773, 0.20900247181805665, 0.22307886748998362, 0.21808108763784884, 0.22169388168393467, 0.1274454717710254, 0.1993455195126732, 0.16537031490069787, 0.1996530117977512, 0.3536215361411874, 0.22724311196056823, 0.16561791069966925, 0.12539761393406157, 0.2269314995369185, 0.20817727021717802, 0.21746040091411656, 9.999999999998899e-05, 0.003060304209467568, 9.999999999998899e-05, 9.999999999998899e-05, 0.05349853810922656, 0.18771396700743004, 0.0061476953245023225, 9.999999999998899e-05, 9.999999999998899e-05, 0.037833652868963896, 0.049488739836943796, 0.06385102518013264, 0.06859277836047495, 0.006031155106927311, 0.007715095533997185, 0.07573536363054978, 0.05061173704318167, 0.05936307838104127, 0.12724556105444385, 0.05911631329745792, 0.07351846307778598, 0.07135974311046789, 0.13898428336585822, 0.1276178940426842, 0.12030222354346676, 0.17855892579844945, 0.059006440000775595, 0.17922392741192872, 0.16623010952362927, 0.05919896926923107, 0.18246518171609938, 0.1054966008631052, 0.10986586428431733, 0.1222598085971236, 0.08835858092311866, 0.06677042007577916, 0.3634636144956849, 0.3787290876813988, 0.37446381564805165, 0.37987219068553135, 0.38567823010204205, 0.40313551379985946, 0.4094312598500478, 0.36613739904568676, 0.4406807854816064, 0.10758055333506367, 0.06993444898510803, 0.15213918230941414, 0.08822893480366933, 0.09042434593008053, 0.11573801989435073, 0.11747911611931627, 0.11681695236976519, 0.11206043120730391, 0.4441757886860527, 0.24732079074766644, 0.16750834309970086, 0.3675463430893263, 0.21846929701671036, 0.4707425381942194, 0.17424002958560136, 0.3866132646632606, 0.25843930566935636, 0.29798935367294055, 0.24169809439079204, 0.34188524157958833, 0.3075693590097488, 0.30946021130599666, 0.2719783832563033, 0.27979911046369665, 0.24410268967676008, 0.32173807755203365, 0.27398524250874656, 0.20956181984318867, 0.30565359339560016, 0.1509834700453272, 0.18484617711722295, 0.13323555050129765, 0.19346256024847797, 0.17268234727567056, 0.2215126496549138, 0.18054617676359908, 0.16437517567510895, 0.2238817812526901, 0.22518080182067202, 0.24506135962198583, 0.2189901323906921, 0.19429935853495273, 0.23213201303669273, 0.1976395182524785, 0.19612328958729008, 0.17866512931498513, 0.19085854005081893, 0.18998902428078102, 0.18883461285654912, 0.18016640426781827, 0.1870229573770945, 0.22098779212162067, 0.2013800121999677, 0.16639840629671765, 0.13571052325996025, 0.18529757503671074, 0.16640147853395104, 0.19518967060856707, 0.1686486703623148, 0.1349479266198712, 0.1264295805343072, 0.16765003911817689, 0.4929104156057945, 0.11272765852909183, 0.21056092170295226, 0.4131109380447142, 0.4684205853361374, 0.332664426826358, 0.15638960527631007, 0.16887852295347205, 0.49600879890178085, 0.23010847500213216, 0.34068971604000753, 0.20106471817164728, 0.21042688575265744, 0.31749279794826657, 0.21678638536648132, 0.23462179837567387, 0.24855946970190768, 0.26400695902570437, 0.08471226575223445, 0.12168507326603872, 0.06921762375469753, 0.10294646202293878, 0.08965768515207018, 0.11366685099957119, 0.08335516561860845, 0.09839366873770616, 0.09035194762982701]}, "mutation_prompt": null}
{"id": "4f947cc2-b2aa-4927-b560-02ebb529691b", "solution": "import numpy as np\n\nclass HarmonyInspiredAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.harmony_memory_rate = 0.95\n        self.adaptation_rate = 0.2\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                if np.random.rand() < self.harmony_memory_rate:\n                    # Pitch adjustment inspired by harmony search\n                    harmony_vector = self.population[np.random.choice(self.population_size)]\n                    adjust_factor = np.random.uniform(-0.1, 0.1, self.dim)\n                    candidate_vector = harmony_vector + adjust_factor * (self.upper_bound - self.lower_bound)\n                else:\n                    # Crossover inspired by genetic algorithms\n                    parents = np.random.choice(self.population_size, 2, replace=False)\n                    crossover_point = np.random.randint(1, self.dim)\n                    candidate_vector = np.concatenate([\n                        self.population[parents[0], :crossover_point],\n                        self.population[parents[1], crossover_point:]\n                    ])\n\n                candidate_vector = np.clip(candidate_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                candidate_score = func(candidate_vector)\n                self.func_evaluations += 1\n                if candidate_score < func(self.population[i]):\n                    new_population[i] = candidate_vector\n                    if candidate_score < self.best_score:\n                        self.best_score = candidate_score\n                        self.best_position = candidate_vector\n            \n            self.population = new_population\n\n            # Adaptive adjustment of harmony memory rate\n            self.harmony_memory_rate = 0.95 - 0.3 * (self.func_evaluations / self.budget)\n\n        return self.best_position", "name": "HarmonyInspiredAdaptiveGeneticAlgorithm", "description": "Harmony-Inspired Adaptive Genetic Algorithm (HIAGA): Combines genetic operators with harmony search principles for adaptive exploration and exploitation in optimization.", "configspace": "", "generation": 26, "fitness": 0.1759248030662507, "feedback": "The algorithm HarmonyInspiredAdaptiveGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.17.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.3177878313946242, 0.3235132775342118, 0.34781565478425336, 0.3635540949450966, 0.36093777088692536, 0.3175555613112735, 0.3940978264101731, 0.3696423308272301, 0.32432084924856563, 0.0014895679793659466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022508443182276405, 9.999999999998899e-05, 0.0003888824673633495, 0.004983239221579061, 9.999999999998899e-05, 0.11227349256110575, 0.11745077787563574, 0.12372264912893227, 0.11731294674106885, 0.12273829572427208, 0.12507275634175952, 0.08941388259599758, 0.12096129137062961, 0.0955326647810194, 0.08676979236699822, 0.12216701517450235, 0.10091043932542876, 0.10249059484566037, 0.11115362691224417, 0.09814260193986868, 0.12592275921363416, 0.1040265266522169, 0.11712331523210706, 0.933350108754441, 0.9019534879251507, 0.8639714592445025, 0.8943114517099696, 0.8979237631108787, 0.888849986248084, 0.8645004751097021, 0.8719259487951555, 0.8063503587655346, 0.18296816180600506, 0.18096670085505384, 0.16641901811582993, 0.20070391881288197, 0.17205805739287805, 0.1855716226985097, 0.18742330532089357, 0.1797106765761295, 0.17188953608681112, 0.2291027794526449, 0.2596350002078238, 0.21997142642462963, 0.269938650076612, 0.20604909517546488, 0.21665810522739914, 0.19504168292334279, 0.22149201054086942, 0.219344716669719, 0.1267662601534466, 0.11866285221945239, 0.12110859186710499, 0.1338214913245943, 0.14013394959841685, 0.1159527539741011, 0.10868683557291292, 0.11138250644337566, 0.1355646476005059, 0.11837050491193091, 0.11642116701625127, 0.10915768035161366, 0.11668536712593724, 0.13186653259403225, 0.12336636882080765, 0.114487527521136, 0.1043507845774011, 0.11228316134770122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01099831618226943, 9.999999999998899e-05, 0.008438261508835199, 9.999999999998899e-05, 9.999999999998899e-05, 0.02747579745062756, 0.029926481502591584, 0.10160317398276442, 0.059424345369842535, 0.012841107505891292, 0.04964238039096036, 0.05610732245194727, 0.04140572518148056, 0.05637945332826133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0584739859128649, 0.05110830459287041, 0.05468725212975656, 0.04631624801469092, 0.05535257539102256, 0.0363381293828392, 0.06619125094735623, 0.062391218729002995, 0.06913829689888207, 0.3415157877262067, 0.31101764295132994, 0.32944732514282193, 0.3231179893206507, 0.3086928777100665, 0.3201811553088245, 0.31476848432407245, 0.3626986590712319, 0.30996920322024624, 0.0878185431635713, 0.09649233714972927, 0.12336032846767497, 0.1096660594749661, 0.08110869017276567, 0.09357488545853121, 0.12433907296980873, 0.08331329761930106, 0.0913564060524239, 0.16000518831865862, 0.16402369574229692, 0.15347193831182415, 0.19906035209466222, 0.1542036277831519, 0.20415821677810064, 0.16592947987887197, 0.16804063717987938, 0.1545236111224242, 0.2367588845790375, 0.2519843455879571, 0.18176729434365502, 0.23290396518624634, 0.24056620332105938, 0.24093433759751814, 0.22196304924010501, 0.23391965056017827, 0.2336119918535895, 0.19466333572112104, 0.1853181623349619, 0.14380557382855963, 0.1568291613541587, 0.18082824125854713, 0.1760874851201918, 0.17706228590105, 0.1731898658559874, 0.1742558654335542, 0.19042986310627297, 0.18285055691005203, 0.18475286369900434, 0.1898854788464076, 0.19755369043501847, 0.20203586412162533, 0.18794302976768928, 0.18766499601627906, 0.19662759300536015, 0.18589596722313895, 0.1843645748831112, 0.18028255343652289, 0.19707135603976922, 0.18684655615946855, 0.1719499438865123, 0.17913190904457477, 0.1919653908041541, 0.20472636366835673, 0.1933229304330003, 0.1680744100124224, 0.15204316201336965, 0.18108398899757616, 0.19656320580509645, 0.19382194002294195, 0.16496718106699448, 0.11566175181771576, 0.17437249911856834, 0.3518062587438874, 0.202981112893874, 0.41285580106181974, 0.20360244852466824, 0.16550070328166766, 0.14714096034438084, 0.1101782736914727, 0.15805217237485636, 0.15339408074645655, 0.1797274411961407, 0.1686036191855954, 0.1946049652038898, 0.16946825751513128, 0.19507232702181576, 0.17659062022894323, 0.17449751854244555, 0.17390709703613538, 0.1725434215386844, 0.08884775317923976, 0.07375117608104631, 0.07895689656868365, 0.11158868721584947, 0.08063938403219417, 0.08602277821180615, 0.07394897708533954, 0.08225361718533275, 0.07401302767184603]}, "mutation_prompt": null}
{"id": "ed96b980-73f4-4515-a94f-bd3808318aa2", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearchQuantumPitch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = int(10 + 2 * np.sqrt(dim))\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.harmony_memory_consideration_rate = 0.95\n        self.pitch_adjustment_rate = 0.7\n        self.bw = 0.01  # Bandwidth for pitch adjustment\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_harmonies = np.copy(self.harmony_memory)\n            for i in range(self.harmony_memory_size):\n                new_harmony = np.copy(new_harmonies[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.harmony_memory_consideration_rate:\n                        new_harmony[j] = self.harmony_memory[np.random.choice(self.harmony_memory_size), j]\n                        if np.random.rand() < self.pitch_adjustment_rate:\n                            new_harmony[j] += self.bw * np.random.normal(0, 1)\n                    else:\n                        new_harmony[j] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n                new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n                new_score = func(new_harmony)\n                self.func_evaluations += 1\n\n                if new_score < func(new_harmonies[i]):\n                    new_harmonies[i] = new_harmony\n                    if new_score < self.best_score:\n                        self.best_score = new_score\n                        self.best_position = new_harmony\n\n            self.harmony_memory = new_harmonies\n\n            # Adaptive adjustment of harmony memory consideration rate and bandwidth\n            self.harmony_memory_consideration_rate = 0.95 - 0.45 * (self.func_evaluations / self.budget)\n            self.pitch_adjustment_rate = 0.7 * (1 + 0.3 * np.cos(2 * np.pi * self.func_evaluations / self.budget))\n            self.bw = 0.01 + 0.04 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n\n        return self.best_position", "name": "AdaptiveHarmonySearchQuantumPitch", "description": "Adaptive Harmony Search with Quantum-Inspired Pitch Adjustment (AHSQPA): Combines adaptive harmony memory updates with quantum-inspired pitch adjustment to balance exploration and exploitation for robust optimization.", "configspace": "", "generation": 27, "fitness": 0.20436204423954032, "feedback": "The algorithm AdaptiveHarmonySearchQuantumPitch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.5118782047162118, 0.5145484481305029, 0.5040065446205991, 0.5130035462887437, 0.5440876082253518, 0.5044591216304399, 0.4952388269037227, 0.5319281329725607, 0.5189277558295196, 0.11712154098807859, 0.1414064279540258, 0.15564057616345905, 0.11289274811538819, 0.14979603770082173, 0.1122360163674121, 0.16202760610877798, 0.16412979732129696, 0.20805816288845758, 0.14151431157165828, 0.13184318326011868, 0.1550124940897989, 0.13615935211885533, 0.17700319533646924, 0.15882695943980019, 0.14112606198450972, 0.12715463310624486, 0.14687879763663436, 0.11798134889188638, 0.1346836292043343, 0.1276514126697722, 0.12197543833212598, 0.1689542130222812, 0.15459333192255198, 0.1044545728448002, 0.10738040052019804, 0.11780034339355638, 0.7913167460174791, 0.8209056905188422, 0.7645387748480781, 0.8002613942150992, 0.7784860583695374, 0.7646409438551578, 0.7833602407860039, 0.7636041223810878, 0.7796275616487811, 0.11402554470112047, 0.3238233977695454, 0.2784257633823325, 0.30146698453350684, 0.30009945532998794, 0.2789438346912031, 0.17747383413030837, 0.11144791085890304, 0.28069858786120827, 0.15555288965673486, 0.09803750275695788, 0.13223135033594646, 0.2530157441094525, 0.18089886452201331, 0.11635531680107558, 0.14192752739695147, 0.22304857429612335, 0.228999999298499, 0.19560435235811469, 0.1501906986004964, 0.13746864510021772, 0.1924630967695362, 0.12678518015853513, 0.1495073399875655, 0.24312688758172618, 0.16729886963020146, 0.1378573853445587, 0.15957125146539441, 0.13573702816069888, 0.16450072370012714, 0.13037174418384934, 0.1599110399533603, 0.13229763725205979, 0.14644319119577465, 0.1021170910948318, 0.1530359597074088, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009985203854813496, 0.020770496681176365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03026227190838071, 0.03607477352126076, 0.06289170923940468, 0.08316179492302855, 0.045887229557678766, 0.02367702653980941, 0.021114558611195156, 0.0658440925140894, 0.05222865801488552, 0.0795459504157987, 0.000955755575731243, 0.005505009923390758, 0.030194284873726662, 0.004005304057743908, 0.03998786269176069, 0.007691409558379214, 0.007474555218532575, 0.007056240537176239, 0.013850120781102149, 0.1068291868425848, 0.1190915601307232, 0.09228268116010019, 0.13064532020390485, 0.06319426078817214, 0.1127034901373356, 0.15290218124650856, 0.12761971108863068, 0.06926664115930892, 0.44236666916898193, 0.4406967438033502, 0.5063251054184713, 0.4520834035323723, 0.43799182155033645, 0.4003868355177781, 0.4020092017277015, 0.42643514658058534, 0.43368659163935686, 0.10296151282156529, 0.07530013799068835, 0.07773282670037063, 0.0849264929541369, 0.07680835372404848, 0.14119466756773347, 0.05273565653677814, 0.12753146432233586, 0.09661016265944633, 0.1636539425070539, 0.16596777947508456, 0.1738819526925619, 0.14893256994642579, 0.17443016111213616, 0.16521525292086503, 0.20241920827260917, 0.17344201263473424, 0.18216875401841026, 0.2739704625875684, 0.26972340953032325, 0.13667062005071784, 0.22581628601893244, 0.2850199472310727, 0.24348433467855368, 0.222002809455088, 0.18311255569174567, 0.16748991977620675, 0.13636198074592043, 0.15589559604194014, 0.13581049406576873, 0.18560288560916383, 0.18041585027474283, 0.1881954603316638, 0.1850616316700575, 0.12027241038494563, 0.17650956337796686, 0.21820888627966795, 0.1851950514386882, 0.2115917550516221, 0.20440903429098112, 0.2521621832116161, 0.21190838072718876, 0.21696431345242617, 0.22984428004958501, 0.24877566071805912, 0.22035691231980892, 0.201428171501166, 0.2313707680864825, 0.1993409134741695, 0.19843733761870985, 0.18650849433597727, 0.21767008476964378, 0.2062280811415339, 0.17556125151518098, 0.1791166044095407, 0.1904030637983889, 0.18137575980583687, 0.6016262280779822, 0.191986487993428, 0.6773909435767729, 0.16581746622634652, 0.3920044577049534, 0.1593483136850662, 0.31980782211754677, 0.3291799092056502, 0.19929676701480747, 0.20771930460782173, 0.2415698561616293, 0.20020412742952154, 0.10336693382238793, 0.1038643364114632, 0.16620769602874497, 0.1799204005744528, 0.16566474175376023, 0.16858516291203762, 0.17882021017290084, 0.16743538388374912, 0.18298827206150758, 0.18871788859184557, 0.17381008853795787, 0.1801992807294146, 0.07294353486587857, 0.07582583975698998, 0.10442960148510172, 0.1026820066836368, 0.08443697036376252, 0.08803104031814224, 0.06862057459797688, 0.07705525112774736, 0.0732941626014606]}, "mutation_prompt": null}
{"id": "c6c15e57-0494-471d-af5a-926d7015f045", "solution": "import numpy as np\n\nclass HarmonyGuidedParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.local_best_positions = np.copy(self.positions)\n        self.local_best_scores = np.full(self.swarm_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.func_evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.harmony_memory_consideration_rate = 0.95\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                # Evaluate current position\n                score = func(self.positions[i])\n                self.func_evaluations += 1\n\n                # Update local and global bests\n                if score < self.local_best_scores[i]:\n                    self.local_best_scores[i] = score\n                    self.local_best_positions[i] = self.positions[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n            # Update velocities and positions\n            for i in range(self.swarm_size):\n                # Harmony search influence\n                if np.random.rand() < self.harmony_memory_consideration_rate:\n                    new_position = self.local_best_positions[i] + np.random.normal(0, 0.1, self.dim)\n                else:\n                    new_position = self.positions[i]\n                \n                # Update velocity using PSO equation\n                cognitive_component = self.cognitive_coeff * np.random.rand(self.dim) * (self.local_best_positions[i] - self.positions[i])\n                social_component = self.social_coeff * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                self.velocities[i] = self.inertia_weight * self.velocities[i] + cognitive_component + social_component\n\n                # Update position\n                self.positions[i] = np.clip(new_position + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "HarmonyGuidedParticleSwarmOptimization", "description": "Harmony-Guided Particle Swarm Optimization (HGPSO): Incorporating harmony search principles into particle swarm optimization to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": 0.2108202532790731, "feedback": "The algorithm HarmonyGuidedParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.4194706740194757, 0.45210566070431335, 0.4185426190319086, 0.4271352561489853, 0.42587138028143257, 0.3940338338997753, 0.4166889285900467, 0.42139158744253413, 0.3969109595881093, 0.013390704768396766, 0.06378174552930815, 0.009288312023059575, 0.001865409001674978, 0.01472725159986188, 0.007124013567084364, 0.0066206174532377204, 0.021974325886146118, 0.012571300301889687, 0.1134802567651575, 0.10172177932858684, 0.12726892435163195, 0.11198585028924646, 0.1014928747507754, 0.09559887833257141, 0.1256300984508778, 0.11236683818376825, 0.11677093179592979, 0.09846132510210759, 0.10921279537715234, 0.10903548607649771, 0.11182456444376754, 0.09512923183370636, 0.1102310038162233, 0.11336931109898452, 0.10881812660870693, 0.11873611065869005, 0.9910696279550065, 0.9919755325026467, 0.9959392091282763, 0.9934225000292856, 0.9946073495961126, 0.9909638775350199, 0.9920733971776889, 0.9948481422761623, 0.9897610177251388, 0.2868492401953904, 0.26888360980374193, 0.2678317527991051, 0.2928850171640741, 0.25948514881859375, 0.2756614901056149, 0.2871836653558414, 0.2993365223757456, 0.2800254703045991, 0.3041181222737447, 0.25688416942500925, 0.22615585266027483, 0.22702106298357472, 0.22309407577109464, 0.22075488856160197, 0.32937885463491423, 0.2837228947332532, 0.32923334487596434, 0.1627500567977862, 0.13613985031493558, 0.17363994038924024, 0.16178018140207628, 0.15342792981086173, 0.16623310682766712, 0.15316765570963686, 0.17980506410048525, 0.15201159478712634, 0.14504458732940984, 0.104961244099949, 0.19303682820927304, 0.13862046042466258, 0.14221982257117793, 0.15175174641017275, 0.15727759627498294, 0.09699925279657695, 0.16666595471262735, 9.999999999998899e-05, 0.0016279040508446752, 0.012077446467179676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07363299046527028, 0.06846736527302688, 0.06910548511271064, 0.0670317308928512, 9.999999999998899e-05, 0.04939468128609115, 0.05542651179483349, 0.08398543520985369, 0.15869266788237968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003941113151620934, 0.0349653522330462, 0.03845410681570649, 0.09360675007837649, 0.08237710410818055, 0.047195114838420316, 0.04761862156920138, 0.06613295099104455, 0.05486481870963866, 0.08509950186016357, 0.38082446762932287, 0.3727101828821675, 0.39061545949719745, 0.42826067029292003, 0.3844520983096087, 0.38204802760592427, 0.4071177032036669, 0.38307422450659045, 0.3978077714907191, 0.06681686747028559, 0.15000611189108093, 0.08494312169991369, 0.11107574659615127, 0.09560987701112678, 0.12825635138978486, 0.1146191858479273, 0.08753535023234693, 0.0894503092903115, 0.21525306210255624, 0.20348970009311618, 0.20908832109886277, 0.16448654645202043, 0.2636367218399164, 0.12721198274774437, 0.2749195293573069, 0.22050060452938747, 0.17855559441294722, 0.27289455658197026, 0.2911693112930558, 0.2705570825279757, 0.2718184097986671, 0.31976003553157206, 0.2849074400780047, 0.2784525032487617, 0.26570623314384534, 0.15740064876454163, 0.21462669146647217, 0.1617972059979227, 0.17424500972089152, 0.23244761705046735, 0.22875341067939547, 0.21907962884725252, 0.15103946393332113, 0.23104717679634745, 0.21789191007566977, 0.23093977873855487, 0.21907748129052584, 0.19689437567697377, 0.2304784300927082, 0.22306439696401348, 0.20831558199488232, 0.20863591867230513, 0.18879821570455346, 0.2158453628653767, 0.22560168833891492, 0.1954285361232886, 0.21094719593232947, 0.22006805676180607, 0.19790427001195598, 0.21897585862151325, 0.2010572898784987, 0.2318359268021557, 0.2190554785996054, 0.6299420900896813, 0.19980803187366003, 0.15381380056271032, 0.5509736134083252, 0.20093985123661395, 0.2013849935372114, 0.33930011510753033, 0.1256489547700641, 0.15330690570032024, 0.08311856200513701, 0.2128833898427076, 0.5988919720032281, 0.21230100535078722, 0.16965339594270512, 0.21108412621067563, 0.4609381064389426, 0.1694390489058163, 0.34870683597803354, 0.18360470893748704, 0.18278174771847666, 0.17806257086074562, 0.17470348713248096, 0.18400733568544225, 0.18310821772754216, 0.18330670416068606, 0.1772848098802653, 0.19175107336231245, 0.08393581058539312, 0.09638270004434613, 0.08964350131173437, 0.08130532528392709, 0.09341638686504139, 0.0917947886732916, 0.07961687135236462, 0.09455602481936187, 0.08181574903602085]}, "mutation_prompt": null}
{"id": "c1d14b37-3030-4be5-8e4a-43e092a684a8", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "c86e520f-3bc5-4ee4-a109-3783c97ecbfd", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "2e953e31-f021-46f0-a2fb-212c44fc919e", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "fddd3b31-2a9a-4118-83ef-1d7f01d3d137", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "e065d796-ab96-4a83-8ffa-07bd3ddbedb9", "solution": "import numpy as np\n\nclass AdaptiveSimulatedQuantumAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_position = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.initial_temperature = 1.0\n        self.temperature_decay = 0.99\n        self.tau = 0.1  # Quantum tunneling probability\n\n    def __call__(self, func):\n        temperature = self.initial_temperature\n        while self.func_evaluations < self.budget:\n            # Generate a candidate solution with quantum tunneling\n            candidate_position = self.current_position + temperature * np.random.normal(0, 1, self.dim)\n            \n            # Quantum tunneling\n            if np.random.rand() < self.tau:\n                candidate_position += np.random.normal(0, temperature, self.dim)\n            \n            # Clip candidate position to respect bounds\n            candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n\n            # Evaluate candidate solution\n            candidate_score = func(candidate_position)\n            self.func_evaluations += 1\n\n            # Acceptance probability\n            if candidate_score < self.best_score or np.random.rand() < np.exp(-(candidate_score - func(self.current_position)) / temperature):\n                self.current_position = candidate_position\n                if candidate_score < self.best_score:\n                    self.best_score = candidate_score\n                    self.best_position = candidate_position\n\n            # Adaptive temperature adjustment\n            temperature *= self.temperature_decay\n\n        return self.best_position", "name": "AdaptiveSimulatedQuantumAnnealing", "description": "Adaptive Simulated Quantum Annealing (ASQA): Combines quantum-inspired tunneling with adaptive temperature control for global search efficiency.", "configspace": "", "generation": 33, "fitness": 0.16831111259692463, "feedback": "The algorithm AdaptiveSimulatedQuantumAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.13.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.3871632296902071, 0.4290714165742351, 0.44079424924153787, 0.3973485523499084, 0.4926718571598572, 0.3827714500036776, 0.414381539000525, 0.44149896004571354, 0.40347218921770056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10438304647450791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0978838183071934, 0.0805234904432609, 0.06253681693033541, 0.04492978917406909, 0.055997845504559884, 0.037227542665873026, 0.08093936478897745, 0.0934114470835461, 0.07056767529316643, 0.07329384447541254, 0.05277532064179191, 0.03540145913015369, 0.06504457370021477, 0.08637479938685777, 0.09346610621262275, 0.09012437276710739, 0.08154629195746199, 0.05759821522398345, 0.12724276191251704, 0.17244634988027552, 0.13764412761999867, 0.11694186783968419, 0.12683680826193178, 0.1792920005024029, 0.1832371266398224, 0.16493539901645105, 0.9799030245504246, 0.4147809599024389, 0.45087129411694615, 0.06101274138532664, 0.4142279651003974, 0.495425039261697, 0.382620767970545, 0.4150327176466213, 0.42487569492500277, 0.29976966565340657, 0.21178623943884445, 0.09228063257793673, 0.14018304090888412, 0.19474810033229184, 0.28343254606013335, 0.1931230866700564, 0.11409742910396559, 0.22438010646205775, 0.17759748789918672, 0.2496424347987709, 0.1499904602614801, 0.014958342800981295, 0.12404312570835185, 0.1578681902528284, 0.14390950434537098, 0.00381644226515232, 0.2015055174199467, 0.2729533852414264, 0.2668047409090646, 0.15740989792255622, 0.24482022321206243, 0.17270161167597964, 0.13724331229929954, 0.13252775312132803, 0.16497469009108212, 0.16155769136106124, 0.16023105314431874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032395136714554296, 0.06048060615790707, 0.06198803281612941, 0.012161647534844278, 9.999999999998899e-05, 0.08022134102436518, 0.020439419398899372, 0.010105046681513352, 0.22719290646951695, 0.06152981246633904, 0.10150633191868763, 0.23664964406094002, 0.1160601200121053, 0.192797765662854, 0.09859343036959545, 0.2444179680321471, 0.07602844922311924, 0.03430476975852215, 0.28092729455515797, 0.4127272364487967, 0.15594066690093955, 0.18325288754231261, 0.13928690625297135, 0.10957206147125775, 0.11334563250661889, 0.11404547030365653, 0.3552856029685194, 0.384830740916024, 0.39326874194835215, 0.3835871702990973, 0.3946447818885799, 0.34621383764989255, 0.4561585246548596, 0.32447807304537535, 0.3376234231839379, 0.06033081969734866, 0.029695999805762763, 0.0783140171947656, 0.028238300647169146, 0.08136641360182217, 0.05921986326657391, 0.1477113324064252, 0.08345654344064002, 0.06680556124219816, 0.3198951235774047, 0.19536794954925185, 0.2712696211020963, 0.22475891828043215, 0.14200922583867281, 0.32279618970067725, 0.2966240694273059, 0.22666939121770302, 0.23094072838032187, 0.2045782875979859, 0.3423771372564355, 0.13880440769007996, 0.2259271450423045, 0.2769554745570303, 0.1276966166773058, 0.21172174884630668, 0.21417058205599349, 0.11107910551960232, 0.09159239205493108, 0.07320303564949882, 0.07522229404316261, 0.2876043027470966, 0.04417918807347665, 0.12627424635158602, 0.18770033074975956, 0.259954257819486, 0.0886576106687117, 0.19028868695056822, 0.21284015643584175, 0.1993932469194042, 0.14747897445844993, 0.1425174685183469, 0.2575354804154123, 0.2064938470844725, 0.19099827467006192, 0.15924113558462394, 0.16921624721051975, 0.17733496524708547, 0.18410692526351113, 0.23191910252436598, 0.20587402871710847, 0.25799859726640884, 0.2204565983262693, 0.185599597075073, 0.2021544386464289, 0.12350263396914529, 0.1373255583306161, 0.10537887281072711, 0.11507446388416098, 0.11130818485706218, 0.10487999016228677, 0.17917539604131272, 0.11507909045481135, 0.09579092566932434, 0.22529987596135925, 0.11132900772019239, 0.06541189717368356, 0.16859238943668475, 0.02460288356954532, 0.22412402811293475, 0.15785357827938318, 0.1685792407947453, 0.16957750740668576, 0.29047059475083215, 0.2313229765756626, 0.22190422883124783, 0.20572844172672933, 0.18571601577446972, 0.1887411948727814, 0.2231334941469898, 0.29952126455125316, 0.22721810349482252, 0.09949976894980905, 0.07022509153805401, 0.04179868881994586, 0.06901151283957829, 0.04563249265163738, 0.062424788009566856, 0.06745449966016492, 0.05954653115665809, 0.0655050021064244]}, "mutation_prompt": null}
{"id": "24144f33-5b00-4e6e-8fb9-278ef2a8d429", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "816b2836-5689-4f5d-89d2-9a349c94471d", "solution": "import numpy as np\n\nclass AdaptiveParticleSwarmFirefly:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_score = np.inf\n        self.global_best_position = None\n        self.alpha = 0.5  # Firefly attractiveness scaling factor\n        self.beta = 1.0   # Base attractiveness\n        self.gamma = 1.0  # Absorption coefficient\n        self.inertia_weight = 0.9  # Particle inertia\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate fitness\n                score = func(self.population[i])\n                self.func_evaluations += 1\n                \n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                \n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n            \n            # Update velocities and positions using firefly inspired dynamics\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if self.personal_best_scores[j] < self.personal_best_scores[i]:\n                        distance = np.linalg.norm(self.population[i] - self.population[j])\n                        attractiveness = self.beta * np.exp(-self.gamma * distance**2)\n                        self.velocities[i] += self.alpha * (self.population[j] - self.population[i]) * attractiveness\n            \n            # Particle swarm-like update with adaptive inertia weight\n            self.inertia_weight = 0.4 + 0.5 * (1 - self.func_evaluations / self.budget)\n            self.velocities = self.inertia_weight * self.velocities + np.random.uniform(-1, 1, (self.population_size, self.dim))\n            self.population += self.velocities\n            self.population = np.clip(self.population, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "AdaptiveParticleSwarmFirefly", "description": "Adaptive Particle Swarm Firefly Algorithm (APSFA): Combines adaptive particle swarm optimization with firefly-inspired attractiveness to dynamically balance exploration and exploitation.", "configspace": "", "generation": 35, "fitness": 0.08988895909460204, "feedback": "The algorithm AdaptiveParticleSwarmFirefly got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.13.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.15012661837434937, 0.16295684229640395, 0.12831274287557148, 0.20005630165823907, 0.14290290551569707, 0.1404247281664911, 0.14048494020161073, 0.13014696726425223, 0.18637917134038628, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01487195560642518, 0.024317296041634795, 0.02211135679971743, 0.03515779287026877, 0.025896057799093986, 0.0420501518352665, 0.034633806102588816, 0.023718147593822847, 0.026629156660973985, 0.008494027063862597, 0.011163414954221684, 0.02411507061861362, 0.024227300036535615, 0.010080003432155316, 0.019920020162701224, 0.009200667581681032, 0.01981551854710306, 0.017510770907873896, 0.9403652954566291, 0.1635551806996649, 0.8397727696469725, 0.25499061413114754, 0.1315978186639064, 0.17964243284764558, 0.9382516598258611, 0.9345832191698181, 0.20345949820120357, 0.05054456621161152, 0.04915217784554993, 0.06742816257696105, 0.041047176301282184, 0.037657411404018015, 0.06347010554514332, 0.037172201102759206, 0.04490229912369159, 0.05875267517691973, 0.11925504497590578, 0.09054929409106949, 0.09879065540603549, 0.06465225209045, 0.10209043931175055, 0.13371660124849438, 0.11180501998646164, 0.08367801572137468, 0.0726922079074257, 0.0016323559195948745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008613799615578177, 9.999999999998899e-05, 9.999999999998899e-05, 0.006404665945825783, 9.999999999998899e-05, 0.004989108826259359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030215158649138707, 0.022756290107362798, 0.031201342039464675, 0.004464460157734718, 0.025148890954035275, 0.0242108837155105, 0.039455716696025545, 0.07672246031985175, 0.030858809666934994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15726061487655263, 0.1638661508364767, 0.15411151809048684, 0.14574644884212307, 0.16050401732202502, 0.1613081169371854, 0.15301537575576551, 0.14157699110078015, 0.15435063862943932, 0.03740665071597837, 0.0449027533928662, 0.02717986612186929, 0.032331128044973956, 0.035193241500828254, 0.033465900353689126, 0.03718759091042212, 0.03586166591603546, 0.030515483189641035, 0.17645274195943272, 0.16235210838852487, 0.15776159973044046, 0.14929563293417725, 0.14525763980369377, 0.15701844984778235, 0.13084673924547896, 0.17461456675865739, 0.1362571933910458, 0.1393875899894007, 0.16735711667801734, 0.14151384611113937, 0.14083710761968593, 0.15592833195697564, 0.16947561940044853, 0.14751876487818938, 0.14425824928471687, 0.14355484570761912, 0.08249066508664504, 0.09265527994889233, 0.09881427982414914, 0.0977635769800842, 0.09874185600511087, 0.08995866849269207, 0.10727979088860906, 0.08684776397953697, 0.08695122406830214, 0.1296559422102368, 0.13102286188540802, 0.13478904430318017, 0.13304682313607752, 0.1422449196306883, 0.13136013761616583, 0.13356356557432314, 0.1264235675372951, 0.133993763240836, 0.05354950997375085, 0.006729687099561454, 0.05956811116187488, 0.09725994283971595, 0.03335561167046819, 0.06264793555949477, 0.05289020603631178, 0.07521101222090254, 0.03993968221965427, 0.13447254265645048, 0.13514665945198745, 0.13153864207181287, 0.14533680668688498, 0.1370587395009334, 0.17090892596925555, 0.11756973821537109, 0.12010169565171713, 0.13700970450206074, 0.11559170673287811, 0.11648834514865591, 0.13730520077424058, 0.11181018963894418, 0.10761088931244589, 0.11600744861432066, 0.15737453308519, 0.15186368238594095, 0.19751960044875183, 0.20462401727170376, 0.19118407621194788, 0.1826937111331336, 0.20136989468102406, 0.18738609991126365, 0.19104317703038387, 0.1809933298800207, 0.17757566485778065, 0.17312533942491304, 0.0363101622260823, 0.031601960929393824, 0.03723209353624024, 0.03146445434324885, 0.04174010635473091, 0.03026752211580752, 0.03953679103619179, 0.03415395444623881, 0.0378175631929496]}, "mutation_prompt": null}
{"id": "01fd54c5-1ef0-453d-b69e-785b701da8cd", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "289f1f3e-fc1a-4b21-95a5-f82cd805d64b", "solution": "import numpy as np\n\nclass ChaoticParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.swarm_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.func_evaluations = 0\n        self.phi1 = 2.05\n        self.phi2 = 2.05\n        self.k = 10\n        self.chaos_control_param = 0.7\n\n    def chaotic_map(self, x):\n        return self.chaos_control_param * x * (1 - x)\n\n    def __call__(self, func):\n        chaotic_sequence = np.random.rand(self.swarm_size)\n        while self.func_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                # Evaluate fitness\n                score = func(self.positions[i])\n                self.func_evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = np.copy(self.positions[i])\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = np.copy(self.positions[i])\n\n            for i in range(self.swarm_size):\n                # Chaotic update\n                chaotic_sequence[i] = self.chaotic_map(chaotic_sequence[i])\n                inertia_weight = 0.5 + chaotic_sequence[i] / 2.0\n\n                # Adaptive topology: neighborhood influence\n                neighbors_indices = np.random.choice(self.swarm_size, self.k, replace=False)\n                neighborhood_best_position = min(neighbors_indices, key=lambda idx: self.personal_best_scores[idx])\n\n                # Update velocity\n                cognitive_component = self.phi1 * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                social_component = self.phi2 * np.random.rand(self.dim) * (self.personal_best_positions[neighborhood_best_position] - self.positions[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "ChaoticParticleSwarmOptimization", "description": "Chaotic Particle Swarm Optimization (CPSO): Incorporating chaotic sequences and adaptive neighborhood topology to enhance diversity and convergence in particle swarm optimization.", "configspace": "", "generation": 37, "fitness": 0.26165631204354844, "feedback": "The algorithm ChaoticParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.26.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.9007060084634867, 0.914681554615727, 0.9149981856252599, 0.9147112426202393, 0.19112864418511932, 0.9175966943435784, 0.9175318895551525, 0.9259331206652887, 0.9157349913495996, 0.737009491118324, 0.7968178113605913, 9.999999999998899e-05, 0.8147672836131887, 0.049972541121167, 0.7969247634498906, 0.058897302232099547, 0.8432549030009395, 0.7493947740425928, 0.07693235789780561, 0.12670008641774844, 0.07401798678815197, 0.15857122603397855, 0.07735237682277352, 0.12500794416952554, 0.16081965012278543, 0.12570864723403807, 0.17397771165419784, 0.14353693034228032, 0.1466448520231035, 0.14834100009306328, 0.1478703159528768, 0.14780912573773108, 0.1426271322651924, 0.14924526938522886, 0.1624529386912854, 0.04076979028578831, 0.9938579771990215, 0.9944792584426739, 0.9957778226613714, 0.9946441692819662, 0.9936735864164369, 0.07496274579615458, 0.9937430796029755, 0.9935265569058589, 0.0748413964602872, 0.7567142930105867, 0.060334921717578816, 0.6103594094957547, 0.1541851297532203, 0.6890683406771843, 0.15347885912910186, 0.12760860762580128, 0.08942499756855105, 0.6947586288790464, 0.17268475109649495, 0.5413555403430228, 0.6107390581936899, 0.2868467016815175, 0.275911651133414, 0.2080452167750324, 0.06861480356279648, 0.12524857540312073, 0.5575019082916016, 0.12110773823537146, 0.1963013751994649, 0.1931324624897668, 0.10059341756529683, 0.1957782428324013, 0.13409524527357986, 0.20344784669564842, 0.2508839558268383, 0.19970375613926494, 0.22073011779542773, 0.055518788549091314, 0.13540626739709627, 0.18223138210407774, 0.21468950240112494, 0.2349595865035008, 0.22786445794354881, 9.999999999998899e-05, 0.2388997425924606, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002688528795639078, 0.028853021549238855, 0.007904998817458764, 9.999999999998899e-05, 0.00875662240976749, 9.999999999998899e-05, 9.999999999998899e-05, 0.006175057663327377, 0.10907521425839406, 0.04604190733665381, 0.06015527662131703, 0.019920713006921997, 9.999999999998899e-05, 0.06866041379669097, 0.08369941084779398, 0.04495231993321647, 0.05206840549988356, 9.999999999998899e-05, 0.26649845719164933, 0.09648274063373852, 0.08158941207638926, 0.08148840835988391, 9.999999999998899e-05, 0.10390258129973484, 0.07650969163645915, 0.08690161456768997, 0.0445231248192236, 0.043695282020831505, 0.006679537454368445, 0.006855181008283973, 0.13826438942888142, 0.05054629989985571, 0.0505137721487261, 0.05806279783680535, 0.508996936808212, 0.5597519399362842, 0.5163032045102236, 0.5482106144524292, 0.537764373394083, 0.5238886329267537, 0.567420700909862, 0.5732955307451, 0.5374579115497509, 0.07053086685135967, 0.08967398494609602, 0.0802887129219858, 0.08535762790164059, 0.08892819116614081, 0.17087848684664098, 0.13284877766054193, 0.10193686410588476, 0.09515248504515406, 0.1709748406428122, 0.1424592613721034, 0.16028086138207398, 0.18469919859633732, 0.22036755818518838, 0.1650046430181521, 0.1849844355214828, 0.21257151392830265, 0.2524385351307227, 0.3248857078921681, 0.37675440920810366, 0.41224884471717915, 0.4120036136020413, 0.3318022206370157, 0.3485367755211354, 0.5472764845502567, 0.2927123602499273, 0.44345856193171185, 0.23916086655854774, 0.2620821356868367, 0.19766225738963317, 0.19715113471876689, 0.23843097770651112, 0.3400397655691483, 0.2576229102277471, 0.2946522738284467, 0.443704767210931, 0.18112156579691685, 0.19947069395816397, 0.18677920792667235, 0.18634532591092434, 0.18186949996152257, 0.19475939024722744, 0.20505861680996496, 0.17653130849470633, 0.18740889346627487, 0.19760935509285216, 0.2318963707350402, 0.24716112658244804, 0.22535463371478903, 0.2184270051197884, 0.24676197769581576, 0.24580712765693502, 0.20249000795684324, 0.24009203211681474, 0.11851589221862546, 0.1651789668347523, 0.15525991855778154, 0.8566709668822434, 0.20004952644862806, 0.13054514818191254, 0.15908870007613973, 0.11996923742564669, 0.19186593417201825, 0.08272199007405057, 0.16663783394002563, 0.20189362557444412, 0.21142807085406012, 0.17002816666737108, 0.21191242411654299, 0.10428767942649286, 0.1549031886864075, 0.6538978803185059, 0.1957711615130071, 0.20200602068001983, 0.19765556056313605, 0.1779774959423317, 0.1929538915586001, 0.17551099802272352, 0.18273489418722688, 0.19415084775677183, 0.18614303992820536, 0.07940524210245659, 0.0752450491993546, 0.09924508337237892, 0.09772914702193736, 0.07313803781160477, 0.07615188324452571, 0.08012884415029697, 0.08321458080298783, 0.0799256552573484]}, "mutation_prompt": null}
{"id": "979267df-8702-4951-b394-a8f5b9880d81", "solution": "import numpy as np\n\nclass AdaptiveQuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = int(15 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.func_evaluations = 0\n        self.best_particle_score = np.full(self.swarm_size, float('inf'))\n        self.best_particle_position = np.copy(self.positions)\n        self.global_best_score = float('inf')\n        self.global_best_position = None\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.tau = 0.1  # Quantum influence on velocity\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_score = func(self.positions[i])\n                self.func_evaluations += 1\n\n                if current_score < self.best_particle_score[i]:\n                    self.best_particle_score[i] = current_score\n                    self.best_particle_position[i] = self.positions[i]\n\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.positions[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                cognitive_term = self.cognitive_coefficient * r1 * (self.best_particle_position[i] - self.positions[i])\n                social_term = self.social_coefficient * r2 * (self.global_best_position - self.positions[i])\n                \n                # Quantum-inspired velocity perturbation\n                quantum_term = np.random.normal(0, 1, self.dim) if np.random.rand() < self.tau else 0\n                \n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_term +\n                                      social_term +\n                                      quantum_term)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive adjustment of inertia weight and tau\n            self.inertia_weight = 0.7 - 0.4 * (self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.global_best_position", "name": "AdaptiveQuantumSwarmOptimization", "description": "Adaptive Quantum Swarm Optimization (AQSO): Combines swarm intelligence and quantum-inspired perturbations with adaptive parameters to navigate complex landscapes effectively.", "configspace": "", "generation": 38, "fitness": 0.22809483575295092, "feedback": "The algorithm AdaptiveQuantumSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.6607709338995735, 0.5236776944010042, 0.6310797659844095, 0.5670947782415199, 0.5946056879660546, 0.4621523549201839, 0.5156727059155528, 0.5015960509522801, 0.5016444389236687, 0.08154060000667318, 0.006252488143368651, 0.004106396501469156, 0.0008825062228943192, 0.014070758746951517, 9.999999999998899e-05, 0.008212262644202717, 0.008018280338901618, 0.0576945061329166, 0.09335840673481033, 0.09613868060185382, 0.10709103225578476, 0.12644008131918072, 0.09700730308928074, 0.12967025046558178, 0.13085424629464582, 0.11000952222224192, 0.08822283400106756, 0.10586927404098045, 0.10328365813706497, 0.09029289368742444, 0.09307114686297535, 0.10407754138341774, 0.09298319600152405, 0.10774106286870755, 0.09427886045376144, 0.08953802258581345, 0.9925877764109285, 0.989256470879203, 0.9955277194179719, 0.9924873702548325, 0.9904334851809146, 0.9725502167932842, 0.9238765465019573, 0.9929892974014597, 0.9936442007179784, 0.31869122401223526, 0.2981705702073829, 0.29774723819681503, 0.2918845316754858, 0.3278818861054792, 0.34758765165245153, 0.29851034908579344, 0.28466511237070813, 0.2384438022896903, 0.2650300973952283, 0.23381533530724896, 0.3575763086152157, 0.2139813754552854, 0.19740083866169789, 0.40106980500225053, 0.18992701561905834, 0.36827269606965096, 0.29630037402614273, 0.09905122441401326, 0.14686883122808703, 0.14980415784676882, 0.1388637393352501, 0.17681715055137615, 0.11321547245059649, 0.16870981465575496, 0.1857286642731215, 0.12725680871316636, 0.15585203190219632, 0.16521531835436776, 0.1604570997178807, 0.128420869568601, 0.16677719680707503, 0.13713785696235847, 0.12883533843659756, 0.0006143218754638413, 0.10560067848584698, 0.0017700234123342318, 0.025603367509866026, 0.0028000120345693658, 0.07245521609808037, 9.999999999998899e-05, 9.999999999998899e-05, 0.003584018961143687, 0.0032539158011675173, 0.07782431569800796, 0.16552960512424764, 0.11165555994082732, 0.1148870174819745, 0.09586410766747777, 0.011405305442193647, 0.030338962822704207, 0.20045496860426004, 0.061817948302425485, 0.040270153680798115, 0.03507284855271742, 0.15853702455128116, 0.03439043132883546, 0.05394779146564055, 0.05475253985038564, 0.016028764488615677, 0.07735418752177114, 0.10922400111510211, 0.022423156934671118, 0.044837270878706814, 0.08079624239171079, 0.055604335216962175, 0.00555327844483855, 0.01732542357206912, 0.02925138709833719, 0.09240114093939444, 0.04714823345264996, 0.07059512424262193, 0.42156524968645304, 0.4466079344048606, 0.4244772994469126, 0.4998520942778788, 0.4463320915322846, 0.3933620771112274, 0.3982110989857378, 0.4639785539139645, 0.48082135804174764, 0.08550447641904724, 0.07934133621241068, 0.062143946371983505, 0.12019958124509555, 0.06973474634641974, 0.13340758930537855, 0.09637530854451903, 0.10485149135112137, 0.09553108867240623, 0.24574637878312555, 0.3249057244510162, 0.2157188614326475, 0.21101242435245027, 0.269716662086112, 0.2712994949873426, 0.32438414282427963, 0.19004130765708538, 0.23118479090067579, 0.2922096584685845, 0.28254366986788215, 0.20853425360232025, 0.19419501814299223, 0.20124240440199226, 0.30193225507607213, 0.22654385668183852, 0.3138493759856751, 0.2378374574565475, 0.1803030200745327, 0.1385234653706, 0.1741197199418404, 0.16186400773964704, 0.18090447887300398, 0.2318348950374941, 0.1488843490336762, 0.27466952156047586, 0.15170065897599072, 0.24396640081242071, 0.20916747220253396, 0.20829409888420514, 0.22252492973998483, 0.16499525474717014, 0.20687934293413046, 0.20506843722292767, 0.22108763913454355, 0.22545411240182678, 0.1755339627591016, 0.1823486851423889, 0.2030008664904911, 0.1813595349885737, 0.20709606832173366, 0.20142600668768895, 0.18715485990579428, 0.1854578837528098, 0.18073946927646178, 0.6550018871865239, 0.12687458231448867, 0.15421120612624784, 0.6229693907047298, 0.2010236126555025, 0.1984445865188107, 0.8566852459562357, 0.1694937168073215, 0.1664291702975872, 0.6667383963017726, 0.20403468993587803, 0.1467362260532411, 0.4947897082259063, 0.5391281215495555, 0.2094461830405836, 0.10562693274736046, 0.553378150111403, 0.5186564062715054, 0.19952992916118506, 0.18596377418182075, 0.19962438395670012, 0.19386266490271598, 0.20310855326189048, 0.1814093068420486, 0.20407761634614174, 0.19804920458671482, 0.21472852186404678, 0.08312102515832631, 0.07193963263001824, 0.07812543996305177, 0.08893737961588266, 0.08666246166986147, 0.0720258529351504, 0.08019429931087141, 0.08376482823649078, 0.08454345970869293]}, "mutation_prompt": null}
{"id": "1c2a3384-a2fd-4498-85d3-128a42fee426", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "e84d7c20-437c-41a4-b5e6-55c3749fc3a3", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.swarm_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.func_evaluations = 0\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.inertia_weight = 0.7\n        self.quantum_potential = 0.2\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                # Evaluate fitness\n                current_score = func(self.positions[i])\n                self.func_evaluations += 1\n\n                # Update personal best\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.positions[i]\n\n                # Update global best\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.positions[i]\n\n                # Adaptive inertia weight update\n                self.inertia_weight = 0.7 - 0.3 * (self.func_evaluations / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.swarm_size):\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n\n                # Apply quantum-inspired perturbation\n                quantum_perturbation = self.quantum_potential * np.random.normal(0, 1, self.dim)\n                \n                # Update velocity\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + cognitive_component + social_component + quantum_perturbation)\n                self.positions[i] += self.velocities[i]\n                \n                # Ensure particles remain within bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "AdaptiveQuantumInspiredPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO): Combines adaptive quantum potential fields with particle swarm dynamics for robust exploration and efficient convergence.", "configspace": "", "generation": 40, "fitness": 0.18875354530779617, "feedback": "The algorithm AdaptiveQuantumInspiredPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.32836563395066587, 0.34288523891530376, 0.33365449740202724, 0.33777700802358035, 0.3399232609012639, 0.3414329180986051, 0.32864248900541315, 0.360360444032506, 0.34668778293278, 0.026269432290313532, 0.0017469762436478353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006553880353867836, 9.999999999998899e-05, 0.09781146532590979, 0.09431069366837308, 0.09789237171277254, 0.10093200724028861, 0.09772443360356031, 0.10239900331470342, 0.1089346568129278, 0.099638316062728, 0.12024288985927123, 0.08375141259690755, 0.08113644845855539, 0.09090427985490479, 0.07718079566502223, 0.07809448670030128, 0.09213000895222379, 0.08866256977021292, 0.0852260834805656, 0.06053950674663866, 0.9957969840079705, 0.9911675178337106, 0.9960983955639897, 0.9906134122154059, 0.9931334485983319, 0.9787920303143947, 0.993283707243017, 0.9925027231793537, 0.9903704647301004, 0.22887870443939085, 0.2308031916848261, 0.20995689727165923, 0.21518704556850454, 0.23383051812858424, 0.2172591593875579, 0.25122748148334473, 0.2455893129351958, 0.20181476906504636, 0.2924309679387064, 0.27987603297576213, 0.2750288163648027, 0.2854360317158685, 0.2646148419933734, 0.29500701257571027, 0.22386734540933428, 0.21531310741151588, 0.23647813483102964, 0.15225040254419453, 0.1317981914518881, 0.13529952760861141, 0.11225513220378236, 0.12208852524260416, 0.08153023186365604, 0.13266758946562518, 0.12934161608028483, 0.1285861217176082, 0.1339699404154946, 0.08283630198017577, 0.11859489792271338, 0.14392731139729076, 0.13144129378184422, 0.13322269229328176, 0.1363579368510356, 0.1009303961955591, 0.12130545507022084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012669618303829733, 9.999999999998899e-05, 9.999999999998899e-05, 0.07771828829853333, 0.10051056527784497, 0.09032670996609671, 0.13302466854998252, 0.023333031362895773, 0.03565860608520122, 0.05990795669830262, 0.12390003946870531, 0.058638626035213415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03551587809454726, 0.054657722066852155, 0.0706391686854908, 0.04792434655187483, 0.0757214099695317, 0.059277636537664824, 0.06166172534300929, 0.047757713953101466, 0.052929617126537765, 0.33047058492524983, 0.3389306392737249, 0.335522780883557, 0.36743157733549237, 0.3318905783931022, 0.3616831874874732, 0.3308015808755852, 0.32195104045117606, 0.3557175524793864, 0.08491178969654267, 0.09422971282126036, 0.1061708097339491, 0.08686946241390558, 0.08729096391354618, 0.10545202522937103, 0.11299248034372411, 0.096973484671523, 0.10045671316585181, 0.21567184343046242, 0.18324202609900253, 0.17559132600563132, 0.21256890690493524, 0.2495451199403027, 0.17559619297506546, 0.18312159103550274, 0.19517354704590617, 0.20708372280521148, 0.2430489029384164, 0.24759467125560208, 0.24389440380461525, 0.24467149070773808, 0.2466153097500794, 0.24339429133312263, 0.24640266233902353, 0.24695483036405108, 0.18162414392363813, 0.17256288296904454, 0.18258190955597697, 0.18361165290772308, 0.16220332654884528, 0.18490335791470924, 0.18565454887188626, 0.1769578157358459, 0.1921607806253881, 0.20698142154481125, 0.2538009637277502, 0.22985142292177418, 0.21005101651870828, 0.21792162542687044, 0.15904170104755844, 0.2147442928930906, 0.19366997206654257, 0.21969347802424766, 0.21874337190191084, 0.18946978295557682, 0.1796028143015148, 0.1830028334642514, 0.18844147015036106, 0.1935835704784734, 0.1929157794654116, 0.1811604490013048, 0.17534772617481975, 0.20991881916665434, 0.16586758449592742, 0.18313434784154525, 0.1536219940312682, 0.46616098075466894, 0.19596740994572248, 0.19818010475842984, 0.1512296208170606, 0.14679428803968764, 0.16390773908457612, 0.08249656560590812, 0.20278232234146587, 0.36197253032570065, 0.20842112254119938, 0.34363490217495796, 0.20155935020992377, 0.10400828920246585, 0.15429450108300802, 0.15459754893894784, 0.1938941358020264, 0.18076251571654123, 0.19381167677334044, 0.1986044332907564, 0.1920603535939973, 0.1858490071158463, 0.16916286034080763, 0.18347065935947893, 0.18467314330175044, 0.08797866750568406, 0.0816235921263958, 0.08178180109217414, 0.08991090314980832, 0.08641342477435954, 0.08079659827346308, 0.09354734149157662, 0.08754653056014194, 0.08737875992464272]}, "mutation_prompt": null}
{"id": "95b1d538-a3c5-40db-8a08-3f2cd0d6378a", "solution": "import numpy as np\n\nclass AdaptiveChaosDrivenFirefly:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.alpha = 0.5  # Randomness factor\n        self.beta_min = 0.2  # Minimum attraction\n        self.gamma = 1.0  # Absorption coefficient\n\n        # Chaos sequence to control randomness\n        self.chaos_sequence = np.random.rand(self.budget)\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if func(self.population[j]) < func(self.population[i]):\n                        r = np.linalg.norm(self.population[i] - self.population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r**2)\n                        step = beta * (self.population[j] - self.population[i])\n                        step += self.alpha * (self.chaos_sequence[self.func_evaluations] - 0.5)\n                        new_position = self.population[i] + step\n                        new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                        # Evaluate new candidate\n                        new_score = func(new_position)\n                        self.func_evaluations += 1\n                        if new_score < self.best_score:\n                            self.best_score = new_score\n                            self.best_position = new_position\n                        if new_score < func(self.population[i]):\n                            new_population[i] = new_position\n\n            self.population = new_population\n\n            # Adaptive alpha using chaos\n            self.alpha = 0.5 * (1 + self.chaos_sequence[self.func_evaluations % self.budget])\n\n        return self.best_position", "name": "AdaptiveChaosDrivenFirefly", "description": "Adaptive Chaos-Driven Firefly Algorithm (ACDFA): Combines chaos theory-driven parameter control with firefly-inspired attraction to efficiently explore and exploit the search space.", "configspace": "", "generation": 41, "fitness": 0.07172762776931584, "feedback": "The algorithm AdaptiveChaosDrivenFirefly got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.18324039535818015, 0.13797900631755966, 0.16447949167393705, 0.05554622358211514, 0.07268539516200256, 0.13369438135054257, 0.12174953626915463, 0.16791370837602548, 0.09887893252747182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03975103426898585, 0.03960339339334784, 0.029751520786334584, 0.047156545664020943, 0.03416776106201036, 0.06124572541049056, 0.04056997746060331, 0.028326834209431606, 0.01818614121110329, 0.04170045254734667, 0.02977115441199274, 0.034052047832507704, 0.037791614325291434, 0.03146558352132178, 0.037276757229077306, 0.004236176414731396, 0.018351175437850697, 0.03345884475344629, 0.04551327015752926, 0.033828766288347634, 0.04352550090937257, 0.04283136474963556, 0.047923747328470157, 0.033444319023276714, 0.04470578002467085, 0.04963147176390725, 0.03167733141871487, 0.05321713180542664, 0.035069653061862716, 9.999999999998899e-05, 0.051464077750336235, 0.026284856635722442, 0.04066000529139835, 9.999999999998899e-05, 0.01408171042674422, 9.999999999998899e-05, 0.14803674270212064, 0.11443226868567546, 0.079805910808455, 0.12793119761742333, 0.014443813061138955, 0.03676398616903753, 0.057717177181467516, 0.04505779320723435, 0.08954148263512884, 0.0017097373489457501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01764101883221314, 9.999999999998899e-05, 0.031838872772030125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994581270368691, 0.023087459110694875, 0.041343843282433235, 0.021224851218171525, 0.06781117754665245, 0.046780100640576916, 0.03045626141666069, 0.019457316219717913, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05665570888847382, 0.051733253998302864, 0.07208540922435436, 0.017710878399406438, 0.023519422130369283, 0.01527583023562018, 0.10411218783183362, 0.04439822901082535, 0.020477275704170128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.25922037553144395, 0.1719003460003491, 0.18237673942253696, 0.09991063730134042, 0.13130678276137808, 0.12293096673516812, 0.1528762461044384, 0.20113507268124964, 0.1794237230702791, 0.013125165184669774, 0.020255905468935964, 0.0026790057580843296, 0.046297264566929286, 0.03146874340938899, 0.04263806563523198, 0.05821328427053851, 0.055122082172740394, 0.04139943411478475, 0.09654129598846029, 0.12100700720417135, 0.13179630725084446, 0.09887533793424885, 0.11101210092741765, 0.12907221217791143, 0.12504492213379048, 0.1074508825100271, 0.12112276304656622, 0.12711892526271096, 0.16311739797703972, 0.14273676586621842, 0.15103419336928214, 0.17202968913304884, 0.1503024883642371, 0.13259365120008282, 0.14111266745254747, 0.1176280082270389, 0.06785100515151354, 0.09818678710924256, 0.07975088076940229, 0.09569998162551563, 0.13578000405515034, 0.09401913711191956, 0.06292166841395241, 0.09101354139138695, 0.06344035449841157, 0.18554108487086718, 0.15484465446453088, 0.1729321323818298, 0.16793370414766817, 0.180948320179125, 0.18769053855990603, 0.17387913876417793, 0.16643324033350693, 0.20074239975778796, 0.09831452843192767, 0.08252011004030568, 0.14747386212622549, 0.13721022723851928, 0.14247095129849618, 0.12822511657713365, 0.13105691803425867, 0.13890501301825986, 0.0884956156272858, 0.14204469227389582, 0.13663354195016442, 0.09859585740332799, 0.12140382327016119, 0.12072933720155576, 0.11121158711468337, 0.1082582131783143, 0.07536199279761568, 0.12782620516376697, 0.12456785855412111, 0.07050627614910987, 0.14785014186215062, 0.10541264286311047, 0.11235878089940943, 0.14919586949250874, 0.06880153338866601, 0.11709977685537765, 0.1290858969923795, 0.14488132283574595, 0.17093427512160708, 0.18008930448664817, 0.17204114459569497, 0.18489062336556172, 0.16775958709007444, 0.19176046368324473, 0.16509960821768122, 0.16009430662819013, 0.04639827053571477, 0.03761986221935765, 0.04777554568578157, 0.035865186323810305, 0.06183360964574025, 0.05684713342557557, 0.049710261733900585, 0.05796908488379704, 0.0660127923152164]}, "mutation_prompt": null}
{"id": "b84e4624-5d70-4acb-a537-d5462f732ec4", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearchOBL:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = int(10 + 2 * np.sqrt(dim))\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n\n        # Adaptive parameters\n        self.harmony_consideration_rate = 0.9\n        self.pitch_adjustment_rate = 0.1\n        self.bandwidth = 0.01\n\n    def opposition_based_learning(self, vector):\n        return self.lower_bound + self.upper_bound - vector\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_harmony = np.copy(self.harmony_memory[np.random.randint(self.harmony_memory_size)])\n\n            # Harmony memory consideration\n            if np.random.rand() < self.harmony_consideration_rate:\n                for i in range(self.dim):\n                    if np.random.rand() < self.pitch_adjustment_rate:\n                        new_harmony[i] += np.random.uniform(-1, 1) * self.bandwidth\n                        new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n\n            # Opposition-based learning\n            opposite_harmony = self.opposition_based_learning(new_harmony)\n\n            # Evaluate both new harmony and its opposite\n            new_score = func(new_harmony)\n            opposite_score = func(opposite_harmony)\n            self.func_evaluations += 2\n\n            if new_score < self.best_score or opposite_score < self.best_score:\n                if new_score < opposite_score:\n                    if new_score < self.best_score:\n                        self.best_score = new_score\n                        self.best_position = new_harmony\n                else:\n                    if opposite_score < self.best_score:\n                        self.best_score = opposite_score\n                        self.best_position = opposite_harmony\n\n            # Insert better harmony into memory\n            worst_idx = np.argmax([func(h) for h in self.harmony_memory])\n            if new_score < func(self.harmony_memory[worst_idx]):\n                self.harmony_memory[worst_idx] = new_harmony\n\n            if opposite_score < func(self.harmony_memory[worst_idx]):\n                self.harmony_memory[worst_idx] = opposite_harmony\n\n            # Adaptive adjustment of parameters\n            self.harmony_consideration_rate -= 0.0001\n            self.pitch_adjustment_rate += 0.0001\n\n        return self.best_position", "name": "AdaptiveHarmonySearchOBL", "description": "Adaptive Harmony Search with Opposition-Based Learning (AHS-OBL): Combining adaptive harmony memory adjustments with opposition-based learning to enhance exploration and exploitation in the search space.", "configspace": "", "generation": 42, "fitness": 0.04081717355799496, "feedback": "The algorithm AdaptiveHarmonySearchOBL got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.07287256676818543, 0.07476537524514915, 0.08307151129107859, 0.04146176766101817, 0.06277345703521164, 0.07817766226551881, 0.07885223541944064, 0.07489842365054988, 0.06776021452883119, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000912390928182294, 0.019531124967558933, 0.007618853538093773, 0.003085030816554868, 0.0030026116648123047, 0.009572190549050341, 0.023726862044525454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012502781452313094, 0.025284547041892647, 0.0017246549003139267, 0.0013740321081757711, 9.999999999998899e-05, 0.019074531775498338, 0.00028645978093155833, 0.045792333298960486, 0.03410517397231416, 0.043404541318662226, 0.03974469219550336, 0.04736535468954339, 0.030949474995259463, 0.040405845172378774, 0.04957794201078192, 0.02610211164345655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008943437879159744, 9.999999999998899e-05, 9.999999999998899e-05, 0.01190562575261811, 9.999999999998899e-05, 0.10025678837252983, 0.03836000271024165, 0.029556107620804517, 0.004561325418903972, 0.009461246610130924, 9.999999999998899e-05, 0.026274066699834675, 0.016599558078724153, 0.009906503548466894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01858565107338217, 0.006054741371140704, 0.045378452763252586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013027803906594304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11014287671679779, 0.11212966612434316, 0.14931525356137754, 0.09464600769238318, 0.09753521568488122, 0.09631757138825525, 0.1247858558956294, 0.09806672420049667, 0.12160894915254594, 9.999999999998899e-05, 9.999999999998899e-05, 0.01600570439299276, 0.01058586181631238, 9.999999999998899e-05, 0.022989090406457025, 9.999999999998899e-05, 0.0007894928024617665, 0.03628909932255031, 0.07751348162011762, 0.07674066154618508, 0.060911011096470236, 0.10634203323996971, 0.12341043582063471, 0.0635379372115582, 0.08271942982842284, 0.05521647708951949, 0.10625644403813406, 0.10037026281064243, 0.10396260505205268, 0.10725684665881197, 0.11226850627793539, 0.09304942862859222, 0.15192198547063962, 0.12539893157766768, 0.10590476656084702, 0.1391886365513212, 0.05342308009187546, 0.04523189705018682, 0.046934216228623704, 0.07522356133395902, 0.03625143958316657, 0.05609389084586802, 0.06783441914046906, 0.044760782746329775, 0.040155120228203334, 0.1574013196524131, 0.1137720080221083, 0.14220747224915853, 0.16295402954545712, 0.13267149117614319, 0.14023330482169916, 0.1639469767039371, 0.08213601687872119, 0.14307211404361297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05736487092434728, 0.05717852347352326, 0.08514554655744122, 0.06807151070993989, 0.12403171006436364, 0.0691296464898945, 0.06346502290643896, 0.07783221428926823, 0.05527880507340854, 0.03971372047376465, 0.06657353945801348, 0.019903814018087496, 0.05511948452577908, 0.0389806930573654, 0.07760031174196269, 0.04828393416439025, 0.020470479747142445, 0.04469281130295932, 0.14286931237027567, 0.16907893388378836, 0.17994636639450723, 0.1688762755319585, 0.15191173716686168, 0.15003728716273668, 0.152247164771671, 0.14666222138427798, 0.19947709711034867, 0.012554304909051961, 0.025533958629140763, 0.05188197238275316, 0.026260149719153025, 0.036799689242992484, 0.025636255779506234, 0.032336012027075034, 0.005581808237677066, 0.02340293982181907]}, "mutation_prompt": null}
{"id": "3ed6f887-23f9-4156-a368-5114c6592bd9", "solution": "import numpy as np\n\nclass AdaptiveParticleSwarmOptimizationQuantum:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.swarm_size, float('inf'))\n        self.global_best_score = float('inf')\n        self.global_best_position = None\n        self.func_evaluations = 0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.p_quantum = 0.1\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                # Evaluate fitness\n                score = func(self.positions[i])\n                self.func_evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[i]\n            \n            # Adaptive inertia weight\n            w = self.w_max - (self.w_max - self.w_min) * (self.func_evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_component = self.c2 * r2 * (self.global_best_position - self.positions[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_component + social_component\n\n                # Quantum-inspired perturbation\n                if np.random.rand() < self.p_quantum:\n                    self.velocities[i] += np.random.normal(0, 0.1, self.dim)\n\n                # Update position\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "AdaptiveParticleSwarmOptimizationQuantum", "description": "Adaptive Particle Swarm Optimization with Quantum-Inspired Perturbation (APSO-QIP): A novel PSO variant using adaptive inertia weight and quantum perturbation to balance exploration and exploitation.", "configspace": "", "generation": 43, "fitness": 0.1925467810240232, "feedback": "The algorithm AdaptiveParticleSwarmOptimizationQuantum got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.4161803998947684, 0.3833177881037223, 0.44106321503780244, 0.4124720001548582, 0.44092741057708906, 0.4409387197884368, 0.48302824037189185, 0.4167644434611857, 0.4560134758795543, 9.999999999998899e-05, 0.03961143162896352, 0.06666498378713237, 0.08199502244269008, 0.016445076186884955, 0.04615830174588642, 0.001299082250426964, 0.031696577825927164, 0.048565222757697146, 0.13481099499179106, 0.09154766835945516, 0.061758897472461105, 0.09582630926207458, 0.12269869908415443, 0.10710214489220271, 0.09089871133996708, 0.1214422764288815, 0.06568492502816536, 0.0889136598959327, 0.09516374156443741, 0.08783937066034975, 0.08916072355342441, 0.12077492724307559, 0.10919568999000417, 0.10839790266003424, 0.09143353968470691, 0.09442514156174364, 0.9950564870989096, 0.9920845188934313, 0.9971793348961522, 0.9956254489060152, 0.9950236861465989, 0.9938136988628656, 0.9963294264070042, 0.9955268964042074, 0.9931146246129597, 0.2729018012059484, 0.23995983494197914, 0.22345290239120474, 0.25949276958687995, 0.2296671996867028, 0.26289398648703444, 0.26200868778659947, 0.2110979911800509, 0.2571920542612218, 0.21054064608090228, 0.15183783641958104, 0.21156998497411506, 0.1775999353231793, 0.19419942784946054, 0.1489753941752533, 0.18133360438056723, 0.10948595089365587, 0.11658385981323449, 0.1257904222459203, 0.1962173307306755, 0.12176820258681931, 0.10363153911717093, 0.10765600470916159, 0.09659985187600328, 0.1513613043298634, 0.09439841036019803, 0.1523094436986746, 0.09403739547621648, 0.1038993142883895, 0.1491773907163113, 0.14092904800086203, 0.1211403816075266, 0.11955338925179626, 0.1396336022677951, 0.07458146747765348, 0.10368342107908157, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006240026847808222, 0.03914662502017452, 0.040477644697047954, 0.06597304630808154, 0.008048500416686477, 0.007061394435980528, 0.05629003785255571, 0.05794154648661021, 0.010055163729298378, 0.0212403841027502, 0.007623765464326637, 0.014012608238801127, 0.027456485927953356, 0.035626203378108956, 0.027087303062388268, 0.024787265920347967, 0.02918084065624338, 0.03173049187096055, 0.036998724392665605, 0.008274704202758443, 0.032122888409121475, 0.04884376796917844, 0.03761692967298513, 0.02376076060833965, 0.04082471277431121, 0.040813110233628325, 0.05560344237839998, 0.3690125259278172, 0.3754933711451457, 0.39622258358692486, 0.3756798182832909, 0.37132159207638105, 0.36140057603837716, 0.3660501852210861, 0.33875572693527145, 0.40864993824182616, 0.07020819182626015, 0.061387645485068476, 0.08475953360481403, 0.08534950649420536, 0.09647589269311396, 0.09326142110423641, 0.09649052074424158, 0.09674342806996361, 0.10829472875859414, 0.261359087908678, 0.14834113512406188, 0.20767869306366127, 0.20424524397564414, 0.1978841628813387, 0.1614909814406641, 0.18195868777196034, 0.1959531792000917, 0.19350686973277398, 0.2490649007643364, 0.18775125294467088, 0.2464901930778992, 0.21741499566180278, 0.19989132669978749, 0.3044747713784327, 0.2664925860177193, 0.27191495456043957, 0.23096067527571307, 0.13134249295856748, 0.15454476746293222, 0.12857965457026477, 0.17217834382097286, 0.1617845957915529, 0.19740207974886237, 0.16613908769262475, 0.13700155619993204, 0.07680818888311691, 0.18505487257073872, 0.18879401198723078, 0.18945835453006388, 0.2027244147534608, 0.18372908203341598, 0.17600015583820228, 0.18196446794762633, 0.22403918748585394, 0.19020109103522076, 0.20058898620366705, 0.19762806783699594, 0.1795177221490052, 0.16255822057961855, 0.16538337988110363, 0.19110211874604333, 0.17464779390330254, 0.16863360598828891, 0.21269411574190056, 0.6045250672134285, 0.16070624333926975, 0.14539147975242828, 0.6712233602036433, 0.2031705823327452, 0.19380675568288153, 0.6150916618260724, 0.18426385709311766, 0.19663112914754832, 0.142339103601549, 0.16551185724799156, 0.11964974049772714, 0.20578924545761157, 0.3207090116076623, 0.20142932946776837, 0.20906569457422153, 0.13552294610646898, 0.20492000037186875, 0.18670703022278334, 0.1860131720954048, 0.20700657288194324, 0.18985949865003815, 0.20151931417794244, 0.19231809754999962, 0.17797116299355853, 0.18689419386576556, 0.19912266468187712, 0.07024394144321455, 0.07374634002639613, 0.07349798724402679, 0.08110395251239699, 0.07824256073593372, 0.06896127274196207, 0.0904237677794979, 0.0821406252946335, 0.07468318059964718]}, "mutation_prompt": null}
{"id": "58243c98-67ca-42a0-a986-4aa2b5687367", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "42d21d80-1df4-435b-8839-7700896fe424", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "f5c8deac-3290-4235-a0b5-1656fb000630", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "7facf103-8905-4df2-b96e-1e89e9c0d175", "solution": "import numpy as np\n\nclass AdaptiveSimulatedAnnealingDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.initial_temperature = 100\n        self.cooling_rate = 0.9\n        self.temperature = self.initial_temperature\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Simulated annealing-inspired mutation\n                perturbation = np.random.uniform(-1, 1, self.dim) * self.temperature\n                mutant_vector += perturbation\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Temperature cooling schedule\n            self.temperature *= self.cooling_rate\n\n            # Adaptive adjustment of scaling factor\n            self.scaling_factor = 0.5 + 0.3 * np.tanh(np.pi * (self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "AdaptiveSimulatedAnnealingDifferentialEvolution", "description": "Adaptive Simulated Annealing Differential Evolution (ASADE): Combines simulated annealing-inspired temperature control with differential evolution for dynamic exploration and exploitation balance.", "configspace": "", "generation": 47, "fitness": 0.3229129565539225, "feedback": "The algorithm AdaptiveSimulatedAnnealingDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.7529711218656878, 0.755317720509525, 0.7461035914131535, 0.7667718239005776, 0.7619579366712552, 0.7632839359012199, 0.7615219471548327, 0.7620240772905407, 0.7505105801214249, 0.5776904261174409, 0.5443851140380827, 0.5634765687765808, 0.5710042779431028, 0.565287282563778, 0.5444665804229343, 0.5705391935771162, 0.5634619970712493, 0.559183487827505, 0.10936552479878192, 0.1317531803653086, 0.13691948646140406, 0.12667481491461807, 0.10772023598500213, 0.2919307955744116, 0.17492628379220154, 0.14161691996045445, 0.12018704186620455, 0.1239348961345198, 0.08254726610316743, 0.11213398734606395, 0.1281840438924866, 0.16367038825496383, 0.09395570789744379, 0.09271341393095645, 0.1018916468013289, 0.10010541167139331, 0.9926186415904893, 0.9985234224323808, 0.9952108607925407, 0.9880366266747584, 0.9933852155244292, 0.9998001200375565, 0.9858542946423495, 0.9963851489641568, 0.9996201775691006, 0.4108800636317198, 0.530417894423262, 0.49114855658428513, 0.4110478918248526, 0.4863299800298557, 0.413529707965794, 0.4838295290783978, 0.3883598014060019, 0.4891012762592414, 0.7606359578798731, 0.7337458847408911, 0.20037915025802533, 0.749540560711536, 0.35410318659648465, 0.6018364932214184, 0.21060022912694243, 0.7179588818841736, 0.7184459823639413, 0.17248612015799225, 0.2206248927231249, 0.13879557736960324, 0.41377134305723917, 0.13087416057798873, 0.3475342582738734, 0.1144594540810141, 0.19382601870989036, 0.15047339936785853, 0.14261153508041702, 0.12652328919889444, 0.11244369768995943, 0.1381984403661216, 0.13588761020751605, 0.192413930401509, 0.19331170550390253, 0.19590588988935154, 0.17520267066779904, 0.37294564942337516, 0.1710546280698262, 0.07965356487586672, 0.42944769678833605, 0.07122326478290031, 0.2641799128348963, 0.1423053819458746, 0.28324420598993916, 0.1749110622832819, 0.44649483964863634, 0.10516168912377577, 0.4431226861583669, 0.24961080689517456, 0.1799930517645536, 0.3683107242128092, 0.0839662906740768, 0.2844757658445909, 0.18532013356511445, 0.20081696040090424, 0.07150658022736767, 0.07613603084345999, 0.16988155549579131, 0.20602583669993368, 0.2013049643917304, 0.1519116804358951, 0.14668109716468047, 0.2593150600946944, 0.34834328433084927, 0.31405527373178577, 0.32775644575898233, 0.30223207822141296, 0.3140657962665937, 0.30103336698000827, 0.2682852311419799, 0.24065051176578334, 0.3318375264587805, 0.6890447750514648, 0.6898813725145614, 0.5675103001447117, 0.6788436736995622, 0.5262859698605902, 0.6238874718124977, 0.6719513059340684, 0.5622512554875132, 0.6810637167042015, 0.09100054652599898, 0.07357446106393695, 0.11491048166824802, 0.11024470880464687, 0.10691693773821975, 0.10464615728185, 0.1088501418496216, 0.12273437239548579, 0.10971873166907442, 0.20838730737446443, 0.4422640816231116, 0.14997708563476486, 0.20395486285607545, 0.216219064003091, 0.131546405322855, 0.1757506617651139, 0.1785099984373354, 0.16780394680991595, 0.36729510973156676, 0.41785259959674736, 0.3740315197267069, 0.34532246853683835, 0.37174957598783986, 0.3869975923512817, 0.3629590881595198, 0.43055677228305567, 0.42044653443101754, 0.35020557889615855, 0.3188247631719021, 0.24925179413734722, 0.29418993835250584, 0.18802975454985493, 0.25178383365895585, 0.2798797590784, 0.31580783636333554, 0.314328118934457, 0.19291021960547405, 0.16047242206658607, 0.16923747645529474, 0.17600035322469554, 0.20029931924159505, 0.15762594544067166, 0.19236418161762425, 0.16341124301364052, 0.16312268224222148, 0.19350833509473486, 0.16867490075933167, 0.20485952775269922, 0.45823926351968003, 0.21923451078210765, 0.19731520241399525, 0.1901358317158145, 0.19467799942736663, 0.18179509799166116, 0.146235802203029, 0.16427294152346672, 0.16387742488945511, 0.1717334122142523, 0.18026275945507508, 0.6318404106379922, 0.1751440177363175, 0.7524594936278018, 0.17738097110552986, 0.16066923200351013, 0.19475935081751938, 0.15231366768238352, 0.17127037128269107, 0.6972906357603226, 0.18949532866131857, 0.2002530064493524, 0.2054952459139363, 0.1984158168926322, 0.2127962795245475, 0.19909724278431162, 0.25157644117385947, 0.20735735179528259, 0.20720626115851226, 0.20831078269199876, 0.18503757015008726, 0.24686772192501294, 0.3420414001243296, 0.07121775322361479, 0.07356408046418905, 0.08412938429591521, 0.06332759745995664, 0.06860216902339267, 0.07222389173373123, 0.06715377457273153, 0.07231340689362264, 0.06795979970265231]}, "mutation_prompt": null}
{"id": "1c2c356a-fbb2-4376-ae5e-89fbb1dd6a14", "solution": "import numpy as np\n\nclass AdaptiveQuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.func_evaluations = 0\n        self.quantum_probability = 0.1\n        self.adaptive_neighbors = 3\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            scores = np.array([func(pos) for pos in self.positions])\n            self.func_evaluations += self.population_size\n\n            # Update personal and global bests\n            better_scores = scores < self.personal_best_scores\n            self.personal_best_scores[better_scores] = scores[better_scores]\n            self.personal_best_positions[better_scores] = self.positions[better_scores]\n\n            if np.min(scores) < self.global_best_score:\n                self.global_best_score = np.min(scores)\n                self.global_best_position = self.positions[np.argmin(scores)]\n\n            # Adaptive neighborhood topology\n            neighbors = np.random.choice(self.population_size, self.adaptive_neighbors, replace=False)\n            local_best_position = self.positions[neighbors[np.argmin(scores[neighbors])]]\n\n            for i in range(self.population_size):\n                quantum_move = np.random.rand() < self.quantum_probability\n                if quantum_move:\n                    self.velocities[i] = np.random.normal(0, 0.1, self.dim)\n                else:\n                    cognitive_component = np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    social_component = np.random.rand(self.dim) * (local_best_position - self.positions[i])\n                    self.velocities[i] = 0.5 * self.velocities[i] + cognitive_component + social_component\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            self.quantum_probability = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.global_best_position", "name": "AdaptiveQuantumSwarmOptimization", "description": "Adaptive Quantum Swarm Optimization (AQSO): A hybrid approach combining quantum-inspired particle movement with adaptive neighborhood topology for diverse exploration and efficient convergence.", "configspace": "", "generation": 48, "fitness": 0.21397838344497871, "feedback": "The algorithm AdaptiveQuantumSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.6867179449002567, 0.7668754232305139, 0.8714973115574955, 0.6992738287517064, 0.6766260065878049, 0.5765250143871886, 0.6510081486969712, 0.7079178637149105, 0.6361175849038644, 0.07770359600120935, 0.029292093264790986, 0.058341954687061826, 0.03423803578821294, 0.014545940782237254, 0.029766073827437012, 0.006064066154040981, 9.999999999998899e-05, 0.030692496804613834, 0.049287223215280895, 0.040697834570794456, 0.12933660064742902, 0.08088355931041391, 0.09591897532621574, 0.11569774031997371, 0.09206767081948508, 0.11232071356606099, 0.0938067831612105, 0.054342218990306335, 0.04598746193661796, 0.033396674851785435, 0.15634388952859957, 0.05289225789485752, 0.04626222827897786, 0.0434578381175974, 0.07226589769585412, 0.031629692143847365, 0.8226481684965085, 0.6854373550833877, 0.7471081972099967, 0.8779107848455547, 0.861705722042615, 0.8169790532407442, 0.7019991649679269, 0.49760722130716195, 0.6980779823171446, 0.3496809623228301, 0.3266095559634826, 0.2822726403151944, 0.36927480369965815, 0.36690464997175964, 0.40058177817199814, 0.3608910518930386, 0.33894908541371704, 0.3206595576955815, 0.18113650437000484, 0.22932924993117954, 0.11535955349568572, 0.7753847541802508, 0.20734226242539133, 0.08453114003939644, 0.17134335079699958, 0.12656667038584468, 0.18454112603686268, 0.18364123904149787, 0.1518164317529812, 0.27510103667025754, 0.2450899204466861, 0.14619104705261032, 0.1151990915578226, 0.13285892677199007, 0.1691174223548878, 0.2080503136336953, 0.2110856965777721, 9.999999999998899e-05, 0.0995604341021803, 0.06614280391296923, 0.11698561586126055, 0.13088267428389921, 0.15188593565226582, 0.0008799571003305084, 0.1319611859765233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017700055342319998, 9.999999999998899e-05, 0.00021864782031133512, 0.03535067929415603, 0.016153458873385484, 0.08420550723644626, 0.06964188013709771, 0.054664086721231464, 0.16422067163208154, 0.0772397603076419, 0.07384240205102977, 0.02159792039785302, 0.037625275200986796, 0.12064561110165539, 0.07311337272295515, 0.09457927774180697, 0.038540350700551285, 0.31324753212309675, 0.09375373264861298, 0.08110617242266638, 0.16553726026526527, 0.10764184968198731, 0.1346334668593887, 0.0741169924253885, 0.11054580243903533, 0.12469149736325125, 0.24996022370868243, 0.03559373646815489, 0.011924950423902514, 0.04975715647633572, 0.1480508162598182, 0.1280527225290683, 0.07593026989397966, 0.46156427532228705, 0.47994402273360803, 0.4656215245526719, 0.473681502447988, 0.48855664071881255, 0.48981634863746704, 0.48071683415194444, 0.48272139685906057, 0.5029992573304918, 0.04953489398233435, 0.06364205545384871, 0.04293801678346498, 0.08943498786408455, 0.06970940210770349, 0.09938642504568507, 0.043462842216955844, 0.1207853623002324, 0.07641832485635058, 0.1521879249870841, 0.1439995136491885, 0.28143999329358227, 0.3053270397491934, 0.14193473150647262, 0.2268086602428775, 0.28487929365124587, 0.24113846313357357, 0.22242122520927865, 0.2879724368765867, 0.2941032879717804, 0.21879394245126138, 0.2094506432140878, 0.2865531132619439, 0.20213002935538293, 0.12716902763778493, 0.2515731862720504, 0.18666349006985206, 0.10954594919307614, 0.22712229759110547, 0.1760089211979715, 0.11196337958786151, 0.1818731426465494, 0.15145309451404754, 0.11554272525092091, 0.26514110883520037, 0.18788791891290735, 0.21386965802180624, 0.25018274616087854, 0.22757197798980078, 0.22284661580446485, 0.22675396585333618, 0.22733466669932878, 0.2072745536896745, 0.20413271582304038, 0.2135267260016791, 0.19716987101073513, 0.19896372992973332, 0.19081494660338294, 0.19633211985383903, 0.18741848508919756, 0.19796910267037338, 0.1824439661182381, 0.2281471143913597, 0.17819990964174226, 0.15845605950590003, 0.09757755662662171, 0.1884754137198844, 0.8458825648688144, 0.16970102676759757, 0.14382202547837097, 0.2078518503399559, 0.14810801266943852, 0.1667980751931697, 0.7975571415595806, 0.21100947632086442, 0.04997985108100256, 0.21198231269700807, 0.12867490129865222, 0.20456466547856322, 0.05518934012141219, 0.15511152639680625, 0.27275518575792135, 0.18663299530231703, 0.19812160551140645, 0.19557734575002228, 0.1775128134657531, 0.1785714835191642, 0.1892204169402063, 0.18020915316189345, 0.1815641702903329, 0.1950652606969312, 0.060820175155944844, 0.09371906629763183, 0.0793162102306253, 0.10398115503064997, 0.1186207815377005, 0.0724400574827676, 0.0726060953647748, 0.08711057094932018, 0.09020909351061146]}, "mutation_prompt": null}
{"id": "2e083a82-9359-4709-8534-265c2a9d42d9", "solution": "import numpy as np\n\nclass ParticleSwarmOptimizationDynamicNeighborhoods:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.best_positions = np.copy(self.population)\n        self.best_scores = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.func_evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.neighborhood_size = max(1, self.population_size // 10)\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                current_score = func(self.population[i])\n                self.func_evaluations += 1\n\n                # Update personal best\n                if current_score < self.best_scores[i]:\n                    self.best_scores[i] = current_score\n                    self.best_positions[i] = self.population[i].copy()\n\n                # Update global best\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.population[i].copy()\n\n            # Dynamic neighborhood topology\n            neighbors_indices = np.random.choice(self.population_size, self.neighborhood_size, replace=False)\n            neighborhood_best_score = float('inf')\n            neighborhood_best_position = None\n            for neighbor_idx in neighbors_indices:\n                if self.best_scores[neighbor_idx] < neighborhood_best_score:\n                    neighborhood_best_score = self.best_scores[neighbor_idx]\n                    neighborhood_best_position = self.best_positions[neighbor_idx]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                inertia = self.inertia_weight * self.velocities[i]\n                cognitive = self.cognitive_coefficient * np.random.rand(self.dim) * (self.best_positions[i] - self.population[i])\n                social = self.social_coefficient * np.random.rand(self.dim) * (neighborhood_best_position - self.population[i])\n                self.velocities[i] = inertia + cognitive + social\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "ParticleSwarmOptimizationDynamicNeighborhoods", "description": "Particle Swarm Optimization with Dynamic Neighborhoods (PSO-DN): Incorporating dynamically changing neighborhood topologies to enhance exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": 0.21885259180302064, "feedback": "The algorithm ParticleSwarmOptimizationDynamicNeighborhoods got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.6932268772368764, 0.6869489500576259, 0.6692888858563318, 0.7326802466259146, 0.716064562066683, 0.7404929407223401, 0.6734282523732278, 0.7131557328379936, 0.6992446885285744, 0.4153006260395564, 0.47878933117251576, 0.4196580727982405, 0.3988276965111427, 0.42365759353079346, 0.43827674853719367, 0.4659722169796594, 0.09766908756257986, 0.450899296125143, 0.07552568446970287, 0.07758746651523485, 0.09246329626673089, 0.08666229066544728, 0.08788885656565504, 0.08035932479573715, 0.09003147485153584, 0.042639482975586396, 0.08757037863959705, 0.0677329829427632, 0.09081716484679114, 0.07511767847753725, 0.07328042418941239, 0.07309706121166204, 0.07960763420419603, 0.08146965281080798, 0.07200228005238918, 0.07259933187386391, 0.9920859201832457, 0.9884588467837887, 0.9880502379837066, 0.9730634981966824, 0.9804654272287835, 0.98556833571641, 0.9748933607381186, 0.9825392436613575, 0.9911482489333208, 0.3027597738071136, 0.05477371316961577, 0.2695655809181683, 0.3074788253324042, 0.2363708631993482, 0.3517705060741788, 0.2391485331492743, 0.3265472374992612, 0.2473440137492593, 0.2140550057703069, 0.26618760494442417, 0.2333459093758814, 0.21974046899773614, 0.15810906806446967, 0.2877300650199236, 0.20203230964216412, 0.22490575802457335, 0.23012853165375013, 0.14754593345290834, 0.13122770394101013, 0.12015391024129984, 0.15226672196685087, 0.09858232739173856, 0.14282529434556257, 0.15916167306795248, 0.13980752181711997, 0.1494543423305298, 0.06787123609980172, 0.10965830041146618, 0.16434926806353867, 0.13110912592372603, 0.14055348136640822, 0.12748360152790028, 0.13172459755366894, 0.03389952882689873, 0.11011440205812284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03685887264542276, 0.016878412418738886, 0.06713387066534693, 0.0008459388277202162, 0.02236244747702809, 0.024135445705691594, 0.04697402645809867, 0.023405113157417556, 0.04573653223848562, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02958990005066009, 0.06627094618160156, 0.00724074606521552, 9.999999999998899e-05, 0.032749579386571304, 0.01790067799310613, 0.07135439000399602, 0.04207467592030212, 0.06756956560942984, 0.05004716716591262, 0.08327160060225391, 0.06579380699021098, 0.044712719998570405, 0.0743629382712595, 0.04331605042279496, 0.41761992585206975, 0.42423571777045277, 0.4130378726912559, 0.4314547224309738, 0.41613466959561096, 0.41401104201176187, 0.4118968469704197, 0.42766395746550057, 0.4007117043349846, 0.0848419176804015, 0.07324630609814065, 0.06498781200525283, 0.08168578330889809, 0.11197396988393016, 0.082472206881811, 0.0778385190962857, 0.07867875372296307, 0.07847336581076803, 0.11007243817142776, 0.12388859810419339, 0.15712263121726722, 0.14072906520312478, 0.14306285312979838, 0.14477848363112644, 0.1869893048146236, 0.1342407351474849, 0.15273261919904035, 0.23936293814801113, 0.21553682739979607, 0.2622291083123329, 0.20982815606208804, 0.28589184984714344, 0.24060996166649484, 0.29976802072501785, 0.30960202429245587, 0.26584081174800334, 0.1803725470209463, 0.16918461328103074, 0.13480721010232133, 0.18088939269407955, 0.15169387828408254, 0.16333421139356852, 0.17340621078645035, 0.20350171245060933, 0.20731557581250104, 0.17885809355833449, 0.17642849959138607, 0.1705724788759213, 0.1603265711392995, 0.17870144833636337, 0.1752153162794441, 0.19114269194497324, 0.19812888982652233, 0.1836673867166524, 0.18597778941519705, 0.16914678157918572, 0.18211116319085452, 0.17101635636893275, 0.17541807806194998, 0.17023051442092707, 0.19105986109125095, 0.17803055621260067, 0.18204121686664, 0.48405548767527407, 0.16731618541523985, 0.21159320881855692, 0.7179164034026078, 0.15708986585366114, 0.21506136446446522, 0.18597755868622567, 0.17375539541930862, 0.17767745662231116, 0.16342543982265256, 0.15193673127848073, 0.24850794928183562, 0.19840588296586958, 0.29509131463381877, 0.1639240523391916, 0.20605430799510882, 0.1824984512833998, 0.20156282215285537, 0.18546754300744028, 0.1781429851644447, 0.19075555954358459, 0.18907680087528034, 0.17978725967827613, 0.17975840744410232, 0.17468947160405168, 0.1856433236075713, 0.17799579838950452, 0.06722828056399544, 0.0716804808628132, 0.07304092489925551, 0.06904764978260025, 0.07056553157238377, 0.061874394109937, 0.07040323001605975, 0.0775462530871891, 0.08379993702352095]}, "mutation_prompt": null}
{"id": "c7e7ca4a-8df8-48c9-b4d3-62914741759a", "solution": "import numpy as np\n\nclass AdaptiveMemeticParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_param = 1.5\n        self.social_param = 1.5\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.array([float('inf')] * self.population_size)\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.func_evaluations = 0\n\n    def local_search(self, position, func):\n        local_best_position = position\n        local_best_score = func(position)\n        step_size = 0.1\n        for _ in range(3):  # Simple local search with few steps\n            new_position = position + np.random.uniform(-step_size, step_size, self.dim)\n            new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n            new_score = func(new_position)\n            self.func_evaluations += 1\n            if new_score < local_best_score:\n                local_best_score = new_score\n                local_best_position = new_position\n        return local_best_position, local_best_score\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_param * r1 * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_param * r2 * (self.global_best_position - self.positions[i] if self.global_best_position is not None else 0)\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n                current_score = func(self.positions[i])\n                self.func_evaluations += 1\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = np.copy(self.positions[i])\n                    if current_score < self.global_best_score:\n                        self.global_best_score = current_score\n                        self.global_best_position = np.copy(self.positions[i])\n\n            # Apply local search on global best to refine solution\n            if self.global_best_position is not None:\n                refined_position, refined_score = self.local_search(self.global_best_position, func)\n                if refined_score < self.global_best_score:\n                    self.global_best_score = refined_score\n                    self.global_best_position = refined_position\n\n            # Adaptive adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (1 - self.func_evaluations / self.budget)\n\n        return self.global_best_position", "name": "AdaptiveMemeticParticleSwarmOptimization", "description": "Adaptive Memetic Particle Swarm Optimization (AMPSO): Combines PSO with local search strategies and adaptive learning to balance exploration and exploitation for robust optimization.", "configspace": "", "generation": 50, "fitness": 0.26857455094007504, "feedback": "The algorithm AdaptiveMemeticParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.27.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.9252596384328664, 0.928833648352494, 0.933642497207513, 0.9111974056730304, 0.9355957248936363, 0.9346033168776865, 0.9156975914222603, 0.9337940271888553, 0.9278309140134807, 0.06938190180587411, 0.14403167818796614, 0.1439598343599413, 0.10517470930653239, 0.042563377052747264, 0.2863341171138579, 0.07897104683211198, 0.051380487605421354, 0.05300158456724402, 0.04515639590707399, 0.1279759053187972, 0.04079737737405231, 0.052518901057236334, 0.0735791840176675, 0.06159343772037351, 0.045901656197750884, 0.03359176364391947, 0.08581021331845295, 0.09115236325721965, 0.05621127220252242, 0.039342747700800484, 0.040747973938135895, 0.10271685398531627, 0.06842529030822064, 0.06159576390235488, 0.06460152789833007, 0.07287585476116054, 0.9955694694936482, 0.9925684412806826, 0.9961261303983843, 0.9826047132533322, 0.9990010320400814, 0.9917467641799542, 0.9922709238252683, 0.9795852353976365, 0.9899683187063077, 0.40352658715727385, 0.3825224561315841, 0.5859654423842882, 0.4523533715052711, 0.4101122974329551, 0.5015284248247132, 0.4609738553655729, 0.42189585811085695, 0.4851633764894827, 0.13729245211788677, 0.24576690661720768, 0.22848222558244347, 0.1711382100587322, 0.20943685560565484, 0.19546917047091916, 0.11973923732693093, 0.23004705053396213, 0.08131243115666875, 0.5891540032403534, 0.3381685652760299, 0.22762701492688875, 0.19986357107081598, 0.10597729485384588, 0.13467308393335042, 0.12177068146835823, 0.1725982053548032, 0.2026260100682089, 0.18975225535800655, 0.2918401997342964, 0.18827852834548542, 0.13415099900385175, 0.17360893389919985, 0.4817209223090624, 0.2225944114059153, 0.3279817239857118, 0.2640888853936032, 0.13783310258511916, 0.035960969596103176, 0.0935523525234625, 0.15416015699340224, 0.07073262233333755, 0.1871746494281935, 0.017104059820117756, 0.17233011279032162, 0.10113676664662485, 0.052346669409273794, 0.23736645448847393, 0.13463175152812257, 0.025150779548844704, 0.14553363957213483, 0.1672905050181176, 0.18766277236358353, 0.2914252897551304, 0.13269196482292267, 0.038278444083542085, 0.21759922223372374, 0.09978635502963173, 0.08159944283040454, 0.08477666546911855, 0.08158076911288503, 0.1026149557906818, 0.09781625826104334, 0.10939293407215978, 0.01246313163169488, 0.06938863072735879, 0.1370728545082326, 0.40548262500095367, 0.04967037011069497, 0.15668176337654693, 0.22642477297395303, 0.0967625578421073, 0.0924662326309994, 0.6113194197469956, 0.4632295024816233, 0.6260086976794034, 0.6542041721526719, 0.6049082368999648, 0.5358061700097817, 0.6382345154724152, 0.4667269222346361, 0.674128012910371, 0.05821474475932209, 0.057185861510260505, 0.04396594641951235, 0.04054917165422378, 0.07851291281630723, 0.08641586574741855, 0.12771018670151257, 0.06719081907884705, 0.07389516112814576, 0.13904326732365258, 0.22312327277473698, 0.1766704332782656, 0.1591285500020071, 0.3248327056821646, 0.1731056463301922, 0.1126411398950884, 0.14000111485554878, 0.23000561372674888, 0.1342928371668144, 0.16864897864049921, 0.2190375551843019, 0.2455333589951666, 0.20222907625448228, 0.39102638869525086, 0.3187921627744482, 0.32341680339724355, 0.2064964613993806, 0.06514645483033144, 0.10789704903392272, 0.1924634977073698, 0.22477860073140954, 0.20519078886527298, 0.18491333368541374, 0.22127726853162444, 0.2277391679496893, 0.16858025212879124, 0.234513673873053, 0.15904585924188364, 0.23121906458916708, 0.21211462768602352, 0.2704388646324263, 0.2155090531413303, 0.1705145736385686, 0.22802596561275879, 0.21931469184475527, 0.17411192439429723, 0.18848487005080483, 0.16107834782317676, 0.1943998417706967, 0.1809218408372475, 0.18142028854502523, 0.17634865155991442, 0.18311037421245724, 0.17120266479258262, 0.1275681603043487, 0.14922761288879338, 0.1692137358150929, 0.14924216876562657, 0.1703624419622296, 0.16800353111456479, 0.178786392495641, 0.17080400559269715, 0.9572884374816852, 0.08292216879593128, 0.9382172965374193, 0.9019110804399557, 0.09416334110276203, 0.9411931190319585, 0.10483796189655781, 0.8109246687068052, 0.1699109191887892, 0.16868000731366317, 0.20462665288750592, 0.2746162293194673, 0.22573688007926307, 0.20792736411936474, 0.2511886220020151, 0.20079235897312886, 0.1971125272098596, 0.2378770318863077, 0.2158059097667243, 0.07177306802661765, 0.057949623726243016, 0.06442104797321513, 0.052005385769240964, 0.08540277306427924, 0.0561017876886315, 0.08229867706538319, 0.07679016782544656, 0.05199345336218575]}, "mutation_prompt": null}
{"id": "e8d9dbbf-006f-4715-9959-8dbad55172c0", "solution": "import numpy as np\n\nclass MultiSwarmAdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = int(10 + 2 * np.sqrt(dim))\n        self.num_swarms = 3\n        self.position = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_swarms, self.swarm_size, dim))\n        self.velocity = np.zeros((self.num_swarms, self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_score = np.full((self.num_swarms, self.swarm_size), float('inf'))\n        self.global_best_position = np.copy(self.position[:, 0, :])\n        self.global_best_score = np.full(self.num_swarms, float('inf'))\n        self.func_evaluations = 0\n        self.global_best_overall_position = None\n        self.global_best_overall_score = float('inf')\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.adaptive_freq = 50\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for swarm in range(self.num_swarms):\n                for i in range(self.swarm_size):\n                    score = func(self.position[swarm, i])\n                    self.func_evaluations += 1\n\n                    if score < self.personal_best_score[swarm, i]:\n                        self.personal_best_score[swarm, i] = score\n                        self.personal_best_position[swarm, i] = self.position[swarm, i]\n\n                    if score < self.global_best_score[swarm]:\n                        self.global_best_score[swarm] = score\n                        self.global_best_position[swarm] = self.position[swarm, i]\n\n                    if score < self.global_best_overall_score:\n                        self.global_best_overall_score = score\n                        self.global_best_overall_position = self.position[swarm, i]\n\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                for i in range(self.swarm_size):\n                    self.velocity[swarm, i] = (self.w * self.velocity[swarm, i] +\n                                               self.c1 * r1 * (self.personal_best_position[swarm, i] - self.position[swarm, i]) +\n                                               self.c2 * r2 * (self.global_best_position[swarm] - self.position[swarm, i]))\n                    self.position[swarm, i] = np.clip(self.position[swarm, i] + self.velocity[swarm, i], self.lower_bound, self.upper_bound)\n\n            if self.func_evaluations % self.adaptive_freq == 0:\n                self.c1, self.c2 = (2.5 - 1.5 * self.func_evaluations / self.budget), (1.5 + 1.5 * self.func_evaluations / self.budget)\n                self.w = 0.9 - 0.4 * self.func_evaluations / self.budget\n\n        return self.global_best_overall_position", "name": "MultiSwarmAdaptivePSO", "description": "Multi-Swarm Adaptive Particle Swarm Optimization (MS-APSO): Combines multi-swarm particle collaboration with adaptive acceleration coefficients for dynamic exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": 0.21395780239096232, "feedback": "The algorithm MultiSwarmAdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.532778596587812, 0.5542869204286563, 0.5220001128323662, 0.48200542752736963, 0.4463275130096256, 0.18854813218753885, 0.49405562394548885, 0.5103869453987608, 0.6223687759467202, 0.021999703129555792, 0.0623882757990768, 0.09753256534202026, 0.18971073287195983, 0.021053684558375196, 0.23170593990085697, 0.03872201072655301, 0.13955864282565544, 0.10507088228206063, 0.1077617701161162, 0.09925832720960626, 0.14862036930665323, 0.11689478353432281, 0.07047416721498045, 0.1258058328414179, 0.11567525004089008, 0.11707575285540894, 0.07058232464327141, 0.10278462059294069, 0.08854803502561848, 0.11771350376080425, 0.0927141227585132, 0.0792105954968143, 0.09596403691502875, 0.0954969226455118, 0.0796132399262236, 0.09743173167119279, 0.977173269416193, 0.9899620423040669, 0.9800523487289213, 0.9814934230537556, 0.9902932720163677, 0.9697527915804627, 0.9835055712799556, 0.9750107092525407, 0.9855986550987048, 0.2519582080810543, 0.1704969574279237, 0.11337639125430232, 0.29189281853122206, 0.1983471702957138, 0.23360413799566193, 0.14968479481381203, 0.11830642270276925, 0.27421395232817536, 0.2008048793074647, 0.25016886856650433, 0.19240064571493876, 0.25779023921842203, 0.2360731678443876, 0.20466810752692755, 0.22478493308335634, 0.2389048507831737, 0.21698772541318057, 0.21517366184838815, 0.12402460017216876, 0.1493237087798761, 0.09451125724657727, 0.11757843827528669, 0.07844920793600618, 0.11806993444411595, 0.1510037083326593, 0.15729820144183448, 0.15199820712425294, 0.167280824937714, 0.24054617062267114, 0.1320148260786853, 0.17471796004949902, 0.22884807315197608, 0.15263514929843314, 0.13456262382263573, 0.1594568808625081, 0.00019630998459108095, 9.999999999998899e-05, 0.015500682635121832, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043551797624882926, 9.999999999998899e-05, 0.02073826168685955, 0.07794552414491795, 0.020544935950558285, 0.07751084622841953, 0.09463387916497212, 0.016706966341567986, 0.03966849068542089, 0.09311730538038465, 0.0254633856662263, 0.07627077438485053, 0.018515181659568225, 0.03238637795233623, 0.03458962415465372, 0.04278173383337347, 0.018922052022622537, 0.043296368817487774, 0.0284457755644284, 0.022079079333009344, 0.039277507359901986, 0.07545044169132542, 0.10660024541359125, 0.1410492703717573, 0.03256588390875692, 0.041956533499626136, 0.0857856904307901, 0.0716598492688787, 0.06723127655263472, 0.07483340481531608, 0.38038538409769684, 0.3927520670425836, 0.4195024350818062, 0.4308433606314652, 0.40958617282008125, 0.44334358734750445, 0.403107093299955, 0.3856979092379824, 0.47402311653780826, 0.07299031538792955, 0.11541038821947425, 0.0878649240347813, 0.09958635319000153, 0.09916330330640577, 0.11979652355307568, 0.0904996792075784, 0.09760006040133207, 0.1004435915566313, 0.19102712572145997, 0.19967014516482606, 0.20591217751775848, 0.20418637324354005, 0.2072552131777663, 0.2571451185209227, 0.1873400168897611, 0.20204048908856231, 0.1993612654022362, 0.25470004048248807, 0.2611061152453569, 0.2301776644913801, 0.23172454870265125, 0.22885552776515994, 0.24802744682926237, 0.2547849161026752, 0.3271567903629852, 0.27526501481119714, 0.20203583400316028, 0.17833225253032703, 0.18004288207525876, 0.14564455351203975, 0.16576945684279576, 0.20896811089666067, 0.24218684911847121, 0.24706413262817417, 0.1710889875444327, 0.1880850348985409, 0.17490728971711356, 0.1850748729430759, 0.218808554750185, 0.188969050293317, 0.189025877070094, 0.18320592639124356, 0.18744672560435804, 0.22118558229967467, 0.18867382723296733, 0.1925532924919714, 0.230696551761856, 0.2148552099849107, 0.19309859810771657, 0.19406867288652785, 0.193300271063359, 0.21502046079706072, 0.20751137365857486, 0.41085577092909875, 0.18501117786837318, 0.18577768286607044, 0.692319747933856, 0.19264368757799166, 0.6046596283099834, 0.15037385031369244, 0.16783756966868202, 0.6906454922901553, 0.46132185541379456, 0.20383896278414304, 0.38446073198908914, 0.22274719349919303, 0.4201690339579198, 0.20969498395013408, 0.10402587486643111, 0.13876945611573555, 0.21631714164092486, 0.18467911737951204, 0.18659938762596062, 0.18468261341009884, 0.21043990362314757, 0.18229178376970923, 0.19911303500292765, 0.18482223299307865, 0.19534894297573124, 0.18644952261260783, 0.07094857832970936, 0.08838172383183918, 0.07241930980966749, 0.07573760451695366, 0.07764674168955066, 0.0755224583344567, 0.06941121665939043, 0.0898865681083606, 0.0763811317920925]}, "mutation_prompt": null}
{"id": "62e3a4b9-006a-487d-ba4e-5af129b25364", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "4678518a-45a2-44a2-9d82-d7407e828311", "solution": "import numpy as np\n\nclass AdaptiveParticleSwarmQuantum:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 15 + int(2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.zeros((self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.swarm_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.func_evaluations = 0\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.tau = 0.2  # Quantum perturbation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_score = func(self.positions[i])\n                self.func_evaluations += 1\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.positions[i]\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.positions[i]\n\n            inertia_weight = self.w_max - (self.w_max - self.w_min) * (self.func_evaluations / self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.global_best_position - self.positions[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Quantum-inspired perturbation\n                if np.random.rand() < self.tau:\n                    self.velocities[i] += np.random.normal(0, 0.1, self.dim)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "AdaptiveParticleSwarmQuantum", "description": "Adaptive Particle Swarm with Quantum-Inspired Perturbations (APSQIP): Combining adaptive inertia weights and quantum-inspired perturbations to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 53, "fitness": 0.18003170728888834, "feedback": "The algorithm AdaptiveParticleSwarmQuantum got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.4271370236812537, 0.3502055714662078, 0.3837473814742599, 0.39789522219702445, 0.34849713144335137, 0.3830750873487996, 0.3855118818377853, 0.38400146225423903, 0.3712344118037221, 0.011148168732101893, 0.013653072560310786, 0.0235417218748305, 9.999999999998899e-05, 0.010691241397303375, 9.999999999998899e-05, 0.001716943864438325, 0.002502960263382703, 0.0025665558277984113, 0.09121513017576166, 0.0908875135397208, 0.11103061584941765, 0.09958901775732043, 0.05993238958423719, 0.09729534073998802, 0.0832939141838438, 0.09019582508040491, 0.098910552066232, 0.07335716891144728, 0.08605706558668136, 0.07760619440670502, 0.08130266211796877, 0.07935225913462307, 0.07461460122009633, 0.09821080852893227, 0.06492948572138024, 0.10152649765033017, 0.9948524183233902, 0.994464538153198, 0.9948832750724654, 0.9895880150937489, 0.994501641395831, 0.9927323157229143, 0.9947287851392448, 0.9940139018739753, 0.9945010431498579, 0.19590188316797086, 0.19372789635682408, 0.20578010074861564, 0.24025170455932976, 0.2233726564191194, 0.2196147960739021, 0.22666557957133504, 0.19258908642227213, 0.2218657792423202, 0.16844978332831428, 0.1782770117344029, 0.17151471996551204, 0.18737658925674083, 0.18992810566408058, 0.15840108551142673, 0.11651481196266666, 0.20287542631944666, 0.17683950819871952, 0.11193413887838344, 0.22331930325078142, 0.15030081020736374, 0.09626365090146394, 0.10740914038444804, 0.06699011342036487, 0.14361618409029342, 0.11377730812891618, 0.10987587646143471, 0.12128939045848797, 0.08153734409170388, 0.09579654185475905, 0.09416328643873617, 0.1145735927160948, 0.13402947059676285, 0.09464370452367044, 0.06377342079032533, 0.12912012665579264, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005171722865820683, 9.999999999998899e-05, 0.0011898534420075046, 9.999999999998899e-05, 9.999999999998899e-05, 0.052358532617330145, 0.010309623905390475, 0.06819133507790975, 0.0039531908845691355, 9.999999999998899e-05, 0.014453983298084117, 0.02104254540512085, 0.038099478898423356, 0.023006824391002545, 0.00306974881764277, 0.0035076927135553326, 0.0030094527982029717, 0.00609977508579107, 0.014619944302319388, 9.999999999998899e-05, 0.010158344474675451, 0.0031943079070024805, 0.01764683117877741, 0.018584077322681525, 0.031143672284355328, 0.051278188516066026, 0.05180451570358091, 0.044157957612708576, 0.024821019050681903, 0.03634725790723392, 0.05554779330314996, 0.059960102061894394, 0.34593157288764254, 0.3598475425408806, 0.337481437135171, 0.33440603349931397, 0.3558362760656635, 0.34852877797179516, 0.3744700224388513, 0.3475147711539951, 0.36221897294539596, 0.0858774837311832, 0.05520843966870048, 0.07736943550304187, 0.10388286597074092, 0.10435400253613536, 0.09958571337173383, 0.05822275044362102, 0.08862425341305513, 0.06961618652734947, 0.1633462368399483, 0.14574328467818154, 0.14887121371204526, 0.16787911270127875, 0.21791757459443573, 0.17077112380282689, 0.21931373160795842, 0.1861974528456487, 0.21185818666539047, 0.21178118807724955, 0.2132688933115654, 0.20880242703540597, 0.2834774430573549, 0.18695560434210023, 0.25668261474462484, 0.18394844659772192, 0.2713975622733342, 0.16882619397078036, 0.17871588610276434, 0.19397638812971763, 0.13991638229196546, 0.16119613382153453, 0.1649432068543365, 0.16403413631868857, 0.13423267503117076, 0.2003788561798271, 0.18724334941498577, 0.16806639258796696, 0.16496965158260113, 0.17041234090041313, 0.15432325767990496, 0.16935499717474067, 0.20157718066681352, 0.18358306382397982, 0.18074659652183966, 0.17474868753163664, 0.1883441038304945, 0.2041928967449551, 0.22265063910345728, 0.20463365459424177, 0.19926620151440222, 0.18893829436317644, 0.17598104433057726, 0.21975063020099128, 0.17302882177092982, 0.5123978940705375, 0.1660246414082347, 0.14791083153498386, 0.12872208681395592, 0.19219249465898958, 0.1845587655527443, 0.507860868679213, 0.16750231843380714, 0.16084628115542532, 0.2396034569598915, 0.16582303444934898, 0.19007578008447634, 0.20141800191350923, 0.12414470567215541, 0.35267455239138856, 0.20378582160009084, 0.12345518628698882, 0.20342920441113888, 0.18301215903920087, 0.18457397489687155, 0.18036969128106284, 0.18440033333671502, 0.18207131059278148, 0.19091554698686464, 0.18531973798889811, 0.1800769122640551, 0.2151391952174777, 0.06502335932577441, 0.06814150697089083, 0.0746567352140195, 0.07059201553832795, 0.06805919942813021, 0.07478276547850182, 0.0720538257443808, 0.08300811892425575, 0.06011964797927072]}, "mutation_prompt": null}
{"id": "4db88933-cbae-4383-9a63-0824438803aa", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "f5f642a0-3c36-49dd-8626-e1236e670bd0", "solution": "import numpy as np\n\nclass AdaptiveSwarmQuantumMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.personal_best = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.4\n        self.social_coeff = 1.4\n        self.tau = 0.1  # Initial quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocities\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      self.cognitive_coeff * r1 * (self.personal_best[i] - self.population[i]) +\n                                      self.social_coeff * r2 * (self.best_position - self.population[i]))\n\n                # Apply velocity and clip\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    self.population[i] += np.random.normal(0, 1, self.dim)\n                    self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                score = func(self.population[i])\n                self.func_evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best[i] = self.population[i]\n                    self.personal_best_scores[i] = score\n\n                # Update global best\n                if score < self.best_score:\n                    self.best_score = score\n                    self.best_position = self.population[i]\n\n            # Adaptive adjustment of inertia weight and tau\n            self.inertia_weight = 0.9 - 0.5 * (self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 + np.sin(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "AdaptiveSwarmQuantumMutation", "description": "Adaptive Swarm Quantum Mutation (ASQM): Hybridizing particle swarm optimization with quantum mutation for dynamic balance between exploration and exploitation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {}, "mutation_prompt": null}
{"id": "8621f1ab-7fe3-4e23-8af6-b425f5b307c0", "solution": "import numpy as np\nimport concurrent.futures\n\nclass ParallelizedAdaptiveSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.func_evaluations = 0\n\n    def __call__(self, func):\n        inertia_weight = 0.7\n        cognitive_component = 1.5\n        social_component = 1.5\n\n        def evaluate_particle(i):\n            score = func(self.population[i])\n            self.func_evaluations += 1\n            if score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = score\n                self.personal_best[i] = self.population[i]\n            return score, self.population[i]\n\n        while self.func_evaluations < self.budget:\n            with concurrent.futures.ThreadPoolExecutor() as executor:\n                results = list(executor.map(evaluate_particle, range(self.population_size)))\n\n            for score, position in results:\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = position\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocities[i] = (inertia_weight * self.velocities[i] +\n                                      cognitive_component * r1 * (self.personal_best[i] - self.population[i]) +\n                                      social_component * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n            inertia_weight -= 0.001  # Reduce inertia over time\n\n        return self.global_best_position", "name": "ParallelizedAdaptiveSwarmOptimization", "description": "Parallelized Adaptive Swarm Optimization (PASO): Combines particle swarm optimization with adaptive neighborhood interactions and parallel evaluation to enhance exploration and efficiency.", "configspace": "", "generation": 56, "fitness": 0.28503839666707625, "feedback": "The algorithm ParallelizedAdaptiveSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8706660784956662, 0.8716056622277636, 0.8951380581163757, 0.8504693410625586, 0.900576443024094, 0.18946831698907085, 0.8614523565218924, 0.8467526955510105, 0.8607479044068232, 0.07551535990080505, 0.662278531824993, 0.06562668203073352, 0.04742050438986245, 9.999999999998899e-05, 9.999999999998899e-05, 0.7246853578917987, 0.7011934995883862, 0.7955781333178729, 0.07127129572196189, 0.18021867450118412, 0.16625117623718122, 0.6803369076198109, 0.7275257771351646, 0.11497562308960729, 0.1321363874341287, 0.1494570276520144, 0.15454234813220113, 0.14257346757683098, 0.17676015192300898, 0.11301889225550388, 0.18388809200097567, 0.11281351441134424, 0.16032897564601922, 0.12021529075524706, 0.18246856367296782, 0.11470598461085302, 0.9923200215340802, 0.98361234849627, 0.9944131896598571, 0.9931632118765311, 0.9903160822514367, 0.9863426458466401, 0.9935689408776771, 0.990379766039666, 0.9919964327014391, 0.11543811745817822, 0.7345289943644606, 0.7639984901178125, 0.15045482733127113, 0.7682019471936675, 0.722396390170309, 0.12622465878044276, 0.7451989773737802, 0.05153633443419836, 0.17097596714947227, 0.20853523738412327, 0.2148632455636449, 0.2775910051699727, 0.20470020251337884, 0.20643531565939588, 0.2229603050836546, 0.12732288521093738, 0.17540683664515022, 0.10034972116249574, 0.21804889415991946, 0.12843127839920054, 9.999999999998899e-05, 0.22315555176817203, 0.12973307113309418, 0.30923731933460186, 0.21567922389578398, 0.22869815953656647, 0.2299248708477426, 0.02131279070592229, 0.22829955700759763, 0.13066298508037055, 0.26270474665583665, 0.23328657228340044, 0.35649569648986246, 0.10231709787329768, 0.10995337307276165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048929807694317984, 0.0470964319734547, 0.04341466365306246, 0.017526675127326974, 9.999999999998899e-05, 0.038919582151118126, 0.12243044201600439, 0.09408554677319803, 0.031397370069274455, 0.08586577218589153, 9.999999999998899e-05, 0.021952555322850786, 0.14880384700847904, 0.05052951248026949, 0.04343044897588155, 0.2759609527757678, 0.11109652973563622, 0.07333367191853979, 0.1338104988280675, 9.999999999998899e-05, 0.09574423745519578, 0.09497536822749464, 0.07343398760391084, 0.06888152496962152, 0.0884463538374548, 0.14407583369154764, 0.14651088890892894, 9.999999999998899e-05, 0.18239255845905478, 0.00647484753139449, 0.15550208835652668, 0.04704056046140359, 0.08303281662560169, 0.5404399447834968, 0.5877068557087115, 0.5533358855196352, 0.5260076054322718, 0.5395136546891603, 0.20915548653405736, 0.5706155806849625, 0.5707988277437006, 0.5818591681994376, 0.05899504951934886, 0.11608836204529871, 0.05324696337391377, 0.12109542662531658, 0.13384316252332995, 0.16335810924660288, 0.08128972476307195, 0.10351001393216142, 0.11037921570197595, 0.19988934560783123, 0.19395844641775195, 0.21410583292014407, 0.5580391867764078, 0.3404473198836865, 0.14512004005181667, 0.2712561224710447, 0.14917673888592997, 0.2216225754260155, 0.37382518119448105, 0.44191249248047015, 0.28476549069554036, 0.7296430482996255, 0.20727094172674054, 0.20044660681993764, 0.42917951754721195, 0.6049682795850455, 0.17396744684280097, 0.1719896396466014, 0.23797903289338873, 0.13239539306179382, 0.35866982310035256, 0.20792844442372171, 0.3514086792984754, 0.17458747131291752, 0.2806186344632511, 0.0982651683160739, 0.2145876787856491, 0.17573794438092427, 0.23457249659672774, 0.2037354770251666, 0.23506543619336073, 0.22067390360396022, 0.2509326333032844, 0.19595586480295246, 0.2461357169377869, 0.7289801547600712, 0.7754497471075281, 0.19334369540688023, 0.20985953590723783, 0.25011801936336553, 0.18649635905385087, 0.20571681854594237, 0.22402459921083295, 0.20597723134175683, 0.9294817418868979, 0.127341243170342, 0.15325534771673155, 0.16877220432100148, 0.20096235425933695, 0.872748062545944, 0.12241704433081724, 0.17068044640311564, 0.1531026034004257, 0.15448491166464628, 0.20912399452475694, 0.07332841868097728, 0.2071291051952895, 0.6101519928222073, 0.21204780112736676, 0.10424588318329442, 0.7925541470803308, 0.7431796724754649, 0.18098819848221714, 0.19072843043189747, 0.22420616581984365, 0.20269981916881352, 0.18838572496461115, 0.21218792338546044, 0.21250094961117594, 0.1840474748701988, 0.19637669504242283, 0.09787382874999673, 0.10353960526513983, 0.09359777443720485, 0.09212655394704139, 0.08684208257189807, 0.08541110969787591, 0.07974239829493712, 0.08903865671269595, 0.10102232751624596]}, "mutation_prompt": null}
{"id": "fba6ce91-0913-488c-8a49-963f8698d704", "solution": "import numpy as np\n\nclass AdaptiveParticleSwarmQuantumTunneling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.zeros((self.swarm_size, dim))\n        self.best_local_positions = np.copy(self.positions)\n        self.best_local_scores = np.full(self.swarm_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_score = float('inf')\n        self.c1 = 2.0  # Cognitive component\n        self.c2 = 2.0  # Social component\n        self.inertia_weight = 0.9\n        self.func_evaluations = 0\n        self.tunneling_rate = 0.05  # Probability of quantum tunneling\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                # Evaluate fitness\n                score = func(self.positions[i])\n                self.func_evaluations += 1\n                \n                # Update personal best\n                if score < self.best_local_scores[i]:\n                    self.best_local_scores[i] = score\n                    self.best_local_positions[i] = self.positions[i]\n\n                # Update global best\n                if score < self.best_global_score:\n                    self.best_global_score = score\n                    self.best_global_position = self.positions[i]\n\n            # Update velocities and positions\n            r1, r2 = np.random.rand(2)\n            for i in range(self.swarm_size):\n                cognitive_component = self.c1 * r1 * (self.best_local_positions[i] - self.positions[i])\n                social_component = self.c2 * r2 * (self.best_global_position - self.positions[i])\n                self.velocities[i] = self.inertia_weight * self.velocities[i] + cognitive_component + social_component\n\n                # Quantum tunneling\n                if np.random.rand() < self.tunneling_rate:\n                    self.velocities[i] += np.random.normal(0, 1, self.dim)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight\n            self.inertia_weight = 0.4 + 0.5 * (1 - self.func_evaluations / self.budget)\n\n        return self.best_global_position", "name": "AdaptiveParticleSwarmQuantumTunneling", "description": "Adaptive Particle Swarm with Quantum Tunneling (APSQ): Combining adaptive velocity update rules with quantum-inspired tunneling for enhanced global search capabilities in high-dimensional spaces.", "configspace": "", "generation": 57, "fitness": 0.18835773303006517, "feedback": "The algorithm AdaptiveParticleSwarmQuantumTunneling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.4095446031573188, 0.42543215822791547, 0.3937658385367784, 0.4736974244235894, 0.45707279789757604, 0.47125437237123846, 0.4894578677764987, 0.42682060159852986, 0.4343085396436325, 0.02303756949228697, 0.0007107725613528793, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05139804027854733, 9.999999999998899e-05, 0.07858344493685676, 0.09834156196069521, 0.10404815596356642, 0.0849521808374355, 0.09794925499229268, 0.08662461850707948, 0.09345281426649821, 0.09770207181484603, 0.09981165169462258, 0.05766851477664792, 0.08923038792062032, 0.07794626986082587, 0.09713551032617596, 0.07935839404347222, 0.08845411405500148, 0.08960603484154495, 0.1008333168544997, 0.09092165587025525, 0.9950932722621806, 0.9936438088372976, 0.9958666695749654, 0.9849686317092129, 0.9934396128844362, 0.9866947799872295, 0.9931435368281568, 0.9955519501313193, 0.9866426121966413, 0.21057371481827591, 0.19096769726710738, 0.23667073903821956, 0.2729463843165545, 0.15428253237246936, 0.23896613188155325, 0.2048692314210654, 0.23435493274974173, 0.17724836194603888, 0.24310022835174927, 0.28554262902674477, 0.3069344190422666, 0.14165642999631267, 0.17073083304043102, 0.16625870704531864, 0.20828748388818075, 0.17970178126359593, 0.27192573787546426, 0.06286391610540454, 0.10229454698022489, 0.10091475827671947, 0.09605102266788601, 0.11299160132620123, 0.06718536973520572, 0.11728914233892507, 0.1037606967107928, 0.12297658269729839, 0.1172302085892406, 0.04557746547399877, 0.13127425591274822, 0.10590362145543364, 0.1466007226822954, 0.16722777597829375, 0.10435430194538187, 9.999999999998899e-05, 0.11858541158939262, 9.999999999998899e-05, 9.999999999998899e-05, 0.016117749379871982, 9.999999999998899e-05, 0.0013126033232014889, 0.0029129939620402556, 0.043196256330191085, 9.999999999998899e-05, 9.999999999998899e-05, 0.09974254889695766, 0.04673972602315424, 0.054295994008470516, 0.08986779262896538, 9.999999999998899e-05, 0.006569018061652554, 0.14265098051815162, 0.021143793283825985, 0.04983629364235076, 0.0010099683675000026, 0.005908931141606399, 0.0035752532776673895, 0.032797717935381665, 0.05233427729825657, 0.00739748900665671, 0.006437250238060521, 0.012355805965184152, 0.00696093916060514, 0.08436657976314599, 0.10052979346323554, 0.058461881137782834, 0.027629119681041314, 0.020624407608335393, 0.025191524620923, 0.05172997808109181, 0.04131942770560504, 0.056469571109509675, 0.3568404103742515, 0.3818879019047138, 0.36987498071433755, 0.3506019848553876, 0.378237004294832, 0.37039814312290464, 0.3629415131372129, 0.36212129360834355, 0.37417425030342577, 0.06934708202893491, 0.07249587377349576, 0.09093157565002297, 0.0936028721577069, 0.1080143150488353, 0.10088744800940896, 0.07902306956072314, 0.07464350788035534, 0.09335090697056836, 0.242964335517162, 0.2723072747523255, 0.15829282885176998, 0.19038266176058494, 0.1632134348507911, 0.24555488509868706, 0.1724379595230352, 0.17795340105786528, 0.17406044080292993, 0.22162442250094927, 0.24418729939676875, 0.2033291102190412, 0.25325285998175917, 0.25120202144385284, 0.26841543897666653, 0.24076896734387332, 0.250012213207652, 0.18839628981323286, 0.15689284609256304, 0.2164030477511153, 0.17908371015044866, 0.21487342972483314, 0.17785692452536384, 0.1407163470620757, 0.18617523571387407, 0.17708820212777643, 0.2295071455326222, 0.1790445974615148, 0.19740745054335962, 0.19162191524697159, 0.1970175078994375, 0.2200110964720683, 0.21801489838639576, 0.19541351765552473, 0.18500855292798413, 0.18187834632005329, 0.1549346621453298, 0.16441220494657394, 0.19499994262722864, 0.17691776785218405, 0.18252402595252648, 0.17594347554524625, 0.1876493401397742, 0.1834915622377049, 0.18843449886821695, 0.162168730625748, 0.18880879950148743, 0.14860884034574884, 0.5647862261174443, 0.19506962970392683, 0.19538330599334364, 0.15458975245371764, 0.15880502856630285, 0.17130453706043502, 0.15270841460221507, 0.16579720136091092, 0.16461965374516507, 0.19066322176694772, 0.16772781544722637, 0.4394162369983049, 0.20613715433165702, 0.1623366885371177, 0.208807579753999, 0.19050993459165055, 0.18987211220387723, 0.19761341339740646, 0.1811511996202113, 0.1917568799408471, 0.18340979192821283, 0.18517127774411346, 0.1957910232458292, 0.1880559831019677, 0.04835464367964415, 0.07184690934932603, 0.07580087096300958, 0.07344626561079315, 0.09040645163607897, 0.06392455598080993, 0.07484544016548134, 0.06435656490015063, 0.07711551379319759]}, "mutation_prompt": null}
{"id": "ef12030b-50d6-470a-b02c-78c920d3ae88", "solution": "import numpy as np\n\nclass QuantumInspiredParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.func_evaluations = 0\n        self.global_best_score = float('inf')\n        self.global_best_position = None\n        self.c1 = 2.0  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.w = 0.7   # inertia weight\n        self.quantum_factor = 0.05  # Quantum behavior factor\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate the fitness\n                fitness = func(self.positions[i])\n                self.func_evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n\n                # Update global best\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n\n            # Update velocities and positions\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            \n            cognitive_component = self.c1 * r1 * (self.personal_best_positions - self.positions)\n            social_component = self.c2 * r2 * (self.global_best_position - self.positions)\n            \n            self.velocities = self.w * self.velocities + cognitive_component + social_component\n\n            # Quantum-inspired position update\n            self.positions += self.velocities + self.quantum_factor * np.random.normal(0, 1, (self.population_size, self.dim))\n            \n            # Apply bounds\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "QuantumInspiredParticleSwarmOptimization", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO): Combines quantum behaviors with adaptive velocity controls to dynamically balance exploration and exploitation.", "configspace": "", "generation": 58, "fitness": 0.14999684257044604, "feedback": "The algorithm QuantumInspiredParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.20.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.14160288382505293, 0.1264421013137349, 0.2785476032173282, 0.18930733828704693, 0.15736693414021996, 0.18998833154282524, 0.18341880062338667, 0.12706515604483504, 0.3505517611034321, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028580247386449043, 0.035059947704788264, 0.045392990991872106, 0.054858881487312994, 0.041265875878129354, 0.06816131170676742, 0.07394104965165849, 0.023442609096865463, 0.027388429080335674, 0.0553903372797413, 0.048006958525758314, 0.040608133232792665, 0.08718196733473615, 0.04051090281877279, 0.06814480937570389, 0.09894154420231438, 0.019384271337734904, 0.0392717175190177, 0.9950959543868957, 0.9935199733793731, 0.9960068377608404, 0.9933097124854818, 0.9945900500914957, 0.9904625805710502, 0.9877272477779374, 0.994859316854971, 0.9903638733365135, 0.2520261157267655, 0.11201799509793398, 0.05812455003921824, 0.14739106937844337, 0.13537724072572077, 0.14270535376439164, 0.08286468141003878, 0.08922204626706676, 0.08268832732674514, 0.20257902017569607, 0.13597705406666283, 0.20123730066218937, 0.19737878642679763, 0.18546410590263174, 0.2667605462634246, 0.22887083186910018, 0.11575586559918227, 0.21125587974300053, 0.11941569268709085, 0.04915557461577569, 0.11865223449932072, 9.999999999998899e-05, 0.08717315120630154, 9.999999999998899e-05, 0.12935577581843705, 0.08412712630588681, 0.09755292732354592, 0.12031006424155799, 0.009697057678914267, 0.07844814751065754, 0.09549956900355172, 9.999999999998899e-05, 0.10930253954789126, 0.09773032385028457, 9.999999999998899e-05, 0.13301439320894937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047647419638207844, 0.029926509048205263, 0.04339377315700654, 0.10481493598344971, 9.999999999998899e-05, 0.015031927192405647, 0.1072211211220665, 0.015721210657652418, 0.022934724323578348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03376109526668003, 9.999999999998899e-05, 0.05297443793965417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041547260530209296, 9.999999999998899e-05, 0.05146846671727601, 0.31275929206024977, 0.32178078932130216, 0.2804350589987693, 0.3422829022314836, 0.2068984342317135, 0.20841337489747047, 0.3237111300817018, 0.22786327649667093, 0.2882405548330874, 0.08279337990224944, 0.06627075380108949, 0.02720139117727305, 0.0651828006637648, 0.04694046203248403, 0.07400745678506615, 0.06544953807275511, 0.07293165651271882, 0.04979917250802124, 0.1562355752599076, 0.1425556399753608, 0.16352008862692524, 0.20661624471787332, 0.15327800269194047, 0.11401085782824116, 0.1531069684823949, 0.1498656907192295, 0.1863210299694742, 0.2192741580685733, 0.1920522409081734, 0.23695778007148816, 0.20805191181754623, 0.13892204049541068, 0.22055389504803047, 0.15132896391454653, 0.24521749789876135, 0.14945003769172238, 0.15754453302295712, 0.09323882544437168, 0.15259809755795417, 0.16354187463704006, 0.1565983822070759, 0.12485771014766378, 0.1038186553138456, 0.19231144298429237, 0.08154649237374667, 0.1791017620253197, 0.16798889310855958, 0.17976645007191927, 0.13713240947795835, 0.16556360699783412, 0.20505974699094853, 0.1659405846376858, 0.22624807425122806, 0.17593942474206392, 0.17447311409240351, 0.17755957858410965, 0.17776842052220787, 0.17412370518032805, 9.999999999998899e-05, 0.171687724554206, 0.17363260411717107, 0.1699541348716912, 0.171743880319969, 0.4066854769271714, 0.25631908870201703, 0.11312928670668532, 0.4158383605597431, 0.1979315224179825, 0.19714879929168228, 0.1486596998300913, 0.14343565664208568, 0.1478421341389098, 0.07894076143230344, 0.21079201581084117, 0.33868041261560033, 0.1048973986111319, 0.212381370997768, 0.15187153013617194, 0.10359125648318035, 0.04628089295952198, 0.17852445713625142, 0.2351863445744472, 0.19067341104412106, 0.19748457671848496, 0.1752679812549428, 0.15005974094896735, 0.1686750121745133, 0.20081514233155617, 0.1875943515361117, 0.18630916727937663, 0.04602559705536846, 0.029047646399833482, 0.0672883099694751, 0.07524559804648412, 0.03929361866087999, 0.039037225348966476, 0.05881847176549748, 0.048187580593237134, 0.05820525021418255]}, "mutation_prompt": null}
{"id": "e2153523-783a-4a98-a0c0-bedb0a6009c4", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "fdc9ad95-7726-47d0-9b07-639212bf2dd5", "solution": "import numpy as np\n\nclass AdaptiveGuidedParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                current_score = func(self.population[i])\n                self.func_evaluations += 1\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = self.cognitive_coeff * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.population[i])\n                social_component = self.social_coeff * np.random.rand(self.dim) * (self.global_best_position - self.population[i])\n                self.velocities[i] = self.inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n            # Adapt inertia weight\n            self.inertia_weight = 0.9 - 0.5 * (self.func_evaluations / self.budget)\n\n        return self.global_best_position", "name": "AdaptiveGuidedParticleSwarmOptimization", "description": "Adaptive Guided Particle Swarm Optimization (AGPSO): Combines adaptive inertia with global-best guidance to enhance convergence and maintain diversity.", "configspace": "", "generation": 60, "fitness": 0.18927132636972177, "feedback": "The algorithm AdaptiveGuidedParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.6247657585235824, 0.6250678815132169, 0.6187525447440118, 0.1409538240367808, 0.1875508493646364, 0.7065257267595939, 0.18253903179377584, 0.17938497669871467, 0.6493708013144777, 9.999999999998899e-05, 0.02689093672814813, 9.999999999998899e-05, 0.03849225216682228, 0.032407286133056545, 9.999999999998899e-05, 0.3307662204592592, 0.0351780174746984, 9.999999999998899e-05, 0.12018996198462228, 0.038839704929960917, 0.11998275054596341, 0.12720132835802211, 0.05986425067379497, 0.2149432404933005, 0.05529571965585767, 0.025207662885296855, 0.10109838689925366, 0.10596385003816411, 0.18289722753409854, 0.1223331846288862, 0.11242656451868116, 0.1015948120859701, 0.044462808815162624, 0.12397431832431272, 0.11163187780673967, 0.028167135321810255, 0.9959904251563575, 0.9931610254562888, 0.9969025457835933, 0.9922285705433707, 0.9948846786436883, 0.9911042443881142, 0.9939111279597657, 0.9961503821815056, 0.9934477776406044, 0.0573687567905814, 0.05183336230856728, 0.05723819329291624, 0.13524842497773026, 0.13669722277920737, 0.37715105372954083, 0.10880644421288965, 0.08611588481289723, 0.08706251059967529, 0.16910323343678868, 0.23225018647089235, 0.4080096888773169, 0.18230230869527975, 0.15241967039251225, 0.18246941760592794, 0.12366883199674794, 0.11153199248678047, 0.19510261101801007, 0.09522132868480837, 0.13615728266390725, 0.181352929852443, 0.13540272046235646, 0.10845391946795113, 0.1480208031329845, 0.16407841549488789, 0.18553747236514906, 0.109377599003326, 0.14661335632515127, 0.010180005186634533, 0.04928307889365846, 0.09999779041769452, 0.12754929209587695, 0.13654860743515296, 0.1025083210612121, 0.0269209010565008, 0.16751544574733124, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022277918366983007, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06723505356901682, 0.05304555405334499, 0.08140161479516284, 0.07772393324938798, 9.999999999998899e-05, 0.041343635749104046, 0.020704494205244006, 0.0031524219920229246, 0.042461809357488334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05041181778209136, 9.999999999998899e-05, 9.999999999998899e-05, 0.05957926037053751, 0.05513175831873873, 0.0431730486690598, 9.999999999998899e-05, 0.0070506302378186, 0.03299337450866535, 9.999999999998899e-05, 0.052732864034969906, 9.999999999998899e-05, 0.04056578783689324, 9.999999999998899e-05, 0.05287106267877062, 0.42461942503393013, 0.4091533634251242, 0.44398688985222023, 0.18180077181393894, 0.3941942770643735, 0.40496571063257614, 0.4508962629255422, 0.44141122308167513, 0.40196646128486424, 0.06076840140233275, 0.06042650077714151, 0.044715838558296084, 0.09790161439953504, 0.08773470856079546, 0.08669196584851468, 0.09222915867836745, 0.07718069019752782, 0.10673026003392883, 0.21138918968547227, 0.1535201549976336, 0.1865140152622412, 0.2118627412936237, 0.25468709962635816, 0.14650720797338768, 0.1489600297528435, 0.26231917223139933, 0.2288993494370588, 0.2775628764100788, 0.17680092307220907, 0.30301062446176596, 0.3027320547531235, 0.1961961773629466, 0.17485058560341926, 0.24665015552961578, 0.18551239921379015, 0.15338218098672807, 0.06931045609584563, 0.2131247249536944, 0.13909802031088003, 0.17202659512817842, 0.18467239812217084, 0.14425395550076214, 0.14110557395221635, 0.19030220458952718, 0.08696777288418034, 0.20763308173416917, 0.1814725856835251, 0.19958520555532577, 0.19650162312817543, 0.18266020390000148, 0.1930638214622381, 0.1805275205329806, 0.18457151743120714, 0.2172793307639186, 0.1736266045095094, 0.22427576229764434, 0.1647542297891934, 0.3956442595363192, 0.1894965321531048, 0.38444380380770937, 0.42283880195462276, 0.3028449799792544, 0.18125266523577377, 0.2590244765975128, 0.2527829628150676, 0.10594776670386019, 0.6653807527302441, 0.19397898358042465, 0.5051783128813098, 0.13926666779860386, 0.11797861055451264, 0.14811490141335015, 0.16212206198891033, 0.16666812973869727, 0.10868479473916959, 0.19193983433125628, 0.20499711109742247, 0.19887827506045985, 0.18717599821603526, 0.06816515993013561, 0.1929611319545418, 0.18862639689712601, 0.1924250729257101, 0.2522881305782607, 0.18915756664254513, 0.20837001036806435, 0.2253683742496767, 0.22619936780365602, 0.19899888248148223, 0.19619024915451633, 0.0471175329270207, 0.07888280478704002, 0.07474656649035516, 0.07140233451630507, 0.08212126494695327, 0.06573695819559233, 0.06286220043740864, 0.07447273826191136, 0.07272277180799469]}, "mutation_prompt": null}
{"id": "9a9c34dd-e1b2-4f16-b7c8-bb1dc9e4f642", "solution": "import numpy as np\n\nclass QuantumParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_global_score = float('inf')\n        self.best_global_position = None\n        self.best_personal_positions = np.copy(self.population)\n        self.best_personal_scores = np.full(self.population_size, float('inf'))\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.tau = 0.05  # Quantum tunneling probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate current particle\n                current_score = func(self.population[i])\n                self.func_evaluations += 1\n                if current_score < self.best_personal_scores[i]:\n                    self.best_personal_scores[i] = current_score\n                    self.best_personal_positions[i] = self.population[i]\n                if current_score < self.best_global_score:\n                    self.best_global_score = current_score\n                    self.best_global_position = self.population[i]\n                \n                # Update velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                cognitive_velocity = self.cognitive_component * r1 * (self.best_personal_positions[i] - self.population[i])\n                social_velocity = self.social_component * r2 * (self.best_global_position - self.population[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n                \n                # Quantum tunneling\n                if np.random.rand() < self.tau:\n                    self.population[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                else:\n                    self.population[i] += self.velocities[i]\n                    self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive parameters\n            self.inertia_weight = 0.9 - 0.5 * (self.func_evaluations / self.budget)\n            self.tau = 0.05 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_global_position", "name": "QuantumParticleSwarmOptimization", "description": "Quantum Particle Swarm Optimization (QPSO): Combines quantum tunneling concepts with swarm intelligence to enhance exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 61, "fitness": 0.19190856366202202, "feedback": "The algorithm QuantumParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.38016367223340264, 0.4518176370549919, 0.3993362187601346, 0.3469422288917072, 0.43846461575221063, 0.4086202229362208, 0.40373604262800566, 0.4746503272786978, 0.45146951556518344, 0.026245210793044538, 0.0353117728953255, 0.02199025853511649, 9.999999999998899e-05, 0.0005212213416405653, 0.006960182928430592, 0.0007639989013671356, 9.999999999998899e-05, 0.010264126804130913, 0.1351854749184488, 0.06275336000394893, 0.10792484848658501, 0.06418385101328639, 0.06546300801381022, 0.0801513960067739, 0.08754220851637051, 0.07534399200972453, 0.10487415370724562, 0.08397301376291288, 0.08947425735647263, 0.09454490808438132, 0.09288725971445821, 0.08162161869785411, 0.06437774183941714, 0.08305507050061389, 0.10544254457651236, 0.05452754273967397, 0.9909421509697947, 0.9931214047635389, 0.9956649276963576, 0.9912101202400672, 0.993837818663052, 0.8929962618081607, 0.9940857578470446, 0.9942810724799204, 0.9848974161460288, 0.25181231440918395, 0.19907883417762995, 0.17540661432230975, 0.22000270756454998, 0.17889326016044182, 0.2598109814643752, 0.18725592626688736, 0.2418222119591804, 0.19534255993183447, 0.21005689104062975, 0.27237243247486354, 0.20200098664683852, 0.18497879869186928, 0.19860244579543962, 0.18032283403251204, 0.14168110246903431, 0.220229091187375, 0.16839894815216538, 0.10318808353054043, 0.13088865689697105, 0.14301390374169498, 0.08722118017153446, 0.0933454459308044, 0.09543241831543714, 0.11206634889682732, 0.12749266828423333, 0.13369249608085976, 0.10988295963913475, 0.08089751836503856, 0.04284582511871271, 0.09864086662947757, 0.11426281532452942, 0.10611547616202766, 0.15140926034674063, 0.08373618412291495, 0.13100058452745833, 0.07213831048681985, 0.0009691104317461896, 0.0008891977269411822, 0.03806001333862841, 0.011673840906403221, 9.999999999998899e-05, 0.00852890480170898, 9.999999999998899e-05, 0.02716680426115381, 0.06461405550149979, 0.026577569483906882, 0.034098404651608294, 0.0776120509084065, 0.003690488593773855, 0.08319417628941461, 0.10231512500658624, 0.011185154170234135, 0.051142556541775575, 0.029081544381265312, 0.012072675009865641, 0.007236715964518581, 0.01419622750629601, 0.0181497578485722, 0.017435895782366817, 0.02181083139459239, 0.02292053626128987, 0.014898983816003186, 0.04123797785567962, 0.0972938439567046, 0.03838897838029298, 0.025290901034033975, 0.09242385943246734, 0.026795077799898315, 0.06204781964524608, 0.07030270842422959, 0.09514225773424756, 0.35165468278823375, 0.3671013687114242, 0.3566749316457656, 0.30877271888287083, 0.37871645873762505, 0.3294389922228558, 0.3850119063342964, 0.35863824975669023, 0.37488917254561915, 0.06939245397022409, 0.06495857546306705, 0.08285831578276304, 0.08610580484002972, 0.09082997343074062, 0.09102366123749484, 0.0903492879912261, 0.1044156619247475, 0.08320547221164631, 0.21068930499988603, 0.26088833827596236, 0.20104464543130784, 0.20629002503159632, 0.2365993531809556, 0.1854181368284903, 0.18240331559236178, 0.279219715824935, 0.16005459488541363, 0.25295883390680163, 0.22147154809541192, 0.22189031378942592, 0.2519471720029818, 0.18375608427040668, 0.2525427798527019, 0.1973942588134543, 0.2867281881809588, 0.2224788476666325, 0.17103733822758982, 0.16933469811969937, 0.14318185704070563, 0.1785867614147557, 0.13724312247765647, 0.16359064003063994, 0.13670294590529808, 0.16571763187233246, 0.1587563162844401, 0.1991455505734533, 0.19827947018596737, 0.21679753144241598, 0.17687633070716424, 0.1874156370828559, 0.20195413376133187, 0.22589110562543768, 0.19165941079724091, 0.19400428305661732, 0.18325245591768868, 0.1831415261742282, 0.18277124897455665, 0.18672254117158138, 0.20744311606620158, 0.18723343157906525, 0.17196369124432187, 0.17794192047871815, 0.1657017017452037, 0.16794019472868826, 0.19251314890294025, 0.14379855396253338, 0.5592334699856639, 0.19844036323089786, 0.20053140063798414, 0.4027967372610559, 0.16652246769219814, 0.5330584655157523, 0.4271359414187281, 0.18644901528701796, 0.47346455782103325, 0.3607320539870553, 0.16193083917790718, 0.20469939737387655, 0.20929799973786456, 0.20286797675684765, 0.2387334323414374, 0.18164267115329058, 0.20012819091013911, 0.18079187911487793, 0.19758378538806787, 0.1998318381578894, 0.17929243077491752, 0.18869988706153107, 0.1895562272214144, 0.18628932516489216, 0.07977031666101897, 0.07850966504386891, 0.08783613551647029, 0.0813193465101727, 0.06488346700947789, 0.07346005450194315, 0.098706236408447, 0.05806760999894178, 0.0697707034934405]}, "mutation_prompt": null}
{"id": "fbb61003-e402-4ffc-b4b5-885cac87a18b", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "08d29361-89c4-40dc-825a-7257d77a50f8", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "23dfcd6d-dbcb-49d0-b394-9060706015cf", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "967dddbc-5e8c-4049-915e-166fdaa7d917", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "62fd15b6-d4ef-4b84-a7ed-3b16608727d6", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "d0107d83-fc1b-4b79-b7db-646306e1fdb3", "solution": "import numpy as np\n\nclass AdaptiveQuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.func_evaluations = 0\n        self.w = 0.5  # Inertia weight\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.tau = 0.1  # Quantum perturbation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                current_score = func(self.positions[i])\n                self.func_evaluations += 1\n                \n                # Update personal best\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.positions[i]\n\n                # Update global best\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.positions[i]\n\n            for i in range(self.population_size):\n                # Update velocity\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_component = self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_component = self.c2 * r2 * (self.global_best_position - self.positions[i])\n                self.velocities[i] = (self.w * self.velocities[i] + cognitive_component + social_component)\n\n                # Quantum perturbation\n                if np.random.rand() < self.tau:\n                    self.velocities[i] += np.random.normal(0, 1, self.dim)\n\n                # Update position\n                self.positions[i] = np.clip(self.positions[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive adjustment of inertia weight and tau\n            self.w = 0.4 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)  # Adaptive inertia weight\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.global_best_position", "name": "AdaptiveQuantumSwarmOptimization", "description": "Adaptive Quantum Swarm Optimization (AQSO): Combines adaptive particle velocities with quantum-inspired perturbations for enhanced exploration and balance between exploration and exploitation.", "configspace": "", "generation": 67, "fitness": 0.23625133697502196, "feedback": "The algorithm AdaptiveQuantumSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.6481278614292143, 0.7206853999778537, 0.64898146704688, 0.44164118585409895, 0.43015370176676426, 0.5589236755291727, 0.5905804501581418, 0.6842194494325626, 0.6893030726671634, 0.23656618942397423, 9.999999999998899e-05, 0.04443641000098619, 9.999999999998899e-05, 0.04968962224796869, 0.33905961257194195, 9.999999999998899e-05, 0.09381671355940435, 0.3498895777815466, 0.14140081259577086, 0.1168478954923936, 0.10025598984121808, 0.11779048729166874, 0.12005499738968961, 0.11207017089920568, 0.10910486053330803, 0.15468741899482352, 0.13009527048001912, 0.10710825539563607, 0.11890023727215249, 0.1046419087453001, 0.15855195038618008, 0.07015594746644038, 0.12270732470862245, 0.09112189688888961, 0.09989910323486495, 0.08021504567417892, 0.9958600219275857, 0.9907945950996901, 0.9947522389397584, 0.9960697997667781, 0.9959530598057088, 0.992673846922604, 0.9961192817743241, 0.9959892285853138, 0.9933631079353162, 0.3194840520114717, 0.2957024668918026, 0.17412321375222806, 0.18218380173055226, 0.20317344753970423, 0.28248364343161747, 0.22976138389841094, 0.27188963649515385, 0.22564012669160882, 0.2791846865884654, 0.25587191833791023, 0.4985628608379741, 0.8166790325297849, 0.1503317632313207, 0.21323810565783974, 0.3720569269808922, 0.2121558922246879, 0.2304239406583557, 0.13128178926197775, 0.15475236141663173, 0.15022413928440004, 0.16125979370826993, 0.13096535313943036, 0.1511154490984674, 0.19961529847042359, 0.15371010250138983, 0.1624444774561723, 0.14699528857338373, 0.09556921587375888, 0.16886933045698427, 0.14867983080516134, 0.12398417264034212, 0.18222254079448774, 0.13944637413339078, 0.056491814820465724, 0.13107549138023133, 9.999999999998899e-05, 0.00045569623659735825, 9.999999999998899e-05, 0.00045751839208074685, 9.999999999998899e-05, 9.999999999998899e-05, 0.006249027249013439, 9.999999999998899e-05, 9.999999999998899e-05, 0.1449334647460786, 0.0896200422397071, 0.050625063360614564, 0.06629132996537679, 0.0041178308861266055, 0.06122668697282674, 0.053528875821852506, 0.06873446690560525, 0.03841213610481098, 0.04184896255039916, 0.015256870230241693, 0.0428057413800641, 0.024732101467340173, 0.02305678840266956, 0.02747454299525709, 0.02686336356495489, 0.024229907907780013, 0.03700105035300949, 0.1525329350959428, 0.03705834097416716, 0.044143350450274066, 0.038881530704140466, 0.006664140814235497, 0.039204417626201526, 0.08444616674613914, 0.10405973740577357, 0.08525866746660526, 0.4492546259287997, 0.524545156650575, 0.43480376430827095, 0.5069064599575592, 0.5305556351724487, 0.4957268500780677, 0.4876761554659439, 0.4826259094006222, 0.48226967165645607, 0.08005493331463331, 0.08903556007108504, 0.08876771321468546, 0.15321522627931794, 0.13443998644510924, 0.11567134946847113, 0.09915341323264149, 0.14156527463305268, 0.10733562915101558, 0.25385556517759744, 0.19769228802847694, 0.14895506139375614, 0.21026279178382323, 0.20606745034522833, 0.15045700525140182, 0.19579905160274225, 0.20558715033030384, 0.18128305076193518, 0.3229574596255721, 0.3797014281249007, 0.28387118636949316, 0.26728452058572716, 0.25421760461326304, 0.3362696018176259, 0.2240373554817745, 0.27539742872937467, 0.25214350951065667, 0.20974730921451257, 0.17234572692624328, 0.14767720832117337, 0.20913127258558473, 0.2035767767789639, 0.22204956674598542, 0.19413138612519043, 0.12138373848507489, 0.20729682161186358, 0.21372494692385402, 0.19292588115207898, 0.22231435902012286, 0.19292526905007035, 0.18458432320520568, 0.2710721288351907, 0.250472096645427, 0.2161969096625852, 0.20317729204202828, 0.19359819805626555, 0.24872686536968114, 0.20781534715984507, 0.24817456575713714, 0.2041831082597363, 0.21334571252374357, 0.2015640267632638, 0.20178236589031373, 0.18535898426212294, 0.7381579581681328, 0.197314313386598, 0.14850090882222755, 0.795402106758997, 0.20165352972603234, 0.4935461835614233, 0.8025678409134152, 0.13459580183503805, 0.4771117625762701, 0.3355343533002392, 0.18841942060449102, 0.5647114356605611, 0.21190266344617525, 0.26640961527517926, 0.21435512502114717, 0.17317796165317723, 0.16894531014708392, 0.30755551627292466, 0.1790168609290026, 0.21369207539414792, 0.19759963853137963, 0.20211123114757923, 0.20092224266929493, 0.1966810134788186, 0.1871237478975809, 0.20569709952774207, 0.19185769961471677, 0.07628034155961194, 0.093430326253921, 0.0772210897604747, 0.09026814339428235, 0.08161827344109729, 0.08625735264703505, 0.10938023240938888, 0.07148523737153611, 0.08507974029619958]}, "mutation_prompt": null}
{"id": "c50da654-d15e-4582-882c-f66a5ae5dece", "solution": "import numpy as np\n\nclass AdaptiveQuantumAnnealingPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_annealing_factor = 0.9\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.quantum_probability = 0.05\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate current particle\n                current_score = func(self.population[i])\n                self.func_evaluations += 1\n\n                # Update personal best\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.population[i]\n\n                # Update global best\n                if current_score < self.best_score:\n                    self.best_score = current_score\n                    self.best_position = self.population[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (\n                    self.global_annealing_factor * self.velocities[i]\n                    + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                    + self.c2 * r2 * (self.best_position - self.population[i])\n                )\n                \n                # Quantum-inspired perturbation\n                if np.random.rand() < self.quantum_probability:\n                    self.velocities[i] += np.random.normal(0, 1, self.dim)\n\n                # Update position\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n            # Annealing factor adaptation\n            self.global_annealing_factor *= 0.99\n\n        return self.best_position", "name": "AdaptiveQuantumAnnealingPSO", "description": "Adaptive Quantum-Annealing Particle Swarm Optimization (AQuPSO): A hybrid approach combining quantum-inspired perturbations with annealing-based velocity adaptation for efficient exploration and exploitation.", "configspace": "", "generation": 68, "fitness": 0.24458555123954848, "feedback": "The algorithm AdaptiveQuantumAnnealingPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8175451479407299, 0.8321014060264699, 0.6997885309961478, 0.818057354493529, 0.8245864752782074, 0.8140863356575272, 0.8311042005407085, 0.7688051700904186, 0.7193323069343749, 0.0709641332149682, 0.004141574178443075, 0.04665945075514988, 9.999999999998899e-05, 0.06457207495303097, 0.04098914968020384, 0.0321937381313393, 0.04691207951209453, 0.053757969811274564, 0.09586737821062274, 0.13287999462779376, 0.09729850110498006, 0.07165722925419138, 0.13119219982353936, 0.07441058602860084, 0.08056641130544051, 0.10105496516348433, 0.09084041934065701, 0.09850103458602077, 0.07224512926695004, 0.11171744084857549, 0.08599113060826435, 0.07319297987646023, 0.07750087975985465, 0.0963165040929913, 0.08977275300651344, 0.07947717953013456, 0.9956964466489181, 0.9947168100253152, 0.9968916603839689, 0.947039009536715, 0.9941856801754573, 0.994881650512747, 0.9586085752217656, 0.9952848086970869, 0.9670761676269213, 0.34662887650234253, 0.32362297540568985, 0.3966395090053002, 0.3367259831673177, 0.1582603475864358, 0.4266487927913267, 0.4145397358540598, 0.44720476534396236, 0.44092901840453425, 0.22285581552213674, 0.18500246467319992, 0.18906940499158076, 0.15871749322229878, 0.18025597701053253, 0.19867453055565654, 0.13269878651926337, 0.20393252354525337, 0.4140313735619874, 0.09947146289676545, 0.3442369836772433, 0.14081991545613237, 0.12164096002088476, 0.1845422500312639, 0.13300208211448095, 0.18163989455065777, 0.12127120412657844, 0.20336585471770185, 0.22051160344607013, 0.10983054169498552, 0.1296837439387255, 0.1880242258819419, 0.1497323384288044, 0.1539832081390452, 0.12617233159939933, 0.09555262226429784, 0.2370167108613065, 0.004465738375403316, 0.04648400643357109, 9.999999999998899e-05, 0.0160070871021879, 0.05599007466740746, 9.999999999998899e-05, 0.0030685941743302525, 0.002172683086837268, 9.999999999998899e-05, 0.11112290570126171, 0.12241283690007532, 0.08640782970228178, 0.17336898798404032, 0.057096939999055185, 0.0654331100776937, 0.21902272775677434, 0.08603254117653747, 0.015396773260777041, 0.0764197823427083, 0.0347560372358785, 0.046000516217305054, 0.13547713610927314, 0.07460803973581553, 0.07726952848613433, 0.06683185988630669, 0.10135976211067033, 0.09339267055236355, 0.08176898304307101, 0.12779797142823934, 0.053092541424907935, 0.0367077475291846, 0.006154623336574017, 0.037894270320245727, 0.1413850389439102, 0.051492868248484425, 0.08520052050205484, 0.48449454263775305, 0.4649346681626425, 0.4838485640696747, 0.5223240846868129, 0.4646030266336214, 0.4799877138879286, 0.46135266753383053, 0.5123498402257056, 0.5054852977632299, 0.054410491352810286, 0.10708252472456337, 0.04314595379318176, 0.11330595146744982, 0.10939893505205345, 0.10470650598529119, 0.09307959683147715, 0.09064793231707169, 0.15745248962210967, 0.17622138953767097, 0.34209262930999496, 0.1767186456696399, 0.3947036118773618, 0.2231807803050525, 0.21805240150254834, 0.22240402026644768, 0.1785058036610444, 0.1836195340587804, 0.1338434294162253, 0.2493378271281943, 0.15073682918082598, 0.24429139966082014, 0.28752216538705233, 0.1841887646500464, 0.1958216330660637, 0.3008093985888033, 0.2974653431746547, 0.16820861097514972, 0.24663363758883383, 0.16477343359180086, 0.233000147731244, 0.1336553641622531, 0.12956608164245986, 0.19699938156996266, 0.214382083959768, 0.19370099535321073, 0.21885822867058558, 0.22022970451004498, 0.19988200712389437, 0.21476982671584732, 0.1911595922709265, 0.24056242615759305, 0.21514555389550116, 0.21044483393704772, 0.27052744827084785, 0.207536047919749, 0.23967444729626097, 0.18429868555563067, 0.21051934767871994, 0.20926117547310763, 0.18706734245886458, 0.18541742448687093, 0.18513183808105738, 0.17824393927508064, 0.912768662147013, 0.8869367332119654, 0.15119198281048518, 0.8967054219006183, 0.198956240585057, 0.19997740830640331, 0.16579393262580888, 0.1642916622972037, 0.8951002734012891, 0.08280409737174343, 0.6029201132448543, 0.24587593431460109, 0.12506933988908708, 0.4460243720506657, 0.20983883649050983, 0.20618935724533272, 0.16404597289934486, 0.20719839348331648, 0.2289378520458769, 0.17584443751494305, 0.19775492630493385, 0.20733462137954273, 0.25533153484400206, 0.20655307327813222, 0.2298055440539548, 0.20457063033515788, 0.20811893591103214, 0.08552216292824288, 0.09766367579265445, 0.09376232658616923, 0.06556141250727121, 0.08649627200120447, 0.0805928182980451, 0.09734618353076863, 0.10894746409986367, 0.07698079769551935]}, "mutation_prompt": null}
{"id": "ce396a08-5cfb-4c46-ae1e-015355ea9f4b", "solution": "import numpy as np\n\nclass AdaptiveSwarmBasedQuantumOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.swarm_size, float('inf'))\n        self.inertia_weight = 0.7\n        self.cognitive_param = 1.5\n        self.social_param = 1.5\n        self.tau = 0.1  # Probability for quantum update\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_score = func(self.positions[i])\n                self.func_evaluations += 1\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                if current_score < self.best_score:\n                    self.best_score = current_score\n                    self.best_position = self.positions[i]\n\n            for i in range(self.swarm_size):\n                inertia_component = self.inertia_weight * self.velocities[i]\n                cognitive_component = self.cognitive_param * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                social_component = self.social_param * np.random.rand(self.dim) * (self.best_position - self.positions[i])\n                self.velocities[i] = inertia_component + cognitive_component + social_component\n                \n                # Quantum-inspired positional update\n                if np.random.rand() < self.tau:\n                    self.positions[i] += np.random.normal(0, 1, self.dim)\n                else:\n                    self.positions[i] += self.velocities[i]\n                \n                # Clamp positions to bounds\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive parameter adjustment\n            self.inertia_weight = 0.4 + (0.3 * np.cos(2 * np.pi * self.func_evaluations / self.budget))\n            self.tau = 0.05 + (0.05 * np.sin(2 * np.pi * self.func_evaluations / self.budget))\n        \n        return self.best_position", "name": "AdaptiveSwarmBasedQuantumOptimization", "description": "Adaptive Swarm-Based Quantum Optimization (ASQO): Combines swarm intelligence with quantum-inspired positional updates and adaptive parameter tuning for enhanced exploration and exploitation.", "configspace": "", "generation": 69, "fitness": 0.2716792849233157, "feedback": "The algorithm AdaptiveSwarmBasedQuantumOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.7730377337161476, 0.7594735980905892, 0.7421271137231515, 0.7340665038278339, 0.7599604173018071, 0.7417606608442708, 0.7605388131895775, 0.7898502030617337, 0.8191085316825912, 0.019164003109360284, 0.02691656749103566, 0.4254133114759613, 0.15395762526960022, 0.2587785900957954, 0.3199947415533697, 0.4428664880143043, 0.46964533982581136, 0.23389243173779228, 0.16876053532205637, 0.1431290295762494, 0.11929887841460773, 0.15106481817807127, 0.4467519729062388, 0.16612596080969777, 0.1268650845365863, 0.11517465236023161, 0.1215290708767498, 0.10003920366849417, 0.10730118999193983, 0.13214357204207194, 0.11305330133692293, 0.1015432011163151, 0.11415175644835451, 0.15493122381994473, 0.09631252578551264, 0.06620326340937732, 0.9916584694526922, 0.9890768166519388, 0.9960810363443009, 0.9910412216717494, 0.9903306788616287, 0.9940136427511735, 0.9943985935423328, 0.9910360311986123, 0.9921787198090817, 0.5464424682329123, 0.44716781513039405, 0.3663362915818469, 0.6034559562776636, 0.15160707803205764, 0.5442273023539042, 0.40911378048804103, 0.5623320243261325, 0.5124408601289574, 0.6506646878160935, 0.31965239035359605, 0.3502059728932714, 0.2177201961050108, 0.20282166722338457, 0.19324224568449566, 0.3102819879330381, 0.16762097313265445, 0.22809579021971382, 0.13293966188438422, 0.28094837834435604, 0.15787824464188693, 0.14568292582748166, 0.17232030432146728, 0.20454343970722266, 0.17204760379237105, 0.12463812710874667, 0.16796264174932762, 0.1567625110132187, 0.0910236005638928, 0.11042373354391455, 0.19213475730945362, 0.1764477028908248, 0.3112294534140698, 0.14049258797064745, 0.03431542945067234, 0.16808587657170215, 9.999999999998899e-05, 0.04302753474760268, 0.057263562211520735, 0.0646064673708544, 9.999999999998899e-05, 0.002363863181416459, 9.999999999998899e-05, 9.999999999998899e-05, 0.0829682171663455, 0.057852069569496956, 0.042561479566949445, 0.05250340288977384, 0.03484450652232585, 0.0024223477608177335, 0.05924113508196349, 0.17465343338584938, 0.06106584528324677, 0.06381434168277467, 0.1365132939465339, 0.010390153526076196, 0.038148702399461, 0.059635212091416756, 0.06262421097759163, 0.057547537788544156, 0.12084082990436906, 0.0530255060632131, 0.05858225707343734, 0.05921730607983067, 0.042351224646138164, 0.19848559803193389, 0.03854020011986703, 0.073406201524983, 0.035707950379699094, 0.08592474382187298, 0.04886429107239343, 0.07857667064911078, 0.47519161595669857, 0.46415836260805987, 0.509055214655908, 0.5383787940898003, 0.5095755264867761, 0.47121095193506235, 0.4722272893292956, 0.49178852982993215, 0.48125438828562905, 0.08716082684261384, 0.1407992644056425, 0.1434423320388989, 0.10172588144774086, 0.10588111417323309, 0.10074080432338384, 0.08357801713825741, 0.09987188620129017, 0.1424154119944704, 0.26935728221972166, 0.18128230164656256, 0.1615380556014998, 0.2527035829613016, 0.3434676728365512, 0.1440603311453711, 0.2566250297127324, 0.18595361670784227, 0.24915615124282742, 0.3671123893667029, 0.20254290663440222, 0.3631657911836045, 0.32689233828676034, 0.2947303917549081, 0.3376680675464173, 0.3202484705535402, 0.2864650867902927, 0.3890151977270201, 0.2887718891182146, 0.1758413046357573, 0.15476561803846633, 0.2521590635220209, 0.18219959012668252, 0.18491115729231944, 0.16107498525542052, 0.12747931745062602, 0.21351496312435214, 0.2088477434495568, 0.20433064764511033, 0.20168379119584734, 0.2344302263626138, 0.22548158523343642, 0.2179241783113609, 0.19124465098089083, 0.20035346938520038, 0.2235098802666945, 0.19751547181806506, 0.6182604989336375, 0.2202933824144886, 0.2046397313284266, 0.20928408435394708, 0.24429963560231893, 0.6598411184563892, 0.20902885836016105, 0.20115689069391696, 0.8815371521435578, 0.16518933828054594, 0.15331968144513575, 0.8393277372094881, 0.19957156973390955, 0.19956426569685504, 0.7960549040390165, 0.14146663962177264, 0.6620762349945064, 0.0828730612822054, 0.2118420341028544, 0.7792341733537522, 0.371951168869357, 0.33767669263695965, 0.4084890557488907, 0.10447839141806248, 0.15365875841354826, 0.20919859018237008, 0.21592403395930104, 0.20294628881298138, 0.19508611087588046, 0.19650310424483708, 0.20363458861320738, 0.1970855870183461, 0.2003359050185738, 0.22919388731356016, 0.21988459928045279, 0.09946710248774038, 0.09490702657398176, 0.11341461530692487, 0.08416366134104936, 0.09582028544990229, 0.09334713566262143, 0.09623113600844646, 0.09979178976728731, 0.09817093808175736]}, "mutation_prompt": null}
{"id": "00859407-f864-430e-898e-5830042816e6", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "04561842-0220-4d23-9dff-9538c8d61666", "solution": "import numpy as np\n\nclass AdaptiveMultiSwirlPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.swirl_count = 3  # Number of swirls for local search\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.best_positions = np.copy(self.positions)\n        self.global_best_position = None\n        self.func_evaluations = 0\n        self.global_best_score = float('inf')\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                current_score = func(self.positions[i])\n                self.func_evaluations += 1\n\n                if current_score < func(self.best_positions[i]):\n                    self.best_positions[i] = np.copy(self.positions[i])\n\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = np.copy(self.positions[i])\n\n            inertia_weight = self.w_max - (self.w_max - self.w_min) * (self.func_evaluations / self.budget)\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.c1 * r1 * (self.best_positions[i] - self.positions[i])\n                social_component = self.c2 * r2 * (self.global_best_position - self.positions[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n\n                # Multi-swirl strategy\n                for _ in range(self.swirl_count):\n                    swirl_vector = np.random.normal(0, 0.1, self.dim)\n                    if np.random.rand() < 0.5:\n                        self.velocities[i] += swirl_vector\n\n                self.positions[i] = np.clip(self.positions[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "AdaptiveMultiSwirlPSO", "description": "Adaptive Multi-swirl Particle Swarm Optimization (AMPSO): Integrating adaptive inertia weight and multi-swirl strategies to enhance exploration and exploitation balance in optimization.", "configspace": "", "generation": 71, "fitness": 0.15265780770238196, "feedback": "The algorithm AdaptiveMultiSwirlPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.2670477818045537, 0.269450154520283, 0.2878063068961273, 0.2956663074500464, 0.2872285285883598, 0.29341559893096925, 0.2801209793227506, 0.32368821728135166, 0.2919438867642069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0525498622131767, 0.07385440255482989, 0.07098221850117803, 0.07286501479061536, 0.06758125791360048, 0.0848319852135212, 0.07110834380952458, 0.09670128495183217, 0.06841565387321169, 0.06824382928555428, 0.08096446173851068, 0.04897869891616169, 0.05204649094268021, 0.05638005268201307, 0.06601473731487528, 0.058093015388938185, 0.03629568898726809, 0.03623481401008444, 0.9917580029076141, 0.9896028124451584, 0.9918633325342199, 0.9870760423270826, 0.9875860256742479, 0.9533283966433522, 0.9870124703278329, 0.991372719282424, 0.9532541630039983, 0.15032444798302114, 0.15006430240285318, 0.13441113249394587, 0.15022755282259204, 0.15796799637902081, 0.15253882429136556, 0.12329586931569736, 0.136491873585467, 0.14370883339167084, 0.19887516660946358, 0.18473411386867222, 0.15757676414073718, 0.1858827234668876, 0.15199033369838288, 0.1926466145513277, 0.15230952841047096, 0.1567881941592384, 0.18939245073567668, 0.07903573023387778, 0.07826085071904876, 0.08086957793560157, 0.044790132638902413, 0.07392009009756784, 0.08730164287198272, 0.06473115710457134, 0.06159897354575328, 0.059548151209001476, 0.053056422997825425, 0.0670144586409791, 0.05100271987583582, 0.07183304686740977, 0.05509309915168592, 0.07285488150467756, 0.05478547906897724, 0.034446482713998416, 0.08193781233669128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05532150054109952, 0.022647575873853354, 0.03978421044322655, 0.04851585879531539, 0.008180298319956036, 0.007344699401100274, 0.05721021629485934, 0.023801113939159735, 0.008834338247414086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014957904677132539, 0.01753760647651237, 0.018179278379169994, 0.016747831874098673, 0.005638030888748147, 0.016071647869658423, 0.037356863129282436, 0.029482193373293053, 0.03506523797501704, 0.2528073503022501, 0.2699508541930188, 0.28905567679273403, 0.275119259563675, 0.269966210679378, 0.28256378842690033, 0.2780731804016776, 0.2519912099932804, 0.2759260912197431, 0.06558856368458432, 0.0469091844274353, 0.05882028707333553, 0.07285907000078118, 0.06945328426656505, 0.0718644963423134, 0.0450806117112299, 0.06352266932199058, 0.06589680653668306, 0.20410922845442192, 0.14885606342133528, 0.1905137146641125, 0.12896242085966336, 0.19356468424283935, 0.1607426076202808, 0.1577968012461426, 0.2139587651084549, 0.14730512196136292, 0.21362392464678437, 0.20245489712270925, 0.20876773341859456, 0.19133939720130144, 0.1899071247573424, 0.16602434027742163, 0.20620742942781378, 0.21931038868860386, 0.14872247495030677, 0.13700153448727181, 0.1378772039629006, 0.12663203570024983, 0.1449662236522279, 0.13557030430320793, 0.12892651356407692, 0.15535159211534832, 0.11398805933346956, 0.16715981640954747, 0.16499190525707053, 0.16832104797295455, 0.18148049176878345, 0.1792304400152681, 0.16469391677480294, 0.16347534695205412, 0.17022893887426893, 0.15427855355114573, 0.15099988273696852, 0.17194392360756627, 0.17499761516938017, 0.15649953434579345, 0.15518708688597438, 0.15910077274383128, 0.1584859931576741, 0.1624380611615205, 0.1577474172754788, 0.15327559102341015, 0.2774686688460817, 0.1806440960355149, 0.1522424311603674, 0.33586242413951173, 0.18108574762555163, 0.18788616066468944, 0.14434798959189343, 0.13877346022637316, 0.18066967482039675, 0.07957267183607986, 0.1910178692028488, 0.15817446150463987, 0.11019745374985401, 0.18722518493723606, 0.18871690828438614, 0.20442546865148892, 0.13729502744449396, 0.20157211479449766, 0.18000715347088903, 0.16189987747664158, 0.17545596859187462, 0.17217887763338224, 0.16068215435470135, 0.18012501987801133, 0.17628758326480454, 0.17137410761582794, 0.2053796830923197, 0.060734755665043716, 0.05910051801063143, 0.058320295202820116, 0.06784821294092147, 0.051106708351707164, 0.07185754200668104, 0.06575459768165715, 0.05851930367294611, 0.06976339736649739]}, "mutation_prompt": null}
{"id": "b1aa31d9-34ea-46bb-baa8-837c42dfa27c", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.func_evaluations = 0\n        self.best_score = float('inf')\n        self.best_position = None\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.tau = 0.1  # Quantum mutation probability\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[a] + self.scaling_factor * (self.population[b] - self.population[c])\n\n                # Quantum mutation\n                if np.random.rand() < self.tau:\n                    mutant_vector += np.random.normal(0, 1, self.dim)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.func_evaluations += 1\n                if trial_score < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_score < self.best_score:\n                        self.best_score = trial_score\n                        self.best_position = trial_vector\n\n            self.population = new_population\n\n            # Adaptive adjustment of scaling factor and tau\n            self.scaling_factor = 0.5 + 0.3 * np.sin(2 * np.pi * self.func_evaluations / self.budget)\n            self.tau = 0.1 * (1 - np.cos(2 * np.pi * self.func_evaluations / self.budget))\n\n        return self.best_position", "name": "QuantumEnhancedDifferentialEvolution", "description": "Quantum-Enhanced Differential Evolution (QEDE): Integrating quantum-inspired mutation operators with adaptive scaling factors to enhance exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.8246591310405162, 0.8506822431426505, 0.8517776388182486, 0.7928785422995354, 0.8366167276149779, 0.8102035929661863, 0.837467499340866, 0.834127769479243, 0.8050340204847761, 0.5338252510513175, 0.6421186287663123, 0.3013343631932638, 0.7005470856862647, 0.640811293321016, 0.7173458997472575, 0.6903416044158766, 0.6784723329896941, 0.6763388102733451, 0.10689274382483449, 0.1037610373940826, 0.1056072084788584, 0.3625361357927068, 0.15134632712484286, 0.14388338323631522, 0.09107064693397082, 0.41724153769208405, 0.10582922680725027, 0.13218227504084223, 0.09371633469532936, 0.12422278396947262, 0.10676359593245743, 0.11601047208864657, 0.13116077080636346, 0.11803210934213626, 0.11575105050984313, 0.11785148173685323, 0.9630614356115941, 0.9674545292122183, 0.9121859152143661, 0.9004753566011888, 0.9515369360745412, 0.8934057914523705, 0.9187478301757893, 0.8913871159826479, 0.9346016094106564, 0.5406386901891147, 0.3644555751007519, 0.45497101174640076, 0.5036350096749485, 0.4857460336175964, 0.4179635954302444, 0.3845088212434761, 0.34435206635177107, 0.47717342930931694, 0.18399517740231486, 0.7418493011487444, 0.22575302032436506, 0.766300361195615, 0.6612130748722251, 0.9059466328844624, 0.8171774605743223, 0.7826099794095922, 0.8740570082855748, 0.3415879285297133, 0.20674851306426367, 0.20542160949619714, 0.2777781052924537, 0.2932037338113005, 0.27100899110670085, 0.3589230129982347, 0.32015330618895865, 0.1638949128254169, 0.2559338745815024, 0.19134761618247698, 0.16057213391871505, 0.1642829745436578, 0.318797488258882, 0.35224833153005797, 0.3650951960201384, 0.34834781358914313, 0.23709839443621672, 0.4843051708579549, 0.26944170969262526, 0.2209405358218608, 0.16487596688810668, 0.04482242673679104, 0.24031875931815871, 0.03583767680489869, 0.4809949199895456, 0.20882250838565353, 0.5555145905978236, 0.25339261341484953, 0.20445223162227244, 0.3473547636401705, 0.3101214661255379, 0.06350810777957927, 0.49241176211984705, 0.1831421435038607, 0.6228519251991516, 0.14413319464585306, 0.14668429966986973, 0.11429633201208911, 0.23565515708425988, 0.1281836869201839, 0.21058346483592139, 0.10939371892060956, 0.22978680649362304, 0.15628951271378444, 0.2715422919829993, 0.31586499230651555, 0.25872071926745865, 0.37985207290670997, 0.3112658978254995, 0.25484669448083574, 0.31373544403879405, 0.2839940531385655, 0.10668699875896381, 0.7810594630572525, 0.5834937752149822, 0.7341321455899599, 0.6803744790406796, 0.7284784656173791, 0.6756870350269131, 0.6898139297643033, 0.6824643257549041, 0.6250389981258362, 0.07357823357931992, 0.10474747630459913, 0.0958030669297858, 0.13165592388234804, 0.12173784236378704, 0.11544016879737629, 0.0909412613560131, 0.12238959948264638, 0.10741295576227328, 0.1622710674359198, 0.177142053793376, 0.13073503835578337, 0.21882648277598815, 0.21914170779006925, 0.2847801845247332, 0.15858755473781327, 0.293790482976108, 0.13334258956960088, 0.40797257248222774, 0.41490215016462695, 0.3895492097072836, 0.4181715049015632, 0.3651965817117633, 0.4515045613799029, 0.4725241605057645, 0.4739521039097728, 0.4032538868728466, 0.32444233308271897, 0.323344291929928, 0.24789947993779393, 0.23230576566366667, 0.3205072006501807, 0.322946065319921, 0.28957826862154024, 0.2768845884407385, 0.2874481066478026, 0.20777319082250145, 0.19987206201552077, 0.22233976833729863, 0.2021184167033151, 0.16545308720316843, 0.18085929522282485, 0.22739405267623658, 0.18192345198945326, 0.20090719698611115, 0.32773393092402836, 0.24047100830066692, 0.4773979669746239, 0.2122815600032989, 0.20449826971224438, 0.2045480742729353, 0.23319050755912174, 0.17974445633338965, 0.21334603200274505, 0.18583139906881674, 0.737052265672282, 0.1650428012664943, 0.5978562991692729, 0.18338319237189238, 0.7364265226689041, 0.16358963185021258, 0.17582020964217904, 0.6978394298083122, 0.5626243549688833, 0.2100419742871542, 0.8405130161213509, 0.8149604918908662, 0.5532634750984193, 0.20638473018655767, 0.12617775942941167, 0.195212419048724, 0.15111697263673973, 0.18031723430863567, 0.17459796292744179, 0.20062865428392174, 0.22469290967792732, 0.191635894720948, 0.17825455414775693, 0.1868429932208241, 0.1728210395659302, 0.1853966821416716, 0.07723937649078616, 0.09056555878473449, 0.06588805585419144, 0.070381206401678, 0.08077110373446905, 0.08545819268138422, 0.09143205245040176, 0.07459775906676369, 0.08310071523434526]}, "mutation_prompt": null}
{"id": "c7ecd992-69bf-4258-9b2d-c4e5d158d6dd", "solution": "import numpy as np\n\nclass AdaptiveQuantumSwarmAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = int(10 + 2 * np.sqrt(dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.swarm_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.func_evaluations = 0\n        self.inertia_weight = 0.7\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.quantum_factor = 0.1\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_score = func(self.positions[i])\n                self.func_evaluations += 1\n\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.positions[i]\n\n            for i in range(self.swarm_size):\n                # Velocity update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_component = self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_component = self.c2 * r2 * (self.global_best_position - self.positions[i])\n\n                # Quantum-inspired particle movement\n                quantum_jump = self.quantum_factor * np.random.normal(0, 1, self.dim)\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                    cognitive_component + social_component + quantum_jump)\n\n                # Position update\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive adjustment of inertia weight\n            self.inertia_weight = 0.7 - 0.5 * (self.func_evaluations / self.budget)\n\n        return self.global_best_position", "name": "AdaptiveQuantumSwarmAlgorithm", "description": "Adaptive Quantum Swarm Algorithm (AQSA): Combines quantum-inspired particle movements with adaptive learning of historical success patterns to enhance exploration-exploitation balance.", "configspace": "", "generation": 73, "fitness": 0.20953017252400644, "feedback": "The algorithm AdaptiveQuantumSwarmAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.4011511444676873, 0.4243901418809032, 0.41178444736914543, 0.42853294349149096, 0.40018275782278556, 0.4090924149773605, 0.3976398979073126, 0.3957669027061571, 0.3858501949327824, 0.05044211986205427, 0.011151350910973079, 0.0017201909379255254, 0.07961697240795984, 9.999999999998899e-05, 0.033424446273553676, 0.004816693602494149, 0.020232735373944655, 0.015870888370295377, 0.06732189412787826, 0.09977968880818044, 0.11391332090561535, 0.1165620360579318, 0.11595772410227567, 0.1343482451216631, 0.11583709928475805, 0.12353635379396277, 0.09990421396277616, 0.10895862715084181, 0.10595309874833325, 0.11319598123024677, 0.10146860254833356, 0.122032933253167, 0.09901078192865898, 0.10769626862534187, 0.09716564965386165, 0.10849226746720975, 0.9957978377591761, 0.991054924285714, 0.9960959436488493, 0.9909586783363393, 0.9896737841375514, 0.9759834200013356, 0.9930453310926322, 0.9907190438530629, 0.987002732011968, 0.2630944521936184, 0.2840615507064853, 0.2594634176619218, 0.26972080951550415, 0.2758347316715787, 0.3062203042460926, 0.2666351018155063, 0.2823295944929577, 0.2765745720815216, 0.31863501556058604, 0.32994757011123643, 0.31064223774475963, 0.35449712916585385, 0.2415829548345012, 0.27571832269501906, 0.2967032656805081, 0.4280562485564052, 0.32161141144393046, 0.11736486265381485, 0.16527373481558338, 0.1558423012597937, 0.1857689889527051, 0.17693119949506597, 0.10159044329622302, 0.1545878030498289, 0.17069193275174788, 0.14925697801398874, 0.12132997546054958, 0.13818216631888813, 0.15178242751970006, 0.16765689294395236, 0.19691294741667453, 0.15071456375643155, 0.15963385211849257, 0.11461491103025279, 0.15219438163993126, 0.008125694849625109, 9.999999999998899e-05, 0.00018630427860921728, 9.999999999998899e-05, 0.01941736782812553, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02616665461741774, 0.06409312329574446, 0.05855617236382682, 0.055453897618231496, 0.06190843213842323, 0.017969228279525296, 0.008031388165658626, 0.18558560708324756, 0.05849866845047913, 0.0598795974515306, 0.00018602238912868163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03878322274767365, 0.09698679768693086, 0.09016324422729594, 0.06351367732172764, 0.08978406205983902, 0.07252410861124758, 0.1044893014390127, 0.049183742139905506, 0.07640099789960919, 0.37436239637419744, 0.38880374159956665, 0.41326201016090625, 0.3775819558030745, 0.4133506581659724, 0.3895312072976602, 0.37004623047818985, 0.3909639386463897, 0.3802464905639594, 0.09609879973793845, 0.11918461302646843, 0.13131680367671072, 0.11784425420882294, 0.10561913181438631, 0.0894888080702847, 0.10022633808401604, 0.07956737193600316, 0.08826810028173349, 0.2414916939666345, 0.23189068889933484, 0.15638101117579228, 0.23995964152519622, 0.22038445351021074, 0.15339491580897735, 0.2670960542511577, 0.25230583152126596, 0.19288624405905264, 0.1472326599178656, 0.2884851322384471, 0.28189217127667165, 0.29141024425542417, 0.27894042609097347, 0.2745401813836784, 0.28465382812127904, 0.26935343692313884, 0.1627007976095043, 0.19661227041900198, 0.19711071229249144, 0.1921575415463862, 0.13428725166391764, 0.2130185465084582, 0.21680092028009146, 0.17391356280037618, 0.20693379662279654, 0.08713014685175002, 0.22895607426373676, 0.21285712590809402, 0.19189608924427448, 0.18804274211980054, 0.19612746038444806, 0.23673296583874448, 0.24258552636020791, 0.18669095438533467, 0.2161021641955434, 0.20851178238054513, 0.2011417050914296, 0.21751352719472172, 0.2460317292030091, 0.224908749313529, 0.19627940370110264, 0.2434258496938937, 0.20260180597921185, 0.20800655137987156, 0.5719883946361, 0.11433098730539093, 0.1547098538621502, 0.6201800846245784, 0.20032911496714878, 0.19971750312964187, 0.15910973485451319, 0.1470406992043639, 0.16222463205761306, 0.08284984864720846, 0.21126586878833797, 0.5362426992437295, 0.21075010899109392, 0.47635879734178577, 0.2118648133352159, 0.12803965746018597, 0.1601987331028336, 0.21264761403353127, 0.17680281408311715, 0.18251119517447356, 0.1899159366653428, 0.1789217229352087, 0.18882816534412583, 0.18229164744630533, 0.1741521138862938, 0.1737486021227016, 0.18043629529177285, 0.09915456023032732, 0.09071762321284893, 0.09462441968648017, 0.09714714050921724, 0.08672946944558768, 0.09091444152686212, 0.08730507995325698, 0.0893303664963987, 0.07591821669907373]}, "mutation_prompt": null}
{"id": "2ed14731-68fd-43b9-aff5-7a13946ef441", "solution": "import numpy as np\n\nclass AdaptiveParticleSwarmOptimizationQuantum:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10 + 2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best_score = float('inf')\n        self.global_best_position = None\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w = 0.7  # Inertia weight\n        self.func_evaluations = 0\n\n    def __call__(self, func):\n        while self.func_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate current position\n                score = func(self.population[i])\n                self.func_evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            cognitive_velocity = self.c1 * r1 * (self.personal_best_positions - self.population)\n            social_velocity = self.c2 * r2 * (self.global_best_position - self.population)\n            self.velocities = self.w * self.velocities + cognitive_velocity + social_velocity\n\n            # Quantum-inspired perturbation\n            quantum_perturbation = np.random.normal(0, 0.1, (self.population_size, self.dim))\n            self.velocities += quantum_perturbation * np.exp(-0.1 * self.func_evaluations / self.budget)\n            \n            # Update positions\n            self.population += self.velocities\n            self.population = np.clip(self.population, self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight\n            self.w = 0.7 - 0.4 * (self.func_evaluations / self.budget)\n\n        return self.global_best_position", "name": "AdaptiveParticleSwarmOptimizationQuantum", "description": "Adaptive Particle Swarm Optimization with Quantum-Inspired Perturbations (APSO-QIP): Combines adaptive velocity updates and quantum-inspired perturbations to improve exploration and convergence in high-dimensional spaces.", "configspace": "", "generation": 74, "fitness": 0.1856597575510466, "feedback": "The algorithm AdaptiveParticleSwarmOptimizationQuantum got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "41691c4c-9697-4067-a84f-04d28a640c66", "metadata": {"aucs": [0.4068761885771385, 0.12654952813757048, 0.4061137179675838, 0.4240063672464326, 0.2794785152537743, 0.15739098890150072, 0.415550788715747, 0.4054503647690231, 0.4641435829662297, 9.999999999998899e-05, 0.04680314778580652, 9.999999999998899e-05, 0.0005616950784704811, 0.017220065048206723, 0.03092659854476898, 0.047021713203689086, 9.999999999998899e-05, 0.033451200673660475, 0.1174895076873882, 0.09491420106237947, 0.08373645485663728, 0.11537806849550436, 0.09725754506918294, 0.09962092604641315, 0.07214732047207817, 0.02792079222412469, 0.0530864736019101, 0.09467153749523383, 0.11858277145880924, 0.09474959518611015, 0.12284479613568966, 0.04509440448932367, 0.025353258358782327, 0.10697921893525275, 0.07536962659471158, 0.10985547161092013, 0.9944526072357533, 0.9929530614478462, 0.9953015656113853, 0.9909010556193921, 0.9925240675147254, 0.9896742076492131, 0.9347191643322588, 0.993353381901688, 0.9804201656935129, 0.26031397252294075, 0.11366458543499014, 0.046585743055908124, 0.2752927750768359, 0.2984485062898824, 0.28822640329281934, 0.08416747159628102, 0.052033359649834576, 0.16282462341991555, 0.1705336239505767, 0.17065362469307443, 0.17017465408101506, 0.20399126563014292, 0.20496154651164378, 0.20071494678624047, 0.06820653809562005, 0.1161733413856042, 0.32012179896385673, 0.10491617566295242, 0.16699413392597529, 0.14235791021524058, 9.999999999998899e-05, 0.16293594725416716, 0.025113265907253268, 9.999999999998899e-05, 9.999999999998899e-05, 0.16312123188679195, 0.14367774196219452, 0.04983950617703248, 0.1425736285576048, 0.15866344200111693, 0.15665171910971243, 0.14603291452009293, 0.15982139697904663, 0.02964701339301068, 0.1567528428109305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15710711266633137, 0.029019706671466694, 0.09275674827151559, 0.012828111041231938, 9.999999999998899e-05, 0.08356798723639569, 0.11179624654367248, 0.04714846318117394, 0.011802188549906556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03597324763045018, 9.999999999998899e-05, 0.051194199358446935, 0.03070484515951033, 0.0001786401781508351, 0.06846567821282246, 0.100204073903988, 9.999999999998899e-05, 0.08603352523795404, 0.4314939338176015, 0.4192535830905192, 0.3873974220315879, 0.39263856799687413, 0.3840514919007354, 0.20939954400480143, 0.4076970558616746, 0.3822394829503112, 0.399264112463698, 0.05778836608991189, 0.0725861368222166, 0.029530589393955586, 0.10600779133220861, 0.05232912108591248, 0.11360732618004532, 0.1008349784469057, 0.09609431471740804, 0.08980550732707338, 0.23133341930195395, 0.1556266895674191, 0.14753276976205232, 0.22873611046930542, 0.2013173611104888, 0.18222319827286526, 0.14152998129188055, 0.10068399312115017, 0.20750800263463476, 0.29317198935685684, 0.3108238533318809, 0.22667839783303445, 0.29960812452081687, 0.21749492311599838, 0.2927027615003067, 0.20839451559428857, 0.20149888838345265, 0.14065498445617775, 0.16047247175286317, 0.14883333220861517, 0.1687205161546823, 0.22914958326099755, 0.1723098527006921, 0.19202571057296547, 0.14946836180459266, 0.1462803131367637, 0.07461262199262964, 0.19222450235858168, 0.1851011403639189, 0.2143556933631745, 0.18597435191116907, 0.20267844458289208, 0.2303590484138648, 0.21965559661808476, 0.1857621385312459, 0.21017072935107517, 0.2123290599848866, 0.19996306021171495, 0.1997963347697188, 0.20400134021942562, 0.06182574553220854, 0.17483247100084387, 0.21791885987644943, 0.19504578873886957, 0.2456200258810991, 0.6056776726627601, 0.6161849597475333, 0.15437849859133168, 0.6256413483136871, 0.19954946142719232, 0.2008431858552885, 0.15373349391052504, 0.11371711479548396, 0.162709817479616, 0.1648404500388415, 0.21212758644908714, 0.5058689555123077, 0.19107299354123275, 0.16932853367979805, 0.2124106774975434, 0.10412181540772236, 0.1669975525828744, 0.4928479311747259, 0.17748705888060412, 0.1986437451891777, 0.18912964889232187, 0.1767473950726295, 0.21454035339637256, 0.175913783048549, 0.22037065307619907, 0.19356223488792557, 0.19467107508343406, 0.03890515381171189, 0.0918535342033896, 0.08704916830379938, 0.10608988599024483, 0.04683630806974182, 0.08832545608283726, 0.07821089240737567, 0.07138344218364923, 0.08314527504737268]}, "mutation_prompt": null}
