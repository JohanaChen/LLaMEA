{"id": "b783384c-e7d2-4998-86fa-ebe9af106d1e", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "e463907b-4109-444e-849c-a70fffb6bea2", "solution": "import numpy as np\n\nclass AQIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.evaluations = 0\n\n    def quantum_crossover(self, parents):\n        alpha = np.random.uniform(0, 1, self.dim)\n        child_1 = alpha * parents[0] + (1 - alpha) * parents[1]\n        child_2 = (1 - alpha) * parents[0] + alpha * parents[1]\n        return np.clip(child_1, self.lower_bound, self.upper_bound), np.clip(child_2, self.lower_bound, self.upper_bound)\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        while self.evaluations < self.budget:\n            fitness = np.array([self.evaluate(func, ind) for ind in self.population])\n            if np.min(fitness) < self.best_fitness:\n                self.best_fitness = np.min(fitness)\n                self.best_solution = self.population[np.argmin(fitness)]\n\n            selected_indexes = np.random.choice(self.pop_size, self.pop_size, replace=True)\n            selected_parents = self.population[selected_indexes]\n            new_population = []\n            \n            for i in range(0, self.pop_size, 2):\n                p1, p2 = selected_parents[i], selected_parents[i+1]\n                offspring_1, offspring_2 = self.quantum_crossover((p1, p2))\n                new_population.extend([offspring_1, offspring_2])\n\n            self.population = np.array(new_population)\n        \n        return self.best_solution", "name": "AQIEA", "description": "Adaptive Quantum-Inspired Evolutionary Algorithm (AQIEA) leveraging quantum superposition and adaptive crossover for efficient global search.", "configspace": "", "generation": 1, "fitness": 0.05785431961432185, "feedback": "The algorithm AQIEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "b783384c-e7d2-4998-86fa-ebe9af106d1e", "metadata": {"aucs": [0.18805253675050915, 0.09447512824468485, 0.16978601992098752, 0.08952233024927114, 0.1304117903181885, 0.08403098030150591, 0.07795415841203734, 0.1312079479893995, 0.07936416527092638, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013351380831280624, 0.04631268330576299, 0.02257007807558853, 0.03937650027291384, 0.0012186513362246743, 0.04510545267878985, 0.02642033101789898, 9.999999999998899e-05, 0.016093787538117077, 0.011769498863530181, 0.006779025429883401, 0.028379389947448597, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005481317217209791, 0.045244091224792116, 0.033667547960281485, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.06399777505953497, 9.999999999998899e-05, 9.999999999998899e-05, 0.06289234028630453, 0.025942749901328388, 0.020294426463839388, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10059889705811254, 0.07774770277261467, 0.08372021825491338, 0.035838714204967204, 0.02725496812965944, 9.999999999998899e-05, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011927254931322961, 9.999999999998899e-05, 0.007272635021930762, 0.02838731396148264, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01761887293882558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059084332545630835, 0.03235415929308916, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207864511858894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16168193664340547, 0.1127770535235475, 0.18031894480214228, 0.09824874202193046, 0.10532591541896275, 0.09580441870675127, 0.1595507595645309, 0.13402369550830773, 0.1422895758629309, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.01577556105846467, 0.01759993274736349, 0.02404225822436934, 9.999999999998899e-05, 0.0267656688986897, 0.1610860207216407, 0.06735693451091307, 0.10223047843916577, 0.09855305120349966, 0.10852972522114013, 0.10290830486256108, 0.10208534929408286, 0.10273034283662363, 0.08945528527368118, 0.1133226723391132, 0.0962505644704219, 0.11872680407204061, 0.15472130142215124, 0.15492092081938935, 0.15091462047121118, 0.114204217673045, 0.17377774300845283, 0.11015905207018384, 0.06210768795789556, 0.04390684572789838, 0.049547966171422764, 0.09203859577470996, 0.08952683353885693, 0.07174733550009715, 0.05648699256316181, 0.09386031173166853, 0.04019352624561778, 0.2167243592222866, 0.11664297108427768, 0.16709014462635097, 0.1615498450667321, 0.13882175737398905, 0.15609513500412353, 0.1925955207904081, 0.12443755277541435, 0.1532148440379968, 9.999999999998899e-05, 0.030052219686765635, 0.12415842299139335, 0.11065890811442891, 0.14339127682344166, 0.040567559496365035, 0.13078876142977847, 0.16167015405133733, 0.07121238892757742, 0.10519548191718131, 0.138298506006294, 0.08639213752774844, 0.09025839551855475, 0.1207914665021157, 0.13653596291863557, 0.07245568600050101, 0.09643604708838482, 0.06449867938042386, 0.07280379334291043, 0.07172945235273143, 0.09907650820917024, 0.11504906145517013, 0.07537633854021786, 0.20843159816309687, 0.10914617491925926, 0.06572870680668152, 0.06675202965094262, 0.1639951521361438, 0.16373122628090164, 0.1727124513626619, 0.15101205553802033, 0.15460829692902112, 0.15855071655819353, 0.1831752230775654, 0.15971683470092413, 0.15985006171903837, 0.04034302727738681, 0.044528775001586696, 0.05126492004247718, 0.04533679397967916, 0.059081966740327285, 0.06696058574463837, 0.05380805034642577, 0.029380829890874205, 0.0525184265047588]}, "mutation_prompt": null}
{"id": "4286a24a-8b2f-4896-afe6-0ae94e09752a", "solution": "import numpy as np\n\nclass SAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.best_personal_positions = np.copy(self.population)\n        self.best_personal_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        w_max, w_min = 0.9, 0.4\n        c1, c2 = 2.0, 2.0\n        v_max = (self.upper_bound - self.lower_bound) * 0.1\n\n        while self.evaluations < self.budget:\n            inertia_weight = w_max - (w_max - w_min) * (self.evaluations / self.budget)\n\n            for i in range(self.pop_size):\n                fitness = self.evaluate(func, self.population[i])\n                \n                if fitness < self.best_personal_fitness[i]:\n                    self.best_personal_fitness[i] = fitness\n                    self.best_personal_positions[i] = self.population[i]\n\n                if fitness < self.best_global_fitness:\n                    self.best_global_fitness = fitness\n                    self.best_global_position = self.population[i]\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = c1 * r1 * (self.best_personal_positions[i] - self.population[i])\n                social_component = c2 * r2 * (self.best_global_position - self.population[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], -v_max, v_max)\n                \n                # Update positions\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n        \n        return self.best_global_position", "name": "SAPSO", "description": "Self-Adaptive Particle Swarm Optimization (SAPSO) integrating dynamic inertia and velocity constraints for enhanced exploration and exploitation.", "configspace": "", "generation": 2, "fitness": 0.26903281572174653, "feedback": "The algorithm SAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "e463907b-4109-444e-849c-a70fffb6bea2", "metadata": {"aucs": [0.613048302533027, 0.5866118721961213, 0.6468940771787213, 0.6243071352766245, 0.6241004996520892, 0.6119863431374437, 0.5706309853097954, 0.6466707599931357, 0.5515274006180726, 0.24752529815173407, 0.2576052332913136, 0.18680997406425937, 0.32343972875197624, 0.34468064129114906, 0.3010086614382308, 0.22448938528393914, 0.21500275307770433, 0.17012914847779137, 0.11971962466246955, 0.2354175284763923, 0.27171848471490323, 0.14678494075482562, 0.19804789138721723, 0.14790301504826642, 0.1182894095971826, 0.14910647999712834, 0.29254031850970463, 0.10688346001862736, 0.11034385279301917, 0.09985880120470936, 0.1284859606966272, 0.12114757944496435, 0.11677819085769825, 0.11030430321551854, 0.10234023558103711, 0.15312143846061832, 0.9700614810958325, 0.9701250095263114, 0.9722402279865598, 0.965211911004327, 0.9727716720741917, 0.959812892999024, 0.968291360106689, 0.9674144152159785, 0.9730162713318938, 0.3336634116403713, 0.3797193194493407, 0.2941493921640943, 0.38876256954036925, 0.37206442365014925, 0.3580550483207562, 0.3267751850046714, 0.34297333234352223, 0.3145483768646222, 0.5182364473524357, 0.21874858674193598, 0.5085044054794061, 0.19313387535951743, 0.2330762090832118, 0.2017479628165333, 0.5740033930054103, 0.5716092523037095, 0.6165349552493349, 0.16711162875180563, 0.16670123929453895, 0.0936667508560175, 0.13383434085830703, 0.09643667591255978, 0.1192366802425393, 0.16406694765728047, 0.15155157291463017, 0.1589864597450924, 0.1812731811047501, 0.15827020719783047, 0.11697968799050373, 0.16402986348000703, 0.12529788038466017, 0.1274728265391959, 0.2076891031163406, 0.098536325484052, 0.19202361911103405, 0.04218792947592587, 0.03514029960842402, 0.0030747681424647677, 9.999999999998899e-05, 0.05208408652088581, 9.999999999998899e-05, 0.017148834609685415, 0.05974553240628633, 9.999999999998899e-05, 0.20849420772046423, 0.05892332274840151, 0.11738795998568019, 0.09868495916652886, 0.08905693406181858, 0.041468113033420906, 0.16553723423035294, 0.08543295639116222, 0.12026749805887649, 0.07653802323775305, 0.0875801996148774, 0.06385101849532016, 0.06740807148337047, 0.042921460609654405, 0.08807885742914023, 0.10030297942747535, 0.05323874553508434, 0.03215782472290318, 0.15823325673380895, 0.09706244580904255, 0.12092034794300177, 0.11051895186085381, 0.12471247982187428, 0.06670952936919816, 0.07937479436093109, 0.07264536965062385, 0.11566444506352269, 0.43977088519411545, 0.4174347863320008, 0.4352948025803688, 0.4810941196411592, 0.439022680765382, 0.41117195460711553, 0.4572413689257764, 0.4258390122682615, 0.44502194061162426, 0.10163033512128672, 0.122036049786998, 0.12571737399548255, 0.08965691579919766, 0.12418300745334931, 0.14065631677579515, 0.12995409992123041, 0.16136719505490982, 0.14236028441429427, 0.36357973476375915, 0.25966694558392034, 0.35623009492288105, 0.2972880119059057, 0.23367512561357562, 0.21680968595215722, 0.24004687991991958, 0.22792658955149925, 0.2388565647704718, 0.3370142894460876, 0.33380639237413, 0.32710838119605157, 0.2887908829583412, 0.3380924052230795, 0.37715412659504444, 0.3263162083972797, 0.3669680183429668, 0.33957293448363235, 0.20739694046141166, 0.20589457757897112, 0.22452678780846647, 0.2616079280760696, 0.2642358380774018, 0.262213111737329, 0.20549131693371314, 0.2425053829521232, 0.22345946261948946, 0.23157967503506938, 0.18945921239563746, 0.2214708051753007, 0.26108088299566723, 0.20576401058706617, 0.22564629221226096, 0.20564392716376112, 0.21182352388384507, 0.22151015512050864, 0.21147982387040654, 0.4336439106500807, 0.20570236286873256, 0.20969556223896202, 0.19258389044208168, 0.2179341473485389, 0.1972412017538414, 0.2107077657779861, 0.20151048473676514, 0.69812610637815, 0.1259317505247043, 0.1856702817803333, 0.7211538100476899, 0.19699080371736089, 0.7197149397030114, 0.7346562193977489, 0.1689894933285141, 0.7364383674036066, 0.5620734203088942, 0.1558539077557436, 0.11151279992835827, 0.6587020428626862, 0.15336314767725034, 0.21069847683841547, 0.45638409119569623, 0.1658334460101374, 0.5657127604570084, 0.1880182550845353, 0.21504281695719563, 0.2061985012260703, 0.19703433506013335, 0.19223416378804992, 0.21252537355943046, 0.18270620156773076, 0.19035680420263723, 0.20839987517075853, 0.1339475365156979, 0.09439062424383737, 0.08603972843049235, 0.09565569379533534, 0.08940535434199559, 0.11416386813643897, 0.11494639195943857, 0.09613741278955346, 0.13938448117787883]}, "mutation_prompt": null}
{"id": "674e8550-b088-4c29-bf8e-57eca6df4165", "solution": "import numpy as np\n\nclass QIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(0, 1, (self.pop_size, self.dim, 2))  # Quantum bit representation\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.evaluations = 0\n\n    def quantum_to_real(self, qbit):\n        return self.lower_bound + (self.upper_bound - self.lower_bound) * np.square(qbit[:, 0])\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        theta = 0.1  # Rotation angle for quantum gate\n\n        while self.evaluations < self.budget:\n            # Collapse quantum population to real values\n            real_population = np.apply_along_axis(self.quantum_to_real, 2, self.population)\n\n            # Evaluate population\n            for i in range(self.pop_size):\n                fitness = self.evaluate(func, real_population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = real_population[i]\n\n            # Quantum rotation gate update\n            for i in range(self.pop_size):\n                for j in range(self.dim):\n                    if real_population[i, j] < self.best_solution[j]:\n                        self.population[i, j, 0] = self.population[i, j, 0] * np.cos(theta) - self.population[i, j, 1] * np.sin(theta)\n                        self.population[i, j, 1] = self.population[i, j, 0] * np.sin(theta) + self.population[i, j, 1] * np.cos(theta)\n                    else:\n                        self.population[i, j, 0] = self.population[i, j, 0] * np.cos(-theta) - self.population[i, j, 1] * np.sin(-theta)\n                        self.population[i, j, 1] = self.population[i, j, 0] * np.sin(-theta) + self.population[i, j, 1] * np.cos(-theta)\n\n        return self.best_solution", "name": "QIEA", "description": "Quantum-Inspired Evolutionary Algorithm (QIEA) employing a quantum bit representation and rotation gate for enhanced diversity and convergence.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('too many indices for array: array is 1-dimensional, but 2 were indexed').", "error": "IndexError('too many indices for array: array is 1-dimensional, but 2 were indexed')", "parent_id": "4286a24a-8b2f-4896-afe6-0ae94e09752a", "metadata": {}, "mutation_prompt": null}
{"id": "6cf5973f-7abb-47e9-9883-0f885066b968", "solution": "import numpy as np\n\nclass DE_ACM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n\n    def evaluate(self, func, solution):\n        fitness = func(solution)\n        self.evaluations += 1\n        return fitness\n\n    def __call__(self, func):\n        np.random.seed(42)\n        F_min, F_max = 0.4, 0.9\n        CR_min, CR_max = 0.1, 0.9\n\n        while self.evaluations < self.budget:\n            F = F_min + (F_max - F_min) * np.random.rand()\n            CR = CR_min + (CR_max - CR_min) * np.random.rand()\n            \n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        trial_vector[j] = mutant_vector[j]\n\n                trial_fitness = self.evaluate(func, trial_vector)\n\n                if trial_fitness < self.best_global_fitness:\n                    self.best_global_fitness = trial_fitness\n                    self.best_global_position = trial_vector\n\n                if trial_fitness < self.evaluate(func, self.population[i]):\n                    self.population[i] = trial_vector\n\n        return self.best_global_position", "name": "DE_ACM", "description": "Differential Evolution with Adaptive Crossover and Mutation (DE-ACM) leverages adaptive control parameters for robust convergence across diverse problem landscapes in BBOB.", "configspace": "", "generation": 4, "fitness": 0.23605201597033526, "feedback": "The algorithm DE_ACM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "4286a24a-8b2f-4896-afe6-0ae94e09752a", "metadata": {"aucs": [0.6874328108692707, 0.6810441716188074, 0.7179060110189577, 0.7118895340394696, 0.7126810158829295, 0.7151500753423823, 0.699063228239545, 0.6884999509023267, 0.7027392526240013, 0.4569586770532993, 0.4375601654546918, 0.40768761981201607, 0.43115797534194533, 0.4253334903700071, 0.4364149452773822, 0.4492040840064575, 0.4528696759052534, 0.4509880836903283, 0.13189760805913375, 0.1428734255786236, 0.17042658437171265, 0.14435713740019795, 0.12333505708841608, 0.1351281928278062, 0.1253857400748769, 0.1427734453582854, 0.1731611008802465, 0.11885144894246458, 0.12617141776589247, 0.13778566785238566, 0.10284993367947248, 0.13645753719828624, 0.14428719765119713, 0.1344511406266291, 0.1172950420328065, 0.12036327677855174, 0.9439992136474988, 0.9060256609738686, 0.9385836886909174, 0.8952103081076334, 0.9272718027964261, 0.921262454301935, 0.9343716354370774, 0.9653437060137648, 0.9286430096436235, 0.25300780050884997, 0.2467944887250696, 0.2625948291101411, 0.2793514478420548, 0.2429555305685107, 0.26151288904873604, 0.2680953490164151, 0.26821182746620076, 0.26243095654389004, 0.2931949606141988, 0.2347604872172867, 0.2538298573964809, 0.2642752984419837, 0.29077350452434725, 0.29222492864768324, 0.41367556046327325, 0.30277853340514993, 0.37814970033338235, 0.1511274333040905, 0.15990592386359692, 0.16141393383722202, 0.13633250345550318, 0.15283366997576908, 0.1491796332566, 0.15208366653673966, 0.12609560011390497, 0.166072429361094, 0.08382792806818418, 0.09729320350595205, 0.1603903660095588, 0.16768378330242517, 0.1723188580378051, 0.12362830621126564, 0.11288793212878612, 0.12933397298512028, 0.1357258874747086, 0.020600370909062415, 0.00826485385433029, 0.01218575441852976, 0.012675502011852968, 9.999999999998899e-05, 0.005672893461008743, 0.00966491549796955, 0.003953545349531851, 0.011638670876344626, 0.07918160198432511, 0.08094046753728812, 0.10743927540593579, 0.07773923673231875, 0.08377832271767971, 0.11577179373176927, 0.14494908028607956, 0.12917201950337243, 0.1675152390422654, 9.999999999998899e-05, 0.0025483501743784887, 0.013602513225102975, 0.001676319634296708, 0.009553207102358074, 0.005799782045359803, 0.0003982123327230802, 0.010048344893148875, 0.029969704813462172, 0.09782695747628567, 0.12031892070413142, 0.09945207490842511, 0.11738736440335618, 0.10501740750839506, 0.12102527087298443, 0.12314806965337954, 0.09648959751343833, 0.1102242911915653, 0.45779099101958143, 0.448310159537471, 0.46030643220893397, 0.4417984919871063, 0.4538420805953407, 0.4532543493485256, 0.45169168620391753, 0.45359042876401723, 0.4654149262326437, 0.09286337648001242, 0.0988592947218302, 0.0771315984742087, 0.10431473814582537, 0.08098417635735711, 0.08710421128063373, 0.09735689173565609, 0.08782310151159467, 0.07707169821977145, 0.13477385630153316, 0.12696794581696214, 0.17770173265462275, 0.13649821416225372, 0.14825674547719503, 0.12534928071277396, 0.12061515032739278, 0.11924176900900707, 0.13193498133038917, 0.2720927564744281, 0.24169103289410754, 0.2814360098684521, 0.2577539765622904, 0.294428021981603, 0.2735806573026385, 0.2942673636313441, 0.30933483449404375, 0.2999297618700604, 0.19417125476988717, 0.1849533420507602, 0.19542466458870167, 0.16693463994178814, 0.1771608190484243, 0.17572305314459713, 0.20981629739675367, 0.23021924625006607, 0.18518790175638278, 0.19494127371348846, 0.16873615585151425, 0.1725164561399648, 0.1678057318418612, 0.18044735861851546, 0.1895303074959236, 0.16680157298647014, 0.17628318328794734, 0.18610119972683492, 0.22130302207786545, 0.19009920143834302, 0.19653216100491933, 0.18478283889247882, 0.1921525199757883, 0.19692321238678845, 0.18326571329848762, 0.19139201262367078, 0.20111252815849157, 0.45374111069233836, 0.32201745655264047, 0.1624121186523515, 0.568908047780442, 0.1690629848806855, 0.16641478762303974, 0.14979946861754234, 0.1667465417575782, 0.13899533384433127, 0.33221363827022465, 0.19051182352335438, 0.20148870838814248, 0.18204031002933563, 0.17433339463418274, 0.23519562644746728, 0.21300655394638524, 0.20459283507421222, 0.20381007222644698, 0.16650713970255415, 0.185246282377579, 0.177828592280454, 0.1746859543909437, 0.1740442250089178, 0.16884314179876614, 0.1747935954337485, 0.1884564561576222, 0.19149899084819832, 0.0648376904009994, 0.07037078373671735, 0.06694070249118211, 0.07326594875480663, 0.07882575469443598, 0.06264421225132322, 0.07096781542154418, 0.07267301188928921, 0.0781078325471608]}, "mutation_prompt": null}
{"id": "cf0b8e9d-493a-4e51-af3e-4699aa767f0a", "solution": "import numpy as np\n\nclass ASOMA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.best_personal_positions = np.copy(self.population)\n        self.best_personal_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def migrate(self):\n        # Migrate individuals to new random positions\n        for i in range(self.pop_size):\n            if np.random.rand() < 0.1:  # Probability of migration\n                self.population[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                self.velocities[i] = np.random.uniform(-1, 1, self.dim)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        w_max, w_min = 0.9, 0.4\n        c1, c2 = 2.0, 2.0\n        v_max = (self.upper_bound - self.lower_bound) * 0.1\n\n        while self.evaluations < self.budget:\n            inertia_weight = w_max - (w_max - w_min) * (self.evaluations / self.budget)\n\n            for i in range(self.pop_size):\n                fitness = self.evaluate(func, self.population[i])\n                \n                if fitness < self.best_personal_fitness[i]:\n                    self.best_personal_fitness[i] = fitness\n                    self.best_personal_positions[i] = self.population[i]\n\n                if fitness < self.best_global_fitness:\n                    self.best_global_fitness = fitness\n                    self.best_global_position = self.population[i]\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = c1 * r1 * (self.best_personal_positions[i] - self.population[i])\n                social_component = c2 * r2 * (self.best_global_position - self.population[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], -v_max, v_max)\n                \n                # Update positions\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n            # Apply migration strategy\n            self.migrate()\n        \n        return self.best_global_position", "name": "ASOMA", "description": "Adaptive Self-organizing Migrating Algorithm (ASOMA) incorporating adaptive velocity adjustment and migration strategies for diverse exploration and intensified exploitation.", "configspace": "", "generation": 5, "fitness": 0.20048115569207461, "feedback": "The algorithm ASOMA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "4286a24a-8b2f-4896-afe6-0ae94e09752a", "metadata": {"aucs": [0.37610831475822115, 0.35065515762982213, 0.34316498130810813, 0.33751584556310577, 0.3377723421569021, 0.35250417550080737, 0.3863231562716315, 0.3566205684209758, 0.3816422724763828, 0.005998774439944232, 0.009655673171529822, 9.999999999998899e-05, 0.0018422332799775676, 0.01537213227266343, 0.00037625421809572845, 9.999999999998899e-05, 0.0034424835398525477, 0.005135269559133349, 0.08775437359614657, 0.09188940872105411, 0.09360005734774368, 0.10054220449251827, 0.10554645647648797, 0.12070183828793657, 0.101106763325983, 0.07307511548007439, 0.10376839814550898, 0.0816307693531989, 0.1086613636963566, 0.09202991498317792, 0.08081420715979892, 0.09263351186779378, 0.09123889446150824, 0.08646704635593883, 0.07367766781929508, 0.10874071290639387, 0.9693332004376682, 0.9713722180852513, 0.9697960922350141, 0.9654750945195268, 0.9708868714335396, 0.964453745759086, 0.9759385505468207, 0.9701481161095085, 0.9750658640486314, 0.20845522521869075, 0.21489330498366266, 0.2034539337908079, 0.2278339415029793, 0.24501147058190176, 0.21177969683986797, 0.21792945876900793, 0.2166388491221649, 0.23144633440935758, 0.2679077036941778, 0.20889187113253893, 0.2487079807887771, 0.2566538872973637, 0.22754061493327382, 0.20879273500978957, 0.29526056791464683, 0.20818026432105896, 0.22381261759231208, 0.08544975528726795, 0.12816172734808517, 0.12851336978101624, 0.13035342988713494, 0.1294192331350128, 0.13249280088198268, 0.13521768398803957, 0.127227566458729, 0.1206743178023788, 0.14220932528780506, 0.16040594045957135, 0.12298854507496304, 0.13534775500178697, 0.1174642463071277, 0.119311618849675, 0.13037457071144654, 0.09812735682383777, 0.15139843238802675, 0.005435642752591785, 9.999999999998899e-05, 0.002452483055977117, 9.999999999998899e-05, 0.0047712050367748615, 0.00016424466755338152, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17516861073739087, 0.1633787155097065, 0.17931883863253695, 0.10089401546653831, 0.11444034730559394, 0.07276407942458796, 0.08407814456055362, 0.11335953751086125, 0.11292507450925116, 9.999999999998899e-05, 0.0021769677162423173, 9.999999999998899e-05, 0.006140753398565679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04723408797074713, 0.04864224032288167, 0.05893368318022896, 0.07688476629166763, 0.036790717432179765, 0.06607363063097638, 0.04594688896855492, 0.0544041601124895, 0.059829369187538006, 0.32710254401169203, 0.349995332462672, 0.34454777301400497, 0.32097926031164303, 0.35671534305199004, 0.3302427532739588, 0.3167176391446539, 0.39519143372454224, 0.3548709206681705, 0.09247650480106406, 0.10539915569981295, 0.09337299902537599, 0.09377391875641239, 0.0969880024634977, 0.12032849868699469, 0.12784665207187884, 0.10497892794759267, 0.08430886073050892, 0.14109570802322646, 0.15165950418083318, 0.139335074082223, 0.19998450696527836, 0.15634656682870118, 0.13697831244279912, 0.1872526886073882, 0.16249001527755058, 0.18448219514308928, 0.24867167155952374, 0.25811881858446084, 0.2333602093516195, 0.2505986442993605, 0.2384117145570649, 0.25012328907253145, 0.2541394193658262, 0.2521944336494073, 0.2346360448428888, 0.21298250527386497, 0.1658288068273478, 0.20149712532598707, 0.18437742430093573, 0.18226074992791563, 0.18304524422185708, 0.17099671152844786, 0.18679581099926656, 0.17325137002101132, 0.21094728007487884, 0.22393504930944896, 0.1960168637241282, 0.21713474950116252, 0.22727489034485948, 0.2173787756881541, 0.21363929004705184, 0.22786403515233544, 0.21589881842384961, 0.18714825277638758, 0.1826086950973328, 0.18590746810201664, 0.18507524511978013, 0.1895648256550866, 0.19048425843548067, 0.17971463876001048, 0.194105462663403, 0.17885073575011157, 0.5091386590203941, 0.18088956558380564, 0.1845342616944754, 0.42572169983973107, 0.19533648919630775, 0.18692374795668432, 0.47439628502888576, 0.19620533800002782, 0.5222958133565858, 0.4701430393432191, 0.2765827272623045, 0.3706149858033514, 0.370475091405739, 0.17798636700440618, 0.43754047591716794, 0.3621606679675564, 0.3973234202591559, 0.40586422812098355, 0.17734978716977656, 0.18154682363562435, 0.18465943769430027, 0.19146563603140154, 0.1801429835642735, 0.17370521612225454, 0.1852608710714737, 0.18448111639435982, 0.20251046900293057, 0.08302478668302538, 0.08249385306380463, 0.07761735921978985, 0.08534476480227005, 0.08816568997211993, 0.0802537127704358, 0.09338052462763857, 0.0970130192387132, 0.08866586595341908]}, "mutation_prompt": null}
{"id": "ebd7b6d3-79fb-4a13-8660-da42f82e78b9", "solution": "import numpy as np\n\nclass ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 40\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        F = 0.5  # Differential weight\n        CR = 0.9  # Crossover probability\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [index for index in range(self.pop_size) if index != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                crossover_vector = np.random.rand(self.dim) < CR\n                trial_vector = np.where(crossover_vector, mutant_vector, self.population[i])\n\n                trial_fitness = self.evaluate(func, trial_vector)\n                current_fitness = self.evaluate(func, self.population[i])\n\n                if trial_fitness < current_fitness:\n                    self.population[i] = trial_vector\n                    current_fitness = trial_fitness\n\n                if current_fitness < self.best_global_fitness:\n                    self.best_global_fitness = current_fitness\n                    self.best_global_position = self.population[i]\n\n            # Adaptive adjustment of F and CR based on progress\n            if np.random.rand() < 0.1:\n                F = 0.5 + 0.3 * np.sin(self.evaluations * np.pi / self.budget)\n                CR = 0.9 * np.cos(self.evaluations * np.pi / self.budget) + 0.1\n\n        return self.best_global_position", "name": "ADE", "description": "Adaptive Differential Evolution (ADE) incorporating self-adjusting mutation and crossover rates for robust convergence across diverse problem landscapes.", "configspace": "", "generation": 6, "fitness": 0.208720157395151, "feedback": "The algorithm ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.17.", "error": "", "parent_id": "4286a24a-8b2f-4896-afe6-0ae94e09752a", "metadata": {"aucs": [0.5065705794541262, 0.5085306003339012, 0.4989980350312808, 0.4780292168908169, 0.48622343673561863, 0.510136036866798, 0.5210763878991936, 0.4916587130621016, 0.5426408828991056, 0.26981250542074964, 0.2530760711330957, 0.24862530222563872, 0.2329611510965568, 0.27225611283869144, 0.2474010837333538, 0.25819994538627766, 0.22729734943136026, 0.2090092429582301, 0.10023527534905274, 0.1145205564101468, 0.1154303621633822, 0.11258007813428961, 0.10132125064342323, 0.0972218228318743, 0.10297668960469986, 0.12205018456963845, 0.10444688309374195, 0.0944155665358496, 0.09669163264584935, 0.09221762032964365, 0.1132491492531773, 0.11607514769486338, 0.09714151347533917, 0.10107477571017298, 0.08288127848970073, 0.09235901843551053, 0.7387043699828844, 0.9603166430701898, 0.8125218560403257, 0.739844320802422, 0.7691130785341773, 0.775003671300923, 0.7784508071974304, 0.7574172593811326, 0.8136082487350352, 0.23626798009844796, 0.23047792420492996, 0.16813501251847918, 0.20703370104013552, 0.15686194668116804, 0.2031583993151398, 0.22307431645494658, 0.22255856888892245, 0.23141843264884887, 0.2720540465477428, 0.3512479083841732, 0.25319916074901416, 0.28739584875724034, 0.2655486339597143, 0.28020112958376786, 0.2749111312251058, 0.30910671116751154, 0.27082501511072243, 0.1509894777327585, 0.12869578545743587, 0.1538835864225674, 0.15166864971030247, 0.13931551088660565, 0.1436927395894747, 0.1540429717164694, 0.14333220531992252, 0.14113761041875805, 0.14318024858863465, 0.1308853758246793, 0.09794498536135887, 0.127397587184497, 0.1324001055055154, 0.12666712460358143, 0.16436000383624705, 0.1549361090870549, 0.13510768443395682, 0.01058288894816084, 0.0641126050459272, 0.04130959798627665, 0.017070081247776203, 0.027301811073270565, 0.04078143647487509, 0.06185568459461688, 0.0262614387648078, 0.02815137767184972, 0.23512165183240663, 0.16821559416764953, 0.18392110790348193, 0.25787815507091516, 0.2502679689939369, 0.17860525400225102, 0.1809549224412471, 0.16646368729080818, 0.21962390900016227, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10584759148610501, 0.09818503268231071, 0.09081692654378726, 0.085856044062533, 0.10647527054775041, 0.09948877124293287, 0.08965497390323451, 0.12242524521927334, 0.09844581128677621, 0.3700912167508039, 0.3980476556845022, 0.3983363171606088, 0.4109628968030613, 0.3989299722995724, 0.396721332390645, 0.41945327373071173, 0.4089550152624475, 0.42077364181941923, 0.08995980521809166, 0.0881175979528045, 0.08648454677882933, 0.0847867036391895, 0.06490587988866714, 0.08838009735681285, 0.0749316867713018, 0.06970454401432302, 0.08807133653580457, 0.12817696068013973, 0.13138009546243845, 0.1282675639867401, 0.14469539705555468, 0.1416387558977602, 0.13481506549916045, 0.12384358813588336, 0.14587986152010524, 0.12280436905593994, 0.26829096289545684, 0.2586897755586549, 0.24513875899693038, 0.26269217778267107, 0.19631074703334495, 0.25458118594296963, 0.26348477951438376, 0.28471193628891356, 0.26458467150506226, 0.1638707416562325, 0.20962025749643465, 0.2064859759440918, 0.17177015106532145, 0.1611466786739416, 0.1750558597508456, 0.16831032975644633, 0.2024261880817957, 0.1899282122010355, 0.18455172753711224, 0.1694356612201121, 0.18130290222231538, 0.21890643590788872, 0.1812930468216789, 0.2064675598358945, 0.2205580914402041, 0.18708096776835625, 0.17511043827116812, 0.18306548522502708, 0.1762849070258109, 0.1785739419485355, 0.18105572194457553, 0.17798505102102025, 0.18739420682607733, 0.1769538483356088, 0.1746736432584336, 0.17010829932813776, 0.16640789145540913, 0.2960713628021152, 0.14737765472671582, 0.24258522363078472, 0.21605403995573713, 0.15712099613262376, 0.16112179132604998, 0.1533035462082114, 0.17892228204330918, 0.4302844230109053, 0.24983095377299858, 0.25605291178992196, 0.33724562080824483, 0.20097774152084835, 0.32363876755315213, 0.26695934443211444, 0.20588268661454057, 0.20771745346252823, 0.18217104305513654, 0.18195753695997896, 0.18684182687320772, 0.18007086322974297, 0.16917365818049002, 0.1673690514412869, 0.1699663125421561, 0.1793173886039522, 0.17734873009427665, 0.06745984212774547, 0.09161120119803401, 0.07934491811201516, 0.07031742653394235, 0.06753025321631045, 0.07448074200184873, 0.07624918770869449, 0.07452865887202775, 0.06918397960902234]}, "mutation_prompt": null}
{"id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 7, "fitness": 0.4848866644255357, "feedback": "The algorithm EDE_AMS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.33.", "error": "", "parent_id": "4286a24a-8b2f-4896-afe6-0ae94e09752a", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "3791526e-671f-446d-919f-474969d0b3d4", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "d2d6485d-896b-4070-ab68-4f193571405b", "solution": "import numpy as np\n\nclass HAGPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_position = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.4 # Personal attraction coefficient\n        self.c2 = 1.4 # Global attraction coefficient\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            if fitness < self.personal_best_fitness[i]:\n                self.personal_best_fitness[i] = fitness\n                self.personal_best_position[i] = self.population[i]\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Update velocity\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best_position[i] - self.population[i]) +\n                                    self.c2 * r2 * (self.global_best_position - self.population[i]))\n                # Update position\n                self.population[i] += self.velocity[i]\n                # Crossover and Mutation\n                if np.random.rand() < 0.5:\n                    partner_idx = np.random.choice([idx for idx in range(self.pop_size) if idx != i])\n                    crossover_point = np.random.randint(1, self.dim)\n                    self.population[i][:crossover_point] = self.population[partner_idx][:crossover_point]\n                if np.random.rand() < 0.1:\n                    mutation_idx = np.random.randint(self.dim)\n                    self.population[i][mutation_idx] += np.random.normal(0, 1)\n\n                # Ensure bounds\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                fitness = self.evaluate(func, self.population[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_position[i] = self.population[i]\n                if fitness < self.global_best_fitness:\n                    self.global_best_fitness = fitness\n                    self.global_best_position = self.population[i]\n\n        return self.global_best_position", "name": "HAGPSO", "description": "Hybrid Adaptive Genetic Particle Swarm Optimization (HAGPSO) combining genetic algorithms' crossover and mutation with adaptive particle swarm dynamics for enhanced global and local search balancing.", "configspace": "", "generation": 9, "fitness": 0.15307796812016058, "feedback": "The algorithm HAGPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.2203041157717356, 0.2350072926443183, 0.2629907859099171, 0.2946739719829483, 0.31216640858761624, 0.27165917595121913, 0.2676546858351143, 0.21862281212114365, 0.28421682525481307, 0.0017191728275378626, 0.05633880844769812, 0.002788159064789797, 0.005644008859743366, 9.999999999998899e-05, 9.999999999998899e-05, 0.018453981521675433, 0.012237156750510403, 0.04157606487940724, 0.08801914361890084, 0.06503979141090133, 0.08073601815094666, 0.0534289649906774, 0.08667514692123113, 0.057958221007758715, 0.059222751813380325, 0.07109967570376885, 0.06408330287256414, 0.055751500491663886, 0.06470492852269072, 0.05946554769318013, 0.055523529717426356, 0.050974303532503984, 0.056552363335066747, 0.06284698571096692, 0.05565035057702061, 0.060702888089010254, 0.9889076839147893, 0.9907771431151554, 0.9915046588332846, 0.9906538849981876, 0.9888409359062837, 0.9911031181352988, 0.9891846425745008, 0.9886945904429875, 0.9872920049102147, 0.14799295242121446, 0.0810327610383722, 0.09380223806732413, 0.12359102105013753, 0.15406878332927787, 0.12777646245166285, 0.14688797292648492, 0.14609139000994764, 0.1267681080552937, 0.172091134733525, 0.16803029961982496, 0.14566382973625824, 0.18722173652101093, 0.168257943429027, 0.18258689595111655, 0.14316472385611723, 0.18554765793512784, 0.18702751636558068, 0.0139364072232121, 0.04798580794641605, 0.030120498705601517, 0.04695251417552082, 0.08118978214075268, 0.024695872754482706, 0.055300825288798094, 0.11930023369423237, 0.060594468755105324, 0.08367702195939497, 0.05295660279191927, 0.021187241964930714, 0.04833878684969839, 0.0385616234722056, 0.0466063949775124, 0.10874314652697936, 0.009581911473064086, 0.025462630896291194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06983292025715526, 0.01352726247351932, 0.06347595730722966, 0.004012250575199161, 0.022345265344033582, 0.0036582430939866573, 0.061994523931397594, 0.06338416382595313, 0.00992755475189333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03352838841553929, 0.013447962931585011, 0.01185481105811037, 0.022924585197300118, 0.024412256523595022, 0.024126283235289203, 0.04951840658557283, 0.031471517978877595, 0.04023724440499554, 0.24843571563450007, 0.23787282363099516, 0.23383290245930488, 0.2300812234896038, 0.2762805521778029, 0.24818250254507013, 0.24976290061203255, 0.25030213375213906, 0.23657999868355206, 0.08100122294164558, 0.08627695121734869, 0.07751790842206208, 0.05882572314863954, 0.060033550139230285, 0.07608764628972109, 0.04237657199643041, 0.0633185592363914, 0.06496391270147628, 0.14948267995486297, 0.15496581155844302, 0.13612275397412144, 0.1523513653150359, 0.16879736151662605, 0.15325960209797174, 0.15626825445041392, 0.14231009799337846, 0.15360016381339814, 0.2130357429822749, 0.1987920496615726, 0.24207614513627296, 0.18232844236483237, 0.1873189507841042, 0.19923984979960474, 0.195449461538154, 0.2241780087574783, 0.23141403828305562, 0.1395269693032758, 0.14174816615290797, 0.15055891291790302, 0.1334305629505831, 0.13032527054014587, 0.14023947815878057, 0.15698460699617867, 0.16924001375240294, 0.17054180833418453, 0.1629576424465502, 0.14506636263610084, 0.18008116207903535, 0.15484302401508743, 0.16917046229877708, 0.14410306608388623, 0.1789739433970271, 0.16525784197489357, 0.17926889460422968, 0.16448463146151515, 0.15817158244439, 0.16844607299700087, 0.16320268634050517, 0.17180132859587138, 0.17007323800891794, 0.1688623006103973, 0.16607701320978285, 0.16921039436071972, 0.3049340157621172, 0.13970969600030603, 0.15007336291597917, 0.3175316880057035, 0.16283249529397859, 0.16053938039221016, 0.1762188369850679, 0.19964592504033218, 0.3383297814823454, 0.16541936065355145, 0.16016347157070032, 0.25926039057087025, 0.17962272294897452, 0.18820656103773792, 0.1755410623380521, 0.1983639797207717, 0.20778630405992593, 0.20512903083417888, 0.1943169045007268, 0.19662205417669032, 0.1897357283122204, 0.18462558627021053, 0.17390814700213764, 0.1901083384446146, 0.183683226451007, 0.20162835112367383, 0.17970564343409712, 0.06051685027943565, 0.058882436088118606, 0.06130955671857519, 0.07590337372137035, 0.06911555110264622, 0.06259874506744834, 0.06465700231364557, 0.0644955356970115, 0.05842670152244556]}, "mutation_prompt": null}
{"id": "303479fa-8b44-42b9-8ec1-8161620226ba", "solution": "import numpy as np\n\nclass Q_SAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_behavior(self, position):\n        \"\"\"Simulate quantum behavior by randomly generating a new solution around the best global position.\"\"\"\n        quantum_position = np.copy(position)\n        mask = np.random.rand(self.dim) < 0.5\n        quantum_position[mask] = self.best_global_position[mask] + \\\n                                 np.random.uniform(-1, 1, np.sum(mask)) * np.abs(self.best_global_position[mask] - position[mask])\n        return np.clip(quantum_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.personal_best_fitness[i]:\n                self.personal_best_fitness[i] = self.fitness[i]\n                self.personal_best_positions[i] = self.population[i]\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                social = self.c2 * r2 * (self.best_global_position - self.population[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive + social\n\n                # Update position\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Quantum behavior to escape local optima\n                if np.random.rand() < 0.1:\n                    self.population[i] = self.quantum_behavior(self.population[i])\n                \n                # Evaluate new position\n                self.fitness[i] = self.evaluate(func, self.population[i])\n                if self.fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = self.fitness[i]\n                    self.personal_best_positions[i] = self.population[i]\n                if self.fitness[i] < self.best_global_fitness:\n                    self.best_global_fitness = self.fitness[i]\n                    self.best_global_position = self.population[i]\n\n        return self.best_global_position", "name": "Q_SAPSO", "description": "Quantum-inspired Self-adaptive Particle Swarm Optimization (Q-SAPSO) using quantum behaviors and self-adaptive parameters for enhanced convergence and diversity.", "configspace": "", "generation": 10, "fitness": 0.321539824426952, "feedback": "The algorithm Q_SAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.30.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9311132464220772, 0.9016512030838655, 0.9259868135561391, 0.18335244390688388, 0.9053835764916697, 0.9202922126199753, 0.9245324169855391, 0.9242085869164278, 0.9186725276519738, 0.8293200460348458, 0.7876875663548277, 0.8378225863115687, 0.8418323357374174, 0.049806161578574426, 0.8090786140801665, 0.8426130906748881, 0.8197061075039289, 9.999999999998899e-05, 0.11641773661844979, 0.14476279178677165, 0.13560875036581943, 0.1442066194396726, 0.15896348762073453, 0.19048309557555687, 0.1251840755171505, 0.15595604130024765, 0.12342738228112338, 0.058663118149273386, 0.13308528545741793, 0.11207869778377877, 0.10705314287307632, 0.1322947964970399, 0.07808284019441614, 0.7164300594595081, 0.11906891705291478, 0.14472311967507123, 0.9912487925616357, 0.9912904653903186, 0.9911195643448443, 0.9909426458139762, 0.9899549854561517, 0.9925251854528565, 0.9911599048738479, 0.9880569424109809, 0.9897291941287046, 0.8199848564592042, 0.8381944111719812, 0.8357019337118595, 0.15461661395638782, 0.7334743773180872, 0.7721480687165624, 0.7757496658698344, 0.7107422242162058, 0.8262256795510937, 0.8759725384544108, 0.10727516082605904, 0.15943131151939194, 0.27918494735690225, 0.9283082013028733, 0.21057600204863258, 0.2382078085148439, 0.1766364347177226, 0.17609205317392262, 0.2758102048689569, 0.26215406329548063, 0.26901400287770183, 0.1337082804420059, 0.26109457477822284, 0.2576963175332546, 0.24882247813241465, 0.24990021747015234, 0.13493416624254717, 0.27050746626647737, 0.24076970866874448, 0.12905831227925268, 0.13609143445989924, 0.2838725358329529, 0.13567347651335093, 0.2975041850198369, 0.04612532947754988, 0.08562332453557142, 9.999999999998899e-05, 0.00021492489779306734, 0.07113547083549288, 0.0002063940995256086, 0.03390897937481263, 9.999999999998899e-05, 0.00048634662329005707, 9.999999999998899e-05, 9.999999999998899e-05, 0.09643833586333295, 0.0290014471553528, 0.06514238106148329, 0.03851559355556311, 9.999999999998899e-05, 0.030882452584250486, 0.16553775100095303, 0.05980645861215983, 0.07103167075158667, 0.05214978080224664, 0.037337061057993726, 0.08949744809701132, 0.08326995862915776, 0.09952704912097521, 0.08328667842777027, 0.10103566633521843, 0.07434451340924808, 0.07467395859368775, 0.17503064347315578, 0.04375404045903997, 0.13672938812798352, 0.09676408757748611, 0.006743095965384027, 0.055488823908266705, 0.13590853238471556, 0.18414888294067144, 0.08455040983596285, 0.560923979532086, 0.7048072112832888, 0.5551283917162348, 0.566989304723658, 0.562298901124042, 0.5901809511293175, 0.6001991778553577, 0.587315549401199, 0.6316152317428737, 0.11062296386152426, 0.16007088896964228, 0.060477000474497666, 0.09128083559735167, 0.1342063896810921, 0.09286589755654073, 0.13731384309542316, 0.10260560530017171, 0.07496961223809573, 0.23047229872175967, 0.2306545394248537, 0.1991755677195014, 0.30434428141214753, 0.3372378666977133, 0.36499767495512647, 0.1741052928818455, 0.31020154626056007, 0.42323500260852187, 0.6621207220326493, 0.42391140792931636, 0.5151071021217252, 0.2918712474822004, 0.35341426082147, 0.4445084495560836, 0.46319137085639916, 0.566979155094566, 0.4510176404899855, 0.23145039260774136, 0.14912539433473027, 0.22001796671442886, 0.20540920451848255, 0.2593048848975287, 0.3072636930970297, 0.22399661871344156, 0.15715290319065223, 0.20684185025624846, 0.21968574629582727, 0.21416951320859734, 0.23459802570386412, 0.21527431423046817, 0.2122143719374069, 0.19710380987780884, 0.19347549374953932, 0.27296540874074116, 0.22720183329552945, 0.19976228438511712, 0.22791922844899748, 0.8496514917323356, 0.21393687234219638, 0.20788794456994597, 0.2542550346188023, 0.2041067150012672, 0.18572893161258863, 0.1989063702132574, 0.9407686600104416, 0.17688005531679796, 0.15431940833476543, 0.17353598417919347, 0.201289659211478, 0.1733123702586432, 0.1574958048175964, 0.17022790491298423, 0.959144619256445, 0.7248066532973602, 0.1575650294216948, 0.11268382851418302, 0.8148360898468601, 0.16951554133609092, 0.21227679984297432, 0.10431207769353623, 0.10511801171966817, 0.8803736200969707, 0.19709561103009854, 0.21690283262067878, 0.19478462472407454, 0.20455559121626288, 0.2257421040291383, 0.20235493740185406, 0.22856809131940714, 0.2128287034515547, 0.1928770605272434, 0.11206839601885399, 0.09050568400620773, 0.10951347512455845, 0.09445406702430259, 0.08845965797791, 0.07120272320773058, 0.09697101387845541, 0.09425482202896507, 0.09156933478923857]}, "mutation_prompt": null}
{"id": "7e65c561-4090-40ff-a35f-222a15a3e34e", "solution": "import numpy as np\n\nclass PSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_pos = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.w = 0.7    # Inertia weight\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_velocity_clamp(self):\n        diversity = np.mean(np.std(self.population, axis=0))\n        v_max = diversity\n        self.velocities = np.clip(self.velocities, -v_max, v_max)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.personal_best_fitness[i] = fitness\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_pos = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] + \n                                      self.c1 * r1 * (self.personal_best_pos[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.global_best_pos - self.population[i]))\n                \n                self.adaptive_velocity_clamp()\n                \n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n                \n                fitness = self.evaluate(func, self.population[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_pos[i] = self.population[i]\n                    if fitness < self.global_best_fitness:\n                        self.global_best_fitness = fitness\n                        self.global_best_pos = self.population[i]\n\n        return self.global_best_pos", "name": "PSO_AVC", "description": "Particle Swarm Optimization with Adaptive Velocity Clamping (PSO-AVC) leveraging adaptive velocity limits based on population diversity to balance exploration and exploitation.", "configspace": "", "generation": 11, "fitness": 0.29792900524217253, "feedback": "The algorithm PSO_AVC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9024949652348179, 0.9417125865215292, 0.9294672635991948, 0.9161082722116816, 0.9423326985783148, 0.9393419298414064, 0.9079440198368143, 0.9360081256048737, 0.9391918537755951, 0.05434406786797241, 0.02875769477755108, 0.0005502019629558541, 0.0770382616761559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12751621926426726, 0.16200479695840764, 0.07013322552634071, 0.07234928703668608, 0.16402829777111894, 0.10679882256892903, 0.09272514340099625, 0.16342565316555524, 0.10727670923826149, 0.11174307436309794, 0.09390190679329424, 0.07043673263318084, 0.06118570408103807, 0.1119981654957013, 0.06707132040682151, 0.09193025477772332, 0.10093760191168044, 0.11224032671664264, 0.958462461835828, 0.9705442655676522, 0.9771638059754993, 0.9385545356057526, 0.9647515535457585, 0.9708305668922436, 0.9803200502573699, 0.9721714798632239, 0.8667595189531923, 0.8062467436711314, 0.8134075791661678, 0.848229032997641, 0.8642905361168222, 0.8585095186349277, 0.8610767787942343, 0.8631669294398754, 0.8242895098318423, 0.7617446375842866, 0.23094276827260896, 0.11547868438292697, 0.14148101964678805, 0.28459871289175664, 0.23864563106502623, 0.1950517232930905, 0.10822434082417198, 0.1528726271226689, 0.18152438680147054, 0.16656672387921678, 0.1300214811252316, 0.13586029171274094, 0.26219362118431144, 0.19578709591181553, 0.25396763989125026, 0.2792561313974372, 0.2614762006798582, 0.13457657108662102, 0.19329546568945444, 0.2770147326344421, 0.16115668152538887, 0.13352534539750482, 0.1735601770320544, 0.2698666994707605, 0.2680605443795059, 0.2825814838334374, 0.1603882578853143, 0.013192748206959926, 0.009834219066478522, 0.04849530055806062, 0.03079978642149761, 0.1269997800753847, 0.03135359858660647, 0.002818964622767317, 0.006446199119534146, 0.06678836392834397, 0.0935366469138349, 0.04746217826352528, 0.08020812407566713, 0.05814747720149405, 0.025828675938501466, 0.029145027689986613, 0.10745861113019639, 0.05021683372067087, 0.08637064077808787, 0.14705714895738387, 0.21955561071456353, 0.16983186203304745, 0.11043492659761178, 0.09386977758672399, 0.09767136570376989, 0.2830749524920597, 0.1711926083046632, 0.13199342191789842, 0.19901036897626156, 0.07552762176620309, 0.1324357655222833, 0.13742861224116054, 0.1019570218758139, 0.033944835443398325, 0.26763076385041107, 0.1150184776597073, 0.20780200213248345, 0.5539874441312165, 0.6026913196009404, 0.5812360047247696, 0.5473242466222599, 0.5432036521227782, 0.5869731420862847, 0.5793642007189628, 0.5450264951996295, 0.5507141324303259, 0.05117975716835277, 0.16194556825134077, 0.08612637670780166, 0.1470157540801702, 0.11117967004601359, 0.12584209997879447, 0.07118658757320895, 0.11895096123249582, 0.07304982491744416, 0.4197655404810725, 0.16762963274780796, 0.2841688290420511, 0.23980957251642587, 0.43977329507800944, 0.2666225723516117, 0.401786245704959, 0.22276067817362666, 0.6417749446072312, 0.1586471429179923, 0.4246885780358638, 0.2986769145478323, 0.40164066425337075, 0.30541175150377486, 0.36413509717660064, 0.27813819770360493, 0.6235065108141669, 0.29011933448954486, 0.3659793017500922, 0.18422971651476538, 0.28235443604498034, 0.2740754305450205, 0.21839323163943503, 0.3582741515230051, 0.22875683883021725, 0.29573915238372506, 0.2563103053020064, 0.23083124052241322, 0.17734868586363906, 0.21826509786036996, 0.22747122540469555, 0.26064665675671994, 0.2527534747152558, 0.2484217663710142, 0.20159911325150215, 0.24648012351024795, 0.1668399761628785, 0.18449487518105367, 0.18131288311814342, 0.17147110784057618, 0.16769844895473596, 0.1980650222477136, 0.18023071115049516, 0.18373267693741568, 0.20515249703107852, 0.18859905435357793, 0.1889799876225391, 0.15442397283222398, 0.9182976737024422, 0.20156742349833867, 0.20112303198185233, 0.12257509605452432, 0.9168177774003597, 0.9083477435703251, 0.7369470395108219, 0.15762108040809586, 0.7611436791516061, 0.11279598038311212, 0.22514121909103646, 0.8106868085370929, 0.10547203930333904, 0.17008240683568365, 0.8970291353142484, 0.19949527424822877, 0.23029637830485894, 0.1908499161227406, 0.18717735859873497, 0.20323529595241585, 0.19212667534135097, 0.222311640596072, 0.22317994456162416, 0.19516601926005606, 0.08807410747245725, 0.09156149190121055, 0.07987751566404566, 0.08335390253040154, 0.09568696314584557, 0.10450194128589796, 0.08997248656711798, 0.08994408418920996, 0.07269205244230181]}, "mutation_prompt": null}
{"id": "85209b52-bf77-4536-bd60-827112af0f97", "solution": "import numpy as np\n\nclass HPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_personal_position = np.copy(self.population)\n        self.best_personal_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5 # Cognitive (personal) component\n        self.c2 = 1.5 # Social component\n        self.F = 0.8  # Differential Evolution mutation factor\n        self.CR = 0.9 # Differential Evolution crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def differential_mutation(self, x1, x2, x3):\n        return x1 + self.F * (x2 - x3)\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_personal_fitness[i]:\n                self.best_personal_fitness[i] = self.fitness[i]\n                self.best_personal_position[i] = self.population[i]\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.best_personal_position[i] - self.population[i]) +\n                                    self.c2 * r2 * (self.best_global_position - self.population[i]))\n                candidate = self.population[i] + self.velocity[i]\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                \n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = self.differential_mutation(x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, candidate)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_personal_fitness[i]:\n                        self.best_personal_fitness[i] = trial_fitness\n                        self.best_personal_position[i] = trial\n                if trial_fitness < self.best_global_fitness:\n                    self.best_global_fitness = trial_fitness\n                    self.best_global_position = trial\n\n        return self.best_global_position", "name": "HPSO_DE", "description": "Hybrid Particle Swarm Optimization with Differential Evolution (HPSO-DE) combining PSO's velocity and position update rules with DE's mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": 0.3739825348578197, "feedback": "The algorithm HPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.7876184204129771, 0.8105107823670885, 0.8170066676494382, 0.8027870114291378, 0.8228826713392081, 0.8509770936048766, 0.8238345520339133, 0.8265893764301439, 0.8096496442210953, 0.6743679230136108, 0.6703364434617262, 0.6391443109438181, 0.6957747370212372, 0.6797225940819334, 0.69055666876835, 0.6764243574754094, 0.6724042743820001, 0.6771009150641869, 0.10515088840368081, 0.1846958792061264, 0.1183243258645098, 0.11037991115214496, 0.11388556898933733, 0.12272066326739017, 0.09740791089069423, 0.11714866829794957, 0.09180628524562595, 0.11887407356626156, 0.08883524759632089, 0.11973904724617934, 0.0913934620753476, 0.10314278816475542, 0.09861558606418308, 0.08703985666968272, 0.09415483892723475, 0.10148317692635955, 0.9848380047004045, 0.9709359170972368, 0.9847317486590409, 0.9691327880016114, 0.9684990343572857, 0.9495309443017992, 0.985164111704715, 0.9844860977295509, 0.9843243335034689, 0.49583295685672624, 0.5108876198945325, 0.4843122933082258, 0.4669908531726841, 0.48663638593773895, 0.46225686642885455, 0.556508853289261, 0.4538473946838364, 0.486626182077337, 0.7378680702166309, 0.7505774575190588, 0.7093964522133529, 0.7543572682662537, 0.7700240315026703, 0.746356723328625, 0.7121788768759926, 0.7295838552475801, 0.7487830989375506, 0.3978338558201846, 0.5098959083422859, 0.388775184588513, 0.3835306150637937, 0.4634080280230133, 0.48108001179906523, 0.3939707230674032, 0.35739143103458904, 0.4606017917686539, 0.48656449024969983, 0.12154423840002304, 0.05416870815198871, 0.46146619731512983, 0.4872535090325627, 0.3697381578784521, 0.41172184212080587, 0.33384043138884134, 0.4244730987120664, 0.34397141609519843, 0.2842246068107438, 0.2904501891702598, 0.32470255604588805, 0.3209936351836169, 0.3142468556398569, 0.34366005016775103, 0.343757458685514, 0.37519773307085347, 0.43924957330156644, 0.5037458048648709, 0.4377164178283669, 0.46473446667152096, 0.4147521300485799, 0.41169248020822324, 0.49306924378494965, 0.5222650966195805, 0.5362262005072378, 0.07210048423162263, 0.0848393137697, 0.0884498985932689, 0.19661829570989298, 0.18934002655484194, 0.21342495147989216, 0.16302725526524642, 0.11565936408104027, 0.19291177210108468, 0.2900025500499762, 0.3229557150680066, 0.2794786776292034, 0.3211677108289004, 0.28847959381855326, 0.29239398169606534, 0.2894549215548047, 0.28641081687504566, 0.2678425762292663, 0.6872420369342487, 0.6481450561706787, 0.6442702613297909, 0.7042123792822494, 0.6284003552382638, 0.651774868318368, 0.6895153851016, 0.6600281851454729, 0.6677145622856993, 0.0937383971606428, 0.10109970866086515, 0.09884815688815995, 0.0853505743193973, 0.09946659785191081, 0.0878618178611339, 0.10575840082567534, 0.12916501554232473, 0.11054041430446304, 0.15432100902971957, 0.1409048105455557, 0.15452825094154687, 0.13926988992389977, 0.17050094333015864, 0.14818761539827097, 0.35426132116040554, 0.426309098705112, 0.1976350384705151, 0.36330652183423284, 0.41112113123723315, 0.36668006429813427, 0.34290922262146273, 0.40073611999435466, 0.36979123698546124, 0.3981291911424436, 0.4134362141161323, 0.41776849054773324, 0.2686400623579097, 0.28501818748809404, 0.26883407400658577, 0.28132440805156766, 0.2781718042318827, 0.2664520795462425, 0.30261503577140925, 0.3099295894360553, 0.3153288276273821, 0.1891918744510166, 0.1834138492173515, 0.17292135140145093, 0.18196093695345528, 0.19259510997511597, 0.1722846347921846, 0.18321694019065993, 0.16711059515555404, 0.228568482698023, 0.18924797422778883, 0.461119613167549, 0.211043538158592, 0.19773653778045686, 0.20139103988225793, 0.33992531149080174, 0.3213656140952942, 0.18982236374139116, 0.1767715716237741, 0.1979294888995089, 0.15197345056056588, 0.19656645125172212, 0.782606382714718, 0.7963319654391452, 0.18271594808627112, 0.18558175255277698, 0.8282770761200152, 0.17839350480436456, 0.621050992198046, 0.16835679751507027, 0.19988453888085, 0.1989348872978196, 0.7021049701701058, 0.16112519842712658, 0.2123246190965573, 0.21164683447371047, 0.20809329617168137, 0.2068547236990691, 0.19209973373880018, 0.20588712716694357, 0.19398905922660814, 0.21007056924363632, 0.196892652179245, 0.19671645710155694, 0.20319525197536936, 0.2060052489304851, 0.07607560415273873, 0.06524831709854173, 0.06777892495113735, 0.06504547057937837, 0.06727666791901354, 0.08109517569074942, 0.07054955185326639, 0.07493022979509167, 0.07406197324017905]}, "mutation_prompt": null}
{"id": "f309cba7-e563-4c26-81d5-34e36f236f9e", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "4b10ae77-54db-493b-8ac9-7e4219cc0d17", "solution": "import numpy as np\n\nclass CE_PSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.9  # Inertia weight\n        self.c1 = 2.0 # Cognitive component\n        self.c2 = 2.0 # Social component\n        self.chao_seq = self.init_chaotic_map()\n\n    def init_chaotic_map(self):\n        x0 = np.random.rand()\n        return [x0]\n\n    def update_chaotic_map(self):\n        x_next = 4 * self.chao_seq[-1] * (1 - self.chao_seq[-1])\n        self.chao_seq.append(x_next)\n        # Use chaotic sequence to adjust w, c1, c2\n        self.w = 0.5 + 0.4 * x_next\n        self.c1 = 1.5 + 1.0 * x_next\n        self.c2 = 1.5 + 1.0 * (1 - x_next)\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.personal_best_fitness[i] = fitness\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            self.update_chaotic_map()\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                social = self.c2 * r2 * (self.global_best_position - self.population[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive + social\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                fitness = self.evaluate(func, self.population[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_positions[i] = self.population[i]\n                    if fitness < self.global_best_fitness:\n                        self.global_best_fitness = fitness\n                        self.global_best_position = self.population[i]\n\n        return self.global_best_position", "name": "CE_PSO", "description": "Chaos-enhanced Particle Swarm Optimization (CE-PSO) integrates chaotic maps to dynamically adjust parameters for diverse exploration and efficient convergence.", "configspace": "", "generation": 14, "fitness": 0.19180641190735503, "feedback": "The algorithm CE_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.45653226500909894, 0.5699221038074156, 0.5250467512513719, 0.27428365753538975, 0.5655043839453668, 0.4750736617200829, 0.1816679926583643, 0.6596423713025706, 0.14974303440834014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03772886592732283, 0.05346923854546115, 0.13545117219674452, 0.23453379015079, 9.999999999998899e-05, 0.07076762526485347, 0.039964122436982885, 0.14121382488689738, 0.0684985732519785, 0.06565496594430242, 0.12132419662657234, 0.12471232946575583, 0.049423780105280146, 0.1089720949653964, 0.1037556405232819, 0.0878349901629637, 0.10528845065426817, 0.10617378095831631, 0.13682103263494405, 0.10598617310443592, 0.08314670312836048, 0.12405442807208, 0.1368333782936737, 0.99357318854459, 0.9933484505091625, 0.9928882197331544, 0.9914573733201264, 0.9946293471670992, 0.9949661828575054, 0.9910100322542059, 0.9940989280641107, 0.9946863647532789, 0.149287708302001, 0.1335888114082311, 0.059303828676913306, 0.1362706513240557, 0.3525236843082332, 0.14296252077003369, 0.08559383238344109, 0.1929063108531951, 0.08930083327856209, 0.2285119300189894, 0.20038978054846024, 0.20751470150536744, 0.2704997527828188, 0.19040934703714996, 0.18996435389748156, 0.2215344295383277, 0.23598532928859184, 0.20254860089065752, 0.11929686423636743, 0.13428814635000674, 0.16004060855834978, 0.11266696878174154, 0.14801737089350986, 0.08167155088299316, 0.163329171754227, 0.1408553330155048, 0.1701088696923434, 0.13718414603191031, 0.021589382212236496, 0.049004221506232515, 0.13088711724868096, 0.12166238140216701, 0.10942951126712364, 0.1100398103868343, 0.034201920304295697, 0.1414334338213009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014670246355014127, 9.999999999998899e-05, 0.02658052078287443, 9.999999999998899e-05, 9.999999999998899e-05, 0.04447063979345767, 0.026156319507638748, 0.01308857261649432, 0.0489972803478671, 9.999999999998899e-05, 0.018608814779870975, 0.07510544223627968, 0.08256472136025172, 0.04149236812871526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05713783837389819, 0.04781396993524212, 0.03570017493948707, 0.04929766292962545, 0.05218540353860812, 0.050490485202544955, 0.07797040847981895, 0.03606564468725504, 0.12410027902507814, 0.06254302594149774, 0.004740302389456108, 0.1380984437849464, 0.04569117583182436, 0.07808868185290119, 0.049447411243396355, 0.36047241444138356, 0.46364088402810233, 0.4067940002299226, 0.38104492487033126, 0.4551108353148685, 0.2063005018533265, 0.40237450006312947, 0.3963209447713404, 0.382593414820532, 0.06472705995659633, 0.07443031987890503, 0.08113582234535155, 0.09894501756720697, 0.0948773671679306, 0.10949335023840434, 0.06510459650949674, 0.09343156026740851, 0.06499487077173438, 0.17201585272554132, 0.16787008918794433, 0.14858178063903527, 0.22237605809877736, 0.2170477479048467, 0.13033614721134013, 0.19072507064942668, 0.16969006674479425, 0.20657990866218812, 0.2520046630451447, 0.24792033107471967, 0.2547871736513978, 0.22366515628138572, 0.2689880961027462, 0.18805190747351763, 0.28672413323373935, 0.3166324177460379, 0.20272390567489829, 0.13285230569936834, 0.08211533959429018, 0.1832123810210523, 0.21768946694791325, 0.18628270965807692, 0.15737932154313816, 0.1998758471812545, 0.27238837038462815, 0.19510383875477133, 0.17195694654746163, 0.19734801720365625, 0.19128901420982092, 0.18315615220445436, 0.19673662676938852, 0.17372691912219473, 0.21706127317373303, 0.16950746759770807, 0.1779241809678761, 0.21500929244129063, 0.2073058359576868, 0.22144940751821873, 0.1959664194779206, 0.1933641369781831, 0.2332333869002221, 0.1834883461231881, 0.19069209184363034, 0.1768510660472823, 0.6499800158495219, 0.16972348010371663, 0.14927018513359658, 0.1937290833411769, 0.1986034002196455, 0.1300928132220932, 0.09909301431251039, 0.16765869627727292, 0.12984683102230543, 0.5478158765831731, 0.15524704911093634, 0.16266332868983047, 0.2291212075042527, 0.15110221629798215, 0.2029983751535408, 0.2562961594550327, 0.18910129459758263, 0.3000541118860528, 0.17655897994390235, 0.19933354511300905, 0.2033751265318895, 0.1859992552175601, 0.19098270463501554, 0.20628851329634845, 0.22132931750053897, 0.19306874200507695, 0.18640575512283453, 0.11409307075757369, 0.0703489057364386, 0.0633350057931733, 0.08215229848456873, 0.06905868822015004, 0.06595903509843792, 0.06758671158537233, 0.0773106338297288, 0.07913319764021653]}, "mutation_prompt": null}
{"id": "2a2d4cf4-9973-4149-a98b-2c0f23ea27e2", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5 # Cognitive parameter\n        self.c2 = 1.5 # Social parameter\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_inspired_update(self, particle, global_best):\n        delta = np.random.uniform(size=self.dim)\n        return (particle + global_best) / 2 + delta * (particle - global_best)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.personal_best_fitness[i] = fitness\n            self.personal_best_positions[i] = self.population[i]\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                \n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best_positions[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.global_best_position - self.population[i]))\n                \n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.1:  # Introduce quantum-inspired update with a small probability\n                    self.population[i] = self.quantum_inspired_update(self.population[i], self.global_best_position)\n                \n                fitness = self.evaluate(func, self.population[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_positions[i] = self.population[i]\n                    if fitness < self.global_best_fitness:\n                        self.global_best_fitness = fitness\n                        self.global_best_position = self.population[i]\n\n        return self.global_best_position", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) leveraging quantum-inspired position updates with adaptive control parameters for enhanced exploration and convergence.", "configspace": "", "generation": 15, "fitness": 0.3202197428992035, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.29.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9194750288617336, 0.9148758946905267, 0.9041950552872015, 0.9156047175530924, 0.9139579514836588, 0.9266798149008317, 0.8994829160831144, 0.9265195104507913, 0.9265054308647699, 0.800615217776509, 0.8333174067091538, 0.7693556377889602, 9.999999999998899e-05, 0.8372044934509556, 0.8463852591586677, 0.8327230281059431, 0.8100871444274904, 0.8232910962183536, 0.0894436089030074, 0.10686647001164695, 0.18360952756596582, 0.16084522958342007, 0.14206138700785464, 0.11929534542514397, 0.12133213886650174, 0.6407596886716196, 0.11240872559233872, 0.12478625888974659, 0.13152880887133944, 0.13093351202373993, 0.0829754159206908, 0.137855781246774, 0.15710491180082586, 0.11210409074457839, 0.09461250059415105, 0.10855359544552523, 0.9936989761441528, 0.9916534906556863, 0.9921029584297428, 0.9918657018055923, 0.9917178183805623, 0.9899311781622219, 0.9940026249827016, 0.9933603157811365, 0.9922334049385436, 0.8175663527920987, 0.7942513311599719, 0.8161935329109049, 0.1535203591000891, 0.7994273323320122, 0.153665306032443, 0.08932097087202451, 0.7999324495861029, 0.8222362560539407, 0.21487665084626462, 0.7339127513156944, 0.17049669518794686, 0.282047877128472, 0.19056659149268207, 0.21342753373717172, 0.17726938611200171, 0.23663759931358697, 0.17750460845980165, 0.28469447248984125, 0.13486514154068208, 0.2876699457198534, 0.4448407180344739, 0.25096185341391064, 0.1353630120116226, 0.2844333442256385, 0.250656142104957, 0.25590000640203514, 0.2609210103545382, 0.42348543778514414, 0.21236131465067787, 0.3422908620544567, 0.3002555417363828, 0.3072528752235557, 0.13146928274593994, 0.14137946963292125, 0.2935115885057892, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0417513952172861, 9.999999999998899e-05, 0.0188385008364943, 0.005369987090137918, 9.999999999998899e-05, 0.009810526010371134, 0.04507956192327334, 0.035624612721528504, 0.15312106384545132, 0.05448762791308859, 0.022019543498267957, 0.0049359751511339756, 0.1145122002210992, 0.11627584182179884, 0.08723484900066247, 0.08130906489407785, 0.06638301176261086, 0.22555819164291546, 0.08256621271049447, 0.10020708222723518, 0.18348795820224606, 0.13089878188815596, 0.07712412561911008, 0.08245334357984324, 0.19788935789033546, 0.11166155786972976, 0.11133321568373977, 0.0900910815430197, 0.006803246304847521, 0.07034020386841289, 0.1736796091325783, 0.08499660794872865, 0.08484529078038727, 0.5650126529159293, 0.579395522777173, 0.6449874272483076, 0.5521140895402725, 0.6215130720533288, 0.5891517197042337, 0.5893920846491071, 0.6042181068746617, 0.5847307857146802, 0.07247864924415626, 0.14659036389305313, 0.13348841180924287, 0.10967070868241846, 0.14520480621129317, 0.08029809127163878, 0.14530469715054573, 0.15827319366790837, 0.08984162576551513, 0.19152846058645745, 0.8489474742729037, 0.40718814441204343, 0.2867287887532891, 0.48317608192544115, 0.28243891694492496, 0.1947381433778239, 0.15846784157704374, 0.2343814559881292, 0.4649235365870701, 0.2166269993472485, 0.23393004348634083, 0.3005056079238695, 0.2954232699749797, 0.5569709029859267, 0.2682547069573493, 0.3382671695363497, 0.5832130115464076, 0.24052966121673514, 0.2669067620231447, 0.3021411197739483, 0.32447204542726293, 0.3869830789958554, 0.20277474984875832, 0.225547053961358, 0.3179278967951964, 0.17850968538488632, 0.21836485590081078, 0.15190092050076565, 0.19594761779183345, 0.21624720301204337, 0.20644810130251923, 0.1920600283921774, 0.2531279244085578, 0.25105254532271837, 0.20421902368573674, 0.22464493544713693, 0.20432237706159273, 0.8552536408836191, 0.20337745515284156, 0.1957269211324678, 0.21402077884884352, 0.2074718646242717, 0.1769839415550245, 0.19737423737676685, 0.16559215322088927, 0.17847253134182395, 0.15414126802463202, 0.9389776405139183, 0.20119045577196826, 0.2016552466238578, 0.12672438834403332, 0.17055004045953226, 0.21054622225978725, 0.9121929837512713, 0.2126523116128235, 0.11227766311173382, 0.29377709867587465, 0.16935554090627225, 0.21297859181295775, 0.10433968846379216, 0.10536874329280399, 0.8502211326722313, 0.20090819741714183, 0.20275976346563762, 0.24170648723235455, 0.19317498925778398, 0.2125709473447267, 0.197746632407777, 0.2278982479461833, 0.23169008780650258, 0.20693186571228528, 0.10754893484123873, 0.07350708708983233, 0.10053011354292651, 0.10093176151134375, 0.07768481571735852, 0.10031827439203156, 0.07556590740828928, 0.089174977353776, 0.08971438161496825]}, "mutation_prompt": null}
{"id": "7ca850ce-e46f-47aa-be86-64ef8dd47d94", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.best_personal_position = np.copy(self.population)\n        self.best_personal_fitness = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n        self.omega = 0.5\n        self.phi_p = 1.5\n        self.phi_g = 1.5\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_particle(self, i):\n        r_p = np.random.rand(self.dim)\n        r_g = np.random.rand(self.dim)\n        cognitive_component = self.phi_p * r_p * (self.best_personal_position[i] - self.population[i])\n        social_component = self.phi_g * r_g * (self.best_global_position - self.population[i])\n        self.velocities[i] = self.omega * self.velocities[i] + cognitive_component + social_component\n        self.population[i] += self.velocities[i]\n        self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            self.best_personal_fitness[i] = self.fitness[i]\n            self.best_personal_position[i] = self.population[i]\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                self.update_particle(i)\n                current_fitness = self.evaluate(func, self.population[i])\n                if current_fitness < self.best_personal_fitness[i]:\n                    self.best_personal_fitness[i] = current_fitness\n                    self.best_personal_position[i] = self.population[i]\n                if current_fitness < self.best_global_fitness:\n                    self.best_global_fitness = current_fitness\n                    self.best_global_position = self.population[i]\n\n        return self.best_global_position", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) utilizing quantum behaviors and adaptive exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": 0.31892857166129335, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.29.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9293359402451125, 0.9036160485869178, 0.9171781044350007, 0.18307637616640027, 0.9135270832651586, 0.9111741024111842, 0.9016643278999198, 0.9202349631253147, 0.9192823113688382, 0.0764144278056208, 0.7929998564265249, 0.8007176837763551, 0.8080363383752573, 0.8032122845831915, 0.0676785001604614, 0.7948211585174432, 0.832418148670058, 0.8298395064073543, 0.15960531023414515, 0.16074705354385643, 0.11235316552686414, 0.10124099437186074, 0.14360764394269931, 0.12488081703084974, 0.08320509165229883, 0.17656102495440518, 0.11698776530138344, 0.11512694311494709, 0.08213584115938377, 0.1085934910923404, 0.10089471361301117, 0.15997612818739615, 0.0980757464159484, 0.07306806646398023, 0.11123891313500867, 0.11084669056414531, 0.9908826245260682, 0.9900749536437489, 0.99037704874414, 0.9897423120213872, 0.9916334185269462, 0.9898222947846114, 0.9908369672618137, 0.9914935475027212, 0.9904776346307447, 0.8101651271063223, 0.7605571215976873, 0.7827033170174625, 0.8159613528431728, 0.7848803476830513, 0.8120210781443304, 0.08396122121585359, 0.8092249118948003, 0.7957925984474885, 0.3480920478040207, 0.11812728593179977, 0.2274571571001851, 0.1949698313084437, 0.27674121395184537, 0.21941284020531993, 0.12567563857206332, 0.12555935482753544, 0.9226724911579707, 0.25520300788403916, 0.2583164407660774, 0.25566674354736707, 0.2514100607745603, 0.25780538134191855, 0.13600336995183393, 0.2592004196956965, 0.2569138848210135, 0.25548108069577224, 0.26595191367590965, 0.13453863233162044, 0.13519274062064546, 0.1345675014976888, 0.29463303290511345, 0.296146550883973, 0.27590018452221554, 0.2716886464515038, 0.3146162303915324, 0.036869466252383076, 9.999999999998899e-05, 0.0018969145981519997, 0.04066811212741195, 0.10783858523510514, 9.999999999998899e-05, 0.039370661043452104, 0.004786777558459465, 0.10088183581314625, 0.11453782331629936, 0.06494529529796522, 0.06455532201813452, 0.052830719837031026, 0.04872476664084768, 0.032488812115534116, 0.11021912081735719, 0.07052718158785687, 0.020931733055358337, 0.12064226639309439, 0.12052769757066073, 0.3558188258558539, 0.08055957764843624, 0.08143821150182518, 0.08212033534125207, 0.2330884383373889, 0.17203737644094386, 0.09109288148450811, 0.2717338608081006, 0.16761875128928172, 0.2321603548997414, 0.07029897581525346, 9.999999999998899e-05, 0.041801194698333544, 0.05822123396536283, 0.08791894177556692, 0.1070303804556233, 0.576484679992568, 0.5666105385783503, 0.5863659354565908, 0.531800702490717, 0.6182920258448434, 0.6173221127275312, 0.6019248813382954, 0.5946959217333244, 0.5863955067282878, 0.10600565439890086, 0.060974927030643666, 0.07353961066019288, 0.15793241910658795, 0.1106110858096474, 0.11760871122933625, 0.15218983684537235, 0.13595927479724612, 0.14425668410226955, 0.19882507340491107, 0.38107993314610633, 0.25744122483997023, 0.2866346457425868, 0.491530110760277, 0.4532674062288745, 0.3847448225332224, 0.21910925480962273, 0.14064043409108906, 0.3071374272848856, 0.4000724183651462, 0.2669837067706351, 0.22554328897633136, 0.4223979092914598, 0.33503871989045597, 0.5123934994554843, 0.34744309093023884, 0.2954795882773058, 0.11109773704518378, 0.2906027704781422, 0.30435518086998303, 0.2778524163014585, 0.22850961785924417, 0.42570060513768937, 0.4172002611475917, 0.28036298770182744, 0.1890629014253289, 0.2399412646820439, 0.2355093633112646, 0.21301063146328225, 0.22497728810678264, 0.1637341071082299, 0.21156422450069468, 0.24918073947093278, 0.234228604972455, 0.23424412077981516, 0.21225363824416577, 0.22423369173014807, 0.20656971354566245, 0.20585461911165326, 0.2031301395374453, 0.20944598578909435, 0.25629189734238567, 0.24980927444972756, 0.2493404770407852, 0.1778918178242207, 0.12671412396608428, 0.15449356164395045, 0.9501842175423829, 0.20170479676756103, 0.20028007731569364, 0.12219585453793858, 0.16993884976069562, 0.9377958651765408, 0.6969930767626977, 0.15769801266203576, 0.07336223740254355, 0.8783068890081722, 0.1688952605138696, 0.21214025884957588, 0.10553859890459483, 0.10521125997398484, 0.8811028876426726, 0.21397097173178192, 0.18218470211855808, 0.22472826918740474, 0.20527213927372678, 0.19953883674491424, 0.19544440222988468, 0.20541279848803407, 0.2058563803390464, 0.27183302518666563, 0.09554909848199422, 0.09963642655410077, 0.10597164740156606, 0.11021422751198151, 0.10338210964794248, 0.08316508845348614, 0.10417115061778981, 0.09836595605902965, 0.08122272439753941]}, "mutation_prompt": null}
{"id": "a649f89b-8657-4aa6-a557-8c010e99cfe3", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5 # Cognitive component\n        self.c2 = 1.5 # Social component\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_potential_update(self, position):\n        # Quantum potential function based on superposition\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.personal_best_fitness[i] = fitness\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                \n                cognitive_velocity = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                social_velocity = self.c2 * r2 * (self.global_best_position - self.population[i])\n                quantum_component = self.quantum_potential_update(self.population[i])\n\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_velocity + social_velocity + quantum_component\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                fitness = self.evaluate(func, self.population[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_positions[i] = self.population[i]\n                    self.personal_best_fitness[i] = fitness\n                    if fitness < self.global_best_fitness:\n                        self.global_best_fitness = fitness\n                        self.global_best_position = self.population[i]\n\n        return self.global_best_position", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) utilizing quantum potential and superposition principles to enhance exploration and convergence in black box optimization.", "configspace": "", "generation": 17, "fitness": 0.12073472916677667, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.14669105465852916, 0.17603221831117077, 0.17104475205053493, 0.1664304345606552, 0.19343862132034084, 0.18153594947041385, 0.16555425159771564, 0.1540532845811995, 0.18998597315353283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04699765577704007, 0.03763024149673433, 0.0362302602155129, 0.04677588664583421, 0.036070085765348425, 0.036208193281806245, 0.04009899403569961, 0.037605288095536205, 0.04090503023152725, 0.015848544827916866, 0.03767320972943511, 0.024399586575117982, 0.03332543313085223, 0.0280869879319936, 0.03165941423277019, 0.018336439498901735, 0.03175946241616856, 0.02078383005704032, 0.9905904369379679, 0.9925904788395573, 0.991801835413323, 0.9913795281601988, 0.9913564101205738, 0.9911260373091888, 0.9933803407897669, 0.9930628310242663, 0.993455051075257, 0.05426547885643174, 0.07584665419626546, 0.05974314340669462, 0.0658710058976516, 0.0668774342270283, 0.07961226759831674, 0.07313500408070939, 0.07308451907108882, 0.07821906846176863, 0.11599874486253992, 0.1309218299675423, 0.09243769742407326, 0.1469112042882449, 0.12479850926481573, 0.10962587437305116, 0.11187493159372675, 0.10729863622993852, 0.11696256062448229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03125175414844594, 9.999999999998899e-05, 0.004493491385361592, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013296068885000789, 0.005530259122800252, 0.011831519994571549, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015890302304733317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046067490904552644, 0.06610885353835005, 0.05495708870613869, 0.024773520440609542, 0.012735294427985044, 0.042699847041210326, 0.046586876176707315, 0.03534289121323386, 0.029965054240966515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004964471750251165, 0.19667350490718372, 0.17142088799072097, 0.17394399239530922, 0.1823027481281182, 0.20141452520484593, 0.1990316384068791, 0.19096355255685205, 0.173311136454932, 0.18241684268763048, 0.04982577564003621, 0.04962708755413148, 0.049469161729633226, 0.046007234295101784, 0.027702757196579997, 0.05405188775947267, 0.05049407414507601, 0.057167378512131495, 0.04001810105046644, 0.15196859076612268, 0.12472880550453447, 0.14139397260738473, 0.14892251659643063, 0.14554659321777252, 0.1395558918865063, 0.13833043667250733, 0.12858380024027538, 0.13243535254676786, 0.15058442631071156, 0.15280791288681228, 0.15972811874573178, 0.14635773000790908, 0.1593655659627088, 0.16782026593006705, 0.1848157095769929, 0.17377774300845283, 0.17242135434559114, 0.10476922271894296, 0.09791869467937708, 0.1322964447353241, 0.09925618569925687, 0.10966120336831842, 0.11580330818046991, 0.1011223050499852, 0.11013775599282949, 0.10807207179069012, 0.15037288872248278, 0.14410088804028542, 0.14484627360024682, 0.1482045299677739, 0.1428343148737209, 0.13339032335222178, 0.1452099995595557, 0.1467314407193353, 0.12706890777049573, 0.11223981962411289, 0.1179683556476715, 0.06536562416826941, 0.12755066173914387, 0.12656502434542072, 0.1269973220538917, 0.14369580541871563, 0.14387325467852352, 0.13592285823922157, 0.17168633261138078, 0.12425923532476024, 0.1396193948332286, 0.151442200584061, 0.1207914665021157, 0.13726335364313946, 0.15580950177817976, 0.1394129338827642, 0.1439940778510974, 0.12918954490203705, 0.14766543997526715, 0.15899135247829366, 0.12350828336594022, 0.11631642609980686, 0.1439519219224742, 0.17110522295075536, 0.15660205317646048, 0.18006028349225112, 0.18473468110428903, 0.17877625584645662, 0.18408640989927316, 0.20377027870200604, 0.18627186706607857, 0.17721407148679047, 0.1893327801228908, 0.18357812020506514, 0.18296462170173333, 0.049927035199680225, 0.04585493206008473, 0.039589894461402264, 0.046847242958720225, 0.0440248754325141, 0.04030104008919644, 0.03640153930252055, 0.06421170830482847, 0.043599180516835645]}, "mutation_prompt": null}
{"id": "114d1665-2cb9-4522-aea8-c11bebb3c48c", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "6d9d2a9c-f4eb-4c1e-991d-1d5cb8c3f0fb", "solution": "import numpy as np\n\nclass APSO_DT:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.729\n        self.cognitive_constant = 1.49445\n        self.social_constant = 1.49445\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_topology(self):\n        # Dynamic neighborhood connectivity\n        np.random.shuffle(self.population)\n        for i in range(self.pop_size):\n            for j in range(i + 1, self.pop_size):\n                if np.random.rand() < 0.2:  # 20% chance to connect\n                    if self.personal_best_fitness[j] < self.personal_best_fitness[i]:\n                        self.personal_best_positions[i] = self.personal_best_positions[j]\n                        self.personal_best_fitness[i] = self.personal_best_fitness[j]\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            if fitness < self.personal_best_fitness[i]:\n                self.personal_best_fitness[i] = fitness\n                self.personal_best_positions[i] = self.population[i]\n\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            self.update_topology()\n\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_constant * r1 * (self.personal_best_positions[i] - self.population[i])\n                social_velocity = self.social_constant * r2 * (self.global_best_position - self.population[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                fitness = self.evaluate(func, self.population[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_positions[i] = self.population[i]\n\n                if fitness < self.global_best_fitness:\n                    self.global_best_fitness = fitness\n                    self.global_best_position = self.population[i]\n\n        return self.global_best_position", "name": "APSO_DT", "description": "Adaptive Particle Swarm Optimization with Dynamic Topology (APSO-DT) using dynamic neighborhood topology to enhance convergence diversity.", "configspace": "", "generation": 19, "fitness": 0.1101171349885064, "feedback": "The algorithm APSO_DT got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.13883303124147117, 0.12127754140948255, 0.1762376557760792, 0.16249063139983722, 0.15002219239607817, 0.1564471956885256, 0.14803325468590078, 0.12648766680891566, 0.1397167031595341, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021731477576332647, 0.036500515529643396, 0.04372413280139986, 0.047704199831731575, 0.03823310931047286, 0.033896131681924846, 0.024590936126691165, 0.027200890037103242, 0.04030923199206715, 0.02219649328515083, 0.025070467885255354, 0.023193948584386503, 0.01959972157639278, 0.006072879160316513, 0.007896957623906187, 0.009613628338841052, 0.0031197849776745112, 0.009824704658301542, 0.9914342871377493, 0.9938920283063819, 0.9912314287340603, 0.9849644303750174, 0.9925872699424564, 0.9932106577710088, 0.9942273858084609, 0.9928460593793426, 0.9945710914896316, 0.03949308841399357, 0.048149046229051584, 0.05542734965759066, 0.06163382982664056, 0.04587445907959009, 0.05909249805043437, 0.07282115339813522, 0.0625324267682359, 0.07741412063626518, 0.12760695228590557, 0.08003069518410466, 0.08674280653924271, 0.11046048098304018, 0.1379088994597507, 0.08004819522940376, 0.08107143766327773, 0.10584838156930798, 0.097199610873689, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005864949854529233, 0.00012475275367418437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018402318892815628, 0.014042075540074972, 0.009965882090385292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050044794966553674, 0.041457245956895705, 0.024072296569936924, 0.009841931860190889, 9.999999999998899e-05, 0.024117944216242138, 0.015897683648574468, 0.03255691123614046, 0.012392612067031017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016758237211859095, 0.13476784509612516, 0.15819087993175762, 0.1836387814274455, 0.17321296271466202, 0.16429765746029157, 0.1984844990897373, 0.17601042469547923, 0.21315885318020433, 0.14077247896590672, 0.04180634045793008, 0.04526416778452824, 0.046818245549097415, 0.03177644494123322, 0.03026502468719794, 0.03972684250518754, 0.043999072499577796, 0.019888811821655694, 0.02702407012639596, 0.14783742469966277, 0.12434781473698353, 0.1424558688104537, 0.1361719628453837, 0.13686396568403436, 0.18242121064211736, 0.1424900013875946, 0.12849679023832417, 0.13065538831184131, 0.14519190091874823, 0.13942689210650316, 0.1469759155268986, 0.14253742795661017, 0.14294907155418002, 0.15703462743245433, 0.14191109344075814, 0.17377774300845283, 0.14618258953928875, 0.090949306072034, 0.06374860327870524, 0.08231574513063156, 0.09653920342305833, 0.08434214498870574, 0.09848363278435701, 0.08986935793924167, 0.10296785338515979, 0.09064871326794022, 0.1393829449822941, 0.12327789367439979, 0.14220682414036623, 0.1413554444078272, 0.13087039064997885, 0.15493982226415137, 0.13209979659389903, 0.13552994148407993, 0.1265814408679622, 0.000663127016362175, 0.02531596548979198, 0.1335300082226304, 0.08317834211740194, 0.022025520331863335, 0.018818455223604036, 0.1422940816882079, 0.06554810870498617, 0.14064267564595412, 0.16260956438363594, 0.1210906711579961, 0.13492924563120867, 0.13188439074866398, 0.12808164920238085, 0.12419012967189824, 0.13881738041553615, 0.10743221231718869, 0.13062097599975464, 0.1270321748276263, 0.13333101594374785, 0.08896978927975019, 0.11391056391738763, 0.12541981819167447, 0.07693655912550634, 0.17714772624267638, 0.09684314486156365, 0.18185551036430392, 0.18453805011587032, 0.1884466073244997, 0.18367246335536724, 0.17139859944662494, 0.189743805523096, 0.18693960046416058, 0.17912800024073627, 0.20179546566899098, 0.17417614004518178, 0.038252468204506895, 0.038158609496250384, 0.03451428742508089, 0.037717725079443376, 0.03871080331592225, 0.027512734476271672, 0.02739891561139396, 0.03444260104896024, 0.028992945132813475]}, "mutation_prompt": null}
{"id": "d1dd2708-eb58-4aa7-98e3-eadaac1d8fa1", "solution": "import numpy as np\n\nclass APSO_DP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 40\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.5  # Inertia weight\n        self.c1 = 2.0  # Cognitive acceleration coefficient\n        self.c2 = 2.0  # Social acceleration coefficient\n        self.F = 0.5  # Differential perturbation factor\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            self.personal_best_positions[i] = np.copy(self.population[i])\n            self.personal_best_fitness[i] = self.fitness[i]\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = np.copy(self.population[i])\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                social = self.c2 * r2 * (self.best_global_position - self.population[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive + social\n\n                # Adaptive velocity control\n                if np.random.rand() < 0.5:\n                    indices = [idx for idx in range(self.pop_size) if idx != i]\n                    x1, x2 = self.population[np.random.choice(indices, 2, replace=False)]\n                    perturbation = self.F * (x1 - x2)\n                    self.velocities[i] += perturbation\n\n                # Update position\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                fitness_value = self.evaluate(func, self.population[i])\n                if fitness_value < self.personal_best_fitness[i]:\n                    self.personal_best_positions[i] = np.copy(self.population[i])\n                    self.personal_best_fitness[i] = fitness_value\n                if fitness_value < self.best_global_fitness:\n                    self.best_global_fitness = fitness_value\n                    self.best_global_position = np.copy(self.population[i])\n\n        return self.best_global_position", "name": "APSO_DP", "description": "Adaptive Particle Swarm Optimization with Differential Perturbation (APSO-DP) combines adaptive velocity control with differential perturbation to enhance convergence and exploration capabilities.", "configspace": "", "generation": 20, "fitness": 0.1629579838905779, "feedback": "The algorithm APSO_DP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.28296746422281505, 0.26314199940141414, 0.2539834884005392, 0.33295107352952713, 0.33814422898067953, 0.3192041775910669, 0.30803223851287753, 0.30374214922950005, 0.38804681136589114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007972964816627126, 9.999999999998899e-05, 9.999999999998899e-05, 0.08262028268706267, 0.0774527955237978, 0.052043487933765564, 0.07649866890161972, 0.07272105508262361, 0.10385409255712186, 0.07502292065863114, 0.07895245439520149, 0.08888291298449225, 0.05165930147900977, 0.05767186576788208, 0.05129833382863802, 0.06210147192429194, 0.07008388909458285, 0.058810084284781405, 0.059889298728750484, 0.0532583574857195, 0.05293810227194973, 0.9921972870531631, 0.9932624538852004, 0.9917969244351345, 0.9920219113338246, 0.9920691284363758, 0.9875547565491146, 0.9893873916547933, 0.9910442398376694, 0.9928333819741809, 0.2295445302289646, 0.15171553133684734, 0.13769589712120744, 0.1230870235733591, 0.14079842591216984, 0.15706474004452498, 0.08838152732471083, 0.17233299461258988, 0.20684582062842538, 0.21301982859888302, 0.18980752887996744, 0.1730395779039452, 0.22437573009346434, 0.17695605302058104, 0.18844789498564896, 0.19014743656711397, 0.20288278644494917, 0.22341241406707457, 0.07863528107818851, 0.09514253731167721, 0.0724094535205888, 0.11423693457368322, 0.10003185504812828, 0.10395949212347966, 0.09560387976333773, 0.0991770544187075, 0.09507925795546013, 0.038919173399281304, 0.08889565564180069, 0.0715041518345737, 0.07155761798440985, 0.05758508722498812, 0.08400445482262109, 0.07035447892148716, 0.03533893658249365, 0.06346153646161579, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051646330234230264, 0.056404615503374056, 0.04536554204581644, 0.10511502283218965, 0.05347798764381129, 0.02818292718712634, 0.04424719357201923, 0.04523995432344963, 0.047918854577684966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026048476885855987, 9.999999999998899e-05, 0.038157650189056036, 0.014959563714706525, 0.04780955347143312, 0.035029679121650226, 0.033282744867340286, 0.04524233884356876, 0.03987160002597445, 0.29271095739942776, 0.30494601791201614, 0.27290295181902324, 0.3334762391235413, 0.30019232216687297, 0.2555464823771174, 0.29358140825173173, 0.2646513075981618, 0.2793057461655015, 0.08440259330359878, 0.06453512883734969, 0.06481517873109588, 0.07438351539640475, 0.07159596081951736, 0.06640662156820432, 0.07258739410341075, 0.0852341692568771, 0.0812224127523894, 0.14089175264307252, 0.1488127825625588, 0.14424709924882795, 0.15235277083848142, 0.15059348968522412, 0.13399312647088013, 0.17137599383889734, 0.13633876560654967, 0.1322116826051084, 0.23524139296245683, 0.212325247719778, 0.2297252365678919, 0.20905031525795548, 0.1842670367939252, 0.21439322493232427, 0.24028281354718095, 0.2244774543083996, 0.20031168092647755, 0.16374297843612062, 0.16428183141426866, 0.13764682293721142, 0.16349885171370937, 0.14591160903161038, 0.15684897207540383, 0.14736078341630365, 0.18093536569770252, 0.16245655605245102, 0.1574334848823964, 0.16963148243185755, 0.19280755177487352, 0.1881039614254113, 0.19060905717071797, 0.164572883545813, 0.16916164403756317, 0.1814025685579621, 0.16961662488423257, 0.15859725428077165, 0.170079416826037, 0.16117029332538735, 0.17477414396403113, 0.16841920349576978, 0.1633192024019865, 0.16748007070209026, 0.1655678411381014, 0.17580286439961124, 0.3262874523539683, 0.16793030583285273, 0.15048806695517958, 0.2406139739582499, 0.1820463374520016, 0.1818770545678916, 0.16332012830103138, 0.16829418981832278, 0.19019945842353903, 0.2047896649838803, 0.2038816425680402, 0.26693296802538624, 0.22380452126081007, 0.18593162497944826, 0.1385397870885603, 0.2005044144624134, 0.20129562590296135, 0.18685834088461006, 0.19065884156344426, 0.19419311573285625, 0.18339767669529916, 0.17555224523978308, 0.18787214283752407, 0.1909289243213278, 0.1925086457372962, 0.1824575175905191, 0.18311785794595625, 0.059411899630496534, 0.05519977200713311, 0.06017775838701067, 0.0631216017109495, 0.07201224352105151, 0.06765622792615744, 0.06448927465852372, 0.05943826213414105, 0.07342296727299713]}, "mutation_prompt": null}
{"id": "3aba06e7-1159-4e3e-8a10-51e2a30aa37f", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "b7ded8a1-e4ad-45e4-868e-f4d9338b3691", "solution": "import numpy as np\n\nclass QuantumInspiredSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.local_best_positions = np.copy(self.population)\n        self.local_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_particle(self, i, func):\n        rand_cognitive = np.random.rand(self.dim)\n        rand_social = np.random.rand(self.dim)\n        cognitive_velocity = self.cognitive_coefficient * rand_cognitive * (self.local_best_positions[i] - self.population[i])\n        social_velocity = self.social_coefficient * rand_social * (self.global_best_position - self.population[i])\n        self.velocities[i] = self.inertia_weight * self.velocities[i] + cognitive_velocity + social_velocity\n        self.population[i] += self.velocities[i]\n        self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n        fitness = self.evaluate(func, self.population[i])\n        if fitness < self.local_best_fitness[i]:\n            self.local_best_fitness[i] = fitness\n            self.local_best_positions[i] = self.population[i]\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n    def quantum_superposition(self):\n        superposition_prob = np.random.rand(self.pop_size, self.dim)\n        for i in range(self.pop_size):\n            if np.random.rand() < 0.1:  # 10% chance to explore quantum state\n                self.population[i] = superposition_prob[i] * self.lower_bound + (1 - superposition_prob[i]) * self.upper_bound\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.local_best_fitness[i] = fitness\n            self.local_best_positions[i] = self.population[i]\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            self.quantum_superposition()\n            for i in range(self.pop_size):\n                self.update_particle(i, func)\n\n        return self.global_best_position", "name": "QuantumInspiredSwarmOptimization", "description": "Quantum-Inspired Swarm Optimization (QSO) leveraging quantum superposition principles for enhanced exploration and exploitation balance.", "configspace": "", "generation": 22, "fitness": 0.17142273383551923, "feedback": "The algorithm QuantumInspiredSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.31288960435444124, 0.37753060274107064, 0.3122241792632966, 0.27406617215798446, 0.35629007941642243, 0.34868148964320544, 0.31435708780082683, 0.33793591727932404, 0.3594226293205044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0826466191485109, 0.10754124764370243, 0.06947818853065169, 0.06188613298910828, 0.07100208117135576, 0.08344715557753912, 0.10253584950156214, 0.08578783190861472, 0.09961884647965091, 0.0635548005694343, 0.059358385969991656, 0.0938313966801193, 0.06864022446041107, 0.08378653021547577, 0.05175369080600978, 0.05773572550874018, 0.06764740133846792, 0.0681325750857592, 0.9896999990079802, 0.9933043999902249, 0.9892463910026529, 0.9898761104544105, 0.9920091497987039, 0.9910803580677159, 0.9939399948572462, 0.9917897353440951, 0.9935420462817262, 0.11647940166057846, 0.18042389014301696, 0.15239547294997358, 0.17023991367921842, 0.14075097264338887, 0.1315015579793246, 0.12942282171259745, 0.1782409480508943, 0.16134530171772932, 0.17012929751538652, 0.195740681379733, 0.18687160556565652, 0.2431350419853362, 0.23673481930447904, 0.14367638748189715, 0.19494823912808223, 0.16794455620772875, 0.19213643657987323, 0.08271558196673101, 0.08926078354943623, 0.07498608678372598, 0.08547182575890022, 0.07628670359756307, 0.08678881406540262, 0.11189888622713295, 0.0696209160780491, 0.11361606946795033, 0.08861454928995338, 0.06325803269980024, 0.11147794565822677, 0.11877563040519745, 0.141104038669552, 0.09313683993269462, 0.08798690799096187, 0.07828125023735533, 0.03965262217033283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055811306974964836, 0.03728353635990245, 0.08758558385095583, 0.03651780599620302, 9.999999999998899e-05, 0.030147324969092892, 0.11366948847950475, 0.06735955147680217, 0.030384979334668105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008129997936844657, 0.03838108371739091, 0.02594526185233137, 0.03480349712172015, 0.0015419688814630739, 0.0004255054807233982, 0.0395805905088944, 0.014455380441885657, 0.0507953122339857, 0.2886779714163695, 0.31123609584734757, 0.33163280237459325, 0.29328710484460385, 0.3261666583655013, 0.26099550977967856, 0.32544736762440885, 0.3334958180999441, 0.28530009097424314, 0.06907251114092816, 0.06981943645931532, 0.06608625117585576, 0.07757759047437507, 0.07491803670349306, 0.07706965840052848, 0.06242350195989854, 0.07209913614157482, 0.09339198923020375, 0.182415481724309, 0.22039706912293144, 0.158943378440227, 0.23152801270522505, 0.18651495237017823, 0.17413699865850107, 0.20022569699504844, 0.15567516117142588, 0.16782769405209552, 0.2053708147089529, 0.2227835139109009, 0.23413490349944366, 0.2231899196369651, 0.1832427564745257, 0.1977840726060146, 0.228336567566231, 0.25007232326803175, 0.22696722176368844, 0.13913900612073282, 0.14728317719998163, 0.15687335446599426, 0.15941572501883017, 0.15102951159437794, 0.15014627706903338, 0.1666364503763762, 0.21072825591628885, 0.16019720042883423, 0.17022590501851043, 0.15395606553686758, 0.18066443989228032, 0.17601740588919512, 0.17663721233741048, 0.16297995314157865, 0.168592249461461, 0.16888527121625663, 0.17807022671285122, 0.16390356110911253, 0.17147215660775417, 0.16574370685395612, 0.16976194129198485, 0.1624480156573258, 0.1705415654820075, 0.1703803738921591, 0.19149715009020452, 0.16624947376737942, 0.1790922475089337, 0.22760903790768927, 0.1349677447818345, 0.3716983355134824, 0.525541993016408, 0.19408115927716885, 0.18333061201027345, 0.16872020140863808, 0.19181863848602476, 0.3566633163317331, 0.28774190664693, 0.18439625530536297, 0.23884223911651414, 0.21673387259715338, 0.18824892016751116, 0.208159310502109, 0.19338468663426933, 0.4394317090641404, 0.185538213791678, 0.1760387980272139, 0.17928457314539215, 0.17337900280913432, 0.2130861363336627, 0.20165077598433467, 0.19773654709455102, 0.17860866721583846, 0.1918249346392532, 0.06884819075722881, 0.06436753310550991, 0.06749871907088123, 0.06526653228464097, 0.06367900766651968, 0.06931991133966198, 0.058435638104593624, 0.06042277674327501, 0.06720302602817829]}, "mutation_prompt": null}
{"id": "2eaf3b62-68fe-4e92-a1a8-e3a25cd94855", "solution": "import numpy as np\n\nclass HPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.pbest_positions = self.population.copy()\n        self.pbest_fitness = self.fitness.copy()\n        self.gbest_position = None\n        self.gbest_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5 # Cognitive component\n        self.c2 = 1.5 # Social component\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_particles(self, func):\n        for i in range(self.pop_size):\n            self.velocities[i] = (self.w * self.velocities[i] +\n                                  self.c1 * np.random.rand() * (self.pbest_positions[i] - self.population[i]) +\n                                  self.c2 * np.random.rand() * (self.gbest_position - self.population[i]))\n            self.population[i] += self.velocities[i]\n            self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n            fitness_i = self.evaluate(func, self.population[i])\n            if fitness_i < self.pbest_fitness[i]:\n                self.pbest_fitness[i] = fitness_i\n                self.pbest_positions[i] = self.population[i]\n            if fitness_i < self.gbest_fitness:\n                self.gbest_fitness = fitness_i\n                self.gbest_position = self.population[i]\n\n    def genetic_crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        child1 = alpha * parent1 + (1 - alpha) * parent2\n        child2 = alpha * parent2 + (1 - alpha) * parent1\n        return child1, child2\n\n    def genetic_mutation(self, offspring):\n        mutation_rate = 1.0 / self.dim\n        mutation_vector = np.random.rand(self.dim) < mutation_rate\n        mutation_values = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        return np.where(mutation_vector, mutation_values, offspring)\n\n    def genetic_operations(self, func):\n        for i in range(0, self.pop_size, 2):\n            if self.evaluations >= self.budget:\n                break\n            parent1, parent2 = self.population[np.random.choice(self.pop_size, 2, replace=False)]\n            child1, child2 = self.genetic_crossover(parent1, parent2)\n            child1 = self.genetic_mutation(child1)\n            child2 = self.genetic_mutation(child2)\n            child1 = np.clip(child1, self.lower_bound, self.upper_bound)\n            child2 = np.clip(child2, self.lower_bound, self.upper_bound)\n            for child in [child1, child2]:\n                if self.evaluations < self.budget:\n                    fitness_child = self.evaluate(func, child)\n                    if fitness_child < np.max(self.fitness):\n                        worst_idx = np.argmax(self.fitness)\n                        self.population[worst_idx] = child\n                        self.fitness[worst_idx] = fitness_child\n                        if fitness_child < self.gbest_fitness:\n                            self.gbest_fitness = fitness_child\n                            self.gbest_position = child\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            self.pbest_fitness[i] = self.fitness[i]\n            if self.fitness[i] < self.gbest_fitness:\n                self.gbest_fitness = self.fitness[i]\n                self.gbest_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            self.update_particles(func)\n            self.genetic_operations(func)\n\n        return self.gbest_position", "name": "HPSO_GA", "description": "The Hybrid Particle Swarm Optimization and Genetic Algorithm (HPSO-GA) combines the global exploration capabilities of PSO with the local search efficiency of GA for enhanced optimization performance.", "configspace": "", "generation": 23, "fitness": 0.37367387792288453, "feedback": "The algorithm HPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.8210784421342142, 0.8159214161986007, 0.8271704324817694, 0.8321933352639465, 0.8311474727814001, 0.8469430638211048, 0.8279340393672944, 0.8185316212330275, 0.8122582067933881, 0.6748141501112621, 0.6658576573200374, 0.6399189631855964, 0.6664496621753435, 0.5967557492298738, 0.6621588056946723, 0.6360492589133071, 0.6670102549079953, 0.620355560499331, 0.17210559298012218, 0.5434736451694915, 0.1354245890973349, 0.18333907169469787, 0.1649695073854649, 0.1556124943403513, 0.1943555982473536, 0.14182777094936594, 0.1490441325765569, 0.16141808113466793, 0.1265535828640716, 0.1343718182070197, 0.14072826935601457, 0.12433788884791486, 0.14584630978446567, 0.16649595396920558, 0.1509156015967501, 0.1972657098231385, 0.9947301158616562, 0.9957783879042957, 0.989394160351258, 0.9841658166726855, 0.9850387656322084, 0.9736240797747882, 0.9859729170880315, 0.9845330347287425, 0.989318681130061, 0.6943460236977779, 0.668223108624938, 0.7028342090739728, 0.7034631552960423, 0.5402657643479234, 0.6624106173943136, 0.5548871804691928, 0.5902156656238148, 0.6364761402077513, 0.39197395889519826, 0.7978773766882938, 0.37529580134996454, 0.8618752751884735, 0.3699674374189126, 0.22024066143626475, 0.2064091829032837, 0.13758199419006523, 0.23278016272337365, 0.6494453312445663, 0.4018213042883929, 0.36337011571434585, 0.5537173520648411, 0.7074147750659938, 0.3850396033710154, 0.5510428230968634, 0.41987420931354413, 0.5432013090328851, 0.49654355129432903, 0.6034850272740279, 0.13102347740841835, 0.6365083156455399, 0.5679798818738953, 0.5602725943568613, 0.12876224338910636, 0.6377978072115198, 0.12227143404307939, 0.195968709885878, 0.04996345349614317, 0.0953105943374809, 0.012572344602954533, 0.20484161697968828, 0.10720374162883362, 0.1737769694558392, 0.11439827641780886, 0.15625452673260043, 0.30327371376503365, 0.19192091455372318, 0.3412545450692017, 0.30860794773092015, 0.06708508111248279, 0.14053966034621101, 0.2050425023300988, 0.33204046066457826, 0.11622310316278617, 0.12208027496645957, 0.3997296293138065, 0.09523384874227647, 0.1638244641447547, 0.15523078150206915, 0.28335020867134453, 0.1323951872147856, 0.19358227888753532, 0.1929227898914495, 0.22906736479261525, 0.15337541386873166, 0.274626635967136, 0.2966566886063571, 0.26668336342493826, 0.2636714624232115, 0.2380881637639719, 0.19474910462512618, 0.1167862435312087, 0.6564045777809595, 0.6434117537707906, 0.6705639558949225, 0.6156528832953598, 0.6590489614220751, 0.6630291146993469, 0.6410550038671985, 0.6718564605401317, 0.6621961076078542, 0.09399505189944102, 0.12909819701028413, 0.09601022908642098, 0.1053471587608279, 0.14860163426129458, 0.15386902044289963, 0.12087583439021488, 0.14870513185536072, 0.13957239974153546, 0.23074141828597272, 0.2320045964737204, 0.41006377237249303, 0.3481237302719865, 0.23212875790571652, 0.19441457939216356, 0.22062528349963828, 0.6295922720394325, 0.2055202827623689, 0.42174666884311385, 0.396426950987141, 0.5211540537043398, 0.30966610818575857, 0.3966706009037593, 0.3295805278468935, 0.43563724697303563, 0.3516645315000897, 0.3630010168718857, 0.252988577788984, 0.23099527816496546, 0.3944140128703526, 0.32735549806181063, 0.2228298414080514, 0.3093533571470797, 0.25376088589805956, 0.25439104429403625, 0.15646801967201496, 0.23297078501312085, 0.22028449652591875, 0.21838186396536619, 0.23643668364455006, 0.22216949763026905, 0.21566870818727824, 0.23978234051821568, 0.21300374133936328, 0.21799904229055977, 0.23917462571722148, 0.6168341191997742, 0.1952714001767647, 0.19838662089648051, 0.2184360888156721, 0.20322745004528675, 0.2150984303151543, 0.20992256324006464, 0.1931131267384062, 0.8651748817146312, 0.8596399663877111, 0.1532164546186635, 0.8783235355491456, 0.849782177263576, 0.20034544780636865, 0.15217799413709732, 0.17009070954222183, 0.9035423347457662, 0.9112416072815582, 0.156707023867946, 0.11239302640857096, 0.21069573003497444, 0.1689130609043099, 0.20673707319911405, 0.21151456766383425, 0.1535273189968741, 0.8692437692976018, 0.20288109998195258, 0.20878758942667175, 0.19876028385828304, 0.19562658612349038, 0.2022859139941423, 0.19743627459904456, 0.21041728691074457, 0.19473530986566734, 0.21758311009426257, 0.09641201386768194, 0.08495308144220759, 0.10934647948050935, 0.09738608770671797, 0.09116317772180205, 0.10487126765363552, 0.0945441288013551, 0.0948546234320724, 0.09325605514291635]}, "mutation_prompt": null}
{"id": "37687c21-74f7-4242-a31f-e47ec9db89b8", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_personal_position = np.copy(self.population)\n        self.best_personal_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.alpha = 0.75  # control parameter for quantum behavior\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_update(self, particle, global_best):\n        p = np.random.rand(self.dim)\n        u = np.random.rand(self.dim)\n        mbest = np.mean(self.best_personal_position, axis=0)\n        delta = np.abs(particle - mbest)\n        quantum_particle = mbest + np.sign(u - 0.5) * delta * np.log(1 / p)\n        return np.clip(quantum_particle, self.lower_bound, self.upper_bound)\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            self.best_personal_fitness[i] = self.fitness[i]\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                quantum_particle = self.quantum_update(self.population[i], self.best_global_position)\n                trial_fitness = self.evaluate(func, quantum_particle)\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = quantum_particle\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_personal_fitness[i]:\n                        self.best_personal_fitness[i] = trial_fitness\n                        self.best_personal_position[i] = quantum_particle\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = quantum_particle\n\n        return self.best_global_position", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) using quantum superposition states for enhanced exploration and adaptive strategy shifts for exploitation.", "configspace": "", "generation": 24, "fitness": 0.2789351130141395, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9308308235139175, 0.9368509537385648, 0.9359278665020325, 0.9216358714776536, 0.920478400885135, 0.9213614490986874, 0.9298507356370483, 0.9289945029385853, 0.9266652766436219, 0.8541745415578553, 0.8582378936198158, 0.8409716396128413, 0.8577387128419514, 0.8622239883819077, 0.8486619292561424, 0.8556122910225546, 0.8406478544998002, 0.8578970389446632, 0.1342291698121073, 0.14048176093404507, 0.1291094325894857, 0.12151734224207544, 0.1678030912119841, 0.15391694021742208, 0.17037805228031544, 0.13987709140079418, 0.15662024191263446, 0.09240179760762313, 0.09256023274580771, 0.10510318891257553, 0.10086073992156397, 0.08729038435592973, 0.09463859848748757, 0.11234711651513118, 0.08137036960753319, 0.10510070665706261, 0.7904737177504799, 0.8012590444471918, 0.8053320090979885, 0.8064952242398601, 0.7987410859819801, 0.8073242744325978, 0.7954203213349675, 0.7979513335781193, 0.7922777208060938, 0.23633958831083512, 0.26112504462077746, 0.21201174783368404, 0.28557588036491355, 0.23835639039731915, 0.2200148454325137, 0.3119571298650543, 0.2938045205877071, 0.3026052331313437, 0.18495194979674368, 0.1538105078849663, 0.1703387322495692, 0.7571331121248838, 0.3217124303925847, 0.21917616969690346, 0.31574143320107706, 0.32809662163029585, 0.2304492941896743, 0.12589697934572397, 0.146832740782462, 0.1468663899380257, 0.1464950654440077, 0.1516346674193696, 0.14832669204120297, 0.16371567210347604, 0.17989004300608047, 0.15053768822612068, 0.1476460609055864, 0.14883653983958445, 0.15306533489157859, 0.13757300362421887, 0.14904790521041378, 0.1528069398437235, 0.14125597286297997, 0.15117882658360304, 0.14168898238570005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034330157791512494, 9.999999999998899e-05, 0.003794813263226393, 9.999999999998899e-05, 0.01028983626396096, 0.13385910331608752, 0.1106426446306108, 0.10628443405444055, 0.07346282875484389, 0.0576604877536967, 0.050621134405285595, 0.11064922705232116, 0.08207285979711065, 0.11330760723595301, 0.13212778897276944, 0.24755636297567374, 0.20739859105823166, 0.10471264380546141, 0.1552154071045414, 0.13472578755527143, 0.28968155632325443, 0.28726893473869153, 0.1487597622305672, 0.18237344350396367, 0.31289950157961055, 0.13134790336549018, 0.12556829005606884, 0.23814856760217384, 0.15440181599962632, 0.1305182794319084, 0.1681042480577869, 0.15690060416767537, 0.4745518825303787, 0.56952925625976, 0.6340529830000874, 0.4988643250117375, 0.5002672094692502, 0.46862071282472995, 0.4610472014642112, 0.5212346774690463, 0.49709867062187485, 0.0983779519422231, 0.12963297493041248, 0.11423469046419554, 0.1357376483087651, 0.10247184194955372, 0.1113739831584164, 0.132142599523975, 0.11619749582541172, 0.11917425838679396, 0.1324552006211971, 0.19588905771898057, 0.13063600410411313, 0.14195420109043477, 0.1768914816727507, 0.16326556757749588, 0.155497799737778, 0.12955432906534914, 0.1519450994997098, 0.32664743910112315, 0.22380713856324208, 0.22175181801339838, 0.4025763247024111, 0.3753507460398885, 0.483868905840534, 0.2550459550062816, 0.3078748860949104, 0.2158795829340422, 0.22554117431800402, 0.2465459456380421, 0.3252288746040477, 0.19751167511821788, 0.2787958443279698, 0.2545479443834109, 0.1777189039164081, 0.23756156038801424, 0.23087081885018557, 0.22657847136598874, 0.21940145144247714, 0.21818523637828935, 0.24995255530968175, 0.2222754908466903, 0.2336910233860512, 0.22635454338420535, 0.2319556388716545, 0.2288549253039165, 0.18656551227622797, 0.1731118059317116, 0.17995411886718904, 0.1803011112223185, 0.18178119472594123, 0.1716684423490238, 0.1738704265442066, 0.18118692981625617, 0.16903791663825796, 0.18677929363353374, 0.17828814223364498, 0.1863742786087269, 0.5992212439245039, 0.20982940171784137, 0.2609760628458483, 0.19725270994626198, 0.5116871775589583, 0.1627478370153178, 0.4198229025340493, 0.32011691708024237, 0.23969513121378416, 0.20984281030354912, 0.2084192485433095, 0.20218175887422196, 0.1478133638841802, 0.2574566514949349, 0.23713889156281298, 0.1749285081658214, 0.18384861935001195, 0.17601365633596355, 0.1786034802621358, 0.18657125157491894, 0.18401963316039027, 0.1896365570312415, 0.17985774972944168, 0.1911330494919784, 0.10011766645243048, 0.09697799848341493, 0.09041115877648098, 0.09356779425415296, 0.09499358372061306, 0.07281382002759751, 0.0922808074245921, 0.10201275327870118, 0.09057754556350062]}, "mutation_prompt": null}
{"id": "b399abb3-5a43-4f15-950e-28ffdd1dbd43", "solution": "import numpy as np\n\nclass QIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_global_position = np.zeros(self.dim)\n        self.best_global_fitness = np.inf\n        self.evaluations = 0\n        self.alpha = 0.1  # Learning rate for amplitude update\n        self.beta = 0.5   # Probability amplitude for superposition\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_superposition(self):\n        qbit_representation = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        return self.lower_bound + (self.upper_bound - self.lower_bound) * (0.5 + (qbit_representation * self.beta))\n\n    def quantum_collapse(self, candidate):\n        return candidate + self.alpha * (self.best_global_position - candidate)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            candidates = self.quantum_superposition()\n            for i in range(self.pop_size):\n                candidate = candidates[i]\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate = self.quantum_collapse(candidate)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                \n                candidate_fitness = self.evaluate(func, candidate)\n                if candidate_fitness < self.fitness[i]:\n                    self.fitness[i] = candidate_fitness\n                    self.population[i] = candidate\n                    if candidate_fitness < self.best_global_fitness:\n                        self.best_global_fitness = candidate_fitness\n                        self.best_global_position = candidate\n\n        return self.best_global_position", "name": "QIEA", "description": "Quantum-Inspired Evolutionary Algorithm (QIEA) utilizing quantum-inspired superposition and collapsing mechanisms for diverse search space exploration and rapid convergence.", "configspace": "", "generation": 25, "fitness": 0.09515168729073842, "feedback": "The algorithm QIEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.186049276576293, 0.18601278733591453, 0.18640753995986448, 0.19611171972911945, 0.19600539851366705, 0.19614704175676245, 0.17111210832927792, 0.17111043952122762, 0.17110786720856597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06498808333363792, 0.05442386693230694, 0.06002470900479362, 0.0428891307353193, 0.047480783132204274, 0.03990554304434535, 0.05113393015949319, 0.04671301374648862, 0.03744728995046187, 0.0463360381506871, 0.046324463065131716, 0.04632876286881582, 0.04739766975158888, 0.032617313851783014, 0.029055672132143107, 0.05472832370022529, 0.054728311100864846, 0.047344784961178665, 0.1038339795303107, 0.10375271042379086, 0.10378055910742368, 0.0831432020127526, 0.08307114401117455, 0.08293691085248378, 0.07830227895517294, 0.07787566629984577, 0.07771557612208724, 0.07379201442095296, 0.07379762670807755, 0.0739007443648304, 0.10344264444882867, 0.10343091257652337, 0.10342227715834784, 0.0697553138409921, 0.06954685237811631, 0.06888779638431386, 0.14351545911644847, 0.14140102298077617, 0.1411953580057872, 0.1324827597374848, 0.13324396619330636, 0.13215603318802838, 0.15296618365858705, 0.15356915499987323, 0.1531636751667247, 0.03497257101240925, 0.034985235838921325, 0.03496833592562254, 0.012581177401000732, 0.012581194332034085, 0.012581177403442778, 0.010221135857165442, 0.010538251814550481, 0.010538256953501746, 0.0041531465366643205, 0.004153141550149342, 0.004153141599502086, 0.009353201723382498, 0.009350989145934685, 0.009350989391472497, 0.003766071175064112, 0.003766064429467919, 0.0037660711699145644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03830525553210795, 0.03828408230152114, 0.038305255998109744, 0.07081071184854659, 0.07073712535078924, 0.07092348412901806, 0.07595694463887848, 0.07593358989371568, 0.07595692878024929, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21670382716770498, 0.2167542500445262, 0.2168130731814314, 0.19176550557306593, 0.191759724190406, 0.19174956189826664, 0.19815576220093234, 0.19304610155299962, 0.19800002455011012, 0.04642496593244416, 0.0467353488437775, 0.046647773178651875, 0.0665480468387254, 0.06650000005920442, 0.03538639071787697, 0.04813126725403194, 0.04813009242019961, 0.048112853466094396, 0.16577517383668672, 0.14205252581396033, 0.1479619161944853, 0.1430317745240942, 0.13622047497752354, 0.1526237903680887, 0.1332310644002691, 0.15176488363269125, 0.13736942255032847, 0.16571257273325768, 0.17332870871754202, 0.15891646629439438, 0.16086752658297943, 0.16770366428982164, 0.1641879988617455, 0.1709969151383861, 0.17377774300845283, 0.17163276850063724, 0.09944307087715665, 0.1336778403037433, 0.1055989802389582, 0.11777812548103972, 0.11508816953602707, 0.11787731687198377, 0.12138449028418741, 0.12031612261510094, 0.12546776695922146, 0.1653733582425575, 0.18063893199955072, 0.16663843801112665, 0.15654022403587642, 0.16840270991879824, 0.15840456004250214, 0.1655518458481653, 0.1835431561503278, 0.16569746343200564, 0.15149142564877605, 0.15149210575783711, 0.15149145438463307, 0.15090686161870603, 0.15162068801142692, 0.15161461247419172, 0.1491222654919795, 0.14892389013825902, 0.14900170806141555, 0.23041347900264786, 0.2273705116027449, 0.2266406410243701, 0.17549926358007273, 0.19343686400479454, 0.17506357883588075, 0.2090884326547311, 0.2007606331818127, 0.21631070705003608, 0.17234090091990661, 0.2125465977656349, 0.18326942627779907, 0.14926465475526451, 0.14920459428267563, 0.14929711929042455, 0.1191152257924285, 0.11907457472292882, 0.13429331416674373, 0.18073016201194292, 0.1766713871648954, 0.19033410418871466, 0.19592294707293245, 0.19410765320451173, 0.17777407922577892, 0.19042806733952944, 0.17585892403329795, 0.1906255753656625, 0.05322473041453124, 0.06313805801411532, 0.050758222301706124, 0.058743264567485354, 0.05111706283864004, 0.05326800419249644, 0.05479341049982045, 0.06795018379257234, 0.06411333480028092]}, "mutation_prompt": null}
{"id": "ec9a0085-1b00-4fe2-baed-a2eded1075da", "solution": "import numpy as np\n\nclass AQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.9  # Initial inertia weight\n        self.c1 = 1.49445  # cognitive component\n        self.c2 = 1.49445  # social component\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_inertia_weight(self):\n        self.w = 0.4 + 0.5 * (self.budget - self.evaluations) / self.budget\n\n    def quantum_position_update(self, position, personal_best, global_best):\n        beta = np.random.uniform(0, 1, self.dim)\n        position = beta * personal_best + (1 - beta) * global_best\n        return position\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.personal_best_fitness[i] = fitness\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            self.update_inertia_weight()\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                social_component = self.c2 * r2 * (self.global_best_position - self.population[i])\n                self.velocities[i] = (self.w * self.velocities[i] + cognitive_component + social_component)\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                fitness = self.evaluate(func, self.population[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_positions[i] = self.population[i]\n                    if fitness < self.global_best_fitness:\n                        self.global_best_fitness = fitness\n                        self.global_best_position = self.population[i]\n\n                if np.random.rand() < 0.1:  # Quantum-inspired update with a small probability\n                    self.population[i] = self.quantum_position_update(self.population[i], self.personal_best_positions[i], self.global_best_position)\n                    self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "AQPSO", "description": "Adaptive Quantum-inspired Particle Swarm Optimization (AQPSO) combining quantum-inspired update rules and adaptive inertia weights for enhanced exploration and convergence.", "configspace": "", "generation": 26, "fitness": 0.2560910247982904, "feedback": "The algorithm AQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.7044225435460016, 0.7280009167963027, 0.6795668293464215, 0.1833294097772874, 0.7301033040043501, 0.7331549899471677, 0.6661859649067741, 0.6781521049698918, 0.699567509341287, 0.39595736727056796, 0.029073466263175418, 0.031772732699426376, 0.43171500766035065, 0.49635153984385083, 0.39586175356548814, 0.4404232616396928, 0.0054245509717860685, 0.03851316097159363, 0.387483914536659, 0.14206426168883013, 0.11762887465649396, 0.14101762558246533, 0.10311888476963416, 0.11621793029298366, 0.4156735563066071, 0.13208491706810366, 0.13148494346369988, 0.10476007793795195, 0.10781842570810807, 0.43732176297093184, 0.11953599546992921, 0.1149363248269425, 0.1409058871869513, 0.1368131206889468, 0.14624753705570126, 0.13550868810834749, 0.9933092488651144, 0.9916465307430309, 0.993048022787888, 0.9898219476469209, 0.9917092054380171, 0.9900490033272354, 0.994061598733679, 0.9938253369843374, 0.9924182209834943, 0.5268076860921419, 0.5375328681387173, 0.44958259155668334, 0.445967089088637, 0.4907444851267314, 0.4598984870558125, 0.0860548968762549, 0.0855339092055043, 0.4362170030317174, 0.17145555977910631, 0.18987824946918574, 0.304004559448646, 0.20346128087766913, 0.19636225406875496, 0.3211717013574662, 0.2769154022571858, 0.12414477410663749, 0.6692085879808356, 0.16750321902478804, 0.1604774519507759, 0.15411049773986252, 0.1651404084808744, 0.10956085869484, 0.16348755337181176, 0.18103989107838125, 0.17548250834002688, 0.1455317822812996, 0.18804420222542761, 0.021374497176755214, 0.10419262862615397, 0.18169026067504834, 0.17579316001540046, 0.10351352777025236, 0.22469567083884934, 0.032415693493413, 0.09661352748795304, 0.026902765097071235, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024920526246841046, 9.999999999998899e-05, 9.999999999998899e-05, 0.00021289021318771084, 0.0011394715558838975, 9.999999999998899e-05, 0.06974358611954867, 0.0389313762430511, 0.07604435840345869, 0.06830264159821164, 9.999999999998899e-05, 9.999999999998899e-05, 0.03509454720492977, 0.03990264561676449, 0.017767469113988188, 0.15814314037444077, 0.022990626463998742, 0.03617006390286004, 0.05798135707979468, 0.08821520933466087, 0.06537341617160386, 0.07457717517780471, 0.045661079555699646, 0.050484909195637195, 0.14534040594650355, 0.0343525639024681, 0.15277749069829027, 0.2658498810548956, 0.004688679332019441, 0.005761839729573115, 0.051667487474230445, 0.06752043801264151, 0.0714324808551493, 0.472487813394882, 0.5131679735046286, 0.49163256431178337, 0.49767030124310063, 0.49512818988953555, 0.47658244555355045, 0.5067630806982149, 0.4992051067037052, 0.525389540689636, 0.1361904604051558, 0.09389870658052257, 0.05068495216170865, 0.09141866566616175, 0.09987817108923902, 0.11772609124782574, 0.07009347105088759, 0.12291566246807417, 0.13880314195258903, 0.2638458040440471, 0.16735148706606706, 0.1892760964389144, 0.18337634301370942, 0.27835740239914963, 0.2608816903449107, 0.37618062481893233, 0.18600803662967813, 0.20352512657320154, 0.40943016647911, 0.23352442142983143, 0.4608052541546932, 0.3675846627405346, 0.24345646536111798, 0.35562415852068197, 0.4516229787551269, 0.4555193650481012, 0.4511325583477622, 0.1441520246226069, 0.254450894894778, 0.3021429873471858, 0.221145963576451, 0.26820952591125935, 0.22175623899834962, 0.3684982228423406, 0.23872073899384272, 0.24856596611862947, 0.20390251708721063, 0.16282280017361406, 0.18802962214306818, 0.22091267668366388, 0.15359579432042136, 0.17720718914315625, 0.18916488087025563, 0.2084088467332248, 0.21886476713594316, 0.21847578483110164, 0.19734517098103643, 0.23663081247597018, 0.19164381727512225, 0.1926178960998416, 0.20969965115920575, 0.2019378709672769, 0.19859254516596725, 0.21226142616315624, 0.7566336905360713, 0.6739714426210652, 0.11294435326972174, 0.19036876497027577, 0.19484953522965476, 0.19485908116323403, 0.09966980758863042, 0.16963164662612795, 0.7083149461041531, 0.33919234346498817, 0.15217860397938732, 0.531571063097644, 0.19216454510777747, 0.3639434017160754, 0.20375563476490133, 0.18540153285886019, 0.20846179120235608, 0.20582185973424239, 0.20365866948568345, 0.24042115326069424, 0.18717293576690497, 0.2002039397526657, 0.2031053749740721, 0.2053289011692765, 0.20675743972242, 0.20074108092922438, 0.19851157803033914, 0.11542463090078148, 0.07577889652029968, 0.08815144486529591, 0.08246822141024768, 0.09469043669437727, 0.06916785794589664, 0.07986680365441423, 0.08146027774551279, 0.08444587324514519]}, "mutation_prompt": null}
{"id": "098e97b1-66db-4ace-a28a-270f1bca4e3e", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "7ee808e5-ac97-48b0-bb91-9ffb03dd3d68", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_local_positions = np.copy(self.population)\n        self.best_local_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = np.zeros(self.dim)\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.alpha = 0.75  # Constriction factor\n        self.beta = 0.25   # Perturbation factor\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            self.best_local_fitness[i] = self.fitness[i]\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = np.copy(self.population[i])\n        \n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Quantum-inspired position update\n                p_local = self.best_local_positions[i]\n                p_global = self.best_global_position\n                omega = np.random.uniform(0, 1, self.dim)\n                new_position = omega * p_local + (1 - omega) * p_global\n                perturbation = self.beta * np.random.normal(0, 1, self.dim)\n                new_position += self.alpha * perturbation\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                \n                # Evaluate new position\n                new_fitness = self.evaluate(func, new_position)\n                \n                # Update personal best\n                if new_fitness < self.best_local_fitness[i]:\n                    self.best_local_fitness[i] = new_fitness\n                    self.best_local_positions[i] = np.copy(new_position)\n                \n                # Update global best\n                if new_fitness < self.best_global_fitness:\n                    self.best_global_fitness = new_fitness\n                    self.best_global_position = np.copy(new_position)\n                    \n        return self.best_global_position", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) using quantum particles' superposition states for enhanced global search capabilities.", "configspace": "", "generation": 28, "fitness": 0.22062434363729716, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.4546087021161659, 0.44432012737915383, 0.4248922630513936, 0.4506896909511996, 0.4667282786897162, 0.4315874640024937, 0.4377775615142637, 0.4266575315022424, 0.44670546382317555, 0.060444421988123165, 0.08597134319192823, 0.06795063776815113, 9.999999999998899e-05, 0.0361496241934246, 9.999999999998899e-05, 9.999999999998899e-05, 0.049533018312714394, 9.999999999998899e-05, 0.14900702658928244, 0.07949584259692744, 0.1178596294477986, 0.1136786784152124, 0.09037202049820536, 0.12985493526178138, 0.12096606911480356, 0.11094087952685172, 0.08720779166417547, 0.09869173173562362, 0.11000032694739459, 0.08762870299029057, 0.08895055167140331, 0.08444337503792176, 0.08210568072317981, 0.11751578877437319, 0.1314081417916967, 0.08702846448192503, 0.8903033000652258, 0.9410195730059671, 0.8948764956625948, 0.8193064384923694, 0.9115242426798087, 0.8415747976229848, 0.9007943126015701, 0.8463134416396219, 0.8587310090856374, 0.2908468671094906, 0.2773622169258566, 0.30130291258550235, 0.31596317488747816, 0.2837301797092766, 0.30643164184292804, 0.3106499425114293, 0.31127850634874255, 0.3088749509855828, 0.361255923765736, 0.17033313254051174, 0.13675244961499888, 0.2182700397471108, 0.5474497896188715, 0.23013815185131115, 0.17316139901404692, 0.17975752150685553, 0.22995413979411217, 0.21993484097108362, 0.12934766131458453, 0.13414624095261374, 0.16863844096805947, 0.18940787063323739, 0.18730301424050955, 0.12977108690142536, 0.11225400990760814, 0.2005948591128789, 0.1700948126761921, 0.1802517002846986, 0.16396717008182293, 0.1659598651418277, 0.17217138807227694, 0.16127717554476217, 0.19584120069052602, 0.11496242437064685, 0.17592784712546183, 9.999999999998899e-05, 0.01474565072359768, 0.11187421228208272, 0.03216947128932257, 0.06603865104973572, 0.0421428787635576, 0.03174884597941341, 9.999999999998899e-05, 0.028469780973890968, 0.08696804792843127, 0.09769331087687572, 0.10875571120997096, 0.05635341555812756, 0.036039661740895124, 0.025484915050947188, 0.10661032314007857, 0.06592615604763374, 0.09061537689482158, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11269428995402209, 0.09455391734485397, 0.10355915665504623, 0.08935403705599387, 0.09417128785230378, 0.0990854039105743, 0.09498118375780451, 0.07996046576074367, 0.0809193572197624, 0.4131423229043726, 0.4047461162631659, 0.40317124523820147, 0.4069093763472006, 0.40347264916862113, 0.40697306277042566, 0.40681885562773235, 0.40044219286435134, 0.4581775191766331, 0.09128735663384868, 0.11344764422357989, 0.07450116102295179, 0.0645779435480427, 0.07669875273874038, 0.10236770458462796, 0.12660905726839022, 0.10042887075031959, 0.09693689084302493, 0.31403942445278676, 0.2937201471653348, 0.15792143197793518, 0.2579610708593453, 0.25587920070958003, 0.23842352374720543, 0.23615774778421583, 0.23073440595993255, 0.2712085052629092, 0.25789746971380045, 0.322680603835242, 0.25912221136069635, 0.29161824262700553, 0.3107015466197982, 0.27954848771401, 0.2020871300969619, 0.290246676818539, 0.22554383396635236, 0.1876945659774718, 0.21245452450344637, 0.23186500435603596, 0.24463746599904512, 0.20329651111624458, 0.24429788555407972, 0.19651014474644557, 0.2361231191066525, 0.1874749461149252, 0.22496111704931765, 0.1750947088917243, 0.16580689317345754, 0.2227444746261652, 0.21119940442721075, 0.2066693747707269, 0.22903277419130874, 0.19760676602332372, 0.22944195697530922, 0.17124259737195047, 0.23392026775481445, 0.19531908647412188, 0.186556188055657, 0.1908257093609591, 0.1750195567071987, 0.18857062875529573, 0.2896855560665448, 0.1696916984059782, 0.18886680351055707, 0.17855348295637175, 0.1133604376866626, 0.1738684167391179, 0.20166715164329174, 0.6638308740427048, 0.11634199370847986, 0.1699240998215621, 0.6835969888165143, 0.66528971018247, 0.15752900775714174, 0.6334076328492476, 0.5912688932493465, 0.17003459053517422, 0.5114350347735831, 0.29955471011023616, 0.5280351253635404, 0.3688952108924196, 0.1961496334225299, 0.19663101291484175, 0.19983711822569517, 0.1813828551738833, 0.21038029282431547, 0.1803097280264594, 0.18234728847347614, 0.20912474092575717, 0.1810364803887219, 0.07214183696865606, 0.08123876454767287, 0.08353457933632924, 0.07853783830859862, 0.1047026446135576, 0.09270197525385826, 0.11644855930659648, 0.08552902930923334, 0.08002493881697426]}, "mutation_prompt": null}
{"id": "3fb34fb1-5273-4de5-ba99-92b0f309b914", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "14eec2ae-9ecf-44c5-aec0-fde48ff0d1f2", "solution": "import numpy as np\n\nclass AC_PSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_parameters(self, iter_ratio):\n        w = 0.9 - 0.5 * iter_ratio\n        c1 = 1.5 + 1.0 * iter_ratio\n        c2 = 1.5 - 1.0 * iter_ratio\n        return w, c1, c2\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.positions[i])\n            self.personal_best_fitness[i] = fitness\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.positions[i]\n        \n        while self.evaluations < self.budget:\n            iter_ratio = self.evaluations / self.budget\n            w, c1, c2 = self.adaptive_parameters(iter_ratio)\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocities[i] = w * self.velocities[i] + \\\n                                    c1 * r1 * (self.personal_best_positions[i] - self.positions[i]) + \\\n                                    c2 * r2 * (self.global_best_position - self.positions[i])\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n                \n                fitness = self.evaluate(func, self.positions[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_positions[i] = self.positions[i]\n                    self.personal_best_fitness[i] = fitness\n                    if fitness < self.global_best_fitness:\n                        self.global_best_fitness = fitness\n                        self.global_best_position = self.positions[i]\n\n        return self.global_best_position", "name": "AC_PSO", "description": "Adaptive Cooperative Particle Swarm Optimization (AC-PSO) combining cooperative behavior and adaptive parameters to enhance convergence and diversity.", "configspace": "", "generation": 30, "fitness": 0.2492720416400521, "feedback": "The algorithm AC_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.6657714767118496, 0.6473714466192555, 0.6441350209585017, 0.6882087957768865, 0.19022476003988753, 0.640906864301053, 0.17262791879910255, 0.6566806382178978, 0.5985807005381849, 0.2900695431354693, 0.056213955174403085, 9.999999999998899e-05, 0.38929674178198626, 0.4605630744764778, 0.44121205321037427, 0.3123156292246968, 0.41591550297550506, 0.36992480013937024, 0.12924688647528604, 0.11236768317025014, 0.10493650029841772, 0.13953705365562796, 0.06737048117218036, 0.13668880150605311, 0.104950705776657, 0.10837036389225596, 0.17278908078719601, 0.09796572654570956, 0.10140783384163221, 0.1099939694140325, 0.11322762699561262, 0.12010994846643352, 0.11029152973961298, 0.23629153976768968, 0.09082470265116771, 0.1665870857762145, 0.9919334777481786, 0.991750586431108, 0.9907399789062888, 0.988068529839374, 0.9920614336547008, 0.9890358296082242, 0.9924137516850693, 0.9915063716820463, 0.991296960281187, 0.4725638940535365, 0.43097733238752256, 0.47005754013133316, 0.15785839518266853, 0.13370890224609244, 0.4604602689411318, 0.08523259208235778, 0.08832380482821822, 0.08519576551070662, 0.742460882600485, 0.21357390764852313, 0.5028793836607214, 0.30538873303301795, 0.6087698159382293, 0.178426261651216, 0.13665268683849097, 0.1938498131594254, 0.3460480136817047, 0.18488915394320926, 0.15218618063503508, 0.13271784498576766, 0.1502381473499168, 0.15596147825895845, 0.09822226313600635, 0.15998961944777568, 0.13820392418132033, 0.144946241849495, 0.15167731106506677, 0.1026819111188062, 0.17828162313569773, 0.26145490799922566, 0.16457620887779845, 0.158001013323114, 0.12524900927980287, 0.12366838958325421, 0.16055771025124432, 9.999999999998899e-05, 9.999999999998899e-05, 0.00311367143757324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025580718039517336, 0.004038260643304037, 0.003403758291948389, 0.07573124934415976, 0.05169626755502499, 0.13588069356197208, 0.09490456926709046, 0.0014605417786855979, 0.01517479874826655, 0.07071123371605914, 0.04592506163282628, 0.04786039286184729, 0.0224900852709512, 0.02171522060325537, 0.03637252563082405, 0.05280431093120619, 0.09203439217602294, 0.05867803862935417, 0.1284281438091175, 0.06193968216020751, 0.044832580903110264, 0.09551582611320919, 0.05884507583137888, 0.04372346581421338, 0.1214873492044597, 0.1266744888018858, 0.09535800325321475, 0.04829596832883598, 0.06807053059127488, 0.06496692806325988, 0.44253211417353666, 0.3928489176146853, 0.4298031434424766, 0.5175406178822346, 0.43903119359594767, 0.4418784577108751, 0.46105338984368704, 0.42042161457124727, 0.45088606435612766, 0.05984404978435742, 0.08629979640953878, 0.0638206436094646, 0.08530000655173275, 0.09806736851229636, 0.11293046198527923, 0.09686831359630599, 0.11843158799294373, 0.1005906013483362, 0.3169292257801659, 0.216795619148081, 0.18001203610939687, 0.24975273254063723, 0.20440090099442332, 0.19791577105638625, 0.21238953049669762, 0.14769128888701666, 0.26679935398228916, 0.3413181051158144, 0.3904478803616628, 0.3278632655224659, 0.3094033934080922, 0.3753811212776915, 0.30888625593677643, 0.4772057761293449, 0.3831923668966539, 0.40055952326213184, 0.218830509527711, 0.20128697041196453, 0.18648303187430493, 0.17806960095775126, 0.16524322798288904, 0.15654026593511772, 0.21784763724628642, 0.278232924396532, 0.29939443298012725, 0.20989679401347627, 0.19860620797858697, 0.18944213008486444, 0.21642418342852265, 0.18822758212641333, 0.2052416285144647, 0.20044503299111593, 0.20140784051450922, 0.21738748034742994, 0.20992417678197828, 0.1846160998112455, 0.1996119362652632, 0.21183950478740898, 0.20469860316253552, 0.41383976604950545, 0.21383927342214737, 0.49150979492731905, 0.20335976378066545, 0.6231409535816529, 0.16859113656768954, 0.12437441933298288, 0.6716554384639644, 0.19351319365499453, 0.6334900450031311, 0.11958638671860411, 0.16440084247393771, 0.16362661470103246, 0.479099981596687, 0.3023360246386967, 0.6015482249193529, 0.42709615362506514, 0.16255761697161142, 0.6703462446506132, 0.19685815625142555, 0.32217331709717534, 0.20923730270401997, 0.1884313606752126, 0.19373919182743393, 0.18358988186759362, 0.2017193048028103, 0.18361723244781802, 0.18537323977425402, 0.20513552332862095, 0.2142738583556012, 0.1832405258689862, 0.07700074286534309, 0.07298688249859209, 0.08396986764413139, 0.08021967916089157, 0.08588471163523059, 0.07962732887612334, 0.08115081007419922, 0.0763510720226237, 0.08945071054617237]}, "mutation_prompt": null}
{"id": "687a4a41-ae4e-43c5-bc0d-b3a061238360", "solution": "import numpy as np\n\nclass APSO_QP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.evaluations = 0\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_perturbation(self, position):\n        alpha = np.random.uniform(0, 1, self.dim)\n        return position + alpha * np.sin(2 * np.pi * alpha)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.personal_best_fitness[i] = fitness\n            self.personal_best_positions[i] = self.population[i]\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      self.cognitive_coeff * r1 * (self.personal_best_positions[i] - self.population[i]) +\n                                      self.social_coeff * r2 * (self.global_best_position - self.population[i]))\n                \n                # Update position\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n                # Apply quantum perturbation\n                perturbed_position = self.quantum_perturbation(self.population[i])\n                perturbed_position = np.clip(perturbed_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                perturb_fitness = self.evaluate(func, perturbed_position)\n                if perturb_fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = perturb_fitness\n                    self.personal_best_positions[i] = perturbed_position\n                    if perturb_fitness < self.global_best_fitness:\n                        self.global_best_fitness = perturb_fitness\n                        self.global_best_position = perturbed_position\n\n        return self.global_best_position", "name": "APSO_QP", "description": "Adaptive Particle Swarm Optimization with Quantum-Inspired Perturbations (APSO-QP) combines adaptive velocity adjustment and quantum-inspired perturbations to enhance exploration and exploitation in continuous optimization.", "configspace": "", "generation": 31, "fitness": 0.1912179088631084, "feedback": "The algorithm APSO_QP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.3430598852313451, 0.34554839752033684, 0.3726544464342433, 0.3468553689201772, 0.3792336820305633, 0.3364463402557202, 0.36294355098548237, 0.35864259307977087, 0.36142724731462694, 0.03795573879856384, 9.999999999998899e-05, 9.999999999998899e-05, 0.04813838964961836, 0.000580336470024645, 9.999999999998899e-05, 0.0005577328195136566, 9.999999999998899e-05, 9.999999999998899e-05, 0.10364716237973948, 0.0976220777845912, 0.08324969676574545, 0.11704779374630103, 0.09225612688038232, 0.09262713394721156, 0.0857096109678066, 0.09811827729238487, 0.09775212698956115, 0.07749588511979122, 0.08322743743077676, 0.09057791995854314, 0.10311835264679414, 0.09058877118224029, 0.08024334238328434, 0.08105616023518647, 0.07735457137450663, 0.05943474262330639, 0.989696694747845, 0.9902936934706347, 0.9896446943334968, 0.9768451590467842, 0.9752043874934444, 0.9753385107964218, 0.9860438776675677, 0.9882876163000077, 0.9883044832014856, 0.21807672572095327, 0.21747768663949996, 0.2276953988650594, 0.21264644091672313, 0.23334165544361463, 0.23218689089879452, 0.22150608570452213, 0.22092500406518534, 0.21447935761350045, 0.21576630476539982, 0.178845852594248, 0.20081844593605813, 0.3163114550764764, 0.24174517455725586, 0.2957835144971417, 0.22584496304707347, 0.30068211298369707, 0.23922868651485907, 0.15686381807355387, 0.1458698883206464, 0.12806095789024563, 0.12019240854864432, 0.12015957801223709, 0.1409773200184753, 0.16602937731906808, 0.12846713115905417, 0.14983640625262473, 0.17724510995658493, 0.08475464777982267, 0.14321265897570634, 0.14277226497274076, 0.1163565626317995, 0.15621480945308563, 0.13562844985859301, 0.08332435347463596, 0.12910385537211166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00432952096289807, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03658012888153317, 0.07132970962424823, 0.08460352356031886, 0.05568781191347549, 0.020091562949920316, 0.011331967257687259, 0.032467809345409826, 0.04970384018133245, 0.017059692474498456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05741885013829506, 0.04122233363048433, 0.05978637224471384, 0.0592577144979447, 0.057233707744317686, 0.05144209979929182, 0.06295747320459977, 0.056491529829940546, 0.04823123890563641, 0.3410658225902461, 0.3330509022158441, 0.34034798259484955, 0.3521560375389835, 0.3558176889243003, 0.3298739412022168, 0.3521627258330542, 0.3524527753122113, 0.3692888549090785, 0.0841609296402448, 0.11779849841456946, 0.08487914920425732, 0.08729315948671279, 0.10906220397341515, 0.09504016248098357, 0.10758802656217958, 0.09111509310835553, 0.0907994310707323, 0.15792445083798246, 0.21155074634057158, 0.20050947617040094, 0.23975704514786855, 0.18829020631759852, 0.20212259874688854, 0.2067128614157262, 0.16864668968990482, 0.18576916428829393, 0.25672750773761377, 0.24022053691505318, 0.266553185195341, 0.2589940953368659, 0.24540045851265624, 0.25058855266581803, 0.2557336784691696, 0.2748669368145955, 0.24933439449315986, 0.17823452664019135, 0.18940406644410412, 0.22771643719736434, 0.17138772196092245, 0.207491964591887, 0.18874868708597448, 0.1977412503107996, 0.22548890128074228, 0.19633231059145473, 0.20088806629487954, 0.1955314072262766, 0.20251201332625168, 0.19967193441256037, 0.22275516900960468, 0.1863735933845485, 0.20813417153750924, 0.20830351980683226, 0.21202772783441737, 0.18795882229471783, 0.19272186735057573, 0.1993551332066793, 0.19627615148462652, 0.1795235376287979, 0.18024384712920893, 0.17939119307531892, 0.18154118606389347, 0.18007734149794763, 0.5672362811958158, 0.1580268677432881, 0.15257973553503001, 0.5422610302261535, 0.19623709186227667, 0.19662564554972717, 0.0997280433155251, 0.16932395995217797, 0.20914823336981836, 0.44409610394846655, 0.15477712412077393, 0.12437064534723663, 0.20671181820069862, 0.16818718965445767, 0.20797280329176615, 0.1050047290654822, 0.10458154782293405, 0.39764968035408677, 0.1751877580867205, 0.1874186644255893, 0.18777672449885485, 0.1815221993556877, 0.1863613138348834, 0.18584499153576983, 0.18361477800719794, 0.19848538041136365, 0.21146842825896195, 0.09169548632529545, 0.08369732931758078, 0.09215878613116635, 0.06654621904296032, 0.08691716027614671, 0.09349715816605275, 0.0932592897281993, 0.08051981627588134, 0.08040152403949063]}, "mutation_prompt": null}
{"id": "76fc3ced-e9c3-4aac-ad95-a0764882d035", "solution": "import numpy as np\n\nclass APSO_DP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.7   # Inertia weight\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.F = 0.5   # Differential mutation factor\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            if fitness < self.personal_best_fitness[i]:\n                self.personal_best_fitness[i] = fitness\n                self.personal_best_positions[i] = self.population[i]\n            if fitness < self.best_global_fitness:\n                self.best_global_fitness = fitness\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                social_component = self.c2 * r2 * (self.best_global_position - self.population[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_component + social_component\n\n                # Differential perturbation\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2 = self.population[np.random.choice(indices, 2, replace=False)]\n                perturbation = self.F * (x1 - x2)\n                trial_position = self.population[i] + self.velocities[i] + perturbation\n                trial_position = np.clip(trial_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate trial position\n                trial_fitness = self.evaluate(func, trial_position)\n                if trial_fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = trial_fitness\n                    self.personal_best_positions[i] = trial_position\n                if trial_fitness < self.best_global_fitness:\n                    self.best_global_fitness = trial_fitness\n                    self.best_global_position = trial_position\n\n                # Update particle position\n                self.population[i] = trial_position\n\n        return self.best_global_position", "name": "APSO_DP", "description": "Adaptive Particle Swarm Optimization with Differential Perturbation (APSO-DP) combines particle swarm dynamics and differential perturbation for enhanced exploration and exploitation adaptability.", "configspace": "", "generation": 32, "fitness": 0.138881184037883, "feedback": "The algorithm APSO_DP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.1849314376365695, 0.21458284298169883, 0.23091305022284492, 0.2823039362498748, 0.18742809595723897, 0.2595795631753235, 0.22662092394265754, 0.2327215948704342, 0.222097459534783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05010159669866332, 0.05492066863597178, 0.0472956285934244, 0.0493217974964657, 0.05966898230533224, 0.05122559052024411, 0.05518516263853945, 0.04783526677926497, 0.04645360023718237, 0.039264410999113486, 0.05624392251567678, 0.039063224996127244, 0.042019227445976304, 0.04571983219002318, 0.030890200019280334, 0.04288240587071446, 0.04616592366906558, 0.03369989105038074, 0.9926097384834951, 0.9934885937324851, 0.9937027620983604, 0.9874973367882308, 0.9934773366134457, 0.9860991544188193, 0.994149469228836, 0.9888176157098763, 0.9828223650291187, 0.1007068431316599, 0.0567431616099644, 0.0861306519797459, 0.10744127276557225, 0.11811973760837102, 0.10107052776933667, 0.08653442409752332, 0.09156959536905984, 0.10847672795357832, 0.16415837296390423, 0.12885354126835957, 0.158573408209286, 0.15035593278941384, 0.16944294989240138, 0.16663190842515774, 0.19049547726597715, 0.14405754771627488, 0.11892187488357542, 9.999999999998899e-05, 9.999999999998899e-05, 0.012213166827277022, 0.019635433116950485, 0.06288631450292503, 0.04759534203806093, 0.0057906817950994505, 0.019369117220779608, 0.046865964469610444, 0.04709524305094348, 0.04747307388674893, 0.034822913393990906, 0.001814773704740258, 0.03134054238956885, 0.022175340381553887, 0.007943991401896944, 0.07507390828175198, 0.018501419065770075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04377154000075445, 0.04250992115232799, 0.06368548299926535, 0.03909975366274032, 0.04529625921950886, 0.05030039428669897, 0.039199805162435264, 0.06996170701406623, 0.05876358230211387, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012111254382667358, 9.999999999998899e-05, 0.008654734022528476, 0.01893448130249764, 0.00902494244872365, 0.04415636612609364, 0.010420690896760454, 0.014002731596283402, 0.010469803445879555, 0.23278795874724778, 0.21529253477386778, 0.22676621130739205, 0.23562977737623136, 0.22771984662931632, 0.22328855345773413, 0.20777948306602423, 0.22184414004576192, 0.22025615935540277, 0.06073144186409085, 0.054657399474776325, 0.061200425630173805, 0.05620597275053629, 0.04992452290543681, 0.05769125262660513, 0.06246603248187366, 0.055824373624975276, 0.06348181869461966, 0.13064813313253743, 0.16717300059845508, 0.22177725738074827, 0.14082158090870145, 0.13628966271843423, 0.1351007794546646, 0.14565166299725718, 0.1755419634429063, 0.12752467753301244, 0.17550190042679437, 0.1756720580836063, 0.18769880172114384, 0.16159328836008913, 0.17316986653129918, 0.19015019144510836, 0.18920663720397146, 0.18874564607812572, 0.1840314663719348, 0.13131901548010316, 0.12764161914434613, 0.12794776148710207, 0.1117160232386466, 0.12488551057006803, 0.11583530759288041, 0.1442528122065645, 0.1483132259853066, 0.12705623650492348, 0.16002315236963205, 0.1544845176614572, 0.16056312175572895, 0.168840358126783, 0.15071199357557874, 0.1837249142828261, 0.16645350700779804, 0.1359084379002803, 0.16419422477702228, 0.15218655941817794, 0.15098922234263923, 0.15591033282007882, 0.14241772752233206, 0.14941530072701992, 0.1603879540952846, 0.15174388557911733, 0.1494381797637705, 0.1513555155283608, 0.1922752735678699, 0.1695124523102235, 0.1856475812720242, 0.16304691126687487, 0.16133016055405913, 0.1726671121864536, 0.16018004908420191, 0.16036548023330033, 0.16777745917477827, 0.23902199339788188, 0.15613252790983734, 0.16263941265777537, 0.16495811628039903, 0.14115295473356582, 0.16245475937009868, 0.22095611991065545, 0.19485760826962228, 0.18741009982949808, 0.1923479291259801, 0.18312222107589582, 0.17284304931105998, 0.18800664613367357, 0.19880372085606912, 0.17869258523526965, 0.1937943922523555, 0.19376246766644833, 0.18151091501443584, 0.0779312214836162, 0.04757432731704525, 0.05483316353158074, 0.07659453314178499, 0.06046313724829233, 0.058932931155517454, 0.06162837605188909, 0.04786359013682595, 0.04653646513186993]}, "mutation_prompt": null}
{"id": "cdc23949-6de5-45d9-8eb1-045c928edd0e", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.alpha = np.full((self.pop_size, self.dim), 0.5)  # Quantum probability amplitudes\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_rotation(self, alpha, beta, success):\n        theta = 0.1 * (1 if success else -1)\n        new_alpha = alpha * np.cos(theta) - beta * np.sin(theta)\n        new_beta = alpha * np.sin(theta) + beta * np.cos(theta)\n        return new_alpha, new_beta\n\n    def observe(self, alpha):\n        return np.where(np.random.rand(self.dim) < alpha, 1, -1)\n\n    def generate_solution(self, bit_representation):\n        return np.clip((bit_representation * (self.upper_bound - self.lower_bound) / 2), \n                       self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                bit_representation = self.observe(self.alpha[i])\n                candidate_solution = self.generate_solution(bit_representation)\n                candidate_fitness = self.evaluate(func, candidate_solution)\n                \n                if candidate_fitness < self.fitness[i]:\n                    success = True\n                    self.population[i] = candidate_solution\n                    self.fitness[i] = candidate_fitness\n                    if candidate_fitness < self.best_global_fitness:\n                        self.best_global_fitness = candidate_fitness\n                        self.best_global_position = candidate_solution\n                else:\n                    success = False\n                \n                # Update quantum probabilities\n                beta = np.sqrt(1 - self.alpha[i]**2)\n                self.alpha[i], _ = self.quantum_rotation(self.alpha[i], beta, success)\n\n        return self.best_global_position", "name": "QuantumInspiredEA", "description": "Quantum-inspired Evolutionary Algorithm (QEA) utilizing quantum bits representation and rotation gates for enhanced exploration.", "configspace": "", "generation": 33, "fitness": 0.08022547950800923, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.20.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.08774815958588056, 0.06432772651221763, 0.09169502728636048, 0.08952233024927114, 0.062138895920524906, 0.07709668639236078, 0.07795415841203734, 0.07431300570909605, 0.06863468668670525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.005375109906600173, 0.010643411704069683, 0.0012186513362246743, 0.006669962766643223, 0.018248263482334326, 9.999999999998899e-05, 0.010674738340807233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.0004952459975243739, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.994646355559458, 0.994609865040122, 0.9946275442027833, 0.9947618904770972, 0.9947613595111876, 0.9947090893233165, 0.9912943935706252, 0.9912834717003933, 0.9912205327068777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.052233822106523387, 0.0667108215001172, 0.02725496812965944, 9.999999999998899e-05, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.13879659513922615, 0.14838054695461433, 0.09425923977458062, 0.09708865527373767, 0.09580441870675127, 0.16112956940342849, 0.09716408355800721, 0.1210557193025883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.0932705807675337, 0.09333464128258329, 0.09298887851643722, 0.09855305120349966, 0.10852972522114013, 0.07665827650282031, 0.08808199726801991, 0.0729203554331358, 0.07726393575557644, 0.09606267484187503, 0.0962505644704219, 0.14352810184653642, 0.13800672315110074, 0.1138073754026484, 0.1025140421398899, 0.12028165949079228, 0.17377774300845283, 0.11363346445524236, 0.03812976025022474, 0.034008147686441226, 0.05463654710198407, 0.056957211629895754, 0.06406947898089654, 0.06342850570876157, 0.0837317855149382, 0.0997711199450243, 0.06412526395900253, 0.11943364695601921, 0.09388200728521401, 0.13345086981233123, 0.10289055837941885, 0.07855245954393053, 0.09307045902971678, 0.12245976138762271, 0.07872931414554718, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07628097560956737, 0.07641538314779095, 0.08167024703901915, 0.06718871428537254, 0.1207914665021157, 0.06661401029160186, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.020576850526452972, 0.0506857903344724, 0.03738259240699027, 0.045511073114331335, 0.04690376827171172, 0.04019044166964181, 0.04143420019681854, 0.13480174570059533, 0.128372137474824, 0.14763022729669195, 0.15012444872467545, 0.15011140848048599, 0.15016336346697878, 0.14969714796693134, 0.1367527522493026, 0.14689007985489466, 0.007141279024827196, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.020045516730027746, 0.016228383701229143, 9.999999999998899e-05, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "52d183d6-e762-47b3-b363-f615cbb67f6e", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.beta = 0.5  # Contraction-expansion coefficient\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.personal_best_fitness[i] = fitness\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                p_best = self.personal_best[i]\n                g_best = self.global_best_position\n                u = np.random.rand(self.dim)\n                mbest = np.mean(self.population, axis=0)\n                fi = np.random.rand()\n\n                p = fi * p_best + (1 - fi) * g_best\n                temp = np.abs(p - self.population[i])\n                L = np.random.choice([-1, 1], size=self.dim)\n\n                self.population[i] = p + L * self.beta * temp * np.log(1/u)\n\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                fitness = self.evaluate(func, self.population[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best[i] = self.population[i]\n                    if fitness < self.global_best_fitness:\n                        self.global_best_fitness = fitness\n                        self.global_best_position = self.population[i]\n\n        return self.global_best_position", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) combining quantum mechanics principles with particle swarm optimization for enhanced global search capabilities.", "configspace": "", "generation": 34, "fitness": 0.2600260561579545, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.26.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9616249414155184, 0.955467133877679, 0.9700609143548242, 0.9514344291202435, 0.9619122532926635, 0.96722216793229, 0.9484725913161712, 0.8930105359384565, 0.9457796844214779, 0.8760064890574573, 0.5837288884233839, 0.4380961743279643, 0.6578898582593267, 0.8422606337580204, 0.8293588462863737, 0.6290959642377565, 0.8396768510095279, 0.753752689557635, 0.0652343404474155, 0.0812091679448893, 0.0985148437063561, 0.1034430472113832, 0.09883453053763003, 0.14984552039646026, 0.07871186221206006, 0.08735746372670128, 0.13690038802219895, 0.11939310204589981, 0.08702179753048744, 0.07095720360603486, 0.1034474465190629, 0.07841623183099689, 0.0983798699823556, 0.08797663298728187, 0.054577313665904126, 0.07580910427776011, 0.9372214163210755, 0.9153120546176023, 0.9130848307909353, 0.9526065985539666, 0.9416297143105675, 0.9679610475150716, 0.9499905904126109, 0.9155041665269725, 0.9421908466607978, 0.08604464398745804, 0.11589644960983747, 0.33912490623081315, 0.15581067697710327, 0.2308602192339867, 0.16863880192063152, 0.2686141482374522, 0.12629239004622328, 0.12920267187042556, 0.15689895460233327, 0.23169368072153296, 0.15935881682450104, 0.18059574336163675, 0.2157539411300914, 0.21129030135643379, 0.10394708173971667, 0.15666353535330213, 0.10362209384753573, 0.1691697978315988, 0.1316363982266543, 0.17593597408399386, 0.19793163083450205, 0.1349920176151418, 0.18355641836445746, 0.16406365826114344, 0.13513317218143095, 0.1531771800873183, 0.16944885543575527, 0.15763631173031467, 0.4204394899132555, 0.14885881863574646, 0.13287579725073306, 0.13615908326415416, 0.21675618969289512, 9.999999999998899e-05, 0.11451782475558159, 9.999999999998899e-05, 9.999999999998899e-05, 0.010637129500895792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060357926949161644, 0.04236302796521707, 9.999999999998899e-05, 0.08302990449290137, 0.053175415923339964, 0.08352564254444128, 0.06925556729602866, 0.045585346679099525, 0.015780125033613368, 0.1482114339903965, 0.055567629490875126, 0.09300415822894759, 0.10733413316273566, 0.16483201254360735, 0.055580496003632796, 0.1611493418047607, 0.11532644613182308, 0.1371197981552439, 0.20237775773062217, 0.11976827475862717, 0.12337857959746834, 0.24058031431362747, 0.2130533490503772, 0.23959238710111241, 0.07448561213015947, 0.008152959187613273, 0.10088875632709282, 0.2439101591555234, 0.08475847784286394, 0.08597119741483239, 0.5176464503284259, 0.4175466033781092, 0.4611851687065859, 0.4197525875130639, 0.4483777550532504, 0.5314352838930518, 0.48973598651010675, 0.483602071685873, 0.4627538860857061, 0.06652857893267561, 0.06138521882686421, 0.06779685171411742, 0.09110926435010913, 0.08748520320153452, 0.16648563825734908, 0.10292357954658238, 0.10160101833642943, 0.07417996316217845, 0.17743515124096143, 0.1985098273517546, 0.18310423228854023, 0.16402317713848102, 0.2670647043404468, 0.15502777767702713, 0.133796193795932, 0.1733871713410703, 0.18180612202799196, 0.2616645469642359, 0.26716473929206463, 0.1702541149349598, 0.20868382805051056, 0.21576297167834946, 0.33140630591625564, 0.20486028871063233, 0.2658744651523983, 0.22292549043863574, 0.1572409561344511, 0.2088085569007163, 0.1455824374234842, 0.19620370855470393, 0.1781044079124755, 0.1857109536685917, 0.21542781950112555, 0.25419606553357876, 0.14305118559627628, 0.2497016542856908, 0.2718167171616799, 0.190382049615075, 0.304023667191896, 0.25129343777602864, 0.2145222726027498, 0.20357121249881915, 0.1982028605105508, 0.24273581846235048, 0.1757135033767634, 0.17802706065995522, 0.1730197776312663, 0.16441869972448786, 0.2597504329537549, 0.17667750774737156, 0.2066668487578266, 0.17867871669547708, 0.20001369687798098, 0.18872700409681797, 0.12649754368945543, 0.1538929677709011, 0.17328149771123935, 0.20173017524858505, 0.9382692489930705, 0.10002239120206846, 0.16998457197889716, 0.6044259411392332, 0.43792484112219454, 0.15805380695637739, 0.07352440177413211, 0.21270191451100107, 0.17014823856957773, 0.4904480004711832, 0.10539681154267766, 0.10523423114086439, 0.17949864829405082, 0.19194424009842537, 0.20173360886722136, 0.19633269268614595, 0.20413009141415206, 0.19739894446828588, 0.1939623974432536, 0.20742328447486313, 0.23773921437949708, 0.23314223110368382, 0.11160926931702175, 0.1044596923998361, 0.0960086357303781, 0.0982481494139198, 0.08167260636829976, 0.10501715580428628, 0.11162843897958374, 0.11307983699393409, 0.09407794571607864]}, "mutation_prompt": null}
{"id": "8de5f8b2-2e5d-4a0e-af16-4d6c60e1c689", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "1ca68018-c880-4e95-b357-9d82e37321a3", "solution": "import numpy as np\n\nclass CEPSO_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_local_positions = self.population.copy()\n        self.best_local_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.5 # Cognitive coefficient\n        self.c2 = 1.5 # Social coefficient\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def dynamic_neighborhood(self, i):\n        radius = max(1, int(self.pop_size * 0.1))\n        distances = np.linalg.norm(self.population - self.population[i], axis=1)\n        neighbors = np.argsort(distances)[:radius]\n        return neighbors\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            self.best_local_positions[i] = self.population[i]\n            self.best_local_fitness[i] = self.fitness[i]\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                neighbors = self.dynamic_neighborhood(i)\n\n                local_best_neighbor = neighbors[np.argmin(self.best_local_fitness[neighbors])]\n                local_best_position = self.best_local_positions[local_best_neighbor]\n                \n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocities[i] = (\n                    self.w * self.velocities[i]\n                    + self.c1 * r1 * (self.best_local_positions[i] - self.population[i])\n                    + self.c2 * r2 * (local_best_position - self.population[i])\n                )\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n                \n                current_fitness = self.evaluate(func, self.population[i])\n                if current_fitness < self.best_local_fitness[i]:\n                    self.best_local_fitness[i] = current_fitness\n                    self.best_local_positions[i] = self.population[i]\n                    if current_fitness < self.best_global_fitness:\n                        self.best_global_fitness = current_fitness\n                        self.best_global_position = self.population[i]\n\n        return self.best_global_position", "name": "CEPSO_DN", "description": "Coevolutionary Particle Swarm Optimization with Dynamic Neighborhoods (CEPSO-DN) that combines coevolutionary strategies and adaptive neighborhood topologies for enhanced diversity and convergence.", "configspace": "", "generation": 36, "fitness": 0.28448783210326617, "feedback": "The algorithm CEPSO_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.859744446543309, 0.8481004258749892, 0.8631202741595894, 0.8438702780820133, 0.8502455860554415, 0.8605680835521847, 0.8316544489464583, 0.871753885695603, 0.8683421768484958, 0.23828357666976685, 0.37461260805228047, 0.2382046086662204, 0.40773719818763476, 0.3275795744960175, 0.3269815882038901, 0.28850506987628055, 0.3157500258050181, 0.5579370648865514, 0.1481645982802875, 0.08776273788968736, 0.13046540859378897, 0.3423263394393099, 0.10642949446492711, 0.1263331887215261, 0.09130300261244628, 0.09810522682977318, 0.08871839943356241, 0.15122839280731515, 0.08014395367710181, 0.10588409631254059, 0.11826218491919316, 0.10178738987164293, 0.07604280070729241, 0.11110235477774821, 0.08171436448299196, 0.12230989501063394, 0.9773618301083519, 0.9793791870006566, 0.9717372656351918, 0.9517795716426565, 0.9669711323448159, 0.980885277215088, 0.9825728382563373, 0.9768614834478606, 0.9755564697919576, 0.3651007840789352, 0.24540142358591455, 0.5500282290099268, 0.6870175075773046, 0.5024947241108539, 0.5747235180216395, 0.14675114851047677, 0.4639331689793057, 0.5236377550286158, 0.19888739503287234, 0.16504750832383686, 0.21227926097452665, 0.8739323761287127, 0.19212473829879684, 0.21819108144584876, 0.13419760337755526, 0.8055849233517973, 0.17241259563929412, 0.16113144743806496, 0.21146688432793537, 0.2952576711787448, 0.17986112806749133, 0.1356121456832683, 0.23047164258448316, 0.18215029818762918, 0.1695182899542842, 0.24198468214031754, 0.2206139635780041, 0.17451656255745562, 0.18109430135727567, 0.2077469727371667, 0.166133740963757, 0.20685762536103935, 0.24359960049064633, 0.19414197481853857, 0.194710858249466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002831491875067149, 0.04643101748803924, 9.999999999998899e-05, 0.1286666615733567, 9.999999999998899e-05, 9.999999999998899e-05, 0.07597439608622958, 0.03691934911604089, 0.07605634907465753, 0.0634242536956039, 0.08161403879729445, 0.060028741299393396, 0.11382548269607873, 0.05938265903726936, 0.06258586379867215, 0.0797298729394934, 0.13066109896188172, 0.1552057343672788, 0.07664231972349511, 0.0906553423255797, 0.08888400186868695, 0.09134819913060932, 0.0871753912552311, 0.09287115867668039, 0.17282766511012648, 0.10435478904995887, 0.2678298663534425, 0.1372511672578265, 0.03750592959795063, 0.028374881797624263, 0.0824588897050107, 0.10496181010711991, 0.08595586779921816, 0.534856288779512, 0.46602465427705475, 0.5014683206210521, 0.5412103948958942, 0.48668446257282916, 0.5219409821325969, 0.5313715362046074, 0.5137590545339008, 0.4988414943239404, 0.14366456863392119, 0.10145935114033433, 0.09785238784510353, 0.1043969159753858, 0.08982526346912856, 0.0929581535713867, 0.14005434624805857, 0.07334126301626043, 0.14282857446787278, 0.2643840059685417, 0.2800708123548826, 0.24457585844662855, 0.25850561087205004, 0.18914566424826196, 0.21509567665668083, 0.27383382570273584, 0.19094347306652237, 0.18614085852654483, 0.2887449125134275, 0.16885645650008552, 0.3388470389412468, 0.44447898659692364, 0.2766176745723016, 0.23572662688046198, 0.3106879476135116, 0.31186519528369794, 0.38355717140761125, 0.25481202045935314, 0.18270715335050625, 0.19404958654886462, 0.2708785236968583, 0.2027062067113251, 0.24778891135660075, 0.18895913342438597, 0.21156676511499695, 0.18869735735121984, 0.2061258380194776, 0.19487241859392757, 0.2221333031740007, 0.2080421125860309, 0.23173534087810632, 0.19597278853909406, 0.21677525204119552, 0.24274179113663574, 0.19388810963816627, 0.19909174900793591, 0.23475230103893463, 0.2073727457367195, 0.2411021152011773, 0.22097223896365525, 0.20022315467331386, 0.2642268291297568, 0.21889674911868906, 0.23016243635525047, 0.6554932763931285, 0.17459754157810659, 0.8799261707814813, 0.28130152213721826, 0.20058562029167548, 0.8501722898601681, 0.15545411943802379, 0.4886565230681946, 0.526714732600387, 0.5321781423859535, 0.23615265680386688, 0.343931792100048, 0.5075563302065956, 0.1975443536053474, 0.20826044446716196, 0.4046617500173738, 0.2611845722644872, 0.3306964397175559, 0.21261634705150678, 0.1914584350735925, 0.22786498877460115, 0.24310817749592784, 0.20410718389179627, 0.1973237803096446, 0.1976300602223965, 0.2171799910923905, 0.2170537595157369, 0.11542049850385028, 0.08958586397561652, 0.1070138200293893, 0.1118030035642229, 0.09187656122689636, 0.09832434328180173, 0.1176460319926328, 0.10723849013557807, 0.09535375315086347]}, "mutation_prompt": null}
{"id": "496fd9d9-d95e-4280-bce9-2af53f475d60", "solution": "import numpy as np\n\nclass QiPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.5 # Cognitive coefficient\n        self.c2 = 1.5 # Social coefficient\n        self.quantum_prob = 0.05 # Probability of quantum jump\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_jump(self, particle):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.personal_best_fitness[i] = fitness\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = np.copy(self.population[i])\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.w * self.velocities[i] +\n                    self.c1 * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.population[i]) +\n                    self.c2 * np.random.rand(self.dim) * (self.global_best_position - self.population[i])\n                )\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.quantum_prob:\n                    self.population[i] = self.quantum_jump(self.population[i])\n\n                fitness = self.evaluate(func, self.population[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_positions[i] = np.copy(self.population[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best_fitness = fitness\n                        self.global_best_position = np.copy(self.population[i])\n\n        return self.global_best_position", "name": "QiPSO", "description": "Quantum-inspired Particle Swarm Optimization (QiPSO) leveraging quantum mechanics principles and adaptive learning for enhanced exploration and convergence.", "configspace": "", "generation": 37, "fitness": 0.24838210781146403, "feedback": "The algorithm QiPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.705478393194684, 0.6519394969078562, 0.7435707296053051, 0.6977142724106107, 0.6943134781497478, 0.7745482347163465, 0.6666195961415646, 0.7352831130660206, 0.6971385688700438, 9.999999999998899e-05, 0.10006501860107841, 9.999999999998899e-05, 0.06352208685517413, 0.11632778272397992, 9.999999999998899e-05, 0.0597946199291598, 0.05007103875261487, 0.22355084568440342, 0.12322299545137738, 0.12006519954108696, 0.13098077922806428, 0.1618794779425523, 0.12105364004562835, 0.12471852581856968, 0.12517937883973485, 0.1315220016838603, 0.11620484064248737, 0.12651071250617263, 0.13565050177770643, 0.13284595999908377, 0.09325039517023181, 0.12486701562669733, 0.15543922506013608, 0.1020706278266873, 0.11885632919267608, 0.13572009831941378, 0.9908073939896639, 0.989648291484643, 0.9913688054182515, 0.9923730322061883, 0.9887671124140273, 0.9912345953416393, 0.9938728477793464, 0.9914397678478629, 0.9925272299173469, 0.37175085551738174, 0.3106857555116076, 0.2889495830871457, 0.36334653552073815, 0.3214172805709925, 0.35964093458399105, 0.12739062908459875, 0.10260951498441573, 0.10286396313055723, 0.34718621626651325, 0.3422086301375995, 0.25988604314338404, 0.19454938092293372, 0.19362499370949982, 0.19370645928237062, 0.41850392309098783, 0.2368180256052589, 0.5617842007657767, 0.15383309918397503, 0.17497250488272098, 0.1514465663176725, 0.1631651020800624, 0.13236533868785194, 0.08585101484124702, 0.17240143326048307, 0.15740907093564527, 0.15962928896233175, 0.1572998388941823, 0.051045055148386975, 0.1293041056263885, 0.14142122259395928, 0.15032698490045315, 0.18041744698197493, 0.10309703218295652, 0.14450213958966018, 0.19373198887843956, 9.999999999998899e-05, 9.999999999998899e-05, 0.09778456565712135, 9.999999999998899e-05, 0.06433591548698692, 0.01400557285755022, 0.0342226020474693, 9.999999999998899e-05, 9.999999999998899e-05, 0.07894950909666554, 0.02694411042572975, 0.022249016057482418, 0.056082723577580484, 0.01902031813998495, 0.02312137700913841, 0.11549705228843177, 0.13669091631559915, 0.03110365188808195, 0.04581955563525575, 0.11245934980103556, 0.03295922001282503, 0.07235367781093316, 0.08361404707986564, 0.11909992937870917, 0.10680922653059755, 0.08845296933154767, 0.06993130868503028, 0.0641757690903274, 0.264749093442577, 0.15644979939977366, 0.13962460010181732, 0.038260861891308395, 0.08231304319533228, 0.08316499206917216, 0.04919809924507612, 0.0823739887819438, 0.5604140222098803, 0.49850611348085316, 0.48881746334122467, 0.5278661028625831, 0.49260758696608153, 0.4993873819338229, 0.4626984309349613, 0.5180319559214656, 0.5196830014740186, 0.0648430807070084, 0.09467908284742166, 0.09398107274324607, 0.10995547802229011, 0.13907774350492563, 0.11530773332062394, 0.10721576886409179, 0.07318814153856434, 0.16147269078882287, 0.18404184043984773, 0.21947658506678513, 0.19075920828416326, 0.2515524352881473, 0.35705995165131565, 0.17705067738757752, 0.15558144922468164, 0.18456024491739953, 0.2597433293478082, 0.35598447484795037, 0.35645063965101165, 0.35041737420691166, 0.3616546437369489, 0.22271301569678137, 0.3691757550114678, 0.2822865847178684, 0.2649256409740228, 0.1942547513800581, 0.29097332825297295, 0.28839578859466075, 0.21301664837423273, 0.19457314769771328, 0.1899682478390058, 0.319512749232981, 0.2681906114936702, 0.2581804243280772, 0.21402199082105722, 0.1921559563091938, 0.1912466403734161, 0.1969258543797039, 0.20276447028641698, 0.16592028379553025, 0.1972450886670809, 0.23230099912435698, 0.18609287695886034, 0.18139323053033984, 0.195918826298361, 0.1968596964889332, 0.2211934089090578, 0.19400876854125582, 0.20633461392140595, 0.2382706558571034, 0.24290641739865182, 0.3986944790609147, 0.23406206379443806, 0.8801956763651272, 0.38916994139140637, 0.15200655791490847, 0.866548277274821, 0.2001284013717164, 0.1702426607313381, 0.6651527151351393, 0.1702745423090275, 0.8940518435662654, 0.4387839428899659, 0.17048158340156538, 0.20575525039065634, 0.3601639973623787, 0.15597586414576092, 0.21194608854822328, 0.19469787119078363, 0.20282079890188676, 0.14969718363806384, 0.1890734860256147, 0.1743806311579914, 0.19459458106047167, 0.19814484367481078, 0.22962016543561692, 0.1790384638490654, 0.20093670364371252, 0.19136924253508591, 0.18363399777809286, 0.07645889581839205, 0.093634322750478, 0.07957384757294217, 0.08939179725464452, 0.07274936295810497, 0.08016020809283253, 0.11420805363723918, 0.07722918134684387, 0.07792250765841291]}, "mutation_prompt": null}
{"id": "1d9011e0-28b0-410f-b3fe-131edbedf761", "solution": "import numpy as np\n\nclass HS_APA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, \n                                                (self.harmony_memory_size, self.dim))\n        self.fitness = np.full(self.harmony_memory_size, float('inf'))\n        self.best_harmony = None\n        self.best_fitness = float('inf')\n        self.evaluations = 0\n        self.harmony_memory_consideration_rate = 0.9\n        self.pitch_adjustment_rate = 0.1\n        self.bandwidth = 0.1\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adapt_pitch(self, harmony):\n        if np.random.rand() < self.pitch_adjustment_rate:\n            adjustment = self.bandwidth * (2 * np.random.rand(self.dim) - 1)\n            harmony += adjustment\n        return np.clip(harmony, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.harmony_memory_size):\n            self.fitness[i] = self.evaluate(func, self.harmony_memory[i])\n            if self.fitness[i] < self.best_fitness:\n                self.best_fitness = self.fitness[i]\n                self.best_harmony = self.harmony_memory[i]\n\n        while self.evaluations < self.budget:\n            new_harmony = np.zeros(self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < self.harmony_memory_consideration_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_harmony[j] = self.harmony_memory[idx, j]\n                else:\n                    new_harmony[j] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_harmony = self.adapt_pitch(new_harmony)\n            new_harmony_fitness = self.evaluate(func, new_harmony)\n            \n            if new_harmony_fitness < np.max(self.fitness):\n                worst_idx = np.argmax(self.fitness)\n                self.harmony_memory[worst_idx] = new_harmony\n                self.fitness[worst_idx] = new_harmony_fitness\n                if new_harmony_fitness < self.best_fitness:\n                    self.best_fitness = new_harmony_fitness\n                    self.best_harmony = new_harmony\n\n        return self.best_harmony", "name": "HS_APA", "description": "Harmony Search with Adaptive Pitch Adjustment (HS-APA) combining harmony search with adaptive pitch adjustment to dynamically balance exploration and exploitation.", "configspace": "", "generation": 38, "fitness": 0.21444942498848377, "feedback": "The algorithm HS_APA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.17.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.5094209759337982, 0.4855806310874611, 0.4759962855303862, 0.5088597845441092, 0.5859488699228615, 0.4893947609902447, 0.5043357037393373, 0.543240118687053, 0.5114316763190782, 0.09566459701521457, 0.1334852970477718, 0.1848341901374312, 0.12641473677105497, 0.19812562442604853, 0.17409908782478345, 0.11988614013359133, 0.10525072765448218, 0.18862490634632012, 0.19598601953205974, 0.23131127985477573, 0.18619790860428997, 0.18103334564200246, 0.22897561151384593, 0.22054757032181205, 0.22455496863206226, 0.24433959276282136, 0.2643835687068321, 0.17071514612207006, 0.17324036035168588, 0.17004386244510483, 0.16469811721707706, 0.19837881646029742, 0.19941254987260892, 0.18859524176185527, 0.23514164306997398, 0.19384665748367202, 0.8540816070147553, 0.8767092204412306, 0.7477011055113318, 0.7926527988105115, 0.7871932366131174, 0.91613205428433, 0.7845308006368122, 0.8216239274016344, 0.7388069093025316, 0.2041622188640173, 0.25650221007903007, 0.22397333648044737, 0.3149880653122411, 0.2896024252737772, 0.2966254150709683, 0.26186034873938635, 0.20974274612149513, 0.2684301496554339, 0.17853503441555818, 0.15499073337768332, 0.14197454535987475, 0.3445419069635931, 0.2672540133720428, 0.24211715894233043, 0.12468931591444221, 0.24071953536963786, 0.15139012261548956, 0.22796907582945314, 0.14880531012029918, 0.14281511341898057, 0.1501841804843167, 0.21477905072887038, 0.19594994134085508, 0.24969320443034182, 0.2066198170915594, 0.14102248975259513, 0.12943232613090871, 0.12335081608655252, 0.13761571366166503, 0.13282517222218504, 0.1326733338617727, 0.14993289997648296, 0.11942423746686526, 0.12625049269387312, 0.1395211557356404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04669711174034363, 0.05538348824603423, 0.12980283742900933, 0.08651062753604544, 0.06346557256411434, 0.08838472561415278, 0.1333318588294593, 0.1741625454822946, 0.1039478302561132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027513081343860657, 0.00895819246998597, 9.999999999998899e-05, 9.999999999998899e-05, 0.09724205264277985, 0.11518476917543063, 0.09791651980169735, 0.08266231858140849, 0.13419738571936757, 0.031045801642742288, 0.10861090586307076, 0.13088791218901952, 0.08661126106372508, 0.4200680247945697, 0.4352212243433269, 0.4082793657734264, 0.3904160668817167, 0.4112267276323942, 0.40967692265602695, 0.40469291418210585, 0.4191463425218801, 0.42003249013131805, 0.13135692291977996, 0.10850641517977022, 0.10786991571292615, 0.10514304892746973, 0.09406055074285447, 0.10979377397079171, 0.11238554650747501, 0.09528668489522407, 0.07043418731607165, 0.17509841645861268, 0.1342041339663378, 0.18000582416274924, 0.144673833772619, 0.14807038532580719, 0.18330995138019412, 0.1491949425420116, 0.1956080895894834, 0.24156855419618417, 0.2001840822116756, 0.23189573046092093, 0.1992756265279524, 0.18922337472136597, 0.2388521092160446, 0.27042855080044315, 0.21788794681218782, 0.2757268112760727, 0.25814180681005283, 0.20482881727386137, 0.21443452178043743, 0.16690270054708345, 0.17352312441441586, 0.19840408547906874, 0.21235718397092385, 0.16728311500942905, 0.24199058503540294, 0.1417943126822886, 0.20385877258489904, 0.19278663742335944, 0.20881827736771963, 0.20537874472445006, 0.20272894784792017, 0.1905282966244487, 0.23387624040305055, 0.19582338052207593, 0.2121440067439455, 0.20111623036938286, 0.20624684167761087, 0.19974687626129517, 0.21678568582676927, 0.22123415991948947, 0.19252478926252303, 0.1887555332516906, 0.22253256239522634, 0.19121253936348526, 0.18470001506393818, 0.1149531069586166, 0.1677639846588601, 0.5908098554824466, 0.5048234822411611, 0.5978122801465009, 0.1437521556745036, 0.15737860106910917, 0.1635202723042528, 0.4098464027897314, 0.16808974150457234, 0.13631457729783847, 0.2089124164420597, 0.1651531281508234, 0.1317689053279275, 0.10327586097721309, 0.2707568771392972, 0.22239923480055235, 0.1818928242372876, 0.1763735761051214, 0.18751428785815194, 0.18758709525265194, 0.19809283184898352, 0.1815124725057874, 0.18340123539684217, 0.18937167221152196, 0.1780326327874724, 0.0803348980119688, 0.07688339566030622, 0.07615717372481434, 0.1103462657187596, 0.08813447827414334, 0.07302064733764946, 0.09952684691874747, 0.08349236900674828, 0.08105926012005571]}, "mutation_prompt": null}
{"id": "0455825a-b9df-4614-a9d3-085c7caf6f60", "solution": "import numpy as np\n\nclass ACPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.pop_size, self.dim))\n        self.pbest_positions = self.population.copy()\n        self.pbest_fitness = np.full(self.pop_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.5 # Cognitive coefficient\n        self.c2 = 1.5 # Social coefficient\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.pbest_fitness[i] = fitness\n            if fitness < self.gbest_fitness:\n                self.gbest_fitness = fitness\n                self.gbest_position = self.population[i]\n        \n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.population[i]))\n                \n                # Update position\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new position\n                fitness = self.evaluate(func, self.population[i])\n                \n                # Update personal best\n                if fitness < self.pbest_fitness[i]:\n                    self.pbest_fitness[i] = fitness\n                    self.pbest_positions[i] = self.population[i]\n                \n                # Update global best\n                if fitness < self.gbest_fitness:\n                    self.gbest_fitness = fitness\n                    self.gbest_position = self.population[i]\n\n        return self.gbest_position", "name": "ACPSO", "description": "Adaptive Cooperative Particle Swarm Optimization (ACPSO) introduces cooperative behavior and adaptive learning strategies to enhance the global search capabilities over a diverse landscape of optimization problems.", "configspace": "", "generation": 39, "fitness": 0.2810465297018916, "feedback": "The algorithm ACPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.7892240646387323, 0.7832731742195921, 0.8119883404239263, 0.7989067913055554, 0.7801225621165545, 0.7835486578485461, 0.8485810484098616, 0.7572704381705646, 0.7790363372572119, 9.999999999998899e-05, 9.999999999998899e-05, 0.37143460712078635, 0.5284066939953214, 0.5175562426055842, 9.999999999998899e-05, 0.4172716575210601, 0.6114276407232386, 0.5558558006630325, 0.1476743606010752, 0.21818435108575107, 0.06561325945273744, 0.14098139557595046, 0.16520466949265988, 0.11805132468680912, 0.14070902727747092, 0.3801081756665766, 0.13627765573047723, 0.1391149620234743, 0.14112812480500303, 0.12989221199173429, 0.1020853546813032, 0.24198949371403622, 0.12777142935068875, 0.1297469791420568, 0.13045628273625776, 0.18009006323422705, 0.9908913133376789, 0.9921032950680931, 0.9919031200808142, 0.9881849227152936, 0.9921193986362795, 0.9890158839111505, 0.9914307933899129, 0.991636356965789, 0.9907883950203779, 0.5382187952420807, 0.559386489840863, 0.6244143530238718, 0.15115600809288243, 0.4730746954897085, 0.48456338536530374, 0.4320564606379018, 0.4947352651027912, 0.47871631890525146, 0.736859227587405, 0.6567690640355435, 0.3596152686774735, 0.2707445656967703, 0.2600314231707609, 0.19314020348418404, 0.6260735693446504, 0.17157369730844907, 0.17302660117727886, 0.17821935529075583, 0.1804382192769708, 0.1862332782304813, 0.12887162658689555, 0.13147373220265124, 0.19845530232251463, 0.1922833826518915, 0.19240471442548834, 0.1690233807531598, 0.2140978522120912, 0.11285299953965389, 0.17494189677024585, 0.13180104029365847, 0.12899598872351492, 0.2040421574331196, 0.2035469016974364, 9.999999999998899e-05, 0.19441491200839944, 0.0005908358673865077, 9.999999999998899e-05, 0.00912174081346695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004393515573437479, 9.999999999998899e-05, 0.053532928268772206, 0.019702909474944352, 0.052608599034659864, 0.06567399438516663, 0.1659083757995592, 0.034146119113095286, 0.007155909480849321, 0.04604830745782562, 0.08568805073600361, 0.10929411043850412, 0.14188948949391267, 0.04392301200657145, 0.028752062685797553, 0.06622756335542546, 0.06445254020626001, 0.06989927219300884, 0.09281560526849275, 0.1773225077787951, 0.06657000868851559, 0.0802036354587029, 0.07339169783167254, 0.12617007283371406, 0.07146230766405648, 0.11903952292564879, 0.16984832684032714, 0.0477582797524152, 0.0862042310013903, 0.08412156804395732, 0.515968417935928, 0.5215212530807082, 0.5100570809760572, 0.510316692279902, 0.4914453298548842, 0.5470016936779294, 0.5145503682458992, 0.5218561364955726, 0.4845081908246194, 0.08422019502999223, 0.13249736909580334, 0.0753499038161144, 0.5250245869697323, 0.13441621461058817, 0.13497431908880497, 0.14602664609403349, 0.09866693950185634, 0.11900060519932143, 0.19468319935580325, 0.15223906373583618, 0.2525221074762918, 0.23428823236280583, 0.21072689607573136, 0.15806589333402665, 0.40214233986210246, 0.22273025341125707, 0.2549105868459498, 0.3360153706775659, 0.4265800392960165, 0.300791825895232, 0.37312729391388133, 0.28691867180924036, 0.2593098035717851, 0.43467883587981204, 0.4470525843360573, 0.4854574945805178, 0.18234108035115015, 0.2306598190172482, 0.2648175024544812, 0.3243134232582081, 0.19348906546520106, 0.2374931865521962, 0.25323810357665255, 0.3044096145124213, 0.236349945928936, 0.21636569021202523, 0.1861545167780152, 0.1994219874177341, 0.2456388329818483, 0.20121521574726653, 0.2506577464019609, 0.24906635090416662, 0.22235572820119665, 0.21513566987817068, 0.2291288008135941, 0.20498063106476094, 0.20110009771088067, 0.24256060061956564, 0.20440999344499522, 0.552297810901055, 0.23440439942506752, 0.22732128584041944, 0.40597969045232307, 0.8204338962510322, 0.12656784584776137, 0.15445981235087425, 0.17798440100310708, 0.20027816855782743, 0.16846753387127156, 0.09995807070266638, 0.1698782716228432, 0.8774439382604443, 0.7104912478863099, 0.15634336647615998, 0.19280175650056375, 0.10494012337670233, 0.16812538087248308, 0.21201418094924862, 0.10540663835492559, 0.10481612639695703, 0.5720584110630182, 0.1985856619037727, 0.18525471992127462, 0.2055394684379659, 0.20957696337571652, 0.18837073795690418, 0.2011587117934951, 0.20967124391741987, 0.21107579977284208, 0.20575405645450917, 0.11956573521496139, 0.09020344894771803, 0.08944596999200183, 0.09182028387864916, 0.07500973574952785, 0.08190672324829085, 0.07984430983360125, 0.08228605240707543, 0.08543650688178261]}, "mutation_prompt": null}
{"id": "b4dd48ce-dd95-4b53-a84a-38ed1bd26fa8", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "e8a1c9f5-021e-47c1-9b0c-822629198b51", "solution": "import numpy as np\n\nclass QIGA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.q_bits = np.random.uniform(0, 1, (self.pop_size, self.dim))  # Quantum bits representing probabilities\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_update(self, idx):\n        theta = np.arccos(self.q_bits[idx])  # Map q-bits to angles\n        delta_theta = np.random.uniform(-0.1, 0.1, self.dim)  # Small variation\n        theta += delta_theta\n        self.q_bits[idx] = np.cos(theta)  # Update q-bits\n        self.population[idx] = self.lower_bound + (self.upper_bound - self.lower_bound) * self.q_bits[idx]  # Map q-bits to solutions\n\n    def crossover(self, parent1, parent2):\n        crossover_point = np.random.randint(1, self.dim - 1)\n        child1 = np.concatenate((parent1[:crossover_point], parent2[crossover_point:]))\n        child2 = np.concatenate((parent2[:crossover_point], parent1[crossover_point:]))\n        return child1, child2\n\n    def mutate(self, individual):\n        mutation_point = np.random.randint(self.dim)\n        individual[mutation_point] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return individual\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            # Quantum bit update\n            for i in range(self.pop_size):\n                self.quantum_update(i)\n\n            # Evaluate new population\n            for i in range(self.pop_size):\n                self.fitness[i] = self.evaluate(func, self.population[i])\n                if self.fitness[i] < self.best_global_fitness:\n                    self.best_global_fitness = self.fitness[i]\n                    self.best_global_position = self.population[i]\n\n            # Selection\n            selected_indices = np.argsort(self.fitness)[:self.pop_size//2]\n            selected_population = self.population[selected_indices]\n\n            # Crossover and Mutation\n            new_population = []\n            while len(new_population) < self.pop_size:\n                parents = np.random.choice(selected_population.shape[0], 2, replace=False)\n                child1, child2 = self.crossover(selected_population[parents[0]], selected_population[parents[1]])\n                new_population.append(self.mutate(child1))\n                if len(new_population) < self.pop_size:\n                    new_population.append(self.mutate(child2))\n            \n            self.population = np.array(new_population)\n\n        return self.best_global_position", "name": "QIGA", "description": "Quantum-Inspired Genetic Algorithm (QIGA) utilizing quantum superposition principles and a genetic algorithm framework for diverse solution exploration and convergence enhancement.", "configspace": "", "generation": 41, "fitness": 0.07393113307429557, "feedback": "The algorithm QIGA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.13028593506919095, 0.1381147114999911, 0.11149466690038701, 0.131008137355193, 0.14941430531427535, 0.16751315348560802, 0.14312344985275338, 0.09659053699226183, 0.08775738315807391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026536298575314143, 0.030521939836034795, 0.02769303417462743, 0.03503247924602804, 0.03210446072462436, 0.016109626204147576, 0.02235754314698024, 0.03302645360854095, 0.020754967139325564, 0.029663940600677785, 0.007954485139560763, 0.009274782940491777, 0.03666437315121107, 0.01874409917728459, 0.01781632783087539, 0.012497199290490757, 0.019257177229317635, 0.04659061951720156, 0.06032096981793833, 0.08475362438161105, 0.08600510857750054, 0.10868325373785337, 0.08705739392802303, 0.09439769641360596, 0.0935124173742623, 0.13795002953805202, 0.10874996611947774, 0.058379622410823284, 0.024430560442562865, 0.05564165818581257, 0.08060510345450533, 0.03663112690686232, 0.01803510113326179, 0.051320884970790015, 0.016142283866702023, 0.051971354251809876, 0.10027683525177622, 0.11056161358308403, 0.09103134546873937, 0.07532748114235965, 0.08493744627294308, 0.09730524319132783, 0.07864110033023952, 0.11928477626560086, 0.09145217693437224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005171933235637027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07103569683171895, 0.02743083786653644, 0.030970315620521438, 0.03996561925066089, 0.023917475486614603, 0.009756713000704464, 0.08874780496582246, 0.036248366913296026, 0.04886360471814044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19886471601072708, 0.17461037434036775, 0.15272657300191006, 0.1718220227610605, 0.12316548450976439, 0.12856542616345745, 0.16588059104977404, 0.12892608443373943, 0.17836997370945407, 0.044737142995101564, 0.03237782232242481, 0.06521544266238966, 0.03048669951052596, 0.01607723468153488, 0.0437464434932503, 0.027637667041467417, 0.019256113271607367, 0.039308986401362156, 0.1523459380398241, 0.11404305230110534, 0.14096891670199696, 0.12197477750743002, 0.1367095102260808, 0.10495977986181637, 0.14190885339155412, 0.13341929373895767, 0.1282915598312706, 0.15395575368042957, 0.174883149427416, 0.154377313888577, 0.14318809495573004, 0.14463070753039609, 0.14299058018261368, 0.14272314017845023, 0.17744050626526497, 0.15917007360876723, 0.0954523573366094, 0.1043065143060734, 0.09590397870651646, 0.0875199232568793, 0.094833769287205, 0.08573265988724921, 0.09670875991020966, 0.10021149386806083, 0.10568798222839582, 0.13389496481050123, 0.16152497326274384, 0.17577109192503648, 0.1449404930890834, 0.1315326469653283, 0.1640414898698651, 0.15216839589765163, 0.1434314353467524, 0.14377572341108968, 0.10719199795627266, 0.042945620276959695, 0.12828198436178206, 0.13629167673950537, 0.13458713676252687, 0.13427044829450863, 0.13570823547045952, 0.0905107746190088, 9.999999999998899e-05, 0.115186044680196, 0.1639141448564747, 0.17383283156156426, 0.15067958365373657, 0.1207914665021157, 0.15016695913781386, 0.1405148965377404, 0.11091310118888742, 0.1226859042839975, 0.11040265245322212, 0.15905650197755528, 0.11077045108087091, 0.14002446677901448, 0.16692521263817084, 0.11127305914737973, 0.16319197465783386, 0.12588092992301247, 0.09580460868926444, 0.19348396899373344, 0.1723092111014375, 0.17193755065647243, 0.16858513702501365, 0.1879219294374106, 0.1905942819408888, 0.17500666588858782, 0.19114765164058112, 0.1691584624334821, 0.03504985950068762, 0.04307011955586226, 0.05581370471579339, 0.04916192081209558, 0.04266552445738092, 0.046018368951380895, 0.041592640808048364, 0.04244287516175338, 0.040005864604562125]}, "mutation_prompt": null}
{"id": "f6216fc4-e999-450d-bb79-96f4aa604756", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_local_positions = np.copy(self.population)\n        self.best_local_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.alpha = 0.5  # Contraction-expansion coefficient\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_behavior(self, particle, global_best, local_best, beta):\n        u = np.random.uniform(size=self.dim)\n        mbest = (global_best + local_best) / 2.0\n        return mbest + beta * np.abs(global_best - particle) * np.log(1.0 / u)\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            self.best_local_positions[i] = self.population[i]\n            self.best_local_fitness[i] = self.fitness[i]\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            beta = self.alpha * (1 - self.evaluations / self.budget)  # Decreasing beta over time\n            for i in range(self.pop_size):\n                new_position = self.quantum_behavior(self.population[i], self.best_global_position, self.best_local_positions[i], beta)\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                \n                new_fitness = self.evaluate(func, new_position)\n                if new_fitness < self.best_local_fitness[i]:\n                    self.best_local_positions[i] = new_position\n                    self.best_local_fitness[i] = new_fitness\n                    if new_fitness < self.best_global_fitness:\n                        self.best_global_fitness = new_fitness\n                        self.best_global_position = new_position\n\n                self.population[i] = new_position\n\n        return self.best_global_position", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) combines quantum mechanics-inspired random walks with traditional PSO for enhanced exploration and exploitation in high-dimensional optimization.", "configspace": "", "generation": 42, "fitness": 0.0860605996386557, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.1462083802366253, 0.1218915278728755, 0.14036494708797254, 0.09789589570188584, 0.10679732028442901, 0.12086425576318438, 0.11266142510174193, 0.09415274658827621, 0.0897577888132366, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04212379224826113, 0.12465139642321788, 0.056127662584360416, 0.103744578697896, 0.06321248635536081, 0.06272541352294847, 0.03022168795575908, 0.023019313005351427, 0.057561399797786406, 0.060546623535105426, 0.05019331133331595, 0.11362230983446298, 0.06754360978923357, 0.024656781752073753, 0.10536509633924795, 0.09033522176829722, 0.012367095190320865, 0.11696454353590091, 0.08444889533436217, 0.08078606085283135, 0.07233282873092506, 0.06525452973164503, 0.05645323070623531, 0.04018820802642553, 0.0677303434385782, 0.05189911532788394, 0.03994059902663083, 0.09923691813074387, 0.08608458499942884, 0.15707628524921224, 0.06505982365410745, 0.05647981308365668, 0.029701187316214073, 9.999999999998899e-05, 0.021541522944316438, 9.999999999998899e-05, 0.123031384873728, 0.09494387902306245, 0.21188764342047084, 0.13800672360299138, 0.07128475141574053, 0.06758210051881475, 0.0809231425761956, 0.08857219272080985, 0.06495620164790361, 9.999999999998899e-05, 0.08598513543593667, 9.999999999998899e-05, 9.999999999998899e-05, 0.09197868557529854, 9.999999999998899e-05, 0.001259644215298561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07849416216507799, 0.018341713715244623, 0.05072559405964072, 0.07746722036070874, 0.024832421138717975, 0.05216467896840682, 0.0587475283408756, 0.05704308383319967, 0.07099942852136953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14436113925974425, 0.15908838251222968, 0.23145978639193066, 0.1634645242500654, 0.14230207534320194, 0.1391777151651422, 0.22867654694384554, 0.14763194746577613, 0.18915815850773765, 0.060213904529306306, 0.03196384535379171, 0.04580522803363196, 0.12432276713792012, 0.0036033565438498005, 0.02939372547695762, 0.03249452404465769, 0.03326574809251581, 0.037885535709992646, 0.11417842032718728, 0.14231900198210823, 0.16492191077451301, 0.14632373642676044, 0.17535956809222786, 0.13574675998956032, 0.11881553272810363, 0.12412090703830159, 0.1146267398700822, 0.1833225189073452, 0.16647619707454486, 0.20333026248964892, 0.1571483931465647, 0.12874381511035538, 0.1718157122266919, 0.14972518377592692, 0.18021406101614734, 0.16836454394798528, 0.11531679279748319, 0.11642405142751067, 0.10315250364889872, 0.12782486747452404, 0.09152824386955416, 0.13619137627073574, 0.10890156497834746, 0.14991250902009812, 0.1084459857675536, 0.14785083535590127, 0.13565887966537082, 0.19244863299791026, 0.14895342026836866, 0.14075812186184755, 0.1595662152479903, 0.182680249200614, 0.1621870349811193, 0.20333479276423305, 9.999999999998899e-05, 0.2052892878658299, 0.162830428570778, 0.15060213060039473, 0.1803159723250909, 0.14705622946908603, 0.0035725598842922812, 0.17016649520429705, 0.19193762133579262, 0.16291805026321948, 0.1660203667382837, 0.10907777829233323, 0.16875903546073245, 0.16034129726356783, 0.16069081706216493, 0.11535299175340408, 0.12740873853069656, 0.18710379062372118, 0.2988251498583543, 0.11549813145155785, 0.2834662388153172, 0.0780865706117253, 0.11888780516119968, 0.19905860920900464, 0.20991432543820288, 0.18044100007340236, 0.2542961472400198, 0.1942148120404773, 0.19326889357152044, 0.19779125433617928, 0.18826874539895355, 0.17197706483982622, 0.18292628739143224, 0.19085493762933314, 0.19973887819622027, 0.17746554074885024, 0.02697115047689136, 0.03550726463667597, 0.05632703247319715, 0.04752874010347363, 0.04718277169583385, 0.054962548237309394, 0.09736965673676257, 0.031211613063887644, 0.04222863418410794]}, "mutation_prompt": null}
{"id": "f47d6433-3d06-43b8-8ff1-73c9aa702687", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.alpha = 0.5  # Quantum rotation angle\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_rotation(self, xi, x_best):\n        # Quantum-inspired rotation to create new candidate solutions\n        q_bit = np.random.uniform(0, 1, self.dim)\n        quantum_vector = self.alpha * (x_best - xi) + (1 - self.alpha) * q_bit\n        return xi + quantum_vector\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                quantum_candidate = self.quantum_rotation(self.population[i], self.best_global_position)\n                quantum_candidate = np.clip(quantum_candidate, self.lower_bound, self.upper_bound)\n                \n                candidate_fitness = self.evaluate(func, quantum_candidate)\n                if candidate_fitness < self.fitness[i]:\n                    self.population[i] = quantum_candidate\n                    self.fitness[i] = candidate_fitness\n                    if candidate_fitness < self.best_global_fitness:\n                        self.best_global_fitness = candidate_fitness\n                        self.best_global_position = quantum_candidate\n\n        return self.best_global_position", "name": "QuantumInspiredEA", "description": "Quantum-inspired Evolutionary Algorithm (QEA) utilizing quantum superposition principles for enhanced diversity and convergence in complex optimization landscapes.", "configspace": "", "generation": 43, "fitness": 0.09294655213200052, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.15666806072756556, 0.1560928403071643, 0.22446150934183373, 0.09619502437635985, 0.08483047934380139, 0.10613553999300074, 0.12187220098087204, 0.09800567068622801, 0.09612542586939365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07744880541759813, 0.07638938323115341, 0.05794262984322107, 0.056265749197848214, 0.0799556162847388, 0.04515908257128265, 0.04663559378976767, 0.06336428204597466, 0.04873557771330139, 0.056134087204594785, 0.03010566711245699, 0.08824312124071187, 0.07354164586943424, 0.043898479223765, 0.06906172481300821, 0.04002892511919576, 0.03298627569098922, 0.0718877427024952, 0.07015845401375553, 0.06401208190412433, 0.06230037320690951, 0.05736839241179292, 0.05079264001332362, 0.038163339607561686, 0.06766568576333198, 0.05237555402904304, 0.039555870244350255, 0.15844801263401964, 0.1385302745611814, 0.22002785333705532, 0.0718958979626384, 0.06214751400151253, 0.0015075526562541297, 0.0461287597413611, 0.08591034642913686, 9.999999999998899e-05, 0.12884917343206703, 0.1518049299178017, 0.14703762046361968, 0.1589188050917022, 0.18061980796406463, 0.15504170568860132, 0.0828033277950091, 0.13822824564387104, 0.1159260330646601, 0.04212302657863842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993733496573837, 9.999999999998899e-05, 0.0623603895847713, 9.999999999998899e-05, 0.010987625124699085, 0.03826581277990193, 0.012961729178143422, 9.999999999998899e-05, 0.037261948566804315, 9.999999999998899e-05, 0.045383550913458914, 0.02850847656525035, 0.021470946779213573, 0.015246281661815742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08149058977538748, 0.029517859619634157, 0.07750107819786678, 0.054660733001371975, 0.0350553966177497, 0.03577026171164166, 0.13235815462393874, 0.06435527225853965, 0.14112741064305445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2303080267306178, 0.20487770154421991, 0.21961686641772138, 0.16621138444938532, 0.15025100901720412, 0.15345627704943343, 0.26335217297777724, 0.2358503352803487, 0.22523159656623126, 0.039127566735508656, 0.05900765723980117, 0.03343483746634013, 0.02423326118589486, 0.027834944923466387, 0.026670973156946665, 0.039993767473928576, 0.03307268320898327, 0.0436814848720074, 0.10957684946806312, 0.10195076355122923, 0.09934116977435403, 0.10404522923656767, 0.11375521013068013, 0.08385322472279622, 0.08808199726801991, 0.08048717590503818, 0.07942542093617122, 0.1384558342130323, 0.213343334876252, 0.2129770318272206, 0.19059640095020047, 0.17205949524760966, 0.18677953627548027, 0.17055075799822594, 0.19614640221487767, 0.1782872280842014, 0.09394886715170558, 0.10516329371394717, 0.11513636330689592, 0.1179702309777102, 0.15033641673113962, 0.15421085295142312, 0.12461643497392327, 0.14717845529963391, 0.13524092689845324, 0.1487063132391946, 0.16109401310224802, 0.17090845060224769, 0.21732068939785287, 0.17349965806981105, 0.16113053179987769, 0.14744292193222408, 0.22341595587614416, 0.1869899974782666, 0.1534480417525974, 0.15860439733421494, 0.17439442077804979, 0.15472269836593755, 0.15759436568382712, 0.1565271856621766, 0.17537315006554022, 0.1906798511175113, 0.16984193671458725, 0.12036252503194611, 0.11178545303675602, 0.10779845040131708, 0.16908587468975744, 0.16716364910097548, 0.16729381501389273, 0.11406765494032767, 0.11398326247140489, 0.3492494552104114, 0.28607457894250843, 0.12908790054951247, 0.30197050290879, 0.10779881803914959, 0.15772486835451893, 0.04939131514100559, 0.22841342682433174, 0.17214367992615465, 0.27809092770572785, 0.19685472691778827, 0.19580630899939122, 0.17863951755630647, 0.19582980649478965, 0.21146487754051846, 0.18594104377308718, 0.18614649680755202, 0.19179891715358977, 0.18945254315236937, 0.05805152451262441, 0.06686935566219832, 0.07408139954054571, 0.056053170585656176, 0.0780011641142131, 0.06396565982846847, 0.03868348092747709, 0.05181665141487379, 0.04895715586507465]}, "mutation_prompt": null}
{"id": "beed4114-daa5-402c-89ce-110dbc085565", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "7d466c48-7b1d-4d4b-9f1b-86728f8b1d2c", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_personal_position = np.copy(self.population)\n        self.best_personal_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.alpha = 0.75  # Contraction-expansion coefficient\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_move(self, particle, mbest):\n        u = np.random.uniform(0, 1, self.dim)\n        beta = self.alpha * np.abs(mbest - particle)\n        direction = np.random.choice([-1, 1], size=self.dim)\n        return particle + direction * beta * np.log(1/u)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            self.best_personal_fitness[i] = self.fitness[i]\n            self.best_personal_position[i] = self.population[i]\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            mbest = np.mean(self.best_personal_position, axis=0)\n            for i in range(self.pop_size):\n                new_position = self.quantum_move(self.population[i], mbest)\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                \n                new_fitness = self.evaluate(func, new_position)\n                if new_fitness < self.best_personal_fitness[i]:\n                    self.best_personal_fitness[i] = new_fitness\n                    self.best_personal_position[i] = new_position\n                if new_fitness < self.best_global_fitness:\n                    self.best_global_fitness = new_fitness\n                    self.best_global_position = new_position\n\n            self.population = np.copy(self.best_personal_position)\n\n        return self.best_global_position", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) utilizing quantum superposition principles to enhance global search capabilities and diversity in solution space.", "configspace": "", "generation": 45, "fitness": 0.24184189272805445, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.7968411481069324, 0.7970768716970587, 0.8305258023925765, 0.7830799553700628, 0.8049512758283884, 0.7812174589639713, 0.746161009458289, 0.8039317882323732, 0.745358701046492, 0.6520319790538276, 0.6423890879617253, 0.638661385103288, 0.5789660145074855, 0.6819825257786014, 0.5723495542905842, 0.6194067444173816, 0.5882221628714959, 0.5977831233611518, 0.1242420925853216, 0.13764515561191382, 0.11699502594974853, 0.12812400129218293, 0.12268798875319775, 0.15200563977571424, 0.12142900197653383, 0.13892108711494278, 0.125524345500454, 0.1072124752505682, 0.0950836987902911, 0.09929200211455957, 0.09913407886079695, 0.09128498702085275, 0.09273890510618954, 0.08225624627846606, 0.08830616460074348, 0.08776811531748918, 0.8602936827380228, 0.6867054187430177, 0.7924163240068022, 0.7435314219549649, 0.8561624098221488, 0.8547969954992803, 0.7054017280186533, 0.6977549739177642, 0.6869912969608161, 0.22562070075914953, 0.22315278445628173, 0.24565121482677832, 0.2983829227779634, 0.21926331165796498, 0.22555064162456928, 0.21346946314167503, 0.20906532903097863, 0.226857236855446, 0.25399055920923297, 0.1879772371537204, 0.17772754513353395, 0.3314718888249326, 0.29645504746944007, 0.35345245486419685, 0.21981803780806652, 0.1988026192071093, 0.23432942240461407, 0.14841587854278082, 0.15306896233059197, 0.14235703363629382, 0.13466321891812827, 0.1510865032538926, 0.1656601632071839, 0.16504994634500691, 0.15874748814049544, 0.21764999943315566, 0.17998082065584586, 0.142338311212018, 0.15457707120899045, 0.14027953141268956, 0.1625097110679955, 0.1339951610748229, 0.16044489283973928, 0.14728034380435961, 0.14894748193167162, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005824247084902923, 0.0029895872185708994, 0.049030493799604336, 0.09404902747746513, 0.0882979564976144, 0.09469571499646112, 0.08363550729487601, 0.07013590812484749, 0.07056941508216574, 0.12038056559922439, 0.1032076653879993, 0.12295963364780615, 0.09427474337946695, 0.04922135584356324, 0.05348963562376052, 0.0795154388822813, 0.11158785802007165, 0.07813954124038136, 0.07187622270511707, 0.07675843076858313, 0.06121934337117041, 0.13598350489894673, 0.09557759369881824, 0.12788243080059714, 0.13994861127161873, 0.15574742646189166, 0.1707096519519129, 0.09775354605050579, 0.151977281363317, 0.09685094830690943, 0.4976501488971019, 0.539825188324061, 0.493217885445985, 0.4584037329792747, 0.5102770548707953, 0.46398391148582063, 0.4440567178956544, 0.443565839176286, 0.5291315903960503, 0.09778420317405412, 0.11320082819635913, 0.09983926798089704, 0.12321721549833398, 0.11131403153347108, 0.12039382461465853, 0.09851166902391584, 0.12944597791573453, 0.10932126439175283, 0.21431313577344557, 0.14562414575222338, 0.19068723740472915, 0.17136502302332823, 0.13995940929295136, 0.1751564150102355, 0.15628395435357412, 0.17017343255610506, 0.148488121716989, 0.211144790862844, 0.2220007040223202, 0.188695549288745, 0.24224075583177906, 0.25317152287604483, 0.25270491744607315, 0.2381657785569964, 0.26993518610573997, 0.19440431519367063, 0.18122813526989712, 0.20653121157099963, 0.21199422337586626, 0.18776658772418153, 0.21693505688525128, 0.20833821049667667, 0.18436724815966943, 0.19119277367169152, 0.15804670368862828, 0.21272318654622147, 0.19912371686403707, 0.21359884199417534, 0.21870040324248197, 0.21296749647043, 0.216197261336033, 0.21541835986094815, 0.22843429772542867, 0.22213173592538937, 0.17026725897343098, 0.17108772347445234, 0.17930141296028468, 0.17220365734494802, 0.1685922866567775, 0.1774709812615165, 0.17489487465898657, 0.1690207781806068, 0.16248986274862365, 0.16666065758472737, 0.17372294071424077, 0.22143343923136571, 0.29981757572809875, 0.2537501817632637, 0.2206398667981494, 0.2809425166987082, 0.25132746882796264, 0.18873943921550485, 0.3616455652734142, 0.2359557713736029, 0.2783411923671494, 0.2909922537637307, 0.18133092718408872, 0.18041200880357788, 0.23432086792926787, 0.214611344961135, 0.18698234599917407, 0.17850096240051994, 0.18650718793011556, 0.1940706294294251, 0.1908932393285825, 0.16942533898897605, 0.1918477933878816, 0.17569619526025182, 0.19180608347834394, 0.18439361483592953, 0.07076613809350474, 0.07847702541324797, 0.06406010328581302, 0.07985721145348379, 0.08605327958041342, 0.07024208301036905, 0.07550264297681242, 0.08879304974839475, 0.08202877743000814]}, "mutation_prompt": null}
{"id": "9810eae5-7165-4fb9-87c2-f821fa93fd35", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.best_personal_positions = np.copy(self.population)\n        self.best_personal_fitness = np.full(self.pop_size, float('inf'))\n        self.evaluations = 0\n        self.beta = 0.5  # Contraction-expansion coefficient\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_position(self, position, personal_best, global_best):\n        phi = np.random.rand(self.dim)\n        mbest = np.mean(self.population, axis=0)\n        u = np.random.rand()\n        new_position = phi * (personal_best - abs(position - mbest)) + (1 - phi) * (global_best - abs(position - mbest))\n        return new_position + np.log(1 / u) * np.sign(global_best - position) * self.beta\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n            self.best_personal_fitness[i] = self.fitness[i]\n            self.best_personal_positions[i] = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                self.population[i] = self.update_position(self.population[i], \n                                                          self.best_personal_positions[i], \n                                                          self.best_global_position)\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n                \n                current_fitness = self.evaluate(func, self.population[i])\n                if current_fitness < self.best_personal_fitness[i]:\n                    self.best_personal_fitness[i] = current_fitness\n                    self.best_personal_positions[i] = self.population[i]\n                    if current_fitness < self.best_global_fitness:\n                        self.best_global_fitness = current_fitness\n                        self.best_global_position = self.population[i]\n\n        return self.best_global_position", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) utilizing quantum potential well mechanism for enhanced global search capabilities.", "configspace": "", "generation": 46, "fitness": 0.12190979636903988, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.15.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.26786993629198064, 0.2924392096122942, 0.2906538273204199, 0.17768231553861702, 0.2481651634516816, 0.18644065153777634, 0.2881108250741722, 0.14219817588578498, 0.17929318752277723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03305092499498585, 0.0613501737983726, 0.04044396500677705, 0.04031472133443781, 0.0590825347384587, 0.02996235521125523, 0.05283873360092273, 0.054366367524981585, 0.04740481137411934, 0.037802334540166904, 0.02853707288048213, 0.019771488665849768, 0.044138539288085976, 0.04408120823148909, 0.024159471375258312, 0.04495585692006665, 0.04854590586827068, 0.0332633242904159, 0.08741966317058414, 0.4608627425791012, 0.44009806104281246, 0.7773987771609481, 0.784130554065867, 0.8699344942210773, 0.9617970554469754, 0.9366975544037178, 0.9612967098466872, 0.05115704254817666, 0.053114181305393915, 0.05478477465571685, 0.1223263466110529, 0.11674401259982226, 0.04055173622292152, 0.12720620738757626, 0.10033329258800983, 0.04579709878757843, 0.1349817922825265, 0.06090247900288048, 0.13109568583155107, 0.18423140802671045, 0.1519057735511764, 0.12347443175143202, 0.10927032106529044, 0.1552252253947719, 0.12408779587128704, 0.11344014135895608, 0.07358445456833285, 0.08343794216586342, 0.07465965281358344, 0.09078893424707168, 0.07167524382083978, 0.10630331967499274, 0.09349809062247949, 0.0467830903873544, 0.06332353460072404, 0.10265332582350917, 0.08785560143332727, 0.07177323705974281, 0.07817651299490003, 0.06837640964079905, 0.061715861670343264, 0.013810589173407606, 0.04207108808596027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024033567283162083, 0.02570013915139535, 0.03561757101871865, 0.009138142980096742, 0.00015380707644874203, 9.999999999998899e-05, 9.999999999998899e-05, 0.00471048654458972, 0.009634193358071252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012945991429280657, 0.011061375720285427, 0.005833141783439855, 0.013278553058628462, 9.999999999998899e-05, 0.009148893100306865, 0.04233461146102413, 9.999999999998899e-05, 9.999999999998899e-05, 0.27373860041243303, 0.2824627686836262, 0.27710474327240864, 0.23493232551857846, 0.237345016774272, 0.17078110744887054, 0.27298181811830735, 0.2853294013986827, 0.28187025321258163, 0.06052202038781418, 0.04609864711180922, 0.049741366944192844, 0.08448159825879953, 0.028253415004403593, 0.10357135603274004, 0.06922827106657004, 0.03120510756234396, 0.06260176667654083, 0.1511899449667573, 0.12889661189425738, 0.13032442254624843, 0.1543738220507057, 0.15751258522006428, 0.1417726428026932, 0.14798804072387262, 0.14169362476144465, 0.17814552742249412, 0.12968884258578472, 0.13160790540376144, 0.16884492546263574, 0.17093214445961602, 0.15126475254728444, 0.19174279164310315, 0.15876213383768523, 0.19224024186748034, 0.14645118399540258, 0.07141953231604803, 0.044930430217593464, 0.09435169128660403, 0.13898072079608592, 0.11310348349848465, 0.09685392665609738, 0.15287602540465073, 0.1356951162853034, 0.1278398004263227, 0.15904306715702554, 0.12487431385574077, 0.147582592922324, 0.1371406626434929, 0.14049290548366755, 0.14463399441237068, 0.16422237831648379, 0.17198235573630716, 0.17125109411905193, 0.1624132294530478, 0.16800152918378208, 0.15663058570949284, 0.1679522894835922, 0.16955247421471198, 0.18670539081190052, 0.15942409053243067, 0.16333590500543982, 0.15176651619185455, 0.08395471645683394, 0.11300596652689232, 0.11252476567193648, 0.1741324435917464, 0.1375393894838608, 0.13158725137859217, 0.09677789066805687, 0.11419890128566623, 0.13418246332408723, 0.15828779400817294, 0.10694855506042222, 0.10762029877064538, 0.24323302824956494, 0.11003723521706377, 0.14204459997701235, 0.06971731536224068, 0.09281049379757356, 0.11027791695961509, 0.17088912981433935, 0.18608346816481636, 0.17978976219866583, 0.17748196969787933, 0.16950966528430889, 0.1703710211241818, 0.1788549709685281, 0.18142349314768358, 0.1909308246938901, 0.050279272591008506, 0.04640894125683104, 0.04906020477232109, 0.06028857785991404, 0.04598219612421128, 0.049934702151726906, 0.0821056378280478, 0.06153230547488786, 0.07232174467902563]}, "mutation_prompt": null}
{"id": "fd9e1a04-d8f7-40af-bb00-97cf9e54b474", "solution": "import numpy as np\n\nclass AQ_PSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_velocity(self, idx):\n        r1 = np.random.rand(self.dim)\n        r2 = np.random.rand(self.dim)\n        cognitive_velocity = self.c1 * r1 * (self.personal_best_positions[idx] - self.population[idx])\n        social_velocity = self.c2 * r2 * (self.global_best_position - self.population[idx])\n        self.velocities[idx] = self.w * self.velocities[idx] + cognitive_velocity + social_velocity\n\n    def quantum_update(self, idx):\n        phi = np.random.uniform(-1, 1, self.dim)\n        l = np.linalg.norm(self.global_best_position - self.population[idx]) / 2\n        quantum_step = np.random.normal(0, l, self.dim)\n        return self.global_best_position + phi * quantum_step\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            current_fitness = self.evaluate(func, self.population[i])\n            self.personal_best_fitness[i] = current_fitness\n            self.personal_best_positions[i] = self.population[i]\n            if current_fitness < self.global_best_fitness:\n                self.global_best_fitness = current_fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.5:\n                    self.update_velocity(i)\n                    self.population[i] += self.velocities[i]\n                else:\n                    self.population[i] = self.quantum_update(i)\n\n                # Ensure particles are within bounds\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate the new position\n                current_fitness = self.evaluate(func, self.population[i])\n\n                # Update personal best\n                if current_fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = current_fitness\n                    self.personal_best_positions[i] = self.population[i]\n\n                # Update global best\n                if current_fitness < self.global_best_fitness:\n                    self.global_best_fitness = current_fitness\n                    self.global_best_position = self.population[i]\n\n        return self.global_best_position", "name": "AQ_PSO", "description": "Adaptive Quantum Particle Swarm Optimization (AQ-PSO) combines quantum-inspired particle updates and adaptive learning factors for dynamic exploration and exploitation.", "configspace": "", "generation": 47, "fitness": 0.2962745945851151, "feedback": "The algorithm AQ_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.8699021397333836, 0.8909386237923219, 0.89581677892203, 0.9024519465613579, 0.881206466270023, 0.8872155139402003, 0.8957044618120361, 0.8934361740458618, 0.8690982100039162, 0.27023470446062614, 0.08446098504682975, 0.04754933423277963, 0.06506915029246663, 0.04753316694158183, 0.16344912419602464, 0.058098285318096354, 0.07938891915464974, 0.09008614563107653, 0.1631537467764389, 0.14611660368751023, 0.11829097650364417, 0.09628511349864421, 0.1569956079701489, 0.09161352679664447, 0.12306831819216446, 0.11919257950625228, 0.1113907273326229, 0.043432876363228234, 0.13744760596234173, 0.16433690354854646, 0.09640251505691544, 0.11051901227518501, 0.13488714262852208, 0.10540324899035514, 0.037941216277019296, 0.08630663689658791, 0.9923250116591069, 0.9926029094966095, 0.992907506548502, 0.98700975381926, 0.984100044416027, 0.9924128184724447, 0.9925333551668204, 0.9922915133946774, 0.9905468975251783, 0.7993475305881063, 0.762821756610454, 0.7418721991061471, 0.742837744172671, 0.7713919849476872, 0.7874222951601613, 0.7488383336071691, 0.6820073074015596, 0.7762691630798588, 0.3896090550578719, 0.22250828911583254, 0.18760738175434943, 0.28389392448710415, 0.2152407548554124, 0.28280357726342276, 0.1774494433700784, 0.17603237178388265, 0.21775569978548814, 0.2906808740530813, 0.27065525877083907, 0.134562010860949, 0.1311455209242064, 0.2517129982633014, 0.2513654096903034, 0.2603993749301512, 0.25121763150834553, 0.28697833850045995, 0.27615586797034686, 0.25486858474272456, 0.28412180910278717, 0.2746746258261539, 0.13108227343410994, 0.30488267394723967, 0.28719314377607386, 0.1439308086875497, 0.17342889829017372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020896816234034832, 0.0004635464042553883, 0.031582601177579606, 0.0033459377899793807, 0.06874154238870345, 0.001271855769265695, 0.13811170729317346, 0.043566769212594725, 0.09270155972494065, 0.058563710911089806, 0.0037164797370531355, 0.00032295296173812105, 0.03242368325775202, 0.05932955111659244, 0.04872108079307147, 0.20675487050487296, 0.08018541385431366, 0.212836645268063, 0.2122895261439106, 0.08063733561140729, 0.08181031711851539, 0.31281443367812267, 0.09291049829544606, 0.14391020134435695, 0.31586293104078944, 0.061339121886574643, 0.26029347917394585, 0.04876760287897064, 0.07386434485620119, 0.0735309711526958, 0.3521012606289161, 0.11900304577329246, 0.13517064310602256, 0.6195617841629206, 0.5870430850563669, 0.5613900022374964, 0.6013056256237421, 0.5559837620523805, 0.539301868464068, 0.5719854172169703, 0.5698907941675264, 0.5767343812654242, 0.08627069786348984, 0.09330192729770592, 0.1254018712103454, 0.09338672808099113, 0.055730612216802866, 0.12637158058711706, 0.07492006881280888, 0.11838783466068215, 0.11088477818632059, 0.28256713991235904, 0.18193996768368859, 0.19515348997218285, 0.36215243595512836, 0.35326552710069414, 0.2079426417784721, 0.3249919033210078, 0.17366174537537749, 0.1521250099721807, 0.46218602016250343, 0.4124760845990725, 0.2381470138381082, 0.2490705134004435, 0.22816229756306106, 0.40205047582032183, 0.48907629951812215, 0.5218918688704661, 0.4101212317562024, 0.19544799774598465, 0.3067157125330354, 0.2441033804544127, 0.1919337035639297, 0.23810323083427976, 0.2378143627075412, 0.2436871094366181, 0.25249422972897106, 0.14359731119632668, 0.20293636985489216, 0.14516727877261604, 0.25608952568223486, 0.21823248292263464, 0.30413683557469917, 0.223598498955762, 0.20169022080718124, 0.2129181383803812, 0.19560738867653016, 0.19362975280497308, 0.21719465843000596, 0.1988359237749594, 0.21182646242503567, 0.7940928050082882, 0.17966993858979097, 0.1966698511467283, 0.19771100139382636, 0.21080232349104155, 0.9495801105910816, 0.18927872813468716, 0.15478376053077225, 0.9405560992842155, 0.2019248021788853, 0.20064240993552496, 0.09986341493590112, 0.17070649056342557, 0.9552350931331555, 0.8327291442776741, 0.1576892600066513, 0.07358376060121719, 0.21296574340523589, 0.16996833242694598, 0.21395971757491727, 0.10547052011250913, 0.10544773595885348, 0.711999617363138, 0.1816490599419287, 0.24328318358756218, 0.22134072823498185, 0.19572712053047503, 0.20395091541183197, 0.23083560517380808, 0.29954044521149314, 0.25271790520541537, 0.2357080405002252, 0.08775022197187232, 0.10078513030245317, 0.08361331543845119, 0.10987824564785498, 0.09912473469617544, 0.07787893519494515, 0.08380778185661852, 0.06631638873486956, 0.10141729944293332]}, "mutation_prompt": null}
{"id": "11068082-8487-4e98-bc68-5cc982e5ba4a", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "177cf3fa-3444-4b5f-9c12-5875db148628", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "743cf7f6-944f-4866-a247-77c83e7b7c8b", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_personal_positions = np.copy(self.population)\n        self.best_personal_fitness = np.copy(self.fitness)\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.alpha = 0.75  # Balance coefficient\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_positions(self):\n        for i in range(self.pop_size):\n            p = self.best_personal_positions[i]\n            g = self.best_global_position\n            u = np.random.rand(self.dim)\n            v = np.random.rand(self.dim)\n            delta = self.alpha * np.abs(p - g) * np.log(1 / u)\n            new_position = (p + g) / 2 + np.sign(u - 0.5) * delta * v\n            new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n            self.population[i] = new_position\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            self.best_personal_fitness[i] = self.fitness[i]\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            self.update_positions()\n            for i in range(self.pop_size):\n                current_fitness = self.evaluate(func, self.population[i])\n                if current_fitness < self.best_personal_fitness[i]:\n                    self.best_personal_fitness[i] = current_fitness\n                    self.best_personal_positions[i] = self.population[i]\n                if current_fitness < self.best_global_fitness:\n                    self.best_global_fitness = current_fitness\n                    self.best_global_position = self.population[i]\n\n        return self.best_global_position", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) using quantum superposition principles to enhance exploration and convergence capabilities.", "configspace": "", "generation": 50, "fitness": 0.10318876238344027, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.24626965949722646, 0.2469777771443451, 0.24827723967136572, 0.14572597900497808, 0.10719225679715905, 0.3331108621615886, 0.22192965065212988, 0.2011784993983058, 0.1894323300882501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0757904009684004, 0.061228733804652435, 0.09563963283089105, 0.05103813531312684, 0.075429049120327, 0.08032717699018121, 0.11124030099471582, 0.07046370698035098, 0.09623053577718543, 0.054294013323982315, 0.06129871906028461, 0.019502550086575643, 0.08350227797372622, 0.02812725850980391, 0.019705234133127636, 0.005059461449608893, 0.03499181225323733, 0.005759573784016148, 0.05196007252833856, 0.05292119639438497, 0.047616806658334454, 0.08662711374189969, 0.07535274523450719, 0.08017279890117501, 0.1080135106176685, 0.09963810891880787, 0.10819702579138879, 0.028892047041680913, 0.04765562806323964, 0.033201659623499524, 0.06180833241327399, 0.04652796907012213, 0.03821269857608789, 0.14108178509082303, 0.07602103901940771, 9.999999999998899e-05, 0.17256385825318488, 0.09841754399671676, 0.11893411088587813, 0.12413880571287772, 0.07693274768197478, 0.08658709414418697, 0.10149417411000361, 0.12185016346735233, 0.060261447540664315, 0.15620617216443466, 0.024216893549302787, 9.999999999998899e-05, 0.10248961084954422, 0.06481023182229495, 0.15462376476469997, 0.12745058778930274, 0.1306958958773533, 0.0012964195567989334, 0.039111901239964, 0.02215870014949428, 9.999999999998899e-05, 0.11060449047459875, 0.0039082321864820635, 0.027916923617151035, 0.027975490090122568, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02517367315096619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051155790240975385, 0.061048618012941924, 0.09623312296685693, 0.059647370351321505, 0.009781108067844602, 0.009356534149741358, 0.056930437210023443, 0.047323999573897324, 0.0381410317430122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018077223521055896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0071079453870320775, 0.21795471952141454, 0.26638335833353977, 0.26071445616857647, 0.19664436160798837, 0.16867073319994197, 0.18022014027312783, 0.24199893615675017, 0.256748903107175, 0.1991413742690783, 0.03966069076145684, 0.011970623160877714, 9.999999999998899e-05, 0.0902724505719319, 0.11226468596532813, 0.1025238815489169, 0.10616746488215834, 0.07811764539832311, 0.10535678811099791, 0.23727430776875436, 0.21440754737849332, 0.23492314650388546, 0.14077490172058005, 0.17656419594585626, 0.25385804541245804, 0.15733368683158844, 0.1710775997620836, 0.183173581815824, 0.15566206743293787, 0.18692710133917723, 0.1781869766655917, 0.21397645452355551, 0.18437537154635897, 0.1861883047844245, 0.16412911186007406, 0.19669792148587828, 0.16461988322409693, 0.07487644329745202, 0.1036840330842177, 0.09722410019231598, 0.17939018952740804, 0.18496282803103714, 0.11805785676451941, 0.11679378512988459, 0.16674362715217317, 0.1093413940855722, 0.2258707605228788, 0.1676078274547237, 0.17305992409974136, 0.21565192958944113, 0.18411010139896244, 0.1674588626932918, 0.23907773325671355, 0.179752117905018, 0.21810207394426584, 0.18862889188030763, 0.18466715547276247, 0.18618291820087873, 0.19182187676659468, 0.17627663834347074, 0.21175010852934206, 0.18773548309586052, 0.1815052957213128, 0.18490017121115665, 0.16328959953012434, 0.17285650849993817, 0.12709138036192724, 0.1697734246437287, 0.16057053283511047, 0.19319466473228375, 0.09786962221479611, 0.12942442660016817, 0.14608100875203878, 0.22151937017727352, 0.1467929016924503, 0.07035972319548234, 0.2273483243651958, 0.18540447461560738, 0.10595373721425716, 0.10130938925054833, 0.08400458328167337, 0.14812670458532196, 0.17826704825680206, 0.19150776156385085, 0.2231378648315181, 0.20542088946502401, 0.18208847378328252, 0.19311412723049126, 0.18911377378438532, 0.20495171143591473, 0.18607832148988424, 0.061593760783225426, 0.081105091502227, 0.06321428165720666, 0.06421405483458398, 0.0648373857668808, 0.06591336358316369, 0.06832435901823553, 0.07733704278633269, 0.09524196035742227]}, "mutation_prompt": null}
{"id": "35e690bc-1292-4478-94ca-206e24d12554", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "83954521-23e4-4d3e-9b64-39d1650d237a", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "00e89f19-8f7e-432c-adda-d9ee1b724f3c", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.population)\n        self.pbest_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.beta = 1.5  # Constriction factor\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_position_update(self, particle, pbest, gbest):\n        u = np.random.uniform(0, 1, self.dim)\n        mbest = (pbest + gbest) / 2\n        return mbest + self.beta * np.abs(pbest - gbest) * np.log(1 / u)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.pbest_fitness[i] = fitness\n            self.pbest_positions[i] = self.population[i]\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                new_position = self.quantum_position_update(\n                    self.population[i], \n                    self.pbest_positions[i], \n                    self.global_best_position\n                )\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                \n                new_fitness = self.evaluate(func, new_position)\n                if new_fitness < self.pbest_fitness[i]:\n                    self.pbest_fitness[i] = new_fitness\n                    self.pbest_positions[i] = new_position\n                    if new_fitness < self.global_best_fitness:\n                        self.global_best_fitness = new_fitness\n                        self.global_best_position = new_position\n\n                self.population[i] = new_position\n\n        return self.global_best_position", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) using quantum potential well to enhance exploration and convergence in a black box optimization setting.", "configspace": "", "generation": 53, "fitness": 0.0568785847943706, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.09754836409618295, 0.07541348591703534, 0.10489503473249606, 0.09093209859097517, 0.07052444814808534, 0.08917684413427251, 0.08630797538051027, 0.07973391887837389, 0.07951067762012953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016220349327118466, 0.041769720036013536, 0.032807831409703114, 0.038817222332723444, 0.011319893185895658, 0.01653772510520779, 0.019972995866506027, 0.0005305596831600701, 0.02653785027441047, 0.007541608568455427, 0.02278638217049689, 0.030009373333528266, 0.02736063269688216, 0.019511540970920227, 0.014631126418770513, 0.01030245619508896, 0.00660837609813425, 0.043474877250960664, 0.08033310547560579, 0.07580822970493939, 0.0652301413539913, 0.0642700565938894, 0.051981763048640994, 0.038357606097705, 0.06581959325602549, 0.05067134194155931, 0.03944364494147534, 0.08426011072095718, 0.027616832226193044, 9.999999999998899e-05, 0.006646409580362556, 0.05160898134242575, 0.01933563421455564, 9.999999999998899e-05, 0.01379401013826742, 9.999999999998899e-05, 0.11097293076226855, 0.05738844075295002, 0.11382100299330888, 0.09657821740389316, 0.042065941922486805, 0.06686552725024575, 0.033383140433367986, 0.0630671008659005, 0.015516867833447523, 9.999999999998899e-05, 9.999999999998899e-05, 0.010051530422090948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013652090746530288, 9.999999999998899e-05, 0.006542980679365207, 0.007597573443388295, 0.005569967320047775, 0.0033761998101640156, 0.0009744959592621338, 0.0018166906212602196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1181621177513773, 0.14017303064585762, 0.17271364017183788, 0.12475160486279235, 0.11220614716360433, 0.12080508319574479, 0.18089863245692472, 0.11435848726348252, 0.13236159857566743, 0.025332691633027205, 0.00606491779270113, 0.007093970215848233, 0.02550655341114505, 9.999999999998899e-05, 0.034949633418032144, 0.0015071827563047924, 9.999999999998899e-05, 0.034640566489374414, 0.12939925295137966, 0.1514135409760322, 0.08790201355040794, 0.12947359137609804, 0.11717125910768278, 0.14733703061894698, 0.11948483366216, 0.11035866295090913, 0.09359302936379976, 0.12039099624439076, 0.12602087839566578, 0.17034461226097608, 0.17123899902523132, 0.11960408960748481, 0.12417724816883713, 0.1251909694661013, 0.1739064627453154, 0.15520805954708827, 0.05981328575205702, 0.06572659728326014, 0.12077567036556702, 0.1008624632349947, 0.07142979792504556, 0.08007773512831495, 0.0837317855149382, 0.0997711199450243, 0.09477461519234553, 0.11949438259592349, 0.10302507784105386, 0.14112242062134062, 0.12350669788279989, 0.10827623921680185, 0.12042444895728, 0.1269486361087776, 0.13262502687245703, 0.14156705908536515, 9.999999999998899e-05, 0.07678309590987387, 0.15902689635810963, 0.158577613537489, 9.999999999998899e-05, 0.03148889490676543, 9.999999999998899e-05, 9.999999999998899e-05, 0.019379141508682363, 0.10001039057590844, 0.14026694747045554, 0.09666952781708582, 0.07849937576504418, 0.13847524449234683, 0.06784044610968909, 0.08080881278276086, 0.11638089802768559, 0.09962566557553343, 0.2228228145110288, 0.11277452971790602, 0.07287099642239736, 0.08380098646292955, 0.04384263525378973, 0.09492311859331715, 0.08403046480400467, 0.16969044252731746, 0.05275619897129458, 0.17174554630047656, 0.18118766928054397, 0.18370095953632004, 0.19271132013423065, 0.16855987134390127, 0.1620252825042846, 0.18099271579879062, 0.15334876511167894, 0.17722246855425727, 0.015705622256209195, 0.02501373137105989, 0.04390267394991476, 0.0350849759643288, 0.034679678296970495, 0.026060596472382014, 0.03713220115897142, 0.007990928799930241, 0.01806819502419965]}, "mutation_prompt": null}
{"id": "3e279488-ac6c-4a54-b111-73f9402f8117", "solution": "import numpy as np\n\nclass AQ_PSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5 # Cognitive coefficient\n        self.c2 = 1.5 # Social coefficient\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_velocity_position(self, i):\n        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n        cognitive_component = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n        social_component = self.c2 * r2 * (self.best_global_position - self.population[i])\n        quantum_component = np.random.normal(0, 1, self.dim) * (self.best_global_position - self.population[i])\n        \n        self.velocities[i] = self.w * self.velocities[i] + cognitive_component + social_component + quantum_component\n        self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.personal_best_fitness[i] = fitness\n            self.personal_best_positions[i] = self.population[i]\n            if fitness < self.best_global_fitness:\n                self.best_global_fitness = fitness\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                self.update_velocity_position(i)\n                fitness = self.evaluate(func, self.population[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_positions[i] = self.population[i]\n                    if fitness < self.best_global_fitness:\n                        self.best_global_fitness = fitness\n                        self.best_global_position = self.population[i]\n\n        return self.best_global_position", "name": "AQ_PSO", "description": "Adaptive Quantum-inspired Particle Swarm Optimization (AQ-PSO) using quantum mechanics principles for adaptive exploration and effective convergence in diverse problem landscapes.", "configspace": "", "generation": 54, "fitness": 0.20436881669772142, "feedback": "The algorithm AQ_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.5143172101318758, 0.1258180237758526, 0.6763898085792325, 0.6076017939870377, 0.6269981530843385, 0.18929747053911827, 0.5286392741859685, 0.649947330323132, 0.1824110510855147, 0.06337095276098448, 0.21584737843702484, 9.999999999998899e-05, 0.05900924351899861, 0.30968018744831227, 0.05456802348461465, 0.26682583235884727, 0.03630238501862826, 0.2660087280280785, 0.06839430877496999, 0.11753600584786195, 0.11630219304908607, 0.10851879440053014, 0.10108145576210681, 0.08534769822137855, 0.14807467670147578, 0.1394667848808192, 0.12578213297779606, 0.08924384849548028, 0.10695798633789, 0.10837518844848093, 0.1206590296405955, 0.10848753817293277, 0.1193400308690612, 0.10882454520048501, 0.10836950702345816, 0.12987621235043556, 0.9921051892487857, 0.9931801803593105, 0.993097957947411, 0.9918514157307975, 0.9908390714606359, 0.9892554811887045, 0.9910664258480462, 0.9909182210615559, 0.9914778305117222, 0.2554219761242179, 0.22095822526233644, 0.11451752596269693, 0.1466957676935241, 0.14614398583792776, 0.14590711062926986, 0.12307306056404776, 0.22899269895532448, 0.08871899538631023, 0.21899457461878147, 0.15560132783659975, 0.22071150829431874, 0.32349256364654844, 0.18888170286921946, 0.18899772172785734, 0.12457218898208033, 0.27573210575617824, 0.30370375203060807, 0.10225287139650807, 0.1917375290616936, 0.07584936228190386, 0.08625125372395015, 0.14114771211431398, 0.09908790048930438, 0.12079252175381094, 0.17849978828880653, 0.15031227699862615, 0.18522939597952526, 0.13360121125070634, 0.1506923008753822, 0.17944338791395387, 0.12554814730903074, 0.16142739383643967, 0.07670959380558673, 0.03307056111436846, 0.13857461161194828, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030989049642904387, 9.999999999998899e-05, 0.0012545899129541294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06817872651738455, 0.03156300293805758, 0.022525628730866054, 0.02999696847135369, 0.03419648540435605, 0.02022783397308925, 0.024808678623222113, 0.05483739554838307, 0.08718641186538734, 0.02758880364587679, 0.03612863340151029, 0.019414239067602646, 0.11282363427479303, 9.999999999998899e-05, 0.04975269999985499, 0.06907984113486276, 0.06866622167949443, 0.05631913908425745, 0.03594758988323976, 0.1766389166711957, 9.999999999998899e-05, 0.0173782518695893, 9.999999999998899e-05, 0.1364885508251884, 0.0481291857450189, 0.04540284926135241, 0.05354636502456267, 0.4015373083910223, 0.46269188927816596, 0.3690049229833364, 0.3593228190088158, 0.39117561775102627, 0.4415943459384819, 0.3874193086793418, 0.4194673122642856, 0.4696719726899625, 0.10660212494873633, 0.0666858122674494, 0.08669365850331545, 0.1281479639372186, 0.10743961633566101, 0.1173901899925861, 0.07749829321026869, 0.08212781302231165, 0.09209002226611118, 0.1655313642242665, 0.16825182369098002, 0.16389567272631833, 0.23388571206052722, 0.206980018426551, 0.14114449320091538, 0.3323732851749349, 0.17613609305343614, 0.16860314488722983, 0.3169871753869501, 0.27854520005786376, 0.26196404690050945, 0.24495284208555035, 0.24676391022688826, 0.26266133399754865, 0.26935277778681344, 0.2414534232873652, 0.2961603131579198, 0.20378490539687022, 0.06970691889428848, 0.13282969301413594, 0.1952369443408265, 0.17213981530775213, 0.19309027495081832, 0.16578811931946946, 0.20669781684359312, 0.1567290477854063, 0.18420766983175796, 0.16082902937918464, 0.20296434581873424, 0.19158098268289536, 0.15585818247536953, 0.1838850329752758, 0.18944477344596566, 0.1964559653028587, 0.21901428086234498, 0.20849404870535304, 0.18887337427582607, 0.23963103800749008, 0.20908025370120342, 0.2253542570720687, 0.1932197365427465, 0.2003944354114704, 0.2024412706197115, 0.210163476938232, 0.2649101485148, 0.15930361243721658, 0.12406696456139765, 0.18583792399910448, 0.20047398766642155, 0.16403153766997747, 0.49928675110537557, 0.16722175086409974, 0.5372413239746427, 0.5524389748547345, 0.14570993776003105, 0.26790281467559884, 0.11007103035484356, 0.16831592583848864, 0.1644252033698309, 0.38272053649421556, 0.19332109839669476, 0.18412548028719133, 0.20607477788983875, 0.211850464013006, 0.19916094388132277, 0.17735218992889257, 0.21332781005446, 0.1915697523025296, 0.19351027243191088, 0.1927079656666466, 0.19318845337193036, 0.06765672460218541, 0.0705365990757244, 0.08239433086357317, 0.06536365442231395, 0.08141248551612645, 0.08169361754379101, 0.0760157423895198, 0.06041563464689992, 0.06963097028721421]}, "mutation_prompt": null}
{"id": "71593195-33e4-40dc-a3bc-5276a94fb9e6", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "ccef9feb-7e8d-4027-ae2f-9a9206dbc3ff", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "54a1b66d-5e15-4f8e-bdd5-362a27f5f8dc", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "317d850d-5ed6-4b2c-b3d1-c9349ddbbb72", "solution": "import numpy as np\n\nclass QEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.alpha = np.random.rand(self.pop_size, self.dim)  # Probability amplitude\n        self.beta = np.sqrt(1 - self.alpha ** 2)  # Orthogonal probability amplitude\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_rotation(self, index, best_position):\n        for d in range(self.dim):\n            if np.random.rand() < self.alpha[index, d]:\n                self.population[index, d] = best_position[d]\n            else:\n                self.population[index, d] += np.random.normal(0, 1) * (self.upper_bound - self.lower_bound) / 10.0\n\n    def update_quantum_states(self, index):\n        self.alpha[index] = np.random.rand(self.dim)\n        self.beta[index] = np.sqrt(1 - self.alpha[index] ** 2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                self.quantum_rotation(i, self.best_global_position)\n                trial_fitness = self.evaluate(func, self.population[i])\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = self.population[i]\n                else:\n                    self.update_quantum_states(i)\n\n        return self.best_global_position", "name": "QEA", "description": "Quantum-inspired Evolutionary Algorithm (QEA) simulating quantum bits and superposition states for enhanced exploration beyond classical methods.", "configspace": "", "generation": 58, "fitness": 0.1419729550515829, "feedback": "The algorithm QEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.20.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.26947382980018675, 0.27203745508204324, 0.30844827079260084, 0.25794508720124987, 0.36650601815196227, 0.2603555657974491, 0.24106752461986458, 0.34109323735780295, 0.2778919237994215, 9.999999999998899e-05, 0.010035784006094062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08550445885344415, 0.11413203536998384, 0.07094615116933056, 0.053971879591921956, 0.07525390646486319, 0.05891909539206086, 0.03985206840416644, 0.05372123516680094, 0.06603326838011092, 0.04458036992522607, 0.042825914547592436, 0.05520557233109247, 0.04566642692964984, 0.036301388644529475, 0.038776305591263216, 0.03255580266770375, 0.06775740846209988, 0.073683334484128, 0.9810210399779176, 0.9837375742451241, 0.9861536089531016, 0.9860186825656759, 0.989032033476801, 0.9679312075344004, 0.9858351766921589, 0.984421474090982, 0.982111289119226, 0.126736073765364, 0.10882474972729983, 0.09715831129137953, 0.14308703796193456, 0.10012065155047256, 0.14123778036477797, 0.13080335141571486, 0.10481878780306686, 0.14555332823772116, 0.1596010093233472, 0.07156978208140463, 0.28457915062182504, 0.1452079226330557, 0.13148518381126728, 0.1884224875062237, 0.11882990051722642, 0.1340323031856806, 0.12199957141147644, 0.02950700509927706, 0.03431454136197121, 0.024051359879604717, 9.999999999998899e-05, 9.999999999998899e-05, 0.029255027345488127, 0.030326812091065247, 0.02632581857779792, 0.01749357068315438, 0.06856490017289829, 9.999999999998899e-05, 9.999999999998899e-05, 0.09589933966825048, 0.07345433715560123, 0.045973407048741644, 0.11778991984586351, 9.999999999998899e-05, 0.13206173967565316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03416162528162259, 0.053097901846821505, 0.010622796202935936, 0.05162760113514231, 9.999999999998899e-05, 0.026632587849677147, 0.034565069002561954, 0.061499615689184606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005418678725525372, 0.0013172549725443128, 9.999999999998899e-05, 0.014182192906180724, 0.05242179750916953, 0.011731342838900538, 0.26307190635176725, 0.29566458625634007, 0.22894972884736797, 0.23306872191170191, 0.2424631512889498, 0.27312055034932303, 0.31105327707681485, 0.2864417437982981, 0.26848854376434195, 0.05757902634072676, 0.04656188137094719, 0.046418152898984766, 0.06202047407341438, 0.06728890965563383, 0.03236930992202158, 0.06377599382890187, 0.0556436620859464, 0.05253624743865315, 0.1528520127149684, 0.1514766996305862, 0.11710371961953348, 0.10532975089192509, 0.10852972522114013, 0.13485465817632358, 0.1513322457588523, 0.1066301673195027, 0.1304022663620492, 0.15633023217736486, 0.209888448132182, 0.1473221221501524, 0.16466641765848722, 0.17212305069061984, 0.17296821168112164, 0.2053841595261734, 0.2424164022686991, 0.17659525820144029, 0.08523284553466204, 0.13978793174640125, 0.14153306549438982, 0.125960286413748, 0.12063801763156079, 0.14501694875667903, 0.1367467185754142, 0.0997711199450243, 0.1541404262818411, 0.14021652178641375, 0.16453855909103754, 0.13345086981233123, 0.1587635255906371, 0.13312016770830304, 0.16339411770179746, 0.13884609693418626, 0.13426909679763177, 0.1476585502005079, 0.17803648578486386, 0.1593494099267958, 0.18834959411460872, 0.16244925079661754, 0.17555488679130726, 0.15882352462713256, 0.15793532425478862, 0.1715029744135168, 0.1610299994261708, 0.13210934183066037, 0.11402588065626584, 0.11743797250676435, 0.3312193548397626, 0.1207914665021157, 0.2848252163859336, 0.11903032830484539, 0.09643604708838482, 0.37912189946848474, 0.12468813216309194, 0.10051730792859848, 0.20193577835599996, 0.0862568248063168, 0.27074754043202864, 0.07781453789744863, 0.13521466934114412, 0.1104424213056171, 0.09977893821897055, 0.1788712694550808, 0.16637359285796793, 0.14763022729669195, 0.18827175673900576, 0.17073011484882994, 0.16963675441589654, 0.163578958765358, 0.1810350480913403, 0.16157793437007772, 0.05152182181678422, 0.05818298748362705, 0.06039552381391644, 0.058146335943632166, 0.05120346780340501, 0.04689986511779154, 0.07499151052318376, 0.06515875092417023, 0.05385394984817926]}, "mutation_prompt": null}
{"id": "8ed74881-8d00-4214-be82-4c1e933d40f8", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "cefa9f86-6f85-421b-899d-13d50ceca5df", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "1f3e59ce-6d7d-47f9-8e08-f6a084efdf84", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "6124b7c2-f39d-4e6f-813b-029a6565a6c7", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "27b4a311-f4b9-4d96-b739-4bcead46e914", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "d0e1ec83-23d6-408b-9bf0-3a515c9e957a", "solution": "import numpy as np\n\nclass AQGA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_superposition(self, individual):\n        theta = np.pi * np.random.rand(self.dim)\n        return np.tan(theta) * individual\n\n    def adaptive_crossover(self, parent1, parent2):\n        beta = np.random.rand()\n        return beta * parent1 + (1 - beta) * parent2\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            new_population = []\n            for i in range(self.pop_size // 2):\n                parent1, parent2 = self.population[np.random.choice(self.pop_size, 2, replace=False)]\n                \n                offspring1 = self.adaptive_crossover(parent1, parent2)\n                offspring2 = self.adaptive_crossover(parent2, parent1)\n                \n                offspring1 = self.quantum_superposition(offspring1)\n                offspring2 = self.quantum_superposition(offspring2)\n                \n                offspring1 = np.clip(offspring1, self.lower_bound, self.upper_bound)\n                offspring2 = np.clip(offspring2, self.lower_bound, self.upper_bound)\n                \n                new_population.extend([offspring1, offspring2])\n\n            for i in range(self.pop_size):\n                self.population[i] = new_population[i]\n                self.fitness[i] = self.evaluate(func, self.population[i])\n                if self.fitness[i] < self.best_global_fitness:\n                    self.best_global_fitness = self.fitness[i]\n                    self.best_global_position = self.population[i]\n\n        return self.best_global_position", "name": "AQGA", "description": "Adaptive Quantum-inspired Genetic Algorithm (AQGA) utilizing quantum superposition principles and adaptive crossover for enhanced exploration and convergence.", "configspace": "", "generation": 64, "fitness": 0.09371551952574263, "feedback": "The algorithm AQGA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.1836715098251026, 0.21179655817796184, 0.17075642490500287, 0.12746745819186367, 0.11788608171934589, 0.13532784717504653, 0.16322782839101202, 0.13611065065271755, 0.18976230886452738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03732389346333098, 0.03518307016208855, 0.04286743422455164, 0.0403975698870116, 0.04380574513063007, 0.032662372941798856, 0.026343146106605153, 0.03601035175213252, 0.04113738639415265, 0.03670262817994785, 0.031297134683112016, 0.04188824552980408, 0.02901868647495831, 0.023252279706665324, 0.02980460272042329, 0.03563638095483679, 0.02555475628756343, 0.04096111166798477, 0.09738200973692834, 0.12082889545449382, 0.09508500509182394, 0.11246290195596353, 0.11079581592409027, 0.09574656224402911, 0.11266869389440304, 0.10632443042954076, 0.08900779905222356, 0.06274794416174423, 0.042493067607362045, 0.03216442803615027, 0.0640972612536953, 0.07980671263971184, 0.07755176831798194, 0.05092095838128752, 0.030935961908114096, 0.04835907170627085, 0.1594043802125058, 0.13777765413598286, 0.1432330974012802, 0.10723589541349976, 0.082216614969575, 0.08864163765977029, 0.13345462643327155, 0.10108970254661143, 0.09732265030812703, 0.014380746794426469, 0.047526963989502624, 0.03531093881430947, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013953539838673645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1731540137471469, 0.0785446908095393, 0.09203513334557178, 0.11900033727237647, 0.10604448849831716, 0.1042696942762894, 0.09405969375863132, 0.1033236056104555, 0.1385653015371292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09129832383372027, 0.07459699215267901, 0.0594358992730637, 0.047268953317603724, 0.05104803961973525, 0.06588259406783914, 0.10048571337357481, 0.059310892124825654, 0.09261704418191441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16968905967223036, 0.17057478534236437, 0.19307509278367374, 0.18211051525880395, 0.17679844965502467, 0.17176945196000615, 0.18785631317002227, 0.1904649521508891, 0.20474031827268657, 0.022639466640432926, 0.012325796004427292, 0.024978734200208463, 0.04101830271237794, 0.03359578573076338, 0.03377503124687642, 0.044394275771568736, 0.050033972377635516, 0.04345952726436331, 0.13984415330274425, 0.12557884468109937, 0.16346524488719383, 0.12861771521639753, 0.15135771683027577, 0.1381491022641581, 0.14145994257433558, 0.12946303427199268, 0.1632848098022427, 0.1512526278573212, 0.15119346378689769, 0.1613932299901244, 0.18907738349041547, 0.1847092861816615, 0.180750107960579, 0.1543883700286115, 0.17377774300845283, 0.14732054034556008, 0.11332061502151392, 0.1005826108586334, 0.11291938850841976, 0.14474054936575087, 0.12629130191153182, 0.12392229357864903, 0.09154821638893884, 0.0997711199450243, 0.0942317279039091, 0.1910187464205887, 0.18259734289128227, 0.20544345538676534, 0.21805140514590204, 0.20575767257628752, 0.20121635374776892, 0.19420733615176944, 0.20595204019326774, 0.23920789724195723, 0.14603967183435906, 0.14036360391675118, 0.13538744643966494, 0.15011043820237324, 0.14812929532434538, 0.14579187897671797, 0.1481339194500748, 0.14152357692775241, 0.15306906458176495, 0.1448273206149423, 0.13369744880439083, 0.1473757010280311, 0.14776457083400796, 0.21549741128639122, 0.11919013529329237, 0.16333726284703987, 0.17685608008715004, 0.15220237085629928, 0.1668616492577525, 0.18525183087527253, 0.14852552647151573, 0.21506017106208952, 0.16635762269931764, 0.16336504150041442, 0.1535972613463642, 0.15411289384458127, 0.11892266042990629, 0.19155084901302422, 0.1782979954190328, 0.17978509836377166, 0.18980064384356055, 0.19561743560417977, 0.1974374983943057, 0.1896945665256229, 0.18104484280031252, 0.18295609486125186, 0.05336029396946329, 0.05902678685876839, 0.04988371003832415, 0.05261465569206869, 0.05771897907529633, 0.051953592924201986, 0.061610246100974986, 0.0545019768314593, 0.057173269676193406]}, "mutation_prompt": null}
{"id": "de3779c7-1e3e-4057-a7a2-9fa76dc86db6", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 40\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.position = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocity = np.zeros((self.pop_size, self.dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_velocity_and_position(self):\n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        cognitive_component = self.c1 * r1 * (self.personal_best_position - self.position)\n        social_component = self.c2 * r2 * (self.global_best_position - self.position)\n        \n        self.velocity = self.w * self.velocity + cognitive_component + social_component\n        self.position += self.velocity\n\n        # Quantum-inspired update\n        delta = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        q = np.minimum(1, np.exp(-np.linalg.norm(self.velocity, axis=1)))\n        quantum_jump = q[:, np.newaxis] * delta\n        self.position += quantum_jump\n\n        self.position = np.clip(self.position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.position[i])\n            self.personal_best_fitness[i] = fitness\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.position[i]\n\n        while self.evaluations < self.budget:\n            self.update_velocity_and_position()\n\n            for i in range(self.pop_size):\n                fitness = self.evaluate(func, self.position[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                    \n                    if fitness < self.global_best_fitness:\n                        self.global_best_fitness = fitness\n                        self.global_best_position = self.position[i]\n\n        return self.global_best_position", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum behaviors and dynamically adjusting parameters for enhanced exploration and convergence.", "configspace": "", "generation": 65, "fitness": 0.16491419720813205, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.3278307768236288, 0.3232754147565179, 0.33057156191745474, 0.15739441200854531, 0.1882652792983487, 0.29326027100063357, 0.18079660844454926, 0.3315638700053948, 0.33535239175177645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03619598798642287, 9.999999999998899e-05, 9.999999999998899e-05, 0.014567978500262369, 0.040588025288444296, 0.11245322955834547, 0.043308996094489904, 0.0664775892104944, 0.09787638920942321, 0.059956020391152554, 0.09354472645306522, 0.04999570928708785, 0.08090709755063363, 0.09452439039290039, 0.044307647915949766, 0.09276184389894482, 0.07432049464612556, 0.07942298395350678, 0.02454328051087451, 0.055171498842664146, 0.054853670577883706, 0.0746075516211736, 0.0611044149903075, 0.988913017143189, 0.9903795865992844, 0.9856555977616731, 0.9605366984749145, 0.9805738282266253, 0.9816405905746504, 0.9846994085365346, 0.9799267334038, 0.9833003117888264, 0.11232591933210245, 0.2236387256910991, 0.06107582045225968, 0.15131611393519484, 0.19186673169941304, 0.1973735127675068, 0.08366786729672637, 0.08897990089918062, 0.17165312938420052, 0.1482804044393803, 0.17552273823390008, 0.23369572307582398, 0.18996522543220917, 0.2464372976135979, 0.19033400088574093, 0.12253410266340214, 0.09083302723923792, 0.25127072279674134, 0.10636937247032563, 0.11507890344347449, 0.048346316302862236, 0.11256122489857934, 0.08779883418552814, 0.11739948858122784, 0.10136789984664829, 0.11946860428462369, 0.11388890677651342, 0.1301812088844756, 0.1072293151762086, 0.12491127507360433, 0.12139441357417913, 0.10597062780214705, 0.12614223966782678, 0.10431580927626749, 9.999999999998899e-05, 0.0975097263423097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004884663339905781, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003114412213147677, 0.0021579052617746175, 9.999999999998899e-05, 0.02877151448317672, 0.05456184676109299, 0.05375154479356281, 0.053134915002110206, 9.999999999998899e-05, 0.034192068988099344, 0.04180139913520475, 0.04909912284467388, 0.09015853681432129, 0.03199609218048771, 9.999999999998899e-05, 9.999999999998899e-05, 0.04178582232132089, 0.04269805843008123, 9.999999999998899e-05, 9.999999999998899e-05, 0.04652308957825457, 9.999999999998899e-05, 0.0475885530032254, 9.999999999998899e-05, 0.00947452686953909, 0.04223227043876909, 0.03164960777253767, 0.03812506740870836, 0.0482221194908532, 9.999999999998899e-05, 0.039238377879343145, 0.16933709325863633, 0.3343928191532489, 0.3383238153159286, 0.19586120716733357, 0.2082071861728796, 0.2086062047480607, 0.23109172398311895, 0.3116167978505229, 0.3343073380943692, 0.06356894161444793, 0.06462898797528016, 0.07429502048855774, 0.10444270431201219, 0.08933764231281471, 0.07903276777404478, 0.06120776108275172, 0.08904301981460905, 0.05992656283736919, 0.14823204507583088, 0.19757965575775283, 0.15394909717414407, 0.17014609134870662, 0.16496377505727122, 0.16881559920586897, 0.12424502715826691, 0.17066384915295696, 0.14818012987561902, 0.21189044637508792, 0.1777117635192984, 0.2135569146346633, 0.23102300104301265, 0.22760191835758126, 0.18598800786360992, 0.24896348320873762, 0.24713866052650246, 0.17794250536878387, 0.1186460572293494, 0.1455577551330718, 0.16450742553253295, 0.15821833913779282, 0.15152006042516641, 0.1749592298389272, 0.2178627922781996, 0.19499102040674776, 0.13199787581530087, 0.17893694055534437, 0.1342756103053807, 0.20169906205291155, 0.18350926305179804, 0.14379292182831882, 0.22464473271474295, 0.20313937896822676, 0.20612010108472412, 0.21416660241560148, 0.17705194829673854, 0.16101795462234691, 0.1700716500471604, 0.1785027562981606, 0.18830494704443201, 0.17396423452149268, 0.17478701691491438, 0.16908484657673273, 0.18397908435970334, 0.16383503518855036, 0.16304293611091747, 0.15388270025812256, 0.4425984360961849, 0.1953784661019694, 0.19075026646897453, 0.11921109995508905, 0.1702336340555376, 0.5423416914878312, 0.37382054448163216, 0.16954705548812488, 0.2747287481499979, 0.1031891644450299, 0.16785513650415873, 0.10533590389450509, 0.1849227619783893, 0.10370749673097457, 0.289661889268098, 0.16874208693418646, 0.21086738730483856, 0.1916749459439666, 0.19063878391386868, 0.177814638406252, 0.18328174136861553, 0.1835390174541326, 0.18126382703891075, 0.17208790145372455, 0.0872604119410767, 0.09629819788694005, 0.08697586920947165, 0.07959634675022953, 0.06508072830998168, 0.07677881847094048, 0.061787710786699646, 0.046692063273655604, 0.07972061889599058]}, "mutation_prompt": null}
{"id": "14fbb321-5919-48b4-a109-0bfa6d651af0", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n        self.quantum_factor = 0.1  # Quantum influence factor\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_mutation(self, xi, x1, x2, x3):\n        quantum_wave = np.random.uniform(-self.quantum_factor, self.quantum_factor, size=self.dim)\n        quantum_position = xi + self.F * (x1 - x2 + x3 - x2) + quantum_wave\n        return quantum_position\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.quantum_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) utilizing quantum superposition principles and co-evolutionary adaptation to balance exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 66, "fitness": 0.18270191746230527, "feedback": "The algorithm QIDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.40940191054242614, 0.42769178541937636, 0.4105587740093446, 0.42568205344300725, 0.4363734843569791, 0.4270086666001244, 0.42862866112398745, 0.4259879358307458, 0.42635326872696955, 0.05042032473418345, 0.04388193092427939, 0.056283824733938115, 0.05454459764404451, 0.06245338179237092, 0.06340503613500936, 0.04863981565410047, 0.04938587365169511, 0.05214377892881561, 0.07508263113637537, 0.07470959232814534, 0.08241451671599898, 0.07952824410096149, 0.08398599771643911, 0.0905373589881312, 0.09257114022685742, 0.09905101369515212, 0.07625745442275433, 0.08542911655388252, 0.05838650809374957, 0.06922259852803436, 0.08190264820325333, 0.06407186329183534, 0.07752459819922608, 0.07169571705162325, 0.07703946459106137, 0.08524478329032847, 0.9333481977838743, 0.9845644256831911, 0.9642371197846156, 0.9064742587019341, 0.9645933346753242, 0.9383969198638763, 0.9673826030731557, 0.8628276333860116, 0.8914915576631146, 0.22144812015815518, 0.22057267306106354, 0.2037875058317009, 0.18839202598899352, 0.19570894768003622, 0.2055952754848962, 0.20476051755377744, 0.20270382391900976, 0.22157877096167744, 0.2736436852132893, 0.23077991153551525, 0.25825889097076127, 0.27262781431070093, 0.26033713409160497, 0.2421965007607645, 0.2640165373427683, 0.2695329550424913, 0.2895783976646218, 0.08877601077158248, 0.08722820741470805, 0.08551123561769669, 0.10176341730767036, 0.09053116224706192, 0.10086384184288943, 0.11007679793460379, 0.09900472911102787, 0.09743404157158675, 0.12692846182311313, 0.11007813587901816, 0.10983827034867077, 0.10250725727996801, 0.09689740450372397, 0.10117718670468889, 0.0754220903830708, 0.0821880854157393, 0.08497187328879807, 0.007019760776591832, 0.016056355124692723, 0.006544951003843225, 0.019287886256255993, 0.004995244291514989, 0.014740789522546427, 0.00992000416778649, 0.053500546246907144, 0.01982876887637175, 0.09411278343965346, 0.07360606610275522, 0.08251541292424314, 0.08213201166916173, 0.07408154141465328, 0.06958702932794136, 0.13283091108907596, 0.09908686898630237, 0.08648280539318554, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0924549171121265, 0.08990568007346011, 0.09508511681878029, 0.09610193214061657, 0.09562940737799563, 0.09929424129661168, 0.099594290485292, 0.08991388021410862, 0.09142382652735959, 0.3877446344567277, 0.365424154003253, 0.36510412980403106, 0.36171243558269484, 0.3696118951378765, 0.366452777401168, 0.37337396342897766, 0.3647119274472631, 0.37150106107994096, 0.10001934171786797, 0.09034312458173754, 0.0846793876711539, 0.07530454153219912, 0.08447589441088954, 0.07230063985858137, 0.07306325805622294, 0.0777079398164271, 0.08895640539713456, 0.15513903085764502, 0.1388355835444376, 0.1378193386587927, 0.1465460965206734, 0.15597174099416877, 0.11990445063352295, 0.14741874164092206, 0.12781281323882254, 0.1450715270421975, 0.19400849293782707, 0.22112577312018566, 0.21536839886790704, 0.19482008145751317, 0.20128250715599694, 0.21062217239635872, 0.20220896904938113, 0.21480989400608952, 0.2100608239764129, 0.12488788502809711, 0.1382383897067504, 0.15759693387302864, 0.16961721338204916, 0.15203997792065005, 0.14412555658151838, 0.15029598677437317, 0.1428724170420793, 0.14194708748252483, 0.16798953582583165, 0.16760688326126694, 0.17537287618209307, 0.20143299749270427, 0.17497064500238757, 0.17287231060447483, 0.20686069566709175, 0.17318411464767014, 0.19714363494896492, 0.17150048850447197, 0.17318444559606416, 0.18240563024628376, 0.17274496680283224, 0.16943351380979244, 0.17411416577237016, 0.16211124873970673, 0.16103752269284455, 0.16856728587565906, 0.1527373746577807, 0.19452345874168675, 0.2929288373553739, 0.28001485784023916, 0.18018638112361296, 0.20820441644698684, 0.14800271451216718, 0.1519095575945879, 0.21246492401226202, 0.15690441401766597, 0.19927703093956295, 0.18112157615531754, 0.19195179133689877, 0.20523916603781334, 0.16128289752363667, 0.30945983444177594, 0.21311774007554674, 0.217659750725973, 0.17782615757937692, 0.1830670313539562, 0.18678474309594428, 0.17814108323564304, 0.18232179475064847, 0.17424337396870526, 0.17819345732691272, 0.1796433974078282, 0.18386493343049193, 0.06145334844861028, 0.06790675667918655, 0.05664294272829884, 0.07600308474102335, 0.06329630352080207, 0.05233513416193969, 0.06700442129241313, 0.06503417931563982, 0.057229820657463626]}, "mutation_prompt": null}
{"id": "bc6a20e0-91f0-46fe-b406-ee2c5186a7c7", "solution": "import numpy as np\n\nclass MSPSO_AIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = 3\n        self.swarm_size = 10\n        self.pop_size = self.num_swarms * self.swarm_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_personal_positions = np.copy(self.population)\n        self.best_personal_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.9  # Initial inertia weight\n        self.c1 = 2.0  # Cognitive component\n        self.c2 = 2.0  # Social component\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_inertia(self):\n        self.w = 0.4 + 0.5 * (self.budget - self.evaluations) / self.budget\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_personal_fitness[i]:\n                self.best_personal_fitness[i] = self.fitness[i]\n                self.best_personal_positions[i] = self.population[i]\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            self.update_inertia()\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                cognitive = self.c1 * r1 * (self.best_personal_positions[i] - self.population[i])\n                social = self.c2 * r2 * (self.best_global_position - self.population[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive + social\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                fitness = self.evaluate(func, self.population[i])\n                if fitness < self.best_personal_fitness[i]:\n                    self.best_personal_fitness[i] = fitness\n                    self.best_personal_positions[i] = self.population[i]\n                if fitness < self.best_global_fitness:\n                    self.best_global_fitness = fitness\n                    self.best_global_position = self.population[i]\n\n        return self.best_global_position", "name": "MSPSO_AIW", "description": "Multi-Swarm Particle Swarm Optimization with Adaptive Inertia Weight (MSPSO-AIW) leveraging multiple swarms and adaptive inertia for enhanced exploration and convergence.", "configspace": "", "generation": 67, "fitness": 0.18974835569569906, "feedback": "The algorithm MSPSO_AIW got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.5269235967293764, 0.5569423040877246, 0.5054481913198525, 0.4136722582790773, 0.5004085608071557, 0.5421327789251067, 0.17502167511520872, 0.5275695714647559, 0.4487363178140905, 0.024160119723201978, 9.999999999998899e-05, 0.2519267911730838, 0.04318050741683033, 0.02599979707200273, 0.1667883580156495, 0.19209273562144913, 0.18556610837365395, 0.27169431086084717, 0.09581526401557183, 0.09145493507227476, 0.06152221172846095, 0.11934544599540464, 0.12016365760128433, 0.09380724688695685, 0.10565112414464661, 0.12184739422960844, 0.10328265990503405, 0.08664248353180515, 0.10749991199176834, 0.08190695316097951, 0.08310421748862196, 0.08203296926523473, 0.09137065601841654, 0.08763435151908272, 0.049715076089345, 0.12324470121804221, 0.9940662674848851, 0.9936801732242156, 0.993208568203643, 0.9897316529331767, 0.9946309632951688, 0.993736703351476, 0.9915343415185911, 0.99410351058405, 0.994107915671245, 0.25896902315424153, 0.23701361457395442, 0.058637160561728296, 0.1360316758252973, 0.29200351469951635, 0.14210918025189312, 0.08386747924763327, 0.27003455751681615, 0.08665490698696088, 0.30192259144999345, 0.1273629261079513, 0.1846921479128939, 0.31011437060284897, 0.22497087564935458, 0.18074899748586226, 0.4643647334332781, 0.18618462679855452, 0.16016717246454792, 0.10602695900711423, 0.1031606361710774, 0.08803300653029433, 0.08670995580109608, 0.0954024865809382, 0.10777706553986321, 0.11987421340444149, 0.08247415580803974, 0.13368105219858895, 0.06667447687196659, 0.020246919334030444, 0.18071333045600912, 0.12066002989000679, 0.1935179059103882, 0.08930001621008155, 0.10200483647773873, 0.024233357931953803, 0.025403426249134275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02646714455007204, 0.03737017789642083, 0.06457298401076528, 0.017070725491309724, 9.999999999998899e-05, 9.999999999998899e-05, 0.03680852613238983, 0.03133792504575872, 0.023653424916250332, 0.02540912095720671, 0.018989006259926056, 0.024733863241924392, 0.1069244195658623, 0.04170818486933037, 9.999999999998899e-05, 9.999999999998899e-05, 0.048422520119936974, 0.08150178328801594, 0.031258640185646946, 9.999999999998899e-05, 0.029417798202073242, 0.06176792506469697, 0.004061115887873723, 0.05345844063297467, 0.05933776156156778, 0.03731183908445601, 0.04581251444428747, 0.3542882795250083, 0.38483993761432955, 0.35538541439803595, 0.4422363847857633, 0.365786252688848, 0.3832091069579726, 0.3815736743713658, 0.3929589619857514, 0.3910954665563673, 0.0803271480262745, 0.07207832501430489, 0.08633778426747518, 0.08133160189970734, 0.08685088257689189, 0.10187461487475469, 0.060163998452013034, 0.07870728273385608, 0.07852070835580982, 0.12131374350305446, 0.14064407325367279, 0.1463782057644124, 0.16634966465611556, 0.2006986257480764, 0.16935385523591517, 0.21539162432449743, 0.15360840638152606, 0.17099385634563646, 0.22270213381896975, 0.1934427565668675, 0.2323655900297067, 0.27268792576453793, 0.18049536019132773, 0.2844019010528753, 0.34553508939832167, 0.3279296461093223, 0.25331278724281725, 0.12504404241393519, 0.17747700997455285, 0.16371682437457769, 0.177878796660083, 0.14533238116753933, 0.13852277682446112, 0.18862073960766312, 0.20642982938844823, 0.21221070808073572, 0.16064156883585945, 0.12527400560325586, 0.1782036997645371, 0.1895396392054921, 0.16249831969294137, 0.1665686598437296, 0.1590043189834751, 0.1774889149619705, 0.1770202269870077, 0.19760276890815875, 0.1850545709745336, 0.1989888829251586, 0.19259897931765302, 0.20480557673025568, 0.22224510516588714, 0.16448739947894897, 0.19046031527150142, 0.17729231262718637, 0.18754787616344282, 0.16709648736509275, 0.14397944904983284, 0.1600436079876958, 0.4617146169195132, 0.19368934460207632, 0.1195197680561143, 0.14979208992553028, 0.17206507411994876, 0.22862276876741616, 0.14027691878266801, 0.17083834311807244, 0.2127189973062098, 0.22477813530807234, 0.19380923488702018, 0.19027546405178042, 0.1923871674172628, 0.185590185362544, 0.19202705235044604, 0.20004504674659151, 0.22429304332946332, 0.1752382918530344, 0.1825564779970209, 0.21722314095611384, 0.18301470606764614, 0.19037354002041784, 0.19515917318872, 0.07284208800650771, 0.0685192279166289, 0.0667363080791642, 0.06914394850244421, 0.07300493189389667, 0.07605388126112633, 0.06785996596222854, 0.05514714247641517, 0.07773732479821971]}, "mutation_prompt": null}
{"id": "8bef0500-7dbe-45c2-8c84-a02f840e336f", "solution": "import numpy as np\n\nclass AHS_DPA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.hm_size = 30  # Harmony memory size\n        self.hmcr = 0.9    # Harmony memory consideration rate\n        self.par = 0.3     # Pitch adjustment rate\n        self.bw = 0.02     # Bandwidth for pitch adjustment\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n        self.fitness = np.full(self.hm_size, float('inf'))\n        self.best_harmony = None\n        self.best_fitness = float('inf')\n        self.evaluations = 0\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def dynamic_parameter_adjustment(self):\n        if self.evaluations > self.budget * 0.7:\n            self.hmcr = 0.95\n            self.par = 0.4\n            self.bw = 0.01\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.hm_size):\n            self.fitness[i] = self.evaluate(func, self.harmony_memory[i])\n            if self.fitness[i] < self.best_fitness:\n                self.best_fitness = self.fitness[i]\n                self.best_harmony = self.harmony_memory[i]\n\n        while self.evaluations < self.budget:\n            self.dynamic_parameter_adjustment()\n            for _ in range(self.hm_size):\n                new_harmony = np.copy(self.harmony_memory[np.random.randint(self.hm_size)])\n                for i in range(self.dim):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] += self.bw * (2 * np.random.rand() - 1)\n                        new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n                    else:\n                        new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                \n                new_fitness = self.evaluate(func, new_harmony)\n                if new_fitness < self.best_fitness:\n                    self.best_fitness = new_fitness\n                    self.best_harmony = new_harmony\n                \n                # Replace worst harmony if new is better\n                worst_idx = np.argmax(self.fitness)\n                if new_fitness < self.fitness[worst_idx]:\n                    self.harmony_memory[worst_idx] = new_harmony\n                    self.fitness[worst_idx] = new_fitness\n\n        return self.best_harmony", "name": "AHS_DPA", "description": "Adaptive Harmony Search with Dynamic Parameter Adjustment (AHS-DPA) enhances exploration and exploitation through dynamic harmony memory and parameter tuning.", "configspace": "", "generation": 68, "fitness": 0.21738036394417778, "feedback": "The algorithm AHS_DPA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.16.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.6313127985430036, 0.6062009360412168, 0.62920153122127, 0.5818830902404615, 0.6314477821768499, 0.6310960072259675, 0.6552619907047189, 0.6764920940287151, 0.6010603037260613, 0.2975437542422025, 0.30262387311202554, 0.30282445210582365, 0.36335873326034684, 0.31617877802008376, 0.32669831473801114, 0.2851732790391275, 0.27729676925305113, 0.31055222515179115, 0.1594259247321539, 0.158713521149064, 0.16395269794743872, 0.3818832569227888, 0.33881990064576173, 0.41631259274247834, 0.1754418427040999, 0.17037934404291755, 0.17558013917627646, 0.16008170612273387, 0.34956270528094757, 0.15513693869372513, 0.17655933746736407, 0.27261534310780566, 0.17455934770804993, 0.14955691578794306, 0.16049701665904792, 0.166050806575206, 0.5437561825259243, 0.6237589988680871, 0.6148669514919795, 0.7440449318805944, 0.6151087736990541, 0.6508637124977956, 0.718865809953281, 0.5572404310848358, 0.5470454552377886, 0.1357358709017179, 0.20312162667062938, 0.2251821385142041, 0.07036109092241771, 0.1597867568361322, 0.23192017391236985, 0.1864501793383877, 0.14005788874008118, 0.1975148446622237, 0.1681388778838645, 0.11220167648207158, 0.1277707715294628, 0.2025648310149719, 0.25225809367791485, 0.19068887016875902, 0.13639868310017378, 0.16776261019807803, 0.23165154009075206, 0.2272471914183003, 0.12163829810470017, 0.13882937019872355, 0.17258273045310102, 0.18096361484773038, 0.1276118824526178, 0.1352395870550661, 0.15137179404589662, 0.13581399908849512, 0.21211791303962013, 0.1224468511165383, 0.11956553515121526, 0.16382608611266003, 0.000465459832396653, 0.1501763008864354, 0.12056674984205495, 0.22664532503366863, 0.10660918575798828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027236911246465434, 0.035491049195357505, 0.11697634975970106, 0.024742218957709672, 0.06657167924523033, 0.06427657924636931, 9.999999999998899e-05, 0.11900838131102298, 0.17686665846864214, 0.06662210107650623, 0.0392181267656897, 0.04829762793154968, 0.040167491211913875, 0.1107244030456348, 0.06080389660695251, 0.1908900050917013, 0.0662093792009244, 0.09092388215704628, 0.17626072552304828, 0.052727404975678294, 0.18549569650991438, 0.04273484722683274, 0.10154036359111374, 0.09712422303634682, 0.022792664660231665, 0.06749094383364063, 0.19604140063993547, 0.18071844037802054, 0.0807617808652753, 0.4650303649410562, 0.40970759994896255, 0.36425314602338077, 0.4482797037646409, 0.4001690535568697, 0.3971746024342554, 0.42202358042716315, 0.41424913273783404, 0.4274427381197804, 0.13543211814900646, 0.13523060962278555, 0.08205013336610845, 0.06404487424426097, 0.06473418525599373, 0.06267419779680128, 0.07209115048740156, 0.07315725539185602, 0.08193620453729122, 0.1458241875541315, 0.18130552213243611, 0.1531480539226916, 0.18893698870372932, 0.16694426586301703, 0.17011581537518217, 0.17619287576271148, 0.2405383762780421, 0.13150345529001572, 0.21173506779805906, 0.2192755255204809, 0.200594931370348, 0.16093065681721797, 0.20172467553276008, 0.29287892088052947, 0.19381709494526878, 0.25409029886679113, 0.24543011521967706, 0.1587403604692479, 0.16925834859329547, 0.13164690839764193, 0.12739319237007163, 0.17154339677646802, 0.23218346761953668, 0.19459466294338446, 0.19074324582233848, 0.18443474288491024, 0.20524571259205626, 0.22675675499710235, 0.16917079171995486, 0.20838941734688854, 0.1574220058924326, 0.17189939022080247, 0.21852515367633085, 0.18989116106254156, 0.2560235266319355, 0.20540033111332945, 0.2398466689615516, 0.1978814808683581, 0.19371282851209548, 0.20400582305224602, 0.185218751295659, 0.2198816589706375, 0.4812469736901406, 0.1981812017569824, 0.5213874232992011, 0.12603579665049547, 0.18400171637705576, 0.6691074705450977, 0.17023008621111801, 0.11064565234405999, 0.1582016704808844, 0.16562057978575795, 0.20704581193382776, 0.41419100911103446, 0.15447359636343094, 0.16345066181125167, 0.2904260454214793, 0.12637406283971742, 0.2078154618307041, 0.22298487968186687, 0.2721999768234322, 0.13957045520168176, 0.24755988901521653, 0.1936525118437178, 0.2609806761149658, 0.24084792442758318, 0.24052018629389527, 0.2173990414035888, 0.26718760322997726, 0.22637162761530283, 0.25845739625039543, 0.07893757819258551, 0.09149499634359892, 0.07882288181224484, 0.07597957414869871, 0.07381495843414065, 0.09641822474959316, 0.07793100509015927, 0.05880545399705983, 0.07162236101535979]}, "mutation_prompt": null}
{"id": "ab59c9b2-ebf3-4438-9b96-b18e83fc4df7", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "8f614e77-de85-40dd-adb9-a27c2101cf06", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "3c169efc-bf61-46a2-868e-166f6bfb69a0", "solution": "import numpy as np\n\nclass AMDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 40\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.7  # Mutation factor\n        self.CR = 0.6  # Crossover probability\n        self.local_search_prob = 0.3  # Probability of applying local search\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def local_search(self, solution):\n        perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n        return np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        return xi + self.F * (x1 - x2 + x3 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                # Apply local search with a probability\n                if np.random.rand() < self.local_search_prob:\n                    trial = self.local_search(trial)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "AMDE", "description": "Adaptive Memetic Differential Evolution (AMDE) integrates differential evolution with adaptive local search tactics for intensified fine-tuning and balanced global exploration.", "configspace": "", "generation": 71, "fitness": 0.16397119126366125, "feedback": "The algorithm AMDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.38478773936329025, 0.3846313825636565, 0.40430120142244763, 0.3930205707069555, 0.41202213396209253, 0.39272867929113786, 0.38178807867271514, 0.37953335163989754, 0.42207341107480256, 0.08541911072608832, 0.12277825441896417, 0.09968549698572438, 0.08381346936857204, 0.08632269728272768, 0.11697927417850496, 0.0957595177517504, 0.09774490912678724, 0.09813246454504465, 0.0932441541747121, 0.0842934830646549, 0.08737126217863855, 0.09656660139571382, 0.10333911684695363, 0.0920763600894241, 0.0888313215867016, 0.09363118913866564, 0.0970428329148253, 0.07153167537616423, 0.07801145092496031, 0.08306290474375344, 0.07694960240339155, 0.08258410262858484, 0.07568835500549065, 0.06850448245258267, 0.07675984133173008, 0.07976459195683727, 0.9574216757559593, 0.9686122557523243, 0.9289943059102063, 0.9363263914537113, 0.956406655348888, 0.9379308307984491, 0.9136062611733784, 0.9715961022445321, 0.9339233705745399, 0.1456791767719926, 0.15602163424335924, 0.11736540391774852, 0.13738739015340673, 0.11438634516452106, 0.13241238903915253, 0.133339719998936, 0.1351951996980837, 0.13608545885575063, 0.18733211432583863, 0.13454013877840099, 0.15584619450234383, 0.1969148473597716, 0.1682956561081972, 0.16883091470068523, 0.19529102038919022, 0.18578638916480106, 0.18569016435267982, 0.06844937306750398, 0.09621610351896959, 0.07174739562097399, 0.061846787500353995, 0.05853221854990298, 0.09929228698091652, 0.08383087572244863, 0.08786730700969436, 0.08354420244942795, 0.07793341353226257, 0.09224552969643207, 0.0721958789400372, 0.0716908958426351, 0.0659983271063207, 0.06010706391631193, 0.05928402371245467, 0.047447534319442486, 0.05307979671685936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09040286249775564, 0.04608530777980291, 0.03879284116144843, 0.05883408693310088, 0.05342950634340082, 0.059567996138294665, 0.05952327475431762, 0.06942917486723144, 0.05860802209486393, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04267431299442037, 0.03331790651171107, 0.04125007039810913, 0.03962214554427135, 0.046983439436895647, 0.05010456780331929, 0.03702294395012562, 0.0361941508083089, 0.043606768207821944, 0.30045014739085796, 0.3189636685508751, 0.32545668098301794, 0.32492125402274985, 0.32190328815555835, 0.331501149687908, 0.31429628774085605, 0.3232962272108695, 0.31815473436830144, 0.06840318659505429, 0.06880367391146192, 0.0659041446662153, 0.07187391385831621, 0.0733268161987124, 0.06650141085108952, 0.06395943364982792, 0.06211459624757243, 0.055400414893289396, 0.16728243740431148, 0.15049411992791462, 0.1717341421886751, 0.1339531157465763, 0.1450377993865688, 0.16300637250776218, 0.14223096860718065, 0.1399782217926413, 0.16399249376619807, 0.18249734262247908, 0.172725201669383, 0.19087287346244552, 0.21496160289488875, 0.18146319408380285, 0.1827821095395702, 0.20741628316975125, 0.20046256186860423, 0.20155202235492164, 0.1199432534436351, 0.112509504875827, 0.12341649021453538, 0.12562644272041557, 0.1307400089268549, 0.14895892237294428, 0.12616129891972938, 0.14074465503481315, 0.12118634804919404, 0.155449369205915, 0.16136891734811543, 0.16377685719662005, 0.15515801429432863, 0.1672401130017015, 0.1625023225350567, 0.18288722933519252, 0.16295824854052776, 0.15670004557110329, 0.16287724479906052, 0.1745658284153776, 0.1668869141268169, 0.17414042011935016, 0.16534018505749082, 0.1824315822606971, 0.1686476234803458, 0.16961271556304525, 0.16537199448107986, 0.16571600620339855, 0.16440722702439103, 0.1485029611980524, 0.16305095455570828, 0.16050925020671625, 0.15046464354337363, 0.15147448385849782, 0.1613934577041346, 0.1848630369116484, 0.15937902649917302, 0.2312220805344145, 0.15329088029827687, 0.1655085669089862, 0.13943417117470258, 0.12571119477422854, 0.191122839704982, 0.19311687967339342, 0.18657239011327187, 0.18761162733857906, 0.194600815960412, 0.1870075502780394, 0.19618154904424023, 0.1808030831185926, 0.16998072065684067, 0.18623238628633343, 0.17745284294271968, 0.18891658073537054, 0.05308288033102049, 0.04905167585999315, 0.05746631506552946, 0.079982888473899, 0.06502182708997661, 0.05895667525235626, 0.054808850099137496, 0.06444494464485984, 0.05500613675966126]}, "mutation_prompt": null}
{"id": "905071ed-b6a5-431d-91f9-a01158c09f7e", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "d81e29fe-776e-442c-b164-cd68a8b5d733", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5 # Cognitive coefficient\n        self.c2 = 1.5 # Social coefficient\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_velocities_and_positions(self):\n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(), np.random.rand()\n            cognitive_component = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n            social_component = self.c2 * r2 * (self.global_best_position - self.population[i])\n            self.velocities[i] = self.w * self.velocities[i] + cognitive_component + social_component\n            self.population[i] = self.population[i] + self.velocities[i]\n            self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n    def quantum_update(self):\n        beta = np.random.uniform(0, 1, self.dim)\n        mbest = np.mean(self.population, axis=0)\n        for i in range(self.pop_size):\n            u = np.random.uniform(0, 1, self.dim)\n            if np.random.rand() > 0.5:\n                self.population[i] = mbest + beta * np.abs(self.global_best_position - self.population[i]) * np.log(1 / u)\n            else:\n                self.population[i] = mbest - beta * np.abs(self.global_best_position - self.population[i]) * np.log(1 / u)\n            self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.personal_best_fitness[i] = fitness\n            self.personal_best_positions[i] = self.population[i]\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            self.update_velocities_and_positions()\n            self.quantum_update()\n\n            for i in range(self.pop_size):\n                fitness = self.evaluate(func, self.population[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_positions[i] = self.population[i]\n                if fitness < self.global_best_fitness:\n                    self.global_best_fitness = fitness\n                    self.global_best_position = self.population[i]\n\n        return self.global_best_position", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) using quantum superposition and entanglement principles for enhanced global search capabilities.", "configspace": "", "generation": 73, "fitness": 0.28270628665388325, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.8245033607722478, 0.8414809044486427, 0.8443722841999683, 0.8732795278165466, 0.4596365663676455, 0.8538514274392972, 0.8580388677521467, 0.8303808063202863, 0.8611919551126198, 0.598282359078972, 0.6343976794600448, 0.5994834965773363, 0.6175305198884558, 0.5971080123659465, 0.602555644763326, 0.7119778482144237, 0.6712905235506768, 0.68141710036502, 0.14621555072084025, 0.16318674667653865, 0.13650988205134995, 0.5327226104026885, 0.13991204283713066, 0.1516114626308519, 0.15693313042585, 0.16320254293820557, 0.14991935227510766, 0.10183463230339218, 0.106460529602737, 0.1109468448236155, 0.10662570387747783, 0.11301770613593487, 0.10838616717818317, 0.11072431677839045, 0.10475843620536673, 0.12600850368500394, 0.9821824859882954, 0.9740503299609268, 0.9770344277909784, 0.9661806610345582, 0.9813848744102638, 0.9578601855005531, 0.9762320929025649, 0.9821347335565473, 0.9727876779602006, 0.3470547619673484, 0.41462250393148614, 0.25263183044325666, 0.2842862987986867, 0.18781129624459447, 0.2623331110200584, 0.3325226609242955, 0.2909774253242018, 0.33987366109488826, 0.36710903443420073, 0.15727473066842812, 0.236651476486073, 0.2155407677723804, 0.23577564480359203, 0.21730012671502097, 0.1788155100804124, 0.17062139643425367, 0.2262098777270095, 0.20042093326991683, 0.1854273701913397, 0.11517221818426437, 0.09005423259728651, 0.3885982704570623, 0.09646452784422732, 0.16579296483624095, 0.12802799522680486, 0.1938611847113002, 0.19715259960964127, 0.11363038701396921, 0.3151660678328311, 0.13267370009017143, 0.14638685079370772, 0.16170581365270587, 0.23490961279611744, 0.17891782566600756, 0.17896156342788694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006477787233127863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.074836842868229, 0.11176799917208113, 0.05229014916628838, 0.126518617639786, 0.06495035095145851, 9.999999999998899e-05, 0.029569804091845064, 0.17952214355095852, 0.08238545816759657, 0.044745475794739975, 0.10953034058538491, 0.047433210308097884, 0.27666331869168237, 0.12769064685708909, 0.22224632913720865, 0.19320829866826406, 0.23652169726089722, 0.14444105055384404, 0.07001392404220808, 0.13735575326776284, 0.11962626126798115, 0.14299120157586354, 0.15648139024875707, 0.01918529098858235, 0.12879064873709412, 0.18513841078205429, 0.2768517737226154, 0.12103499522083216, 0.4855976232187843, 0.5271650311172023, 0.555840805803926, 0.543566010776616, 0.554291838832961, 0.41700597970928466, 0.5003164200641634, 0.49430957303822876, 0.516993474705097, 0.0854295509327454, 0.07239123893141186, 0.08921602776836535, 0.1304315274566703, 0.06755776663605051, 0.12094086947388782, 0.06792680289398922, 0.10942669010060568, 0.09015576945931936, 0.33212209285142, 0.21202652638394315, 0.2637631576075744, 0.16705777428233415, 0.18653964543075163, 0.33633045781344073, 0.3939760678238242, 0.14651697934700691, 0.16298230228473531, 0.22760057173463022, 0.2863800312710386, 0.37300624084186207, 0.26913558793913317, 0.24704297813338993, 0.281546841747792, 0.44919768714883657, 0.38507272122881286, 0.2719395307647172, 0.25299391059207355, 0.1641152183272805, 0.26159071364251585, 0.2330416685947242, 0.25109647592417816, 0.3158730601693843, 0.18427172669869274, 0.20118095646718626, 0.263711237695219, 0.22215860540208954, 0.16523388586722743, 0.1869269769637627, 0.20046283969965384, 0.18704767995267157, 0.18575884723539127, 0.2223208261812425, 0.21829474857193132, 0.20754666838815605, 0.19826323491429676, 0.19673786489550182, 0.1910859823166018, 0.2406849490646339, 0.2369213855903085, 0.2044345545957248, 0.19370212781974339, 0.1793144735971175, 0.21791825976604506, 0.8340916274624265, 0.12652042088772375, 0.15456283276447902, 0.9297131472722089, 0.20004770369437896, 0.20117622017588632, 0.09985867013653549, 0.17027360373391054, 0.9247987038192415, 0.519536625616283, 0.15724649951347458, 0.11140666032598512, 0.6136140015796913, 0.5965446426568667, 0.20414339752684096, 0.10480974159682899, 0.10472976254880673, 0.5143979097617164, 0.1742773908392108, 0.18361934686763526, 0.18117406688286075, 0.17203115560906912, 0.16825398627749966, 0.18990451947160725, 0.18698615487633485, 0.18419692255579234, 0.19413988998129172, 0.09061158493443144, 0.08525576131407764, 0.0904275111246865, 0.08845335749971528, 0.09079311252908862, 0.0820067404184972, 0.08559613185265769, 0.07614495804585752, 0.08031616182611778]}, "mutation_prompt": null}
{"id": "148298f6-4774-4a6d-9731-8d1713d21575", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_personal_positions = np.copy(self.population)\n        self.best_personal_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.c1 = 2.0  # cognitive parameter\n        self.c2 = 2.0  # social parameter\n        self.w = 0.5   # inertia weight\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_inertia(self):\n        return 0.5 + np.random.rand() * 0.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_personal_fitness[i]:\n                self.best_personal_fitness[i] = self.fitness[i]\n                self.best_personal_positions[i] = self.population[i]\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Update velocity\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                     self.c1 * r1 * (self.best_personal_positions[i] - self.population[i]) +\n                                     self.c2 * r2 * (self.best_global_position - self.population[i]))\n                \n                # Update position\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                current_fitness = self.evaluate(func, self.population[i])\n                if current_fitness < self.best_personal_fitness[i]:\n                    self.best_personal_fitness[i] = current_fitness\n                    self.best_personal_positions[i] = self.population[i]\n                if current_fitness < self.best_global_fitness:\n                    self.best_global_fitness = current_fitness\n                    self.best_global_position = self.population[i]\n\n            # Adapt inertia weight\n            self.w = self.adaptive_inertia()\n\n        return self.best_global_position", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) integrating quantum principles with adaptive learning rates for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 74, "fitness": 0.18393620088202345, "feedback": "The algorithm AQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.3545469361069774, 0.43439545672530244, 0.3678335051840218, 0.18262112371783656, 0.18213680698084123, 0.3910565374308186, 0.49862801661260836, 0.18493956917666554, 0.4639895697908748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033383829027239464, 0.02676692554970672, 0.03587555471490467, 0.03407602680085109, 0.02273874625726402, 0.04473071290338282, 0.09927052584329632, 0.08293705732042378, 0.05812265933960459, 0.10186983552800866, 0.09966710565067605, 0.09572791795966129, 0.07302819202236421, 0.10941047150718819, 0.1474524511854879, 0.06960412334362698, 0.0800461282997692, 0.09853747037013527, 0.10764740827756891, 0.09028765541995654, 0.08743846608606709, 0.07391600488417394, 0.10617962502523237, 0.08162120064465217, 0.9927324029210826, 0.9940951599083786, 0.9933034488112413, 0.991257018317587, 0.9932852053191692, 0.9929863920637564, 0.9913825077070006, 0.9915480022071153, 0.9926980156074081, 0.055102412461859096, 0.15035257600804086, 0.16368737167191016, 0.14310327482370466, 0.15294993772943832, 0.1414018514193256, 0.08264049946736718, 0.16509516390697832, 0.0893748748933042, 0.23016786257541388, 0.18962489145081696, 0.19273175570717238, 0.1950462957279573, 0.3052999795379211, 0.287215312600101, 0.2662133858038782, 0.1739428045361303, 0.21926410023121157, 0.10757892051401885, 0.09436464267964295, 0.14093644512415793, 0.10451529558414863, 0.07763050813908301, 0.14366574682995958, 0.12509718701064232, 0.10849116380338242, 0.15282694219731552, 0.11644361813242665, 0.015975090070270537, 0.048414408527909125, 0.17912139035979346, 0.12108359258544621, 0.10158927235905046, 0.11847533356227069, 0.027776823504899628, 0.03083970966776528, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06032791651071712, 0.05330375101534335, 0.05519025872058447, 0.07794725227966648, 0.006234478311556435, 0.018649402974319274, 0.05268283665818485, 0.04215954999228655, 0.028386210361469044, 9.999999999998899e-05, 0.004390805287096233, 0.06392078289245551, 0.005508479618781537, 0.032554752457056746, 0.030303134488406824, 9.999999999998899e-05, 0.005771009775690117, 0.01692092350322094, 0.049772762573500606, 0.03639162603141599, 0.08670184678484638, 0.07280148918105622, 0.0038383819440376277, 0.0035836986566050166, 0.04625201086607322, 0.07504736821781977, 0.05733694539025802, 0.33803416205059067, 0.3664321636252237, 0.35779476679158284, 0.33530954153720993, 0.4179005627149227, 0.37176621435015955, 0.38748837305348416, 0.3612364390624453, 0.324821603692807, 0.07927687660986449, 0.058821772608331435, 0.07960291852560764, 0.08976075698409658, 0.08025474996507675, 0.07198019008064982, 0.07071821364962927, 0.09153837210828186, 0.07940881249605714, 0.21975886232702457, 0.2089347966625974, 0.17677076889579624, 0.25264308140853187, 0.24216073543193972, 0.15448235147957168, 0.19845323428594352, 0.1390531233504847, 0.21446191387443891, 0.24866770402891802, 0.2030007763439644, 0.23303242557191084, 0.23541382723607096, 0.26976169198458666, 0.20183629200182307, 0.19632536843418835, 0.27244320747374107, 0.2532034271862703, 0.2225066453646346, 0.1800002901190022, 0.1555826102125002, 0.17739115292459284, 0.1660747581383093, 0.19273900632186658, 0.19500883760055432, 0.2506756019357983, 0.15154087966427365, 0.19562632436926874, 0.1459561986704011, 0.17617339213020877, 0.18220684587287195, 0.1939100115400122, 0.2021819380421206, 0.2134632647396435, 0.1845132334243651, 0.16542187490944893, 0.17360484271749244, 0.16516968085629413, 0.18101501007861365, 0.18265353645191673, 0.207842655614898, 0.1920309284324926, 0.20801620009919264, 0.1757592381589529, 0.1432283008265527, 0.6409657733049912, 0.16451974772233735, 0.15258992601156018, 0.5214074182579052, 0.19042274268436477, 0.3625741879697417, 0.11890714604747354, 0.16898863181678758, 0.208652567875255, 0.3046996471568515, 0.15515483775847883, 0.19875087133215186, 0.3436938552430805, 0.2011026823002401, 0.20782769972643722, 0.30478230784067395, 0.19338400350306717, 0.19819519109804573, 0.1822459957394903, 0.18402529010592028, 0.18534704024933557, 0.21116486713616045, 0.18342498256177475, 0.18005406742713126, 0.19897804136804187, 0.1855509420919702, 0.20117951420269753, 0.0943387268650202, 0.06667334810721515, 0.07479378595236807, 0.06787258359241854, 0.07842298844654327, 0.07103747225610346, 0.06991452870228876, 0.07218720063032047, 0.0643555560856317]}, "mutation_prompt": null}
{"id": "1cd19d81-94e0-45a0-93c5-8e1801fa0cee", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "5854b9bd-0857-4bff-a103-ec3366bf1e4d", "solution": "import numpy as np\n\nclass QIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.alpha = np.pi / 4  # Quantum rotation angle\n        \n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n    \n    def quantum_rotation(self, q, b):\n        new_q = q.copy()\n        for i in range(self.dim):\n            theta = np.arctan2(new_q[i, 1], new_q[i, 0])\n            delta_theta = self.alpha if q[i, 0] * b[i] < 0 else -self.alpha\n            new_theta = theta + delta_theta\n            new_q[i, 0] = np.cos(new_theta)\n            new_q[i, 1] = np.sin(new_theta)\n        return new_q\n    \n    def collapse_to_solution(self, q):\n        return np.sign(q[:, 0]) * self.upper_bound * (np.abs(q[:, 0]) / np.sqrt(q[:, 0] ** 2 + q[:, 1] ** 2))\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Quantum population representation: each position is a pair (cos(theta), sin(theta))\n        quantum_population = np.random.uniform(-1, 1, (self.pop_size, self.dim, 2))\n        quantum_population = quantum_population / np.linalg.norm(quantum_population, axis=-1, keepdims=True)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            solution = self.collapse_to_solution(quantum_population[i])\n            self.fitness[i] = self.evaluate(func, solution)\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = solution\n        \n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                solution = self.collapse_to_solution(quantum_population[i])\n                trial_fitness = self.evaluate(func, solution)\n                \n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = solution\n                        \n                # Quantum rotation\n                quantum_population[i] = self.quantum_rotation(quantum_population[i], self.best_global_position)\n        \n        return self.best_global_position", "name": "QIEA", "description": "Quantum-Inspired Evolutionary Algorithm (QIEA) using quantum superposition principles for diverse exploration and probabilistic decision-making.", "configspace": "", "generation": 76, "fitness": 0.0647914496322324, "feedback": "The algorithm QIEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.156183447099687, 0.156183447099687, 0.156183447099687, 0.10003206118735364, 0.10003206118735364, 0.10003206118735364, 0.11373806305342948, 0.11373806305342948, 0.11373806305342948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01947828393028883, 0.01947828393028883, 0.01947828393028883, 0.040271573724685705, 0.040271573724685705, 0.040271573724685705, 0.02943393529692806, 0.02943393529692806, 0.02943393529692806, 0.013613823824697668, 0.013613823824697668, 0.013613823824697668, 0.02971049714713281, 0.02971049714713281, 0.02971049714713281, 0.011938949212460637, 0.011938949212460637, 0.011938949212460637, 0.05669421109340478, 0.05669421109340478, 0.05669421109340478, 0.0766088539563976, 0.0766088539563976, 0.0766088539563976, 0.06917326755624631, 0.06917326755624631, 0.06917326755624631, 0.03838438150755297, 0.03838438150755297, 0.03838438150755297, 0.030284964804696224, 0.030284964804696224, 0.030284964804696224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14739258846046632, 0.14739258846046632, 0.14739258846046632, 0.04558521777884195, 0.04558521777884195, 0.04558521777884195, 0.04334404209202403, 0.04334404209202403, 0.04334404209202403, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024393934178549515, 0.024393934178549515, 0.024393934178549515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13568976930367516, 0.13568976930367516, 0.13568976930367516, 0.12542823796747615, 0.12542823796747615, 0.12542823796747615, 0.14613626398724777, 0.14613626398724777, 0.14613626398724777, 0.025280097503157184, 0.025280097503157184, 0.025280097503157184, 0.041593126748263765, 0.041593126748263765, 0.041593126748263765, 0.01020767990653404, 0.01020767990653404, 0.01020767990653404, 0.0957164103233048, 0.0957164103233048, 0.0957164103233048, 0.12812127847886345, 0.12812127847886345, 0.12812127847886345, 0.09647547677391466, 0.09647547677391466, 0.09647547677391466, 0.14934245955304992, 0.14934245955304992, 0.14934245955304992, 0.16789978005264272, 0.16789978005264272, 0.16789978005264272, 0.15318687653688157, 0.15318687653688157, 0.15318687653688157, 0.0860131130496764, 0.0860131130496764, 0.0860131130496764, 0.10203652206103375, 0.10203652206103375, 0.10203652206103375, 0.12312449379119084, 0.12312449379119084, 0.12312449379119084, 0.12765655621351057, 0.12765655621351057, 0.12765655621351057, 0.14004575833595678, 0.14004575833595678, 0.14004575833595678, 0.144334874459648, 0.144334874459648, 0.144334874459648, 0.15032121099298767, 0.15032121099298767, 0.15032121099298767, 0.1438904343291404, 0.1438904343291404, 0.1438904343291404, 0.12908843129392533, 0.12908843129392533, 0.12908843129392533, 0.09362375467398765, 0.09362375467398765, 0.09362375467398765, 0.1455100425370851, 0.1455100425370851, 0.1455100425370851, 0.12399093191805022, 0.12399093191805022, 0.12399093191805022, 0.10511160853639034, 0.10511160853639034, 0.10511160853639034, 0.08211840489847122, 0.08211840489847122, 0.08211840489847122, 0.12303562070107688, 0.12303562070107688, 0.12303562070107688, 0.13627988799508717, 0.13627988799508717, 0.13627988799508717, 0.1500477747522354, 0.1500477747522354, 0.1500477747522354, 0.1413298624560444, 0.1413298624560444, 0.1413298624560444, 0.023637754655328025, 0.023637754655328025, 0.023637754655328025, 0.03990925087920638, 0.03990925087920638, 0.03990925087920638, 0.030438531950846892, 0.030438531950846892, 0.030438531950846892]}, "mutation_prompt": null}
{"id": "9e908f2b-3c3c-44fc-9ae9-c7d5db4074e3", "solution": "import numpy as np\n\nclass ASA_DP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.temperature = 1.0\n        self.cooling_rate = 0.99\n        self.best_global_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def perturb(self, position):\n        perturbation = np.random.normal(0, 1, self.dim)\n        return position + 0.1 * perturbation\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        current_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        current_fitness = self.evaluate(func, current_position)\n        \n        while self.evaluations < self.budget:\n            new_position = self.perturb(current_position)\n            new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n            new_fitness = self.evaluate(func, new_position)\n            \n            if new_fitness < current_fitness or np.random.rand() < np.exp(-(new_fitness - current_fitness) / self.temperature):\n                current_position = new_position\n                current_fitness = new_fitness\n                \n                if new_fitness < self.best_global_fitness:\n                    self.best_global_fitness = new_fitness\n                    self.best_global_position = new_position\n            \n            self.temperature *= self.cooling_rate\n        \n        return self.best_global_position", "name": "ASA_DP", "description": "Adaptive Simulated Annealing with Differential Perturbation (ASA-DP) combines temperature-based annealing with differential perturbations for adaptive exploration of the search space.", "configspace": "", "generation": 77, "fitness": 0.1770995069710946, "feedback": "The algorithm ASA_DP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.4852185359701382, 0.4852185359701382, 0.4852185359701382, 0.48065371426525694, 0.48065371426525694, 0.48065371426525694, 0.47047136599454875, 0.47047136599454875, 0.47047136599454875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023677929403509435, 0.0023677929403509435, 0.0023677929403509435, 0.05979227252476704, 0.05979227252476704, 0.05979227252476704, 0.025264322489722324, 0.025264322489722324, 0.025264322489722324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005845431252644584, 0.005845431252644584, 0.005845431252644584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9328526945540249, 0.9328526945540249, 0.9328526945540249, 0.8400966309416008, 0.8400966309416008, 0.8400966309416008, 0.8967320423145647, 0.8967320423145647, 0.8967320423145647, 0.35045884884655676, 0.35045884884655676, 0.35045884884655676, 0.34441611060720034, 0.34441611060720034, 0.34441611060720034, 0.366018654418963, 0.366018654418963, 0.366018654418963, 0.22592811249316436, 0.22592811249316436, 0.22592811249316436, 0.21788953809085698, 0.21788953809085698, 0.21788953809085698, 0.2302373654904235, 0.2302373654904235, 0.2302373654904235, 0.13748577553221442, 0.13748577553221442, 0.13748577553221442, 0.24635053944026297, 0.24635053944026297, 0.24635053944026297, 0.21624128560136524, 0.21624128560136524, 0.21624128560136524, 0.19588417618044152, 0.19588417618044152, 0.19588417618044152, 0.21082603873458539, 0.21082603873458539, 0.21082603873458539, 0.25943791681809536, 0.25943791681809536, 0.25943791681809536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04034722918306688, 0.04034722918306688, 0.04034722918306688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08068083610880872, 0.08068083610880872, 0.08068083610880872, 0.044074214274538503, 0.044074214274538503, 0.044074214274538503, 0.1693600436513485, 0.1693600436513485, 0.1693600436513485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05288285713566254, 0.05288285713566254, 0.05288285713566254, 0.09323716845808305, 0.09323716845808305, 0.09323716845808305, 0.11761081744701185, 0.11761081744701185, 0.11761081744701185, 0.46057190153915195, 0.46057190153915195, 0.46057190153915195, 0.4715248249083155, 0.4715248249083155, 0.4715248249083155, 0.4446946199717282, 0.4446946199717282, 0.4446946199717282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08910776342580207, 0.08910776342580207, 0.08910776342580207, 0.1389845324852227, 0.1389845324852227, 0.1389845324852227, 0.08890073415893984, 0.08890073415893984, 0.08890073415893984, 0.07668707273769537, 0.07668707273769537, 0.07668707273769537, 0.11269931472732209, 0.11269931472732209, 0.11269931472732209, 0.08197082613526996, 0.08197082613526996, 0.08197082613526996, 0.016793601023967097, 0.016793601023967097, 0.016793601023967097, 0.06580731711772592, 0.06580731711772592, 0.06580731711772592, 0.024265251917918396, 0.024265251917918396, 0.024265251917918396, 0.1180382800711528, 0.1180382800711528, 0.1180382800711528, 0.15102601903973845, 0.15102601903973845, 0.15102601903973845, 0.14521123256822288, 0.14521123256822288, 0.14521123256822288, 0.22527413658440487, 0.22527413658440487, 0.22527413658440487, 0.18940036438254804, 0.18940036438254804, 0.18940036438254804, 0.21017883845649799, 0.21017883845649799, 0.21017883845649799, 0.0956528103308446, 0.0956528103308446, 0.0956528103308446, 0.16657657094178702, 0.16657657094178702, 0.16657657094178702, 0.1377546707896099, 0.1377546707896099, 0.1377546707896099, 0.6657160384604979, 0.6657160384604979, 0.6657160384604979, 0.08348297121730697, 0.08348297121730697, 0.08348297121730697, 0.112849765847709, 0.112849765847709, 0.112849765847709, 0.18855454242084435, 0.18855454242084435, 0.18855454242084435, 0.18944869128879405, 0.18944869128879405, 0.18944869128879405, 0.1822465370300983, 0.1822465370300983, 0.1822465370300983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012603958252190073, 0.012603958252190073, 0.012603958252190073, 0.0050789823272402446, 0.0050789823272402446, 0.0050789823272402446]}, "mutation_prompt": null}
{"id": "a1831fc0-cf13-4261-aff1-9a248b7df366", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_particle_positions = np.copy(self.population)\n        self.best_particle_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.alpha = 0.75  # Constriction factor\n        self.beta = 1.0   # Quantum behavior influence\n        self.phi = np.zeros((self.pop_size, self.dim))  # Local attractor\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_particle(self, idx):\n        r1, r2 = np.random.rand(2)\n        self.phi[idx] = self.alpha * self.best_particle_positions[idx] + (1 - self.alpha) * self.best_global_position\n        for d in range(self.dim):\n            self.population[idx, d] = self.phi[idx, d] + self.beta * (r1 - 0.5) * np.abs(self.phi[idx, d] - self.population[idx, d])\n        self.population[idx] = np.clip(self.population[idx], self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            self.best_particle_fitness[i] = self.fitness[i]\n            self.best_particle_positions[i] = np.copy(self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = np.copy(self.population[i])\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                self.update_particle(i)\n                fitness = self.evaluate(func, self.population[i])\n                if fitness < self.best_particle_fitness[i]:\n                    self.best_particle_fitness[i] = fitness\n                    self.best_particle_positions[i] = np.copy(self.population[i])\n                if fitness < self.best_global_fitness:\n                    self.best_global_fitness = fitness\n                    self.best_global_position = np.copy(self.population[i])\n\n        return self.best_global_position", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) which integrates quantum superposition principles for enhanced exploration and convergence.", "configspace": "", "generation": 78, "fitness": 0.09650419170486503, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.31078426721604746, 0.31279899458561955, 0.26018582365713616, 0.11602860211741406, 0.08826260889314985, 0.1800892478831303, 0.1337016550840111, 0.18056921330070674, 0.1131949319673875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11135517499885739, 0.04280016434917144, 0.04595579663459448, 0.05495236390301306, 0.047800946846097814, 0.06530526981998808, 0.07316674036454918, 0.05315965314248583, 0.08786903579926986, 0.046791320878344256, 0.06575313325117238, 0.030002629736862185, 0.06248932283948072, 0.043865278780893635, 0.03974372570876039, 0.06165996186194056, 0.03835090715438927, 0.024133007578527432, 0.045179741609489454, 0.042226965641212755, 0.04363242269383283, 0.05336912545804939, 0.04687545855643349, 0.037468073028370075, 0.06389216452762592, 0.048986754550083944, 0.039257868334183654, 0.05795664522521038, 0.08905497503439763, 0.04625525711796419, 0.07566553254688546, 0.062038535470803846, 0.06346816602592209, 0.2216082508938163, 0.062157164673421694, 9.999999999998899e-05, 0.17301041735038813, 0.11382887925303053, 0.14082649541805603, 0.169129752758563, 0.15965573023219037, 0.045728157249682266, 0.08369487647193652, 0.13851032562296972, 0.115868566766402, 0.21244045298362024, 0.08383335973739736, 9.999999999998899e-05, 9.999999999998899e-05, 0.017589476112286673, 9.999999999998899e-05, 0.13291036392831246, 9.999999999998899e-05, 9.999999999998899e-05, 0.11676680487665614, 0.08237022847428621, 0.03540750433662565, 0.08628347806864545, 0.12053433729249496, 0.16463742301118345, 0.08848685053613148, 0.0957459127675967, 0.005457304079407699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17758314066132408, 0.03347128341737593, 0.07884829226895673, 0.048994889435416966, 0.017264275626726833, 0.01708061108526071, 0.11956315954949992, 0.05368971716878568, 0.14217163660115129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3528459511995967, 0.2742072276175862, 0.21264340104763768, 0.16774086019067658, 0.13705148296066205, 0.14346535111892822, 0.3312342568607467, 0.2212760767472901, 0.23543597733073351, 0.024731171765305926, 0.013714973596824387, 9.999999999998899e-05, 0.05324461808709546, 0.05311108938960318, 0.05274799250749529, 0.10799655733324909, 0.03793562907975068, 0.032243975052199, 0.09087106445023396, 0.103650995621836, 0.10311586448668764, 0.09855305120349966, 0.10852972522114013, 0.09081084052078148, 0.11093709368613669, 0.07172519941664346, 0.0891682569194745, 0.1347191728010788, 0.20659552071828646, 0.1842918604054754, 0.15467272440750346, 0.2863625702247866, 0.24271890445164135, 0.15955084418477894, 0.21308768187484983, 0.1456096544660319, 0.09853532607232807, 0.15059175902241584, 0.09721474051026058, 0.15641972472026666, 0.1656330162216142, 0.15435170205200155, 0.11496792859475713, 0.14561285057314344, 0.08524065389825208, 0.1954480280652413, 0.18329749084033609, 0.18948900223264886, 0.17191648541316806, 0.16835179012597512, 0.1797155072331219, 0.19169041765752914, 0.15265311435541895, 0.19001570342199825, 0.15692566580427791, 0.16206037438338172, 0.17536467556612534, 0.1733658243742362, 0.1745206541008092, 0.16307934478108743, 0.1762354402540448, 0.1760253095823644, 0.1707665850898631, 0.09521553871831034, 0.18457794003867434, 0.09627063463579966, 0.3747326664041821, 0.1677949821458622, 0.13604571963203593, 0.07254023905230644, 0.10825589627525078, 0.17480308134130518, 0.22649710205678475, 0.12266307878147231, 0.16640581643641694, 0.10858821642292282, 0.07786245060796138, 0.06691468257653599, 0.09325083617500385, 0.2848275968931201, 0.10028775392173306, 0.1461226206981966, 0.16528263066881788, 0.15067444927864204, 0.13934016026923723, 0.20062924538233162, 0.14643718592823074, 0.15811425564426607, 0.15958796127756236, 0.14689007985489466, 0.07846224456254824, 0.04326146165378597, 0.039984449207916994, 0.0628118701380539, 0.05867373756025085, 0.07223770519138284, 0.06225575485390056, 0.05701812495776193, 0.06795392423140623]}, "mutation_prompt": null}
{"id": "140c771e-c3dc-4d88-81ec-efa1e9b797c0", "solution": "import numpy as np\n\nclass APSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def update_velocity(self, particle_idx, inertia_weight):\n        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n        cognitive_component = self.c1 * r1 * (self.personal_best_positions[particle_idx] - self.population[particle_idx])\n        social_component = self.c2 * r2 * (self.global_best_position - self.population[particle_idx])\n        self.velocities[particle_idx] = (inertia_weight * self.velocities[particle_idx] +\n                                         cognitive_component + social_component)\n        speed_limit = (self.upper_bound - self.lower_bound) * 0.1\n        self.velocities[particle_idx] = np.clip(self.velocities[particle_idx], -speed_limit, speed_limit)\n\n    def update_position(self, particle_idx):\n        self.population[particle_idx] = self.population[particle_idx] + self.velocities[particle_idx]\n        self.population[particle_idx] = np.clip(self.population[particle_idx], self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            current_fitness = self.evaluate(func, self.population[i])\n            self.personal_best_fitness[i] = current_fitness\n            if current_fitness < self.global_best_fitness:\n                self.global_best_fitness = current_fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))\n            for i in range(self.pop_size):\n                self.update_velocity(i, inertia_weight)\n                self.update_position(i)\n\n                current_fitness = self.evaluate(func, self.population[i])\n                if current_fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = current_fitness\n                    self.personal_best_positions[i] = self.population[i]\n\n                if current_fitness < self.global_best_fitness:\n                    self.global_best_fitness = current_fitness\n                    self.global_best_position = self.population[i]\n\n        return self.global_best_position", "name": "APSO", "description": "Adaptive Particle Swarm Optimization (APSO) with Dynamic Inertia Weight and Speed Limits to balance exploration and exploitation for optimization.", "configspace": "", "generation": 79, "fitness": 0.27124216694002484, "feedback": "The algorithm APSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.570025418830927, 0.6040135240026747, 0.6343335027315316, 0.5675091863745614, 0.6152444198984719, 0.5720093236643358, 0.5777056067784996, 0.6404431658975602, 0.6591998506392386, 0.2282558676012605, 0.23669944918691688, 0.31672874205981105, 0.254153437424144, 0.33197241683819556, 0.2434940909036124, 0.21060819676311104, 0.28713322112950623, 0.30206737953147533, 0.10900983280213572, 0.1834467619937028, 0.3230738841051959, 0.26126120980989276, 0.2973293008012332, 0.13102663679441107, 0.11171253809415627, 0.13597374890492175, 0.22986656458038146, 0.12807031004887848, 0.14614368999402927, 0.11927860731836759, 0.12254504280761669, 0.121056442664631, 0.12721444645559188, 0.11106994061857245, 0.12335407671445642, 0.13780837739069263, 0.9744849226112327, 0.9726942188947018, 0.9745050309022896, 0.9710792664938018, 0.9722566361896461, 0.9783963048293172, 0.9722368431741383, 0.9691539485403928, 0.9730054936486543, 0.3453867722445374, 0.34510373398727656, 0.37017276719949, 0.3330637415340133, 0.43448341336878915, 0.4098666245895636, 0.4091934176814318, 0.40490325838077534, 0.3410518059579716, 0.22391647395205405, 0.4210312426472336, 0.3757322285802065, 0.308325284526176, 0.5614442820847274, 0.20334032554771642, 0.6614919313325915, 0.5670733310425388, 0.529748353302433, 0.190750507360819, 0.18277007758899821, 0.1757140177903389, 0.12015723469113104, 0.2612704455950927, 0.15987338893291725, 0.162519046273763, 0.1590902794264446, 0.16423152794210893, 0.16968436602633796, 0.394749498773002, 0.15639823887457172, 0.16151440540197004, 0.16620755212952498, 0.16335388331643985, 0.1257078801347289, 0.18398946919452075, 0.178429270791309, 0.06400548854002697, 0.050818626085812, 0.006890910933828653, 0.01674629641049974, 9.999999999998899e-05, 0.04652662153284726, 0.04851733688403692, 0.0039430081473290635, 0.001104259655017259, 0.10630406285379612, 0.04805921040283245, 0.10496780281923823, 0.06739677032325109, 0.04773827808566078, 0.02881299114048974, 0.14761326983163203, 0.0943782748190708, 0.16139607208082762, 0.11259588616390592, 0.09605959236029793, 0.09588156071743903, 0.04906253469368371, 0.05443243285092325, 0.06230989515392393, 0.07789019776989148, 0.052349937511017575, 0.038311003792645404, 0.1305455094843977, 0.09833781098535366, 0.17744183090800236, 0.14942061835384735, 0.09977731484552932, 0.10617301700420811, 0.07154013840988827, 0.07141251837695617, 0.07210660452563589, 0.4541453048636007, 0.44297978216730516, 0.47402505234288095, 0.45446605142156005, 0.4511453003354957, 0.44392349058452985, 0.4558670901703332, 0.4173367197963955, 0.4391085899814394, 0.11800549755791201, 0.1278042605380869, 0.12293299270289004, 0.1256345690359678, 0.1155792882021538, 0.13461555278105752, 0.11423740930416137, 0.12309932006207347, 0.11680024919668008, 0.17910979782865322, 0.21876331895781265, 0.3287089993448914, 0.3056717477128018, 0.2975024706398621, 0.28869564922515856, 0.2335958064667204, 0.27281000030127767, 0.2638782092307935, 0.2752924112958258, 0.2753507400958958, 0.3272527809607605, 0.3313553205115315, 0.3127719552216971, 0.33468833661605424, 0.34136882682438574, 0.31372554216059945, 0.31848883079131485, 0.254148017074708, 0.23718543298432282, 0.2454401376379497, 0.24771939167099677, 0.23553458518209036, 0.2360438389668732, 0.22288458917396925, 0.24695685510018728, 0.2079098618085774, 0.22530788969960336, 0.22891039503861332, 0.21133423609300284, 0.220969418305779, 0.23385699025968965, 0.21860503686768695, 0.209917323371265, 0.23599190443685947, 0.24169685979748512, 0.43803294935019976, 0.3582738651961379, 0.2292924588231724, 0.19736134538384842, 0.1824680926842318, 0.20734397299961016, 0.22868340046651825, 0.22440597040447308, 0.2066645720366561, 0.1862140256399758, 0.12596780372897887, 0.1863978798803836, 0.740585324532608, 0.1987902510235815, 0.19804794756845712, 0.15225211633115887, 0.16829855349558842, 0.7535504955077285, 0.6689071629784454, 0.15634702871547923, 0.6234143790072695, 0.206648966502605, 0.640797145973014, 0.20850367159913252, 0.6458883659729061, 0.16760490157798125, 0.4892437324765019, 0.19171586480595848, 0.18290175827094013, 0.1903417815236943, 0.19891955314748078, 0.19977026618873628, 0.19357664574706468, 0.19065038009194613, 0.19403823293565348, 0.1900218448372447, 0.10529063495512914, 0.08955533698613527, 0.09308713116057465, 0.0870788911630912, 0.0916471391317677, 0.09035149133720788, 0.08927410715005513, 0.08864722976113626, 0.1089447211985185]}, "mutation_prompt": null}
{"id": "4d305be8-37e1-4e20-8d20-6aa612e330bd", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "eb93c1de-fc69-4b75-adf6-dcd8469192c6", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "ad771390-1a4c-47d0-a729-10be7cd463d8", "solution": "import numpy as np\n\nclass ALFDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def levy_flight(self, lam):\n        sigma = (np.math.gamma(1 + lam) * np.sin(np.pi * lam / 2) / \n                 (np.math.gamma((1 + lam) / 2) * lam * 2 ** ((lam - 1) / 2))) ** (1 / lam)\n        u = np.random.randn(self.dim) * sigma\n        v = np.random.randn(self.dim)\n        step = u / np.abs(v) ** (1 / lam)\n        return step\n\n    def adaptive_levy_mutation(self, xi, x1, x2, x3):\n        step = self.levy_flight(1.5)\n        return xi + self.F * (x1 - x2 + x3 - x2) + step * (self.best_global_position - xi)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_levy_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "ALFDE", "description": "Adaptive Lévy Flight Differential Evolution (ALFDE) combines Lévy flight-inspired perturbations with differential evolution to enhance exploration of the search space.", "configspace": "", "generation": 82, "fitness": 0.16397834158337496, "feedback": "The algorithm ALFDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.3862808930907007, 0.3751767675645653, 0.38365578162725644, 0.44720798366279746, 0.39241013879723563, 0.4146626217561403, 0.4205203763761588, 0.3888701430496422, 0.36385232904322196, 0.17300815884054677, 0.17305431383846515, 0.1659137120772055, 0.15341752844167023, 0.1897367468299027, 0.15143898038812043, 0.186828625535437, 0.2265128320371883, 0.17260859604608159, 0.08082645439559022, 0.0732497308508191, 0.078568388213059, 0.09164399544677448, 0.0777977608495305, 0.09154438161961842, 0.07721064450931969, 0.07525763999758095, 0.08331912638678263, 0.06352578587614865, 0.0676427523103168, 0.050375726608013593, 0.07165323991890782, 0.06119140932811373, 0.06347107239262273, 0.06752789607299348, 0.05357133938258085, 0.05785448316292818, 0.9848153079337811, 0.9757229733027393, 0.9697611541364579, 0.961872915317801, 0.9872012490442676, 0.98320541936518, 0.9746095743837814, 0.9908840922990757, 0.9864387320802579, 0.13315030230719427, 0.12056191856985365, 0.11688552593484858, 0.12475931711242794, 0.1276957827697186, 0.13202075036717364, 0.1428835266485574, 0.1478468525238903, 0.15065486046560728, 0.15041209432057645, 0.14811385983020187, 0.16511396114055954, 0.175286325418468, 0.17597171281290958, 0.17508031570983384, 0.14898409038758886, 0.15294742611514667, 0.1693907130980835, 0.05805021171254998, 0.06437051941058747, 0.07976034479192817, 0.048368962877691546, 0.040674361461404795, 0.0725368794283675, 0.06940284550248887, 0.065985176026774, 0.08904829383037927, 0.11006728389006071, 0.092724765499696, 0.05206741623763733, 0.06547607406965161, 0.054320680234566265, 0.06517601732690614, 0.025364495412423693, 0.056297186380326325, 0.02295175721853937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04837364493164498, 0.05800198475050167, 0.026736762554003368, 0.049646122284892735, 0.051592551575503465, 0.037356403186083686, 0.03863103995485673, 0.04713842482151065, 0.05180230658168694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025900879345687078, 0.03133882443262992, 0.03653754107198204, 0.030835593023755825, 0.03677432593052887, 0.03860122561402313, 0.04690901813797188, 0.05677775763377302, 0.05502106241700022, 0.30013541666609744, 0.3289495902128512, 0.3295073580532154, 0.31893772173641566, 0.3204838844792214, 0.3343430930131748, 0.30001035634047335, 0.30013565760793703, 0.29305875294054673, 0.08153889432228989, 0.07185758001124232, 0.06291228879989175, 0.05956286999302629, 0.06094922411087189, 0.06425147943064569, 0.08997746988791422, 0.056803363103668736, 0.0532292476615539, 0.1500670169572217, 0.15798543468553305, 0.15722594442318694, 0.14295150277604374, 0.1479352561762033, 0.17089686893045652, 0.1490508556154595, 0.13072396801612418, 0.14861249266861465, 0.18342982092042226, 0.18125492161721324, 0.1866588260626485, 0.1683672343684972, 0.17615654063188135, 0.17221405548070579, 0.21665371592811977, 0.21165861849144663, 0.2015811656248364, 0.1207471174396787, 0.11749579599513149, 0.1319153176311587, 0.1071983094270299, 0.11586464305386113, 0.13039434138645734, 0.13443019339412, 0.1451033633060269, 0.13178639272680936, 0.1645121498712786, 0.14941999732515032, 0.15876232666961443, 0.18763702961109197, 0.1616420649481135, 0.1515057053222073, 0.1597162953043273, 0.15252300550183995, 0.1672310294669367, 0.15339729222475884, 0.16955446070750857, 0.17415174180384818, 0.1679622261057495, 0.16663015680895588, 0.15498024926159082, 0.17230638481716454, 0.16394406542381512, 0.15946437104837097, 0.15203187947458285, 0.15072644375908095, 0.22488819413539463, 0.13786536271039718, 0.14712165346213146, 0.14516028269335535, 0.1810308966844535, 0.12895557203051633, 0.15901888979187973, 0.16681232816702396, 0.15051759810589882, 0.16095660658245847, 0.10083508418905807, 0.11166649794542227, 0.1424848880831341, 0.2368562992038179, 0.18655261295068004, 0.19978337460069373, 0.2063713526815506, 0.1813531391911365, 0.1766682146382158, 0.18988356286657904, 0.17211424453634194, 0.1785879790183288, 0.1853425368682955, 0.18399362849129386, 0.1811565497430192, 0.051247896295544715, 0.0642702802490912, 0.06033314370104126, 0.05556572422785644, 0.06561063925037602, 0.04937731781753851, 0.050504024620312116, 0.053319862219211034, 0.05393485741500259]}, "mutation_prompt": null}
{"id": "ab948732-2974-4f8e-9ec1-ae366c8ac445", "solution": "import numpy as np\n\nclass QiPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n\n        self.alpha = 0.75  # Quantum-inspired factor\n        self.beta = 0.25   # Cognitive and social factor\n        self.w = 0.5       # Inertia weight\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.personal_best_fitness[i]:\n                self.personal_best_fitness[i] = self.fitness[i]\n                self.personal_best_positions[i] = self.population[i]\n            if self.fitness[i] < self.global_best_fitness:\n                self.global_best_fitness = self.fitness[i]\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Update velocity with quantum-inspired term\n                quantum_term = self.alpha * (np.random.rand(self.dim) - 0.5) * (self.global_best_position - self.population[i])\n                cognitive_term = self.beta * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.population[i])\n                social_term = self.beta * np.random.rand(self.dim) * (self.global_best_position - self.population[i])\n                \n                self.velocities[i] = self.w * self.velocities[i] + cognitive_term + social_term + quantum_term\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                current_fitness = self.evaluate(func, self.population[i])\n                if current_fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = current_fitness\n                    self.personal_best_positions[i] = self.population[i]\n                if current_fitness < self.global_best_fitness:\n                    self.global_best_fitness = current_fitness\n                    self.global_best_position = self.population[i]\n\n        return self.global_best_position", "name": "QiPSO", "description": "Quantum-inspired Particle Swarm Optimization (QiPSO) leveraging quantum behavior principles for enhanced exploration and convergence efficiency.", "configspace": "", "generation": 83, "fitness": 0.20891163640900678, "feedback": "The algorithm QiPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9180977846792707, 0.9171811720684361, 0.6241248945179438, 0.29955370508662293, 0.763283202695513, 0.7042306800946848, 0.894106867061607, 0.9102130677937627, 0.914669779765026, 0.11595819187665768, 0.0524652074988855, 0.05550529543289506, 0.3398197920582876, 0.057350759518921435, 0.09460329229700182, 0.16839344314103988, 0.30148233904650246, 0.05116553361661136, 0.08838205423799939, 0.1602998180156896, 0.09132107718353855, 0.14730907369889812, 0.1253094999650768, 0.15795389472117916, 0.09360062812132675, 0.10797421389916506, 0.15169605001669406, 0.1112984946640414, 0.05417879883324783, 0.10208650232509153, 0.11725918283499959, 0.07737416968472843, 0.13621584184483204, 0.09919721375243695, 0.0723154377642451, 0.09579609196041361, 0.44190269179676456, 0.8183367902691283, 0.937655527857844, 0.11133768659532883, 0.16436429204264225, 0.9018129262445134, 0.16607734859499812, 0.15421422036789867, 0.13239863839036903, 0.08832792039145443, 0.08545414450320277, 0.201228209001454, 0.25893348354007717, 0.2035029740206733, 0.1569192834493227, 0.15754913204225252, 0.09416965947200895, 0.06315922486443193, 0.2439276279636864, 0.21540082732240906, 0.15723473642208952, 0.2255568157331289, 0.1944957873057479, 0.11565771293221949, 0.14138457201983168, 0.17594730251986945, 0.1761243385277239, 0.22756781058808362, 0.16870165026159378, 0.15192902166957234, 0.21433826585246085, 0.13083888195752802, 9.999999999998899e-05, 0.19546666922518352, 0.13189497256571026, 0.18476656199471075, 0.17005092999339377, 0.13427977252316692, 0.1349885706179612, 0.127154946382539, 0.21205377999941633, 0.1291782742590254, 0.6083289010586496, 0.11369348670049417, 0.13432031647643727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06276461252025545, 0.05065274377009843, 0.16878051618203227, 0.07583670068922199, 0.007635127659869845, 0.0007784390145603171, 0.1274119056413625, 0.09179629736977457, 0.03125305747969831, 0.09928692465339628, 0.10791730089182106, 0.2713653916646457, 0.1239195067930634, 0.15945727882498872, 0.1813838213990151, 0.3470225592836893, 0.28660966820544587, 0.11284923481071896, 0.15510383403544314, 0.07018024462454608, 0.25141510239790554, 0.006095601228103487, 0.036943490581208605, 0.09125695478897411, 0.09033031637414135, 0.2240296440679248, 0.08299140251029735, 0.4138206830803901, 0.47252612063388677, 0.2846742550570168, 0.43977686023728224, 0.4529463564556441, 0.4369850195597542, 0.5099745313953428, 0.43408962360440095, 0.41419215067798754, 0.07460453104127296, 0.15627700864935723, 0.07079214649156673, 0.14424860271003614, 0.0863483808229083, 0.1290780885140279, 0.1300798443207426, 0.09974605013743454, 0.07036490183677213, 0.2816819719929634, 0.1681874968393715, 0.19608675858330182, 0.154187094609602, 0.21671107575194637, 0.1812277999299794, 0.29799390595248443, 0.14306739516820288, 0.14894300170345254, 0.284111675193363, 0.3788101165005042, 0.17737904289270823, 0.27680836312345014, 0.2432586454406157, 0.2674185456018776, 0.2653839569632249, 0.2528076920366803, 0.20480122489161867, 0.2379019743310803, 0.20190290532100785, 0.2542399937604445, 0.2225609935420343, 0.2280986230699572, 0.13059401455976827, 0.18442991981626167, 0.17487067036551307, 0.13237272535713251, 0.2149942999612091, 0.19912925082476374, 0.22592802794059974, 0.21608037643890388, 0.23067800933702187, 0.22069417369162403, 0.2043198996087915, 0.19733266093775015, 0.2255569974658287, 0.18962361716775455, 0.202411192167543, 0.18111059838758614, 0.18283035390332347, 0.47401942660611884, 0.2120273966148406, 0.1805902340182467, 0.253067764833076, 0.17795957120636863, 0.18805094505476094, 0.18755558721729937, 0.18853804097606341, 0.17601355292892118, 0.19967140217242518, 0.4579111431868559, 0.11649703922182486, 0.16982602038945682, 0.689186122313248, 0.32972372507956293, 0.15015050071797453, 0.22077165233374785, 0.18157340238805042, 0.16767326124467052, 0.36536526624392895, 0.28452957610433127, 0.10462720576943751, 0.16376390266614493, 0.19938032411331819, 0.20200009150379095, 0.1962963576937543, 0.20184416919225345, 0.2005335270717422, 0.1896395121658958, 0.2222515243839973, 0.2271541175966516, 0.221472012961497, 0.07615909521371578, 0.10401226676810493, 0.10480996618669469, 0.07786885959557077, 0.08777019906333061, 0.09706554982352789, 0.048733954342103036, 0.09041206005913849, 0.0808975254134795]}, "mutation_prompt": null}
{"id": "7da12740-c788-4058-9af4-3f0ed842a90f", "solution": "import numpy as np\n\nclass QIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.alpha = 0.5  # Quantum rotation angle\n        self.beta = 0.1   # Amplitude damping factor\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_interference(self, xi, x1, x2):\n        interference = np.sin(self.alpha) * (x1 - x2) + np.cos(self.alpha) * (xi - x1)\n        return xi + self.beta * interference\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2 = self.population[np.random.choice(indices, 2, replace=False)]\n                \n                mutant = self.quantum_interference(self.population[i], x1, x2)\n                trial = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "QIEA", "description": "Quantum-Inspired Evolutionary Algorithm (QIEA) utilizing quantum superposition and interference principles to enhance exploration and exploitation.", "configspace": "", "generation": 84, "fitness": 0.09761026788699631, "feedback": "The algorithm QIEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.11086225553363005, 0.08208037699263493, 0.09282704922696172, 0.12671758628473362, 0.10619372994316234, 0.14154508259006326, 0.13162951721283644, 0.11145870799611857, 0.08783614016117225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018846483016110693, 0.01722240822204879, 0.02079747874120963, 0.017815799221782225, 0.006165860147250735, 0.021006899964358672, 0.031537870296506454, 9.999999999998899e-05, 0.021115717590635685, 0.006346855620603664, 9.999999999998899e-05, 0.011885036702589447, 0.03174707285768941, 0.02482969944556135, 0.002332396825942107, 9.999999999998899e-05, 0.009421609150697452, 0.00010127999779219188, 0.921444401885785, 0.9761828440448738, 0.8744319559765087, 0.9156553012717817, 0.9491093472970621, 0.914520033985254, 0.8571844911276567, 0.6754180597805625, 0.8824736598131797, 0.06342059751075013, 9.999999999998899e-05, 0.018187828148279017, 0.06691465389779938, 0.005823042409617618, 0.03755932460446909, 0.0003305107463708046, 0.04382981713506107, 9.999999999998899e-05, 0.13275433271517545, 0.06350895715892113, 0.054982963198601964, 0.13054809829727254, 0.06387502291219482, 0.06197845845805694, 0.09144954176290798, 0.07333726258154749, 0.027444323237622137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06682456392392033, 9.999999999998899e-05, 0.025744557983494842, 0.09549534317706654, 9.999999999998899e-05, 9.999999999998899e-05, 0.017968853080082225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06523686014059027, 0.030445959469058814, 0.05528893481399155, 0.05957904363029398, 0.04412894809211121, 0.024711577918599903, 0.11285318800074895, 0.02492876639315722, 0.018037866824420545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042390667107500835, 0.11158558759704884, 0.15100677559040943, 0.17482752353377962, 0.1343596785415615, 0.12370661452447296, 0.15125847775123347, 0.16410243611264852, 0.0989272937582627, 0.137159689857402, 0.028180697741220007, 0.0261362940374118, 0.009723020536152593, 0.031633791896005126, 0.002040673880311261, 0.031035855722926886, 0.00669866933890606, 9.999999999998899e-05, 0.058017670195346316, 0.1358535039874228, 0.12670699886804304, 0.13881092349114899, 0.17286679789601944, 0.17833515438947745, 0.15307394636727134, 0.12849182261613712, 0.14279303360659346, 0.15784109396088009, 0.12010993759314692, 0.12790584068246935, 0.14605839323168934, 0.13800672315110074, 0.12132618606690937, 0.113376872679115, 0.14072256587183563, 0.17377774300845283, 0.14976384188150427, 0.05925169280332232, 0.04705899626833365, 0.07211461197890223, 0.07410484905400316, 0.06859645220631005, 0.07178325723893775, 0.08918973014620957, 0.0997711199450243, 0.08340988670827187, 0.14973078727316114, 0.11005863182472875, 0.13345086981233123, 0.15019550661932257, 0.0963471401509094, 0.12556466649869635, 0.14008300109205396, 0.08680243379214558, 0.15947950357198315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00035856756928409617, 9.999999999998899e-05, 9.999999999998899e-05, 0.1014266145795013, 9.999999999998899e-05, 9.999999999998899e-05, 0.15196855435382894, 0.12498349785197393, 0.13199971044684167, 0.14056791681953218, 0.13316512642899803, 0.11236761363544867, 0.13356007829479755, 0.11117385534936297, 0.10061710612970565, 0.27260790351127195, 0.151906552184344, 0.09847458723626823, 0.07213173339125734, 0.10208082429079146, 0.09287589884485792, 0.26845279713843617, 0.10263897121627719, 0.10835060308188893, 0.17030179955683544, 0.1859899947852841, 0.1870606810779777, 0.194064631001844, 0.19005981910340541, 0.1835068641094133, 0.1774210498508484, 0.17544214120642299, 0.17710606524386463, 0.040500610513645174, 0.021311588540432913, 0.044853639829867786, 0.0363133033961085, 0.036927043117311764, 0.03190311667429502, 0.027491178664703853, 0.014434916309150725, 0.029682767051720682]}, "mutation_prompt": null}
{"id": "bf00ee0c-f694-4f9e-9e87-7ddfa4644afc", "solution": "import numpy as np\n\nclass QIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.alpha = 0.5  # Quantum rotation angle\n        self.prob_amplitudes = np.random.rand(self.pop_size, self.dim)\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def collapse(self):\n        collapsed_population = np.where(self.prob_amplitudes > np.random.rand(self.pop_size, self.dim), \n                                        self.upper_bound, self.lower_bound)\n        return collapsed_population\n\n    def quantum_rotation(self, idx):\n        delta_theta = self.alpha * (self.fitness[idx] - self.best_global_fitness) / np.abs(self.fitness[idx] - self.best_global_fitness + 1e-10)\n        rotation_matrix = np.array([[np.cos(delta_theta), -np.sin(delta_theta)], \n                                    [np.sin(delta_theta), np.cos(delta_theta)]])\n        self.prob_amplitudes[idx] = np.dot(rotation_matrix, self.prob_amplitudes[idx])\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            collapsed_population = self.collapse()\n\n            for i in range(self.pop_size):\n                trial = collapsed_population[i]\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n                self.quantum_rotation(i)\n\n        return self.best_global_position", "name": "QIEA", "description": "Quantum-inspired Evolutionary Algorithm (QIEA) using quantum computing concepts like superposition and probability amplitudes for enhanced exploration and exploitation.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('shapes (2,2) and (5,) not aligned: 2 (dim 1) != 5 (dim 0)').", "error": "ValueError('shapes (2,2) and (5,) not aligned: 2 (dim 1) != 5 (dim 0)')", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {}, "mutation_prompt": null}
{"id": "39d224b8-c748-4cf7-9846-f13ad5c52d0f", "solution": "import numpy as np\n\nclass PSO_DLR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            if fitness < self.personal_best_fitness[i]:\n                self.personal_best_fitness[i] = fitness\n                self.personal_best_positions[i] = self.population[i]\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.rand(3)\n                adaptive_lr_individual = 0.5 + 0.5 * (self.personal_best_fitness[i] - self.global_best_fitness) / max(1e-9, self.personal_best_fitness[i])\n                adaptive_lr_collective = 0.5 + 0.5 * (self.global_best_fitness - self.personal_best_fitness[i]) / max(1e-9, self.global_best_fitness)\n                adaptive_lr_random = 0.5 + 0.5 * abs(self.personal_best_fitness[i] - self.global_best_fitness)\n                \n                self.velocities[i] = (r1 * adaptive_lr_individual * (self.personal_best_positions[i] - self.population[i]) +\n                                      r2 * adaptive_lr_collective * (self.global_best_position - self.population[i]) +\n                                      r3 * adaptive_lr_random * self.velocities[i])\n                \n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n                fitness = self.evaluate(func, self.population[i])\n                \n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_positions[i] = self.population[i]\n                if fitness < self.global_best_fitness:\n                    self.global_best_fitness = fitness\n                    self.global_best_position = self.population[i]\n\n        return self.global_best_position", "name": "PSO_DLR", "description": "Particle Swarm Optimization with Dynamic Learning Rates (PSO-DLR) using adaptable individual, collective, and random learning rates to balance exploration and exploitation.", "configspace": "", "generation": 86, "fitness": 0.0765868674507623, "feedback": "The algorithm PSO_DLR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.16.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.17060846371421978, 0.11547914713338736, 0.18035995589920584, 0.15081722456559943, 0.16361180298424638, 0.16718343795282853, 0.07830075957275762, 0.08019216161274634, 0.0686354234941371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.0072345814677768905, 0.011083270000711076, 0.02877210944523667, 0.00862674353759485, 0.01831768539743972, 0.008289464603509988, 0.014534832337820935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025053824351814358, 0.002094555210734872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9936551443599846, 0.06805523761732524, 0.07485233628266763, 0.9968425668980292, 0.09980400548975887, 0.989263786486485, 0.09991388520207511, 0.9944178369559303, 0.9945102684364009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031567340680482836, 9.999999999998899e-05, 9.999999999998899e-05, 0.015633388387223168, 9.999999999998899e-05, 0.10070351011260648, 0.09420178965160209, 0.06826644035804841, 0.15023987343608858, 0.03354417010514166, 0.023206836865292124, 0.04003248098546808, 0.07160850340637592, 0.012010327197004678, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888031304195811, 0.13890424981516358, 0.14841075378965907, 0.09426900188375853, 0.09733810698283363, 0.09632548995929047, 0.21307552764024473, 0.17347707157835035, 0.32408882277679163, 0.0017934947074805807, 0.007474741376114813, 9.999999999998899e-05, 0.04575645709693521, 0.006804150654852181, 0.018033370895761403, 0.016194823412477355, 9.999999999998899e-05, 0.02681714746081776, 0.13462063600147134, 0.09336095691958768, 0.10040721440883915, 0.12401924968622224, 0.11224914422819443, 0.06541479828869357, 0.09375610637420995, 0.09266365859018166, 0.07784102022436457, 0.10592172110358711, 0.09625068903533407, 0.14974264141392646, 0.20913557810597905, 0.1447642852273524, 0.18749796522492823, 0.1828557126780902, 0.20391132630816633, 0.16590553996585855, 0.05400826835321537, 0.058178706483972054, 0.06122505501158737, 0.08585945146907215, 0.06458993004880453, 0.10891389913415495, 0.09543229507715256, 0.10451791405275979, 0.07185111616374362, 0.12176672639218944, 0.09852130192849784, 0.13346022277165448, 0.15289857528520368, 0.1464657906580804, 0.1728172218552847, 0.2265569563660138, 0.15620609683019337, 0.14459458413973003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0913669926701266, 0.11684731448288965, 0.12244524093970321, 0.11128520641112605, 0.12079196539045478, 0.12044242319145582, 0.07246028281445871, 0.09645960047692714, 0.07021065076441535, 0.11058478429754015, 0.1005176994267295, 0.02275932590090468, 0.09242815549827643, 0.05843855989460478, 0.0464948543104543, 0.046903776077576786, 0.040540639010015034, 0.04143420019681854, 0.2174562349064818, 0.1882236114821011, 0.19128405830584483, 0.17045048435755739, 0.1820602645703996, 0.18048127116151103, 0.15274995149266946, 0.1299037816188262, 0.14767726863579156, 0.01850192475892798, 0.04151075838807339, 0.03858945717050699, 0.0632348895164434, 0.058826572344497396, 0.036480215781413805, 0.036849273766719315, 0.028828960588262786, 0.017572538329573062]}, "mutation_prompt": null}
{"id": "ae9229ec-c4a5-4cbc-b495-3236d040f8e8", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.w = 0.7   # Inertia weight\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_particle_update(self, position, velocity):\n        quantum_position = np.empty_like(position)\n        for i in range(self.dim):\n            if np.random.rand() < 0.5:\n                quantum_position[i] = position[i] + np.random.normal(0, np.abs(velocity[i]))\n            else:\n                quantum_position[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return np.clip(quantum_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.population[i])\n            self.personal_best_fitness[i] = fitness\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                # Update velocities\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best_positions[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.global_best_position - self.population[i]))\n                # Update positions\n                quantum_position = self.quantum_particle_update(self.population[i], self.velocities[i])\n                fitness = self.evaluate(func, quantum_position)\n\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_positions[i] = quantum_position\n                    if fitness < self.global_best_fitness:\n                        self.global_best_fitness = fitness\n                        self.global_best_position = quantum_position\n                        \n            self.population = self.personal_best_positions.copy()\n\n        return self.global_best_position", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) using quantum superposition principles for enhanced exploration and convergence.", "configspace": "", "generation": 87, "fitness": 0.13809133637180662, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.17.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.20398913287711196, 0.19937525410404955, 0.21860290364327417, 0.2609881317780207, 0.23849667090333615, 0.22882230974821016, 0.24460598745374207, 0.2665452968473202, 0.22010676361462844, 0.0012719661304841923, 0.0015824313776443555, 0.0009672003387733996, 0.007875940860258557, 0.00011380012142747642, 0.0080347565969634, 0.013557321091262398, 0.01095494424903487, 0.01241956224212204, 0.08338444684493684, 0.06374247351020546, 0.08218743365629122, 0.07709458949620906, 0.09881315070155738, 0.05834574584122343, 0.07110402145504491, 0.05949293271097489, 0.07157897767753496, 0.06880554588775922, 0.06503624601331737, 0.05763616117998549, 0.06049855842757623, 0.058089599787739976, 0.05313924016011584, 0.04014627288121797, 0.05939921154874539, 0.05484217158605931, 0.9128848307953441, 0.913273083212068, 0.9128316798885281, 0.8316264747544937, 0.8296422720685819, 0.84092623794408, 0.8665093032073456, 0.8644025922514162, 0.8651254168795601, 0.08080943675982177, 0.08119433282886634, 0.0996881784765834, 0.10356362941272312, 0.09154522953083377, 0.09636153337477538, 0.1383112270009238, 0.07893682700451499, 0.11306700161534933, 0.12512696788845756, 0.10017166352349816, 0.13091650969424884, 0.156418396533192, 0.16894379341008148, 0.15966913081600764, 0.14300535478627086, 0.1590913042527904, 0.14527293615669, 0.023672406776643062, 0.03226186368062767, 0.040111323277394195, 0.03276474747148583, 0.00444326739963985, 0.02089464135543384, 0.1166113205365038, 0.058802163040655664, 0.025366542979731288, 0.06451560014903057, 0.025005054140904592, 0.0830655272498052, 0.061179318273606675, 0.06032888731707864, 0.06126744477219814, 0.02028662514457158, 9.999999999998899e-05, 0.030407097802385263, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07547264731697434, 0.07177998582375988, 0.06380512899615065, 0.07901399367672535, 0.02833926440647283, 0.06821109399749492, 0.045801709997456364, 0.04359836804992556, 0.038222904747112096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009371518480486118, 0.024108552957428087, 0.004158291145026527, 9.999999999998899e-05, 0.0009061825035847626, 0.0015081393275347965, 0.021127625826085183, 0.02385304446955505, 0.008495940397233559, 0.22923223827677242, 0.2218233376182147, 0.23286501953576944, 0.24897062329150244, 0.24759153525977184, 0.22358857203387128, 0.23641707510768828, 0.2094963954955682, 0.23528826773797717, 0.0589800976984477, 0.06261620023498604, 0.059207590327870485, 0.04709847753983576, 0.05232979792599546, 0.04534343855566425, 0.06981713699312808, 0.06758571019491122, 0.060719352975595164, 0.1331253355720151, 0.12908777847214692, 0.15644046801644074, 0.12975527934919884, 0.15357241368799535, 0.14425406278142072, 0.135164223633098, 0.13513104886996463, 0.15522959566434436, 0.19699313848943933, 0.17894875542658195, 0.20948784242991259, 0.17422768209916228, 0.18875764823089247, 0.16781303425566696, 0.19492721968645788, 0.1891714489901306, 0.17236672946598397, 0.11230415685584672, 0.09554494623490029, 0.12329475611298657, 0.1224521927347445, 0.1166322479647186, 0.09965357875946934, 0.1397627111847387, 0.11883950992493009, 0.12626459701335802, 0.15173822466183196, 0.1501868301816205, 0.15447839267982422, 0.16175823133635403, 0.15172351405269913, 0.16359160597419375, 0.15832310527672366, 0.16661904904016644, 0.15570910345223232, 0.1371097339552565, 0.15547427379547518, 0.1914255750470676, 0.15670270056566238, 0.16810110240138854, 0.15562620091252954, 0.14871737555418274, 0.15103760827459212, 0.14279230101239881, 0.1699386530396323, 0.22427670763338559, 0.15952299902145095, 0.30851280614725096, 0.17764994851472005, 0.16669320083037942, 0.23995263070276762, 0.16234241607611688, 0.25081352783669497, 0.19712339382226574, 0.16651846146929639, 0.16737440987783359, 0.16970581027737175, 0.18776305002714289, 0.17373891393726604, 0.17406107664232784, 0.1660321894041732, 0.17114182161692426, 0.21709444686790746, 0.2181128336433954, 0.17922095692414108, 0.2043076425109589, 0.20172583957248658, 0.200094761977207, 0.2047813660847988, 0.1860313486847157, 0.1919596264916752, 0.05288158789533315, 0.05394610597135685, 0.047519094573107434, 0.05341289831140317, 0.047968524715854444, 0.051974638402212836, 0.05036656923650884, 0.055722557840465536, 0.046436921947475285]}, "mutation_prompt": null}
{"id": "d7356338-2c0a-4008-a0a4-27ab90d9372f", "solution": "import numpy as np\n\nclass QiPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.evaluations = 0\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.5 # Cognitive coefficient\n        self.c2 = 1.5 # Social coefficient\n\n    def evaluate(self, func, position):\n        self.evaluations += 1\n        return func(position)\n\n    def quantum_superposition(self, pos):\n        return pos + np.random.uniform(-1, 1, pos.shape) * np.sin(np.random.uniform(-np.pi, np.pi, pos.shape))\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            score = self.evaluate(func, self.positions[i])\n            self.personal_best_scores[i] = score\n            if score < self.global_best_score:\n                self.global_best_score = score\n                self.global_best_position = self.positions[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i]) +\n                                      self.c2 * np.random.rand(self.dim) * (self.global_best_position - self.positions[i]))\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n                # Quantum superposition step\n                quantum_position = self.quantum_superposition(self.positions[i])\n                quantum_position = np.clip(quantum_position, self.lower_bound, self.upper_bound)\n\n                # Fitness evaluation\n                score = self.evaluate(func, quantum_position)\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = quantum_position\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = quantum_position\n\n        return self.global_best_position", "name": "QiPSO", "description": "Quantum-inspired Particle Swarm Optimization (QiPSO) incorporating quantum superposition principles for enhanced global search capabilities.", "configspace": "", "generation": 88, "fitness": 0.19644371816807157, "feedback": "The algorithm QiPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.3561114519289421, 0.35166205071352574, 0.36833635989345803, 0.35944513577908366, 0.34984542439268806, 0.4052819995484238, 0.3633377172606027, 0.38029036552466466, 0.37120242700819295, 0.035318302054137884, 0.041535289456745006, 9.999999999998899e-05, 9.999999999998899e-05, 0.02486386894929815, 9.999999999998899e-05, 0.03546801614403372, 9.999999999998899e-05, 9.999999999998899e-05, 0.11703991272981307, 0.09763589954825969, 0.10979340783186076, 0.12063386760857087, 0.0964172330066938, 0.0960416988446755, 0.10411728279213128, 0.09943671051226843, 0.09256102419025847, 0.08362819614970973, 0.11042264415614045, 0.09696654125162663, 0.09504674967478655, 0.08504277476921163, 0.09261496348442921, 0.10001669558673076, 0.09264392369074592, 0.09552766525675016, 0.9910315929282184, 0.9875830198674931, 0.9875237497558995, 0.9895915073912699, 0.989335761203899, 0.9781865578247301, 0.9883385698179821, 0.9876277517160011, 0.9875851775214844, 0.22703377097256372, 0.22376622651438627, 0.23728682278686541, 0.2576878868532898, 0.21934016505106024, 0.22160963822151247, 0.214150523740804, 0.23785384439876112, 0.23795289592165614, 0.252645733893038, 0.2646843163067448, 0.28247194814357957, 0.2730971042185071, 0.2526730151756621, 0.28534923942543056, 0.2682566840788878, 0.2847382876251119, 0.2902381510245303, 0.13955409038945088, 0.1373231080556936, 0.17934139258942738, 0.13963610484280486, 0.11762891221290084, 0.12728841316186268, 0.13247330081201836, 0.12774973855350547, 0.13955220717410521, 0.13548504974653264, 0.1324938082552044, 0.11816775022487325, 0.134867040139382, 0.11743162536760299, 0.13452392670594127, 0.12280001776491933, 0.07693829453484358, 0.12903956988519238, 9.999999999998899e-05, 0.012413202037848126, 0.004567779688467444, 0.03396464858041759, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005894318694905865, 0.17280881826911976, 0.04011932589508671, 0.08983009680554965, 0.08783720405600959, 0.002185254696005945, 0.020510133107995543, 0.20241723880969154, 0.12040367948097574, 0.06557458628789625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05282273209850319, 0.056318386538017906, 0.073232349143729, 0.06975391353423288, 0.06694614286617728, 0.0628685031584737, 0.07081874084908835, 0.04450589931776361, 0.0702110062514415, 0.3816763312294176, 0.36223214295801776, 0.3599290465865118, 0.35202820132197754, 0.34838823496119675, 0.35369831666336893, 0.36967851425781084, 0.3393766117270778, 0.3536431387632111, 0.08217962732264528, 0.09243918149396702, 0.09750795041440796, 0.09417498564756444, 0.10332036477197093, 0.10670996612745676, 0.10041449833650096, 0.10968649338346936, 0.09708899643771496, 0.15510443995325585, 0.16330181459034354, 0.2028484815498014, 0.2405664164601291, 0.19734703108564478, 0.1799906488918963, 0.1992871051683789, 0.21240840567660413, 0.17749175219072677, 0.24311034997854108, 0.24440347874899904, 0.2554879813012546, 0.26050293284254344, 0.19346444682771946, 0.2629250703617929, 0.2633665093818637, 0.2588247221212937, 0.25799992607133115, 0.1544245101234405, 0.21190468771666904, 0.1907223430713617, 0.20616236903357443, 0.1689389083832903, 0.19855668328356268, 0.20125517775923374, 0.1976335465090382, 0.1732263609605954, 0.20179839531029797, 0.2237188060995845, 0.19996761530426876, 0.23051912687840903, 0.18597119400231554, 0.18869156641752827, 0.20967524110503388, 0.20842029595411327, 0.1983033642407297, 0.20633346550720388, 0.192054158344947, 0.19858598838576613, 0.18953967083369794, 0.1933035752034835, 0.2157339201328271, 0.18317059345548836, 0.18862696151107483, 0.19216500140301096, 0.16609853215034087, 0.16124561698154416, 0.15382133349973193, 0.47166238083909906, 0.19638021854387944, 0.16931706605834862, 0.09973783277456072, 0.16978845168152423, 0.5120257486976952, 0.42033024212397296, 0.1550157992610901, 0.18296417225056139, 0.20371382342922328, 0.16603417116088948, 0.2101674964911474, 0.10462807849766798, 0.10488952368010962, 0.5029645380818233, 0.1994144697425072, 0.17302616549746086, 0.17666480784820193, 0.17951289134707948, 0.19790347509404482, 0.18490012054493732, 0.1933959283567246, 0.18412548622277913, 0.2303702307519787, 0.10398408334501641, 0.08360885535024776, 0.08113430447290504, 0.08470873441780569, 0.09475200666555206, 0.08012370112961764, 0.07302349067903902, 0.08402565249988125, 0.07825219889603485]}, "mutation_prompt": null}
{"id": "e8d3eb82-d686-4bc0-becf-bbfbcd5744d6", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "3a864cda-bd36-43f1-84fb-f6e0fc447e4b", "solution": "import numpy as np\n\nclass HPSO_QED:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_local_positions = np.copy(self.population)\n        self.best_local_fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.c1 = 2.0  # Cognitive component\n        self.c2 = 2.0  # Social component\n        self.q_crossover_rate = 0.2  # Quantum-inspired crossover rate\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_crossover(self, x1, x2):\n        return 0.5 * (x1 + x2) + np.random.normal(scale=self.q_crossover_rate, size=x1.shape)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            self.best_local_positions[i] = self.population[i]\n            self.best_local_fitness[i] = self.fitness[i]\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (self.velocities[i]\n                                      + self.c1 * r1 * (self.best_local_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.best_global_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                candidate = self.quantum_crossover(self.population[i], self.best_global_position)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                \n                candidate_fitness = self.evaluate(func, candidate)\n                if candidate_fitness < self.fitness[i]:\n                    self.population[i] = candidate\n                    self.fitness[i] = candidate_fitness\n                    if candidate_fitness < self.best_local_fitness[i]:\n                        self.best_local_fitness[i] = candidate_fitness\n                        self.best_local_positions[i] = candidate\n                    if candidate_fitness < self.best_global_fitness:\n                        self.best_global_fitness = candidate_fitness\n                        self.best_global_position = candidate\n\n        return self.best_global_position", "name": "HPSO_QED", "description": "Hybrid Particle Swarm Optimization with Quantum-inspired Evolutionary Direction (HPSO-QED) combining swarm intelligence and quantum-inspired evolution for enhanced exploration and convergence.", "configspace": "", "generation": 90, "fitness": 0.16347205844434823, "feedback": "The algorithm HPSO_QED got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.2856060863804579, 0.3132035838471452, 0.28809817309095576, 0.29477900528667134, 0.30064180633049886, 0.36098983127858464, 0.3114236357970438, 0.28280677656099606, 0.3180901521789795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09382559025518711, 0.066035459810867, 0.07683536840278105, 0.09852282984078098, 0.09071520935272037, 0.08475066062470193, 0.0824642211744846, 0.07440743544628692, 0.09295343772037834, 0.07464058312474375, 0.0650648403775762, 0.05608349482695718, 0.06548789467202765, 0.06977135325662731, 0.07059841290669211, 0.048723712529572194, 0.06997401417319815, 0.06749192999281783, 0.9899623616791094, 0.9917964662390222, 0.9885226964538811, 0.9833968537561556, 0.9892740757735653, 0.9832320480305867, 0.9889762987195184, 0.9890331502025207, 0.9890201453731671, 0.1712549907369445, 0.16130544250678047, 0.14708854403502103, 0.15101675913788826, 0.1526382535858667, 0.15289021615144915, 0.1838860159483442, 0.17042301944858884, 0.19242840149460916, 0.21084872489196416, 0.20168553999076144, 0.20823299152566344, 0.21093701724450664, 0.19634167494622912, 0.20787570888689322, 0.139484600957556, 0.1816607034238884, 0.21593372056211846, 0.04773951361208506, 0.0858991197010337, 9.999999999998899e-05, 0.02647123373780247, 0.08540055532080537, 0.03989134890239254, 0.02685948836411045, 0.1050438427753817, 0.08630998507634235, 0.06868360992645217, 0.01269695422006556, 0.07186884877354027, 0.06357217720196984, 0.004336790169753968, 0.09645810267751653, 0.037565969899828966, 0.038435635073065355, 0.057009290352719844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013582048300284644, 0.035393309476132506, 0.04001510575208811, 0.02366337131902907, 0.03908940938856831, 0.0001329492539485777, 0.013703449326800232, 0.0074966435384435925, 0.0955903257206332, 0.036207582801787375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04679003953829308, 0.013672008748386033, 0.03555935175077807, 0.036471832635388446, 0.01578167048457013, 0.04611273277248451, 0.031009902723778238, 0.06241202035105475, 0.04732177378652336, 0.29627083198997983, 0.2860865078539543, 0.3150081993121905, 0.29626293876066734, 0.2867010494535338, 0.29363643568848097, 0.3494772105970251, 0.2500902776426521, 0.32612805656224286, 0.07267012103759318, 0.0863074835921529, 0.054867761916214786, 0.07909000855869686, 0.07052541727269324, 0.07458620878082878, 0.049772731096606515, 0.07724129444489569, 0.07463039094066681, 0.14619423379628638, 0.15864511561435535, 0.1623921627234034, 0.16346136985627868, 0.16724306165668656, 0.1399731422863939, 0.16746049494078763, 0.1870375385757782, 0.17091037622232907, 0.20003435474434883, 0.2007069302341149, 0.22661153832600767, 0.21971357595890362, 0.20454277898977702, 0.20709120663177405, 0.21845964400852258, 0.2166370230917224, 0.21455345727918496, 0.1791550581736301, 0.15377624883112095, 0.16328634770642492, 0.15101933378675914, 0.15215766118353624, 0.16711858887964604, 0.16265232342003344, 0.1680285046483816, 0.16242926245611689, 0.19467274627647368, 0.14986791756795503, 0.17887571378736578, 0.1866316193968678, 0.2053786614529286, 0.16633607384266158, 0.1958879193919979, 0.2033180819860404, 0.2048253062690324, 0.17280484757705417, 0.16841411200747536, 0.17200524027924946, 0.17375270886531913, 0.17402904617709625, 0.1688016875222884, 0.17834498304166513, 0.17680218997971364, 0.16412012766688788, 0.3866357222997616, 0.12037166411268896, 0.15272616010362194, 0.372386760746085, 0.18356201283949236, 0.1918782562283402, 0.09947339088615359, 0.16889285534312803, 0.2042944546077612, 0.3583273027840056, 0.1563986798903072, 0.11222015590359824, 0.2791473682333536, 0.19275365988647453, 0.2031076890272968, 0.10461049886248897, 0.10426240752547677, 0.29883919278862014, 0.18964989271815547, 0.19389493079116815, 0.1965914744748578, 0.17734312686704712, 0.18207083489939002, 0.18400145746340935, 0.21341811932709098, 0.19202310292452152, 0.1714931259895831, 0.08729399117708092, 0.0776738771846327, 0.07137783596150615, 0.06289194737930137, 0.07573494944442194, 0.08735168808179095, 0.0852945983569593, 0.06564477783663647, 0.06295734749564419]}, "mutation_prompt": null}
{"id": "fc6506db-7dd3-4d61-b1c9-e8753bc8fd98", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "cb3841da-ef67-4b2c-889b-0728bfd8795a", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.position = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_fitness = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.w = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.beta = 0.5   # Quantum factor\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def quantum_position_update(self, position, global_best):\n        q_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        return self.beta * q_position + (1 - self.beta) * global_best\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, self.position[i])\n            self.personal_best_fitness[i] = fitness\n            self.personal_best_position[i] = self.position[i]\n            if fitness < self.global_best_fitness:\n                self.global_best_fitness = fitness\n                self.global_best_position = self.position[i]\n\n        # Main optimization loop\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                cognitive_component = self.c1 * r1 * (self.personal_best_position[i] - self.position[i])\n                social_component = self.c2 * r2 * (self.global_best_position - self.position[i])\n                self.velocity[i] = self.w * self.velocity[i] + cognitive_component + social_component\n\n                if np.random.rand() < 0.5:  # Quantum position update\n                    self.position[i] = self.quantum_position_update(self.position[i], self.global_best_position)\n                else:\n                    self.position[i] += self.velocity[i]\n\n                self.position[i] = np.clip(self.position[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate the new position\n                fitness = self.evaluate(func, self.position[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_position[i] = self.position[i]\n                if fitness < self.global_best_fitness:\n                    self.global_best_fitness = fitness\n                    self.global_best_position = self.position[i]\n\n        return self.global_best_position", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) utilizing quantum superposition to enhance diversity and convergence in solution space exploration.", "configspace": "", "generation": 92, "fitness": 0.15437253485861632, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.23280428785607965, 0.2249104071174851, 0.24014417639800123, 0.23200229579035503, 0.27972618787607484, 0.29360114573748974, 0.25833900371415863, 0.227558784897261, 0.23492799672261633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0483842525839433, 0.05996316712085159, 0.06124567456268737, 0.08719896550765538, 0.06886300810387369, 0.05917494154085001, 0.07377862000893531, 0.06020202615526227, 0.07348484809210387, 0.048614195826576, 0.05836851571095614, 0.060961708626196875, 0.05573259310433709, 0.05424939350260105, 0.058740154485568574, 0.059492593639390745, 0.05462669851162916, 0.05274191267765893, 0.9932693758277352, 0.9942196468812019, 0.9932756668848788, 0.961539615780023, 0.9926275138294407, 0.9904069735722384, 0.9872903893969951, 0.9933004084130582, 0.9927084464834804, 0.12168720019967683, 0.16827406152727398, 0.14031479507252864, 0.11937093101219776, 0.13536649418732172, 0.12483235392466363, 0.12743627329672602, 0.11227211771422152, 0.11554387788062537, 0.16787190118161688, 0.17275353593400355, 0.19612844108417715, 0.1809494559628736, 0.14527325056847096, 0.17270098002641532, 0.15286946226601916, 0.1702822686980755, 0.17448594320085253, 0.0426323385917754, 0.03689949769674006, 0.04374732999283604, 0.047474073080379875, 0.04447328528798766, 0.020056172773393888, 0.07301007295278816, 0.05964464116359636, 0.025424050410661092, 0.07294707089020214, 0.0363622596620522, 0.10615133621932782, 0.09378683339767868, 0.04492027384297448, 0.070726667366658, 0.0409129372476813, 0.05030093691164872, 0.061530338298383724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08865400854921013, 0.05384544140915337, 0.06728807481183152, 0.09182878210359335, 0.05236511919532316, 0.044768411347958725, 0.060431889629184665, 0.06334423772770426, 0.12240614072709854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017512463094935815, 0.0065360170102592985, 0.009854306227984888, 0.0068659328893345695, 0.016152506816111467, 0.011079791401239936, 0.005848571273289638, 0.021577429721548635, 0.010999374569211406, 0.2625562805525137, 0.23627750094224698, 0.2365372908253892, 0.22561980072781174, 0.25156069963017613, 0.23164208034382372, 0.24946015982832215, 0.238379261076492, 0.23319264861604805, 0.06478889201455662, 0.05359215846494536, 0.059702820900805476, 0.07494420290579873, 0.060195308882358245, 0.05847286114077521, 0.07035726787210894, 0.06307939897287018, 0.071176560571657, 0.15261049831845885, 0.13380412655260987, 0.14067068811063055, 0.16247865554944096, 0.15058372753293092, 0.1582216991014891, 0.13433481591881935, 0.13280267037379012, 0.13721097636608304, 0.19223881680836963, 0.19588478862182412, 0.18966282859928618, 0.2022393554745643, 0.1916909642000869, 0.1968258362286479, 0.19134282914272205, 0.1874575773582957, 0.19887616629105032, 0.14322864675981384, 0.14494486554237496, 0.13959644983536423, 0.13429336853534968, 0.1415020032342722, 0.14291382039410327, 0.11956834814176598, 0.1354732426691918, 0.1343038713121183, 0.1709797214212998, 0.19642953343325675, 0.2091369081166473, 0.17472679678915815, 0.200084318253398, 0.20598126740135692, 0.17340984046967878, 0.22037021105028654, 0.18253694505919327, 0.1597573197559532, 0.16669378379861555, 0.1584413692216211, 0.16602614724020948, 0.17914033995809753, 0.16595577948791507, 0.1597377434374877, 0.16607042767660263, 0.16987193979963744, 0.2452576868147316, 0.1755990758286301, 0.15469820570500037, 0.30181044315007866, 0.1530083918764843, 0.21541141066856195, 0.2632629165528325, 0.30018404575695645, 0.245129734797761, 0.2191883165132933, 0.27137909616081324, 0.21391976227285991, 0.30539388963112357, 0.2410017607293643, 0.19764588576170594, 0.21062140882635016, 0.2072760676319585, 0.23214696574696447, 0.19968431087572946, 0.1902536305346364, 0.19253633039493356, 0.1781201316183637, 0.1801048721578109, 0.18392194402087414, 0.18938631073022005, 0.18176107499110705, 0.18976300871268115, 0.06239856043552061, 0.06586735156003654, 0.07133892974595124, 0.07270367743370665, 0.06448191283551663, 0.059398133706730194, 0.07271069284707032, 0.080975432364506, 0.06253138548856152]}, "mutation_prompt": null}
{"id": "77149144-a8cf-4833-a2a8-8103943b7a1e", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "02bcb25b-fd5b-48fc-a743-4a8fcc830f6f", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "4009c945-a053-4a3f-a0b0-e046bb97952e", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "0bddff91-7828-4c36-85ac-0999bbd5aaaf", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "0d05a49b-583a-44fc-a19c-b93c2f0124b0", "solution": "import numpy as np\n\nclass EDE_AMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9 # Crossover probability\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def adaptive_mutation(self, xi, x1, x2, x3):\n        strategy = np.random.choice(['rand', 'best'])\n        if strategy == 'rand':\n            return xi + self.F * (x1 - x2 + x3 - x2)\n        else:\n            return self.best_global_position + self.F * (x1 - x2)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n            if self.fitness[i] < self.best_global_fitness:\n                self.best_global_fitness = self.fitness[i]\n                self.best_global_position = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                x1, x2, x3 = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant = self.adaptive_mutation(self.population[i], x1, x2, x3)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_global_fitness:\n                        self.best_global_fitness = trial_fitness\n                        self.best_global_position = trial\n\n        return self.best_global_position", "name": "EDE_AMS", "description": "Ensemble Differential Evolution with Adaptive Mutation Strategies (EDE-AMS) leveraging ensemble strategies and adaptive mutation for robust exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.9377576281156077, 0.9316171429957482, 0.9402333594138512, 0.9357725696227314, 0.9338233550433707, 0.936874463329467, 0.9272020477412066, 0.9359423093425338, 0.9323267022933834, 0.8636757717820575, 0.8710095697106297, 0.8626686312741526, 0.8676621211325752, 0.8754795641836106, 0.8655448065472892, 0.8712277194879876, 0.8549246712365768, 0.8758174910847538, 0.11330975618537142, 0.16163059599186158, 0.1830194446753337, 0.1196871324148211, 0.14528923681409178, 0.17752524491467925, 0.14262766438572294, 0.11993420430557511, 0.17421771249396556, 0.10219493818177672, 0.13746232894341048, 0.1488192590813351, 0.12539526804018208, 0.12457386490217959, 0.11560973587514922, 0.0838008072552342, 0.09623249600978856, 0.09819775736123904, 0.9936831634635103, 0.9896404178871747, 0.9876957251500517, 0.9923264596135332, 0.9919646232944639, 0.9898502653899925, 0.9934977719338036, 0.9855084788347627, 0.9886149948448743, 0.8366469987466771, 0.7734509295874852, 0.7922387549558478, 0.8305817680522687, 0.7921057387116035, 0.7856173832913628, 0.82347543230247, 0.8178486861133702, 0.799193692927592, 0.17282933105266896, 0.9177030564523876, 0.9074865681453612, 0.19477549844475006, 0.9193946786719519, 0.2825186416150598, 0.9368817143680551, 0.7024629807586524, 0.9355343028960216, 0.8180217293761223, 0.13564212805621412, 0.7608119662976189, 0.8380257727403024, 0.13524638922713017, 0.8410174058196238, 0.8599303894613497, 0.7620071234932569, 0.7602265146625553, 0.7545346299722757, 0.7285495516537113, 0.7644483575501054, 0.8522085745761464, 0.1321781546363442, 0.8092353116877199, 0.7291534066236145, 0.7970666856917904, 0.13504799182643512, 0.07488209901610576, 0.2552442147506231, 0.5450559251816662, 0.6615912339522495, 0.7883388820718749, 0.6640999356467576, 0.685879968285619, 0.7373206313200356, 0.7700347378857715, 0.8272101352918122, 0.8477953273740917, 0.8288088747489353, 0.8346102764421659, 0.8024552526942181, 0.8274991468688822, 0.742015098481167, 0.8547869465762218, 0.7896534903717749, 0.15297815035050122, 0.1986551810395789, 0.17297042528794793, 0.6197765550743448, 0.446063235241394, 0.6407574496766741, 0.16051368525238285, 0.19809771793597142, 0.6061957357685355, 0.6170652794082676, 0.7364434592107016, 0.6492281090199743, 0.7509283890730699, 0.7514140635127982, 0.7516119636669044, 0.6202728189672957, 0.05899373026619559, 0.5421366263769605, 0.8814478572518637, 0.9034845754620693, 0.9007330924075068, 0.8621828958585136, 0.8943846240629033, 0.8564807353433084, 0.8787496655500437, 0.8913468612256982, 0.8889474742722157, 0.10141953088084743, 0.18345278280100008, 0.1550102304249683, 0.11491763278744527, 0.15555670348761919, 0.13745983287979613, 0.08838640288440458, 0.13224640058260206, 0.12334074352271496, 0.30073357016632407, 0.6949297893591861, 0.14143389446850319, 0.28885029278277197, 0.25190256320094984, 0.1838169598245557, 0.2476032241373276, 0.26077581013226614, 0.23908802163749054, 0.2810821255064395, 0.5780484905267513, 0.6802350956808692, 0.5589903238472218, 0.8182490399252739, 0.5336448282287553, 0.793016376434486, 0.7864134080368652, 0.5125573367968209, 0.30502998105698276, 0.2563149523532453, 0.40561726444879787, 0.3156110023031812, 0.48856271242294347, 0.4273813475027862, 0.603978108427375, 0.4533214784961149, 0.2620369558501756, 0.20487892426932675, 0.19621134920881522, 0.19915903988986416, 0.21135310796683882, 0.203686325273836, 0.20305676790368488, 0.23946204505507918, 0.1911980804091541, 0.2867997409715678, 0.2239334148959704, 0.22483350443372552, 0.19820262247585796, 0.2229993866410176, 0.19686443630513384, 0.2253225964898602, 0.20753233493001488, 0.20000196420507188, 0.18848300443713661, 0.16582903894297418, 0.1639749589058872, 0.17161417855686156, 0.21011765881140976, 0.2132607581932796, 0.20049304041368354, 0.16304229027334405, 0.1657452767893165, 0.1649985239663423, 0.9399581732196811, 0.15718813100540852, 0.15457968457049298, 0.21220999473545576, 0.1683709824477717, 0.15438237412776867, 0.1107540949012864, 0.21311879706500347, 0.15725341284998562, 0.2077327280998894, 0.21209647211610494, 0.21358810629363734, 0.21084000194122177, 0.18206233957346785, 0.21435275179964852, 0.19829526816627052, 0.18129457317329456, 0.1859529339981053, 0.11067284485409268, 0.09037242866351658, 0.09311058116571491, 0.10512210738149375, 0.08993960561075653, 0.09850068978527193, 0.07469611035267354, 0.092608522772759, 0.0972861742731087]}, "mutation_prompt": null}
{"id": "c58f62da-48e5-4818-ac86-5f83a784623b", "solution": "import numpy as np\n\nclass QIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.q_population = np.random.rand(self.pop_size, self.dim)  # Quantum bit probabilities\n        self.best_sol = None\n        self.best_fit = float('inf')\n        self.evaluations = 0\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def collapse(self):\n        # Collapse quantum bits to real solutions based on probabilities\n        return np.where(self.q_population > 0.5, self.upper_bound, self.lower_bound)\n\n    def update_quantum_bits(self, xi, best):\n        # Update quantum bits towards the best solution\n        for d in range(self.dim):\n            if np.random.rand() < 0.5:\n                self.q_population[xi, d] = self.q_population[xi, d] + 0.1 * (best[d] - self.q_population[xi, d])\n            else:\n                self.q_population[xi, d] = self.q_population[xi, d] + 0.1 * (self.q_population[xi, d] - best[d])\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initial evaluation\n        real_population = self.collapse()\n        for i in range(self.pop_size):\n            fitness = self.evaluate(func, real_population[i])\n            if fitness < self.best_fit:\n                self.best_fit = fitness\n                self.best_sol = real_population[i]\n\n        while self.evaluations < self.budget:\n            real_population = self.collapse()\n            for i in range(self.pop_size):\n                fitness = self.evaluate(func, real_population[i])\n                if fitness < self.best_fit:\n                    self.best_fit = fitness\n                    self.best_sol = real_population[i]\n\n                # Update quantum bits\n                self.update_quantum_bits(i, self.best_sol)\n        \n        return self.best_sol", "name": "QIEA", "description": "Quantum-Inspired Evolutionary Algorithm (QIEA) leveraging quantum bits and superposition for enhanced diversity and exploration.", "configspace": "", "generation": 98, "fitness": 0.06349055876456043, "feedback": "The algorithm QIEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.20.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.015326969364405696, 0.01530074325021813, 0.015312083298319346, 0.05949117613219701, 0.059520898470367456, 0.05950511349365406, 0.03163302838044513, 0.031648680668962204, 0.031580537236740036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9993301579291896, 0.9990480762893185, 0.9978255682960244, 0.9997166867223893, 0.9941468735847128, 0.99424, 0.9942325, 0.99866, 1.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05839125384695576, 0.05843771556799293, 0.05809190378239304, 0.06073200959271474, 0.06044732756938431, 0.06023105993808753, 0.08505323695716926, 0.08489670171378805, 0.08482273029318133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301846189019614, 0.09336251253988936, 0.0934599838705239, 0.07659508956887295, 0.07669886076712773, 0.07669732667971241, 0.07294525475484026, 0.0730050815121267, 0.07285673634284284, 0.06680390339901765, 0.06679764692849544, 0.06675833734997483, 0.0822759052986809, 0.08245706755564719, 0.08234728371473299, 0.08260809338485486, 0.08263595226900344, 0.08265464366566544, 0.020030048651840993, 0.020117922726902382, 0.01986935158783565, 0.04125688251311299, 0.04086806368906182, 0.04106811103100827, 0.028668165531336, 0.028671023205191326, 0.02862777507767078, 0.05046035782172298, 0.050697573532236806, 0.05074696512029131, 0.0337302525095593, 0.0336768792624389, 0.033714543388473794, 0.04280988372838579, 0.0428190989603392, 0.04276152110111309, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07641663672835508, 0.07645000652728307, 0.0763811569068168, 0.03306388685246098, 0.0329898419589888, 0.03300004569425796, 0.018154453902426204, 0.01817188179233542, 0.018172873763812047, 0.013879150720311872, 0.013883290843585971, 0.013880898572950162, 0.01478248865832521, 0.0148111660293333, 0.014819872111404897, 0.016807215926373797, 0.01680621370137303, 0.016816169300238437, 0.11292012421923314, 0.1129242719700636, 0.1129143340216544, 0.1502091038965775, 0.15020611905707704, 0.14994412350723507, 0.13694929342890172, 0.13691378249315533, 0.13689669725119025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "2f1daf02-a17e-45f4-8142-ff62e4628f61", "solution": "import numpy as np\n\nclass CPSO_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_fitness = np.full(self.swarm_size, float('inf'))\n        self.best_global_position = None\n        self.best_global_fitness = float('inf')\n        self.evaluations = 0\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.5 # Cognitive coefficient\n        self.c2 = 1.5 # Social coefficient\n\n    def evaluate(self, func, solution):\n        self.evaluations += 1\n        return func(solution)\n\n    def dynamic_neighbors(self, index):\n        neighborhood_size = np.random.randint(2, self.swarm_size)\n        neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n        return neighbors if index not in neighbors else self.dynamic_neighbors(index)\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initial evaluation\n        for i in range(self.swarm_size):\n            fitness = self.evaluate(func, self.positions[i])\n            self.personal_best_fitness[i] = fitness\n            self.personal_best_positions[i] = self.positions[i]\n            if fitness < self.best_global_fitness:\n                self.best_global_fitness = fitness\n                self.best_global_position = self.positions[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                neighbors = self.dynamic_neighbors(i)\n                best_neighbor_fitness = float('inf')\n                best_neighbor_position = None\n\n                for neighbor in neighbors:\n                    if self.personal_best_fitness[neighbor] < best_neighbor_fitness:\n                        best_neighbor_fitness = self.personal_best_fitness[neighbor]\n                        best_neighbor_position = self.personal_best_positions[neighbor]\n\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (best_neighbor_position - self.positions[i]))\n\n                self.positions[i] = self.positions[i] + self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n                fitness = self.evaluate(func, self.positions[i])\n                if fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                    if fitness < self.best_global_fitness:\n                        self.best_global_fitness = fitness\n                        self.best_global_position = self.positions[i]\n\n        return self.best_global_position", "name": "CPSO_DN", "description": "Coevolutionary Particle Swarm Optimization with Dynamic Neighborhoods (CPSO-DN) leveraging coevolutionary strategies and dynamic neighborhood adaptation for enhanced global search and exploitation.", "configspace": "", "generation": 99, "fitness": 0.27968757576089853, "feedback": "The algorithm CPSO_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "781e01a6-b64d-44d4-bcbf-4b4e521cebf3", "metadata": {"aucs": [0.8169003524221486, 0.814345039793305, 0.8177490565304573, 0.1830619902270022, 0.8146909583614046, 0.8194400576084371, 0.847408758317327, 0.8190740923477146, 0.8548067442107254, 0.5947520892425462, 0.605548319992422, 0.6092193967555288, 0.5616382581680922, 0.5890242105422445, 0.6175304112670796, 0.598189816300855, 0.5026277857331578, 0.6186353409955596, 0.09579124704701081, 0.1053548443227248, 0.08957663997313503, 0.12079155549527898, 0.1169493791406796, 0.11734965840922196, 0.10979980901663944, 0.10196704394809897, 0.09958501018291699, 0.10104945846271385, 0.09148588816633563, 0.0814675903955211, 0.09300045578563387, 0.09245605031880388, 0.08605083696512716, 0.09101178416313016, 0.08376989841059768, 0.10403286487079566, 0.9835689565951463, 0.9917189810326907, 0.9919216683248652, 0.9886487679526512, 0.9899840259913706, 0.9882991239808877, 0.9924440794638733, 0.9902064149691719, 0.9891073428687477, 0.4210520484347089, 0.059793859033260954, 0.499975557908803, 0.3144159400281412, 0.44496147079836956, 0.15322054834099386, 0.0837976382535508, 0.43843745766657816, 0.08882576198666792, 0.7689505365677308, 0.6041131345185091, 0.5587150644638135, 0.6651910043683369, 0.22005942051579985, 0.5201436574989762, 0.7396396406822017, 0.6162202258137903, 0.3611896063695498, 0.18515351143147896, 0.19046967032452278, 0.18507987632190803, 0.18100440917042493, 0.18700348369012254, 0.11756459671505859, 0.14867510109096782, 0.21392699997218223, 0.1872767981185819, 0.1894978748695808, 0.18320175498249258, 0.18025025614697365, 0.1817543425035596, 0.20647570117434044, 0.19805234950245232, 0.21837769039358823, 0.2120721669304707, 0.22542341912476005, 9.999999999998899e-05, 0.0019688908924081483, 0.013938673740773067, 0.0007032140810703247, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09788871103191943, 0.0596830963835131, 0.05330070583586699, 0.05296939190534633, 0.00591752976044424, 0.0641483804169316, 0.027704007593239433, 0.04439992807795201, 0.0463716970007898, 9.999999999998899e-05, 0.03184007102900288, 0.0318869217579022, 9.999999999998899e-05, 0.08395181329060741, 0.07230061194190818, 0.09218237447233335, 0.031503594444709626, 0.06721030608782863, 0.12005124776266418, 0.16848034617382524, 0.08321692194512975, 0.12258354002427385, 0.08474297273381204, 0.12376712153605807, 0.15814811243047167, 0.08177485323540823, 0.08253708864114129, 0.45164626362918603, 0.5011265568228687, 0.4847560758719752, 0.48402765834897654, 0.4880579391426412, 0.4960083566254523, 0.5234789734510925, 0.5521643132736622, 0.5367789597646632, 0.0966875688855584, 0.0913403693709759, 0.08349356019939658, 0.09439014475772112, 0.0929861345470987, 0.09456977101812813, 0.08619496062109078, 0.1101817535859233, 0.0968897767015422, 0.13706511086269224, 0.1390711842144361, 0.15260575138457022, 0.14666294007063385, 0.1671293412217426, 0.13856046816204814, 0.184831714492944, 0.1419272950996865, 0.14125977224613273, 0.4025260755542348, 0.40364669718485935, 0.4338151796631059, 0.34865093556489213, 0.42076069572252717, 0.3523214163343751, 0.4541372120843089, 0.4210029665313668, 0.45301674320025764, 0.17196075544496614, 0.2528369540585894, 0.22318638105676147, 0.24968100766967471, 0.3490510394379719, 0.23347729598031441, 0.33134479925020965, 0.2959775937687227, 0.24471711538621588, 0.18050339043297625, 0.19019990207149662, 0.19941869689749514, 0.2328936828649899, 0.1848020557673825, 0.17639112670172108, 0.1826038898151141, 0.2156945103200293, 0.19969014895877968, 0.17903988296608464, 0.18581561270346714, 0.19659851239211867, 0.19943861826425546, 0.216116241400639, 0.1691463253760188, 0.1942384615649555, 0.20205509817732759, 0.18177288231651623, 0.18704426562525656, 0.14580998093698438, 0.16692632146493247, 0.8282874539363658, 0.19787442746791017, 0.16910369471797115, 0.7388654328170097, 0.16829476280905642, 0.8266711416109099, 0.5475672246844858, 0.27272871464127313, 0.4590491105375457, 0.21073228454294946, 0.38577860614441684, 0.1553419455407027, 0.21100001959126835, 0.20335162570412435, 0.21205984422506585, 0.19676912151646897, 0.18944690430221955, 0.18386032137374453, 0.18804520929031543, 0.18420707204952846, 0.183867269572498, 0.1821625813576151, 0.19905338283345475, 0.20712579406127796, 0.0798671389056077, 0.08994974880436024, 0.08312159338100245, 0.07695568246560958, 0.08049325939068253, 0.07702472795959225, 0.08369198670958489, 0.09000581194200952, 0.07999252917236754]}, "mutation_prompt": null}
