{"id": "945208fd-d945-40ac-ae29-52ebe59569e3", "solution": "import numpy as np\n\nclass HybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1000  # initial temperature for simulated annealing\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        # Randomly initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n        best_fitness = fitness[best_index]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                donor_vector = population[a] + self.mutation_factor * (population[b] - population[c])\n                donor_vector = np.clip(donor_vector, self.lb, self.ub)\n                \n                # Crossover\n                trial_vector = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial_vector[j] = donor_vector[j]\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial_vector\n                        best_fitness = trial_fitness\n\n                # Simulated Annealing Acceptance\n                elif np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                \n                # Update best solution\n                if fitness[i] < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = fitness[i]\n            \n            # Cooling\n            self.temperature *= self.cooling_rate\n\n            if num_evaluations >= self.budget:\n                break\n\n        return best_solution, best_fitness", "name": "HybridMetaheuristic", "description": "A hybrid metaheuristic combining Differential Evolution and Simulated Annealing for efficient exploration and exploitation in black-box optimization.", "configspace": "", "generation": 0, "fitness": 0.12020757060201166, "feedback": "The algorithm HybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.16.", "error": "", "parent_id": null, "metadata": {"aucs": [0.16834045273823017, 0.16895925615387353, 0.13183640580319556, 0.15684085257829605, 0.16628785871657836, 0.19881768817704426, 0.1398214416312178, 0.15239109514058213, 0.13390213899773895, 0.027852188579200465, 0.03178067947244623, 0.023398324644852253, 0.022974307357532586, 0.02814818963316923, 0.019202658537673223, 0.021522293741073506, 0.045400616608250455, 0.01942749281614764, 0.038477410868818174, 0.041731500802132726, 0.03384437768036064, 0.04878679936979846, 0.03893679351158785, 0.04297434239219733, 0.05117510207952003, 0.04450134534247352, 0.036190650911848254, 0.023514224938587902, 0.02517897361336585, 0.021139830556228256, 0.02454909727578436, 0.020020562139612008, 0.023154098304711046, 0.02948321205249571, 0.021319876601675447, 0.02812013813623948, 0.7338972986349528, 0.8175250027048682, 0.4868143361691536, 0.9151569601779755, 0.9040350270551942, 0.823078076525068, 0.8763965389365522, 0.5663101653063953, 0.965906318259475, 0.09553719021981, 0.07834052013620363, 0.10672826066708263, 0.11363572177586079, 0.06777514098715509, 0.07574404875280905, 0.10567378732848798, 0.0955512700387866, 0.0951132235041563, 0.11547029897669658, 0.13327595078242427, 0.1269696200282, 0.11263650354320875, 0.10841529010384021, 0.11088017415836526, 0.1312798989405326, 0.12235101433537732, 0.1133408953739301, 0.04914669841287289, 0.04865001808093161, 0.02995277903625304, 0.0465946482503512, 0.04738623856118318, 0.05071219870213739, 0.047137451221422766, 0.043754146207162004, 0.06377756860526174, 0.05073395004136405, 0.0719820878023727, 0.059900673006121674, 0.03342433703406311, 0.04595135746788237, 0.04652818958954463, 0.05201742480432803, 0.05932538877766291, 0.05638643934689025, 0.00031671659018006615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002373645975064731, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07835227435862979, 0.0750739530397061, 0.09805766996570764, 0.07628466430917613, 0.07196786701308211, 0.08157713308174375, 0.11413802974152853, 0.0754844290160992, 0.0905841208100262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010373658457095591, 0.0005543623638126771, 0.004584140314232488, 0.0010557696938731098, 0.003574275605087718, 0.0011529264487718516, 0.004569542754801703, 0.004404224078117247, 0.0036130412809414203, 0.15890313083196272, 0.18646799349725074, 0.16699554577940912, 0.1692354891773562, 0.19418501578037317, 0.1683166574804793, 0.19737319905558692, 0.1665138162377996, 0.16879759017192142, 0.05579881084475313, 0.046176996395783654, 0.04911102466381889, 0.03861514433643698, 0.03255960797181956, 0.045431979259713096, 0.04275877151046481, 0.03307417234613419, 0.04021946996460879, 0.17004653505670775, 0.14273352305600506, 0.13767115473142644, 0.15056788986954484, 0.14840354294546432, 0.1340843276379846, 0.12535332767265628, 0.1315182394145984, 0.1346317279250837, 0.16807642074099982, 0.14808896491301005, 0.16171619222261868, 0.15520592784887632, 0.14904150417454498, 0.161856142914947, 0.1401875082891424, 0.17377774300845283, 0.1544472017907016, 0.10743412188700496, 0.11322155935530176, 0.09952169219087426, 0.09111316508256095, 0.1080775633186768, 0.09896126772364655, 0.09930931461208692, 0.10271826492592573, 0.09436251494397807, 0.15528088260747785, 0.154076556786358, 0.1365760945075608, 0.14024569295123568, 0.14049498758945633, 0.12925092916078684, 0.14182864090663316, 0.13872520514701592, 0.14692275282222167, 0.1476797553874527, 0.1681574234907086, 0.16027238011173317, 0.14598693656071404, 0.16357924667431456, 0.1695649886992403, 0.15091236369186078, 0.16647572774508756, 0.166065719127643, 0.1508887727938023, 0.1554465951259203, 0.12663839650545683, 0.11261154483618008, 0.22259215749102845, 0.15600330606137525, 0.11789202448831038, 0.15048061564295734, 0.15830718306106706, 0.15191897453543102, 0.11581072303677087, 0.16513715543407304, 0.10393280249929027, 0.10126103042986434, 0.10976472992055819, 0.17475849489326523, 0.14516847013302103, 0.1663341792324694, 0.22238197148117655, 0.18519501096660929, 0.1991940245930428, 0.17959577137242266, 0.18429355691297544, 0.18248134542475603, 0.2056652880417219, 0.20555505423098608, 0.1818548915352417, 0.04475389670089713, 0.036318726734286266, 0.05154749168533945, 0.03562551575790551, 0.05875739312325623, 0.0421378929501407, 0.038307244886828795, 0.04420055270884349, 0.046369576108667765]}, "mutation_prompt": null}
{"id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 1, "fitness": 0.22900035694933069, "feedback": "The algorithm AdaptiveMemeticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "945208fd-d945-40ac-ae29-52ebe59569e3", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "151ea975-3f2d-4da7-92d5-3af610ab51a1", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(10, int(budget / (8 * dim)))  # heuristic for population size\n        self.mutation_factor = 0.5  # initial mutation factor\n        self.crossover_rate = 0.9  # initial crossover rate\n        self.stochastic_perturbation_rate = 0.1  # fraction of individuals with stochastic perturbation\n        self.adaptive_rate = 0.1  # rate at which parameters adapt\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n        best_fitness = fitness[best_index]\n\n        while num_evaluations < self.budget:\n            new_population = []\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                # Mutation: Differential Evolution strategy\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = x1 + self.mutation_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lb, self.ub)\n\n                # Crossover: Binomial crossover\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Stochastic Perturbation\n                if np.random.rand() < self.stochastic_perturbation_rate:\n                    perturbation = np.random.normal(0, 0.1, self.dim)\n                    trial_vector = np.clip(trial_vector + perturbation, self.lb, self.ub)\n\n                # Evaluate trial vector\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    new_population.append(trial_vector)\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial_vector\n                        best_fitness = trial_fitness\n                else:\n                    new_population.append(population[i])\n\n            population = np.array(new_population)\n\n            # Adaptive Parameter Control\n            self.mutation_factor = max(0.4, self.mutation_factor - self.adaptive_rate * (1.0 - num_evaluations / self.budget))\n            self.crossover_rate = min(0.95, self.crossover_rate + self.adaptive_rate * (num_evaluations / self.budget))\n\n        return best_solution, best_fitness", "name": "HybridDifferentialEvolution", "description": "A novel Hybrid Differential Evolution with Stochastic Perturbation and Adaptive Parameter Control for robust black-box optimization.", "configspace": "", "generation": 2, "fitness": 0.15866578577723733, "feedback": "The algorithm HybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.11.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.3279631810233541, 0.3370378505415319, 0.3396337627967335, 0.3439748094456023, 0.32155887215620127, 0.32378755257505276, 0.30951751839285224, 0.31902366292724404, 0.3306863665557972, 0.046241693146025, 0.05460052845593488, 0.04518597009496372, 0.057161856323654, 0.05402969736534602, 0.05969741759877378, 0.048927809466937866, 0.05048643759299176, 0.076137976791672, 0.08604864116731348, 0.07431460416452285, 0.07468870013147066, 0.09413631885051454, 0.0742691098777013, 0.08669634747728994, 0.08271962072773653, 0.08870386095615101, 0.08023409222847078, 0.0700700666766092, 0.07539871759121086, 0.0688888932123598, 0.0719234232737177, 0.07388062658879557, 0.07679352961389796, 0.07604965622128779, 0.06568533865751269, 0.0698822097105718, 0.31614856960943694, 0.6748105939403781, 0.29034393047881524, 0.29354937014484017, 0.6124753577719929, 0.6120009805818281, 0.5272362881996137, 0.43590683587919643, 0.7531365927993183, 0.13614511342844093, 0.1113114659376182, 0.136776655619532, 0.11681769716770163, 0.14588487101115188, 0.1251703578485709, 0.13574717253318047, 0.13325029299918, 0.13883179042265203, 0.2501267479278211, 0.23498894368561962, 0.26230335702637997, 0.23798333718923315, 0.2503239119652807, 0.2455807481557163, 0.23626104119313562, 0.26061779512667804, 0.26412924359645107, 0.09622636177529642, 0.1041550337945053, 0.1057220647788184, 0.08410879013349737, 0.09600657283298475, 0.09900142199263251, 0.08398159521912696, 0.09976379606404917, 0.1050773467409496, 0.09791439093656551, 0.0931105579427931, 0.10258265514567988, 0.10320754360032747, 0.09752458693682442, 0.11205452714622666, 0.10114983487875018, 0.09625016681397303, 0.10166421190210528, 0.021543045107880965, 0.0160108011272585, 0.03099888861510769, 0.037438439897506615, 0.0375740525960484, 0.03386972087251927, 0.035833805895802984, 0.022185086239624563, 0.020478595819934498, 0.14033698920243098, 0.15217903773506436, 0.14276970543957102, 0.12782193958856092, 0.13834042031640725, 0.16834196533707613, 0.14403589167212105, 0.16491888869598315, 0.15247790808393769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0069061751565946405, 9.999999999998899e-05, 9.999999999998899e-05, 0.061546823223634806, 0.060670181961644865, 0.057300253097374854, 0.06668215504190556, 0.06131792957355642, 0.060344517090208494, 0.06440706576902444, 0.05474953751959, 0.07093609236590404, 0.30005477916983403, 0.30623259775409306, 0.315915116972334, 0.30307199660268747, 0.3200110989850642, 0.3148784562420084, 0.32597125478551325, 0.31192831219313233, 0.3200753118070625, 0.07488874078098684, 0.08230751923681712, 0.0686948973469047, 0.07894240384812146, 0.09090932474107472, 0.07384796149154749, 0.08070908667955701, 0.0853434273857534, 0.07979082159039386, 0.1424688281470461, 0.12793208045880344, 0.14814900707952894, 0.15317315572620227, 0.1434238226863528, 0.13920434385675307, 0.12127552330750624, 0.1438563623243979, 0.13568027302538033, 0.21181571302843671, 0.21793531724442505, 0.2270609644223267, 0.22382960965071363, 0.22006928252220892, 0.22062405054417478, 0.23786403555550573, 0.23680174358640416, 0.2125954157978791, 0.15944928373569833, 0.17111262076275924, 0.17125680996009074, 0.1513775755230503, 0.16724264917272902, 0.1675805316186686, 0.15973176925098342, 0.1695541563220091, 0.18722083254466704, 0.18360746051009036, 0.19540779579955292, 0.1845236893177915, 0.18664543456689942, 0.1895022209575139, 0.17909293940390658, 0.19483139949281858, 0.19131903857627774, 0.2080399353835407, 0.1592900114774457, 0.1750414288898059, 0.17448662711711804, 0.16386648239974344, 0.18340788018450405, 0.16934519090420075, 0.16687529772917753, 0.16698608822185634, 0.17210883123564558, 0.2048822910308119, 0.19387664963299256, 0.18908793166319515, 0.19337718411059956, 0.22832785202462036, 0.1853023384105058, 0.18869873310083296, 0.1777205691921192, 0.2601025132555054, 0.20256870022350348, 0.22239322542971363, 0.20976586406818365, 0.17420627100986563, 0.20099432251042126, 0.21033669065323002, 0.20321809002368885, 0.1945256218125997, 0.19385964835488756, 0.1866577842696604, 0.19018640065905146, 0.19036254231201133, 0.24142465960526793, 0.18331732504228615, 0.1755564117114522, 0.18706274448650428, 0.20036961064242753, 0.18014737724988972, 0.07109587595362632, 0.06840799674444364, 0.08057941326826912, 0.0746631030451208, 0.06989744771833517, 0.06974059504473518, 0.06682449270859636, 0.07337195765063387, 0.07644972133325134]}, "mutation_prompt": null}
{"id": "c585a3e5-bd07-47c6-b1af-04dc79094c4d", "solution": "import numpy as np\n\nclass HybridGASA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (12 * dim)))\n        self.selection_pressure = 0.2\n        self.mutation_rate = 0.1\n        self.initial_temperature = 100\n        self.cooling_rate = 0.99\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_solution = population[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n        \n        temperature = self.initial_temperature\n        \n        while num_evaluations < self.budget:\n            # Selection\n            num_parents = int(self.selection_pressure * self.population_size)\n            best_indices = np.argsort(fitness)[:num_parents]\n            parents = population[best_indices]\n            \n            # Crossover\n            offspring = []\n            while len(offspring) < self.population_size - num_parents:\n                parents_indices = np.random.choice(num_parents, 2, replace=False)\n                parent1, parent2 = parents[parents_indices]\n                crossover_point = np.random.randint(1, self.dim)\n                child = np.concatenate((parent1[:crossover_point], parent2[crossover_point:]))\n                offspring.append(child)\n            \n            # Mutation\n            offspring = np.array(offspring)\n            mutation_mask = np.random.rand(*offspring.shape) < self.mutation_rate\n            mutation_values = np.random.uniform(self.lb, self.ub, offspring.shape)\n            offspring[mutation_mask] = mutation_values[mutation_mask]\n            \n            # Create new population\n            population = np.concatenate((parents, offspring))\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            fitness = np.array([func(ind) for ind in population])\n            num_evaluations += len(population)\n            \n            # Simulated Annealing Local Search\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                acceptance_prob = np.exp((fitness[i] - candidate_fitness) / (temperature + 1e-10))\n                if candidate_fitness < fitness[i] or np.random.rand() < acceptance_prob:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate\n                        best_fitness = candidate_fitness\n            \n            temperature *= self.cooling_rate\n        \n        return best_solution, best_fitness", "name": "HybridGASA", "description": "A novel Hybrid Genetic Algorithm combined with Simulated Annealing to leverage population diversity and local refinement for enhanced exploration and exploitation.", "configspace": "", "generation": 3, "fitness": 0.1891222183499037, "feedback": "The algorithm HybridGASA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.13.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.39249230201923635, 0.3782042633082847, 0.39560113748813575, 0.39545103774612567, 0.39604754669584785, 0.3883524647695563, 0.41364881515702223, 0.4039200565281592, 0.3868218410924873, 0.07894838422094164, 0.10683943914827454, 0.09099937826126703, 0.12664647178240152, 0.12233126191525912, 0.1407975644157008, 0.1023445656011911, 0.12850891394177866, 0.11390562066352272, 0.12637603228412642, 0.12767034105898634, 0.11903527916175993, 0.19198653448618397, 0.10478701683873859, 0.13185882125235016, 0.12264089409078938, 0.12433211950510636, 0.12341709418241098, 0.12613143460984444, 0.13538531127614606, 0.12142683499663764, 0.14655666940527912, 0.10415502861466541, 0.11573078822475913, 0.1303339409988845, 0.10232261859795089, 0.13256921379067443, 0.7309413249288846, 0.6958671176123836, 0.5300701720314619, 0.660228448495962, 0.6031014399014736, 0.5061591897934714, 0.660486409241763, 0.6509881850156085, 0.6379226236947051, 0.17166412152389843, 0.12672311381917156, 0.19344765356002425, 0.13948691537187075, 0.23673453905089514, 0.17841640216232224, 0.18853991401025816, 0.1901323906828306, 0.19445117782800236, 0.21141565850224087, 0.2728695684524025, 0.21352862155143348, 0.2496097817306956, 0.24185604231451108, 0.2820707203309353, 0.2786641970654269, 0.21141936673206485, 0.20898109388777153, 0.14299154107153733, 0.2113627586472394, 0.16133563064681544, 0.14139127076601, 0.12016531989348644, 0.15432253427022802, 0.15519355553925507, 0.17003640867982917, 0.1472117525022124, 0.11701624144930578, 0.12859423140881776, 0.14840892843508469, 0.124515887318567, 0.13995809396588577, 0.1554459396579828, 0.1258057310821481, 0.12941942864677602, 0.13269197422118395, 0.0002640076820640269, 9.999999999998899e-05, 0.02949965213522232, 0.002831550946964856, 9.999999999998899e-05, 9.999999999998899e-05, 0.020735502420931362, 9.999999999998899e-05, 0.013107153078983913, 0.08704162444084063, 0.10960423839414235, 0.11917316161632752, 0.06656070193983155, 0.09088050042768503, 0.03728953124820433, 0.1110738291599297, 0.07427115604626344, 0.07378462498617122, 9.999999999998899e-05, 0.00521612135027949, 0.04331873646662243, 0.020238735181161926, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018071775772033893, 9.999999999998899e-05, 9.999999999998899e-05, 0.07180254805164621, 0.07206672449630236, 0.07240074598662283, 0.09085973991021346, 0.09211003248149319, 0.07174274700878291, 0.09526214037247394, 0.08008976981709715, 0.08928019253751007, 0.35370132850082614, 0.37156588323906914, 0.3599966168515971, 0.36338799003200906, 0.3727678769762428, 0.34206672755202283, 0.3777105388460248, 0.35110773692032093, 0.358862877854338, 0.10026091031568518, 0.09792037685873034, 0.10634544017521452, 0.11135925960614912, 0.09273364080370938, 0.1260374214638823, 0.11188923645982995, 0.10228555102311243, 0.09177115937011182, 0.21993465644153687, 0.18962428846652812, 0.22629228305144178, 0.216756185783617, 0.1946607704747344, 0.21711037231436836, 0.17267886636582275, 0.15279537116600928, 0.15560957572305856, 0.25925974092514026, 0.24843616914320454, 0.26616046031140506, 0.24255916394592014, 0.26610482525326273, 0.2501766434470748, 0.2537348347224252, 0.2852237674166036, 0.2659952370271631, 0.20011799716337686, 0.20509713768655924, 0.21486193607919746, 0.16774051634421372, 0.20091122173333487, 0.20129902172759606, 0.18246375247973734, 0.2093605325460025, 0.17573684713546067, 0.22738467668116735, 0.20493076285902845, 0.21669398723932154, 0.20583207947312698, 0.23723614910131596, 0.19279734164246198, 0.2402511775504106, 0.18699738639688934, 0.22882947030247347, 0.18982041690599416, 0.20169484835850904, 0.20307121868104017, 0.22158164169377303, 0.23529015789264718, 0.20524753552969754, 0.2090720972219603, 0.19127442306822962, 0.20103249489076125, 0.16703869703014496, 0.1623689401791113, 0.18253207815219363, 0.4346068184158882, 0.17624939312780374, 0.19154235108465645, 0.13489751997493638, 0.1538014402790151, 0.33016992190321104, 0.2757774575553462, 0.19740911376584613, 0.21639741777388388, 0.1618918353246609, 0.4737525316912998, 0.2530852496921059, 0.1986556281353461, 0.16240181012428168, 0.16192994101028324, 0.19413041447431523, 0.18781341646120708, 0.17977446662702734, 0.18637772287048116, 0.18324354570208257, 0.17686104003037784, 0.18802742431774755, 0.18815701034907362, 0.18442433362932853, 0.08659187573713056, 0.07776287986836383, 0.08914872125759632, 0.08905649078817846, 0.0846413194120118, 0.09024261269486722, 0.07958244200136633, 0.07880542882634778, 0.07630615871290702]}, "mutation_prompt": null}
{"id": "38d445f7-c35d-4259-a19a-ff69f9789de7", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.9\n        self.local_perturbation_rate = 0.2  # local perturbation for intensification\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n        best_fitness = fitness[best_index]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant = x1 + self.mutation_factor * (x2 - x3)\n                mutant = np.clip(mutant, self.lb, self.ub)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                num_evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n\n            # Local Perturbation on best solutions to enhance exploration\n            num_perturbations = int(self.local_perturbation_rate * self.population_size)\n            top_indices = np.argsort(fitness)[:num_perturbations]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < fitness[i]:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate\n                        best_fitness = candidate_fitness\n        \n        return best_solution, best_fitness", "name": "HybridDifferentialEvolution", "description": "A Hybrid Differential Evolution with Adaptive Crossover Rates and Local Perturbation for balancing diversity and convergence speed in black-box optimization.", "configspace": "", "generation": 4, "fitness": 0.1870249631269416, "feedback": "The algorithm HybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.37255032070702887, 0.3791583165577982, 0.38549844048025494, 0.35882052051903446, 0.3932884827801476, 0.3735955175612723, 0.37735448053210674, 0.3702181200441812, 0.3730122410453961, 0.08751041695325457, 0.09929468043969736, 0.09550242553354549, 0.09223676471749409, 0.09280279096566979, 0.08443452848799593, 0.09469064395984528, 0.09825521217195032, 0.07563534095219804, 0.09282430432261446, 0.10575066852974613, 0.08889363667358963, 0.09043433377690713, 0.0903620371327879, 0.09120206943669384, 0.09278748223056155, 0.0932766405473816, 0.08883695692626292, 0.08434908816214415, 0.07361957653697193, 0.09289956665246879, 0.0818404454444539, 0.07937336560323383, 0.06837670425307096, 0.08050040129442126, 0.07895816119805132, 0.06687350517780866, 0.8836051240791623, 0.857475110113594, 0.8275890604443035, 0.7226819784411835, 0.7164754177732399, 0.7460776214347025, 0.7830878327426182, 0.830956755660391, 0.8292407745810825, 0.1549175712267723, 0.1729497371010721, 0.16147490606818515, 0.14264200843052965, 0.16266042470204323, 0.15347673429538167, 0.16677557044815472, 0.16620911666361027, 0.18747469148069107, 0.22882634149504577, 0.2551938252852535, 0.26193944572434724, 0.22663291224352133, 0.2645565150035043, 0.443778505246475, 0.24912193578210795, 0.2786069488967772, 0.2633205882841617, 0.10946855784818743, 0.13578987946148058, 0.11927270548981583, 0.10149737402443892, 0.10350610851095021, 0.10657018146494135, 0.10788200052113184, 0.10977625557820303, 0.1377419802708948, 0.09803455916518922, 0.09937868400161465, 0.12242940914403522, 0.11807283176630468, 0.12858701991042676, 0.13722250705446182, 0.10482654550590687, 0.11478090427034915, 0.11228231555138024, 0.013831168470594069, 0.026471426345939464, 0.016744211834408218, 0.016884078567807048, 0.023029726192521638, 0.018135222786007987, 0.019844600107047916, 0.03574328504509516, 0.018448904569893232, 0.13485438505102754, 0.11843541414265712, 0.1308728885812761, 0.1268480866351276, 0.12248045093488891, 0.12465541010403436, 0.13934887777798144, 0.14474085083070476, 0.13745958553166182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002133638878267785, 0.08142222965804669, 0.0758578232131395, 0.07492634963382006, 0.07968676395926522, 0.06396820809627479, 0.06604610898034158, 0.07291348800550246, 0.07671818821904886, 0.09762807177632271, 0.33140451415764705, 0.33425515247495374, 0.3441488849115809, 0.3452555674262716, 0.3492184216496267, 0.3601470330110347, 0.34575354291133675, 0.3471373544712757, 0.3338156001361531, 0.08627310197689964, 0.09961368844771912, 0.09931392750135015, 0.09465726320138945, 0.09134482536980526, 0.08242965563245086, 0.0877098746687689, 0.10357618115643141, 0.08617897565879451, 0.16058908134290883, 0.20517102020817646, 0.18693110166064453, 0.18467583201347293, 0.21916266221987635, 0.1563393425434324, 0.19748634365572815, 0.1948058204661285, 0.15749480179682485, 0.22066454869043484, 0.21989512722532512, 0.2309131892764631, 0.2231781476103898, 0.22008917814621332, 0.2239090092912267, 0.23471230212869565, 0.24838970710803532, 0.23581988343723315, 0.16928074929403114, 0.1725143993837257, 0.16612021395010057, 0.18560222477875976, 0.17243990277750998, 0.1842675058492811, 0.17332190441416184, 0.18672726609481316, 0.17696662679633557, 0.18749442667984395, 0.18377645470353055, 0.19335027132053495, 0.19446466016103214, 0.21382910959627677, 0.191907675714714, 0.19546050551927352, 0.1969971858642281, 0.18622727551756013, 0.17667232707799718, 0.1814088845430769, 0.17955242251649706, 0.17313316258262834, 0.18626713435375664, 0.19049440944601004, 0.17566649486772634, 0.17233707897255668, 0.1828239317931103, 0.16792294041285782, 0.2156696233194222, 0.25569005537670186, 0.3315771534666859, 0.32785328290715665, 0.18890217961500255, 0.19526845751941768, 0.22136005743612275, 0.18541444974479793, 0.2855191343025675, 0.20419810918392545, 0.34251261248375287, 0.23484166563157005, 0.276304526937315, 0.21646749558130973, 0.3016826352149371, 0.21654633224805608, 0.2988474110753758, 0.18628361719199216, 0.20060267641479668, 0.18535764282819012, 0.17944736376681925, 0.18656688062431592, 0.17896950550441104, 0.18652532179550863, 0.18629513830740485, 0.19015962710806011, 0.06346531649009701, 0.07916507155679409, 0.06683962737796989, 0.07285796320177507, 0.08297113311434645, 0.07260274837156144, 0.06929053964504783, 0.06734994949068207, 0.07368401659450197]}, "mutation_prompt": null}
{"id": "17cd47b5-f390-40cb-bf09-f16768734702", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "847d39a7-8eb7-4289-bfd0-137b1bb2cd3e", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "7e696a22-d2c4-4d8d-8d83-9f6b71d8bc7d", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "f0d28188-47ee-4a35-8ebc-f0a2e9992208", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))\n        self.mutation_rate = 0.1\n        self.rotation_angle = 0.05\n\n    def __call__(self, func):\n        # Initialize quantum bits (position) and make copies for personal/global best\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Quantum rotation update\n            for i in range(self.population_size):\n                rotation_vector = np.random.uniform(-self.rotation_angle, self.rotation_angle, self.dim)\n                population[i] = population[i] + rotation_vector * np.sign(global_best - population[i])\n                population[i] = np.clip(population[i], self.lb, self.ub)\n            \n            # Evaluate new solutions and update personal/global bests\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Adaptive mutation to maintain diversity\n            mutation_strength = self.mutation_rate * (1 - num_evaluations / self.budget)\n            for i in range(self.population_size):\n                if np.random.rand() < mutation_strength:\n                    mutation_vector = np.random.normal(0, 0.1, self.dim)\n                    candidate = personal_best[i] + mutation_vector\n                    candidate = np.clip(candidate, self.lb, self.ub)\n                    candidate_fitness = func(candidate)\n                    num_evaluations += 1\n                    if candidate_fitness < personal_best_fitness[i]:\n                        personal_best[i] = candidate\n                        personal_best_fitness[i] = candidate_fitness\n                        if candidate_fitness < global_best_fitness:\n                            global_best = candidate\n                            global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Quantum-Inspired Evolutionary Algorithm (QIEA) utilizing a quantum rotation gate for solution encoding and a novel adaptive mutation strategy to maintain diversity and improve convergence in black-box optimization.", "configspace": "", "generation": 8, "fitness": 0.06752087999407264, "feedback": "The algorithm QuantumInspiredEvolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.16834045273823017, 0.1717216833819537, 0.10207536263359163, 0.13112642370491867, 0.12721294945966566, 0.11132664043365381, 0.10375702720348512, 0.0778080123068412, 0.11435801561076442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01339753584342085, 0.03499451212265503, 0.033499981940628976, 0.025327209177977816, 0.025867771732074107, 0.04655683118865217, 0.030673839364583344, 0.03723542247079914, 0.03680783343494498, 0.011746454033233378, 0.01652864058138226, 0.015883098294851905, 0.03196585510465544, 0.008562568813058724, 0.00816557592360545, 0.020612524154744682, 0.023652960354264896, 0.0050294845583260805, 0.04838424878737857, 0.0696175742464562, 0.05823541065093363, 0.05610519783106227, 0.08032688292695478, 0.06333554600665214, 0.06606205210651983, 0.06141821694187488, 0.053524510250068325, 0.06274794416174423, 0.038887418529029105, 0.10883710140610658, 0.040069453688143186, 0.06264759282591892, 9.999999999998899e-05, 9.999999999998899e-05, 0.018291209584693546, 0.09999428313733316, 0.12168603555641899, 0.08224659834595494, 0.0948753956608609, 0.06968437686002837, 0.07285119553694963, 0.10481320346214218, 0.05164030926337271, 0.10538735338755245, 0.10181361867241467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024390053116055244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022198578547134473, 0.031046264589983497, 0.04353671279785454, 0.05287606515358989, 0.03025025665114678, 0.01363508078183917, 0.04622031647664715, 0.06454843938344079, 0.030815298720216044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1428276448036273, 0.16009274897212722, 0.16344663908731272, 0.12188685467168192, 0.1714511066506922, 0.1255861060920248, 0.18843213879753506, 0.12975083816630595, 0.13901626606773665, 0.03309048534406922, 0.0337426264323758, 0.026440479846213782, 0.03266886175302153, 0.025917609624658722, 0.03686807763750766, 0.020308496866226933, 0.0276190771449073, 0.027903614174184077, 0.13709410100555053, 0.13874464278753385, 0.1302034176058996, 0.1466753798349002, 0.14406092608448684, 0.12270761542982822, 0.13277106534658611, 0.12446395524224008, 0.11292969859898061, 0.136142071676973, 0.13022218845505373, 0.1613932299901244, 0.14792302263326496, 0.13884124500914152, 0.161856142914947, 0.13621687548011618, 0.17377774300845283, 0.14023189477034226, 0.0755801068798253, 0.07312423542032753, 0.09703353795279923, 0.10358716012579094, 0.08578923198705346, 0.09793549997287943, 0.0837317855149382, 0.1100652548276203, 0.07781039660225508, 0.150907744647636, 0.13822563955338685, 0.1454680709219197, 0.16625283363879584, 0.15759919819830048, 0.14322850054465563, 0.143507197339236, 0.17323073071927197, 0.15926345426986066, 9.999999999998899e-05, 0.06963643255328789, 9.999999999998899e-05, 9.999999999998899e-05, 0.12680551929410044, 0.11344267997729562, 9.999999999998899e-05, 0.03568601805992422, 0.16207881422481074, 0.10630450851969886, 0.11190003736317045, 0.10163502711318961, 0.09894825518636607, 0.12296101249382352, 0.0814654451935235, 0.11421813022454119, 0.13386257390705947, 0.12507265840262694, 0.12068463987723077, 0.10958932020774481, 0.10945721536423803, 0.08589923433326552, 0.07566481732610952, 0.08182641787681222, 0.16568186104211813, 0.07056741774585185, 0.08689585890012408, 0.17738288836548488, 0.18493588227770164, 0.18949500316663181, 0.2136271898814961, 0.18376560150098853, 0.1783458883150839, 0.2129501594033203, 0.20434959070489978, 0.18198057870571327, 0.039387106938798544, 0.05037391259128854, 0.047334368798993776, 0.05261412111557129, 0.05917125491488928, 0.04409295559188853, 0.06214286654401657, 0.05070019456311836, 0.04279669041827383]}, "mutation_prompt": null}
{"id": "a07cfb88-d934-4033-a905-d2cee0f54158", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "d83057c9-53c8-48f1-b3b2-3b2b679cae6e", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "953fd897-14a0-4724-ad7f-67d2d8438e0f", "solution": "import numpy as np\n\nclass HybridGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.adaptive_factor = 0.1\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        while num_evaluations < self.budget:\n            # Mutation and Crossover\n            new_population = np.zeros_like(population)\n            for i in range(self.population_size):\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(crossover_mask, mutant, population[i])\n                new_fitness = func(trial)\n                num_evaluations += 1\n                \n                if new_fitness < fitness[i]:\n                    new_population[i] = trial\n                    fitness[i] = new_fitness\n                else:\n                    new_population[i] = population[i]\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Adaptive crossover adjustment\n            self.crossover_rate = max(0.1, self.crossover_rate - self.adaptive_factor * (np.mean(fitness) / np.min(fitness)))\n            population = new_population\n        \n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridGeneticAlgorithm", "description": "A Hybrid Genetic Algorithm with Differential Mutation and Adaptive Crossover to enhance exploration and exploitation in diverse search landscapes.", "configspace": "", "generation": 11, "fitness": 0.14886828282125195, "feedback": "The algorithm HybridGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.30520997958413254, 0.3029303301336519, 0.30641665205749635, 0.3054608197111418, 0.3001220299153664, 0.30109662908123525, 0.31381382682551473, 0.30180337946924585, 0.315623752352041, 0.010932249379894121, 0.018058549395964074, 0.010342332681434363, 0.010667838109005068, 0.011953324970947699, 0.010751728895728951, 0.015044906576581862, 0.008227490379990599, 0.01091880063722106, 0.09481781881439932, 0.100332070609921, 0.10085447878094533, 0.1077710213636559, 0.08473436214390873, 0.0918168090548066, 0.1006857577010356, 0.08314585379321959, 0.08937586759642324, 0.07924318005625575, 0.07163358907625772, 0.0757095829178166, 0.08989723536143679, 0.0739249416447687, 0.07771156400756352, 0.08008042317959685, 0.0792628941932717, 0.08740493055892129, 0.8944974355989758, 0.7803944829614234, 0.8746138880949871, 0.8380211890757856, 0.875808837212726, 0.8704639293897277, 0.8556745759338577, 0.8211526532738436, 0.85525502341535, 0.10412502278817115, 0.12076566349302487, 0.11230441860998108, 0.11631720407076096, 0.10497145359894366, 0.07965972274055422, 0.13737751874339177, 0.10570686987471545, 0.11281863939115833, 0.15598128515615917, 0.17590434673523303, 0.15414532235663414, 0.17405158414193123, 0.14720003965917128, 0.16372253626949618, 0.12268488155397406, 0.15864135662594525, 0.1460610255087973, 0.06146227532497961, 0.07028743806476179, 0.06359925528417754, 0.06849012655271891, 0.0491212218033692, 0.05278728139167366, 0.06951879907649983, 0.04820240839094336, 0.0895302567098728, 0.042584992301467506, 0.05029730970965485, 0.06101052652103267, 0.061194200873442295, 0.0630185790288238, 0.06372312847151607, 0.04961269560491599, 0.06515648617099101, 0.08307455193927193, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044201053277948654, 0.0489520156831742, 0.040684738370301066, 0.08893105868569617, 0.0448831952895975, 0.11894653234731489, 0.07248255175424423, 0.04908099863785864, 0.07117228083282412, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03250435282147013, 0.035485080718297146, 0.010547176854756257, 0.010006770102826024, 0.015276165548006815, 0.00955371868104593, 0.03310603403185164, 0.026392885765963214, 0.034326867264418026, 0.24404988954541373, 0.260010777261773, 0.27514727631458313, 0.2673071319716457, 0.26950430524186153, 0.25553649458372263, 0.27575119995077657, 0.2503139891505549, 0.24429553625792577, 0.06347459584473092, 0.0637134155680138, 0.07471958705742077, 0.06533783116872527, 0.0633315038515273, 0.059014179152275026, 0.05417609083166697, 0.06041471928737896, 0.07847399926169296, 0.16639880348112768, 0.15518759466147547, 0.13844101372213713, 0.1499728249062755, 0.14269598885152845, 0.13994136616671493, 0.15369637820356707, 0.13995683804160253, 0.1518142276238703, 0.18203488750627794, 0.17220960758059123, 0.18282797991374944, 0.19354025025776944, 0.17318055840942015, 0.20074955304287279, 0.18882395255320628, 0.1930003724140078, 0.19630659986143073, 0.13381096733356956, 0.12486661920678122, 0.13160497655366143, 0.14589991397276247, 0.12155977055458023, 0.1347200955518436, 0.1374256183087531, 0.12415453376076979, 0.12699899904945755, 0.18618948767093835, 0.17648712246787057, 0.17847579615626186, 0.20328682344268767, 0.16937045887586122, 0.1741222393259677, 0.18783336479134605, 0.1692313194787517, 0.17676691758350171, 0.13909639607778934, 0.15182345538161213, 0.1566080793165846, 0.17067938080799594, 0.17271304704840784, 0.1865183325367048, 0.16645159668184462, 0.17121976073476763, 0.17649534098444164, 0.15769709763035822, 0.17430833830689318, 0.16123635452160323, 0.17828091436497184, 0.16952613688471707, 0.1811422649268668, 0.16109055055836308, 0.17620964985998055, 0.2364384534284213, 0.1655971747308599, 0.1839522881952228, 0.25806789205635516, 0.1616166753311079, 0.1547706345165516, 0.17633646246541723, 0.20674442332780796, 0.2152386796774003, 0.1806683105612692, 0.16988383034798404, 0.1887835469245931, 0.19019401571061, 0.18515780841076046, 0.1741156140524336, 0.1851040173614864, 0.18353892731783517, 0.20153575379841637, 0.1936626622006543, 0.061267316769729074, 0.06494264057376209, 0.06177971796016679, 0.06171818843793275, 0.06441556225071776, 0.058239738087473625, 0.059918387165338705, 0.061950522861764834, 0.06355388748654334]}, "mutation_prompt": null}
{"id": "8b922146-6422-4b60-a4cd-558198bc71de", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "afba4fe9-855e-47bd-ba9e-687f8e06a5ee", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "98d69d78-83ff-41b2-8bdc-0635ed7e702a", "solution": "import numpy as np\n\nclass HybridQuantumEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(10, int(budget / (5 * dim)))  # heuristic for population size\n        self.alpha = 0.5  # quantum crossover weight\n        self.beta = 0.8  # differential weight\n        self.crossover_rate = 0.7\n\n    def __call__(self, func):\n        # Initialize the quantum-inspired population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n\n        # Quantum state superposition\n        q_population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n\n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum crossover to enhance diversity\n                q_population[i] = self.alpha * population[i] + (1 - self.alpha) * q_population[i]\n                q_population[i] = np.clip(q_population[i], self.lb, self.ub)\n\n            # Differential evolution step\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = a + self.beta * (b - c)\n                mutant = np.clip(mutant, self.lb, self.ub)\n\n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(crossover, mutant, q_population[i])\n                trial_fitness = func(trial)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best, global_best_fitness", "name": "HybridQuantumEvolutionaryAlgorithm", "description": "A Hybrid Quantum-Inspired Evolutionary Algorithm utilizing quantum superposition states for enhanced population diversity and a differential evolution-based update mechanism for robust convergence in black-box optimization.", "configspace": "", "generation": 14, "fitness": 0.11597131398357732, "feedback": "The algorithm HybridQuantumEvolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.24187804478073005, 0.24530418432482093, 0.22972950887781263, 0.23875217576641883, 0.2344656779416573, 0.25650099844319774, 0.24039111078386333, 0.22402646516939884, 0.23844146571849323, 0.002984594499456983, 0.0002858661047876465, 0.003455469821219581, 0.00223723150000954, 0.002334517007265502, 0.001768780965257788, 0.0004975433295305587, 0.0015968137877331312, 0.005647748303270417, 0.0586392903387124, 0.07601820541774995, 0.07564076367694594, 0.06554574146725223, 0.07741919037168266, 0.06292777459184595, 0.07637848570352512, 0.07177908432556501, 0.06970350177534546, 0.04386372133064853, 0.04979319821355188, 0.04862235681444216, 0.04956502208762137, 0.06009758941644783, 0.055246464704628684, 0.048715164083461215, 0.04630184930291348, 0.04375830044396989, 0.3774442328365367, 0.24038692362066671, 0.649535589101737, 0.2429324678654171, 0.35614588552297166, 0.28252802048842274, 0.21252425725658464, 0.24102859915711383, 0.2326496676521591, 0.07974289812995827, 0.08197887239699997, 0.11036654022445003, 0.10983361700050631, 0.07627202616302198, 0.06846317366061738, 0.09861186555827184, 0.08948016494752686, 0.11852132729590958, 0.1615519774216131, 0.19308637766117165, 0.13607881539494215, 0.15802249652357936, 0.16102986642876493, 0.1553573645779821, 0.15784953977170957, 0.1604233976944024, 0.19959116555916212, 0.026088792198989408, 0.022038886451719364, 0.03854843687010434, 0.03560815621521962, 0.05026935528836185, 0.03776677440270504, 0.03557889654970259, 0.043179284425018394, 0.039971586146746674, 0.018797680649186965, 0.06587763832304394, 0.029713154456881385, 0.029108949492895442, 0.05613029488396204, 0.0370902403304646, 0.021394207804670495, 0.019862370620911673, 0.02480352898564686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08567715884029181, 0.06535045920481664, 0.059520314214242864, 0.05011409174970072, 0.07144646826892131, 0.04768774945576659, 0.06634346659020007, 0.05649547922082698, 0.06599932186956337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024376891499860887, 0.01810323511342926, 0.013165096879515614, 0.00974416755288443, 0.010851531671487114, 0.014634137073714526, 0.015751570862035935, 0.025595254099031406, 0.018840873771396538, 0.2353994893612833, 0.2468217897230215, 0.22964602162061187, 0.23596003981639013, 0.23931852046593427, 0.23236227206345828, 0.23408497178691845, 0.24332119199069036, 0.2210016851622284, 0.06192712317174154, 0.061860778084776524, 0.06793744933232737, 0.06421636872304914, 0.05816513096039655, 0.0697578577067719, 0.06345157453541828, 0.05397891764819651, 0.05892118278547076, 0.13983720901876928, 0.13333617407891618, 0.1403395657393205, 0.1494925184837551, 0.14260712497077477, 0.1513696630010538, 0.14963138758589234, 0.1479082986922332, 0.16009993856873994, 0.1815375183962008, 0.1763918272907382, 0.17013416812035498, 0.17223447821581161, 0.1694367532932356, 0.189396389505732, 0.1771818995491713, 0.19266907018139512, 0.1980494757482908, 0.14068826972205173, 0.1196864664559586, 0.12329810309434885, 0.1378831146594861, 0.132262297896525, 0.1210841690872887, 0.12129858342055455, 0.12939830909980232, 0.11537590864232095, 0.2051643834509943, 0.1781166697191625, 0.17187559719249024, 0.16777814385261514, 0.16445409078485407, 0.16932604475808843, 0.17089143608467816, 0.15506197571658054, 0.18257809259401003, 0.15783742621224717, 0.15996236402059694, 0.14908554172504396, 0.15861474706808254, 0.16350644095083733, 0.15878221920723679, 0.1502329704168156, 0.16132640056307324, 0.17196946737955332, 0.1462477758077102, 0.2311836728838641, 0.19479157581568407, 0.19772064291295754, 0.2689792137221404, 0.16825244324900324, 0.1643626191684432, 0.18411342825272892, 0.15932024156171842, 0.2554748664621648, 0.1540049321210024, 0.2020153011965694, 0.16200095016672056, 0.15992432098926979, 0.1629530571810447, 0.17115689253821564, 0.16800278839171368, 0.16732677406421537, 0.18054430948390543, 0.18855519458333958, 0.1829615826052725, 0.1732987450070015, 0.189635406199666, 0.17799407840341808, 0.17825276187936911, 0.1794904758684197, 0.191051513286018, 0.05540156516725414, 0.0640725470893938, 0.08109960681092465, 0.06388802496188839, 0.062287274557008665, 0.06016282110003335, 0.0663114903231512, 0.05977650963892356, 0.06478682471083141]}, "mutation_prompt": null}
{"id": "f66114bf-e1d4-4162-93cd-9f41b0ee4910", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.qbits = np.pi / 4 * np.ones((self.population_size, self.dim))  # initial Q-bit angles\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.observation_rate = 0.1  # rate for observing quantum states\n\n    def __call__(self, func):\n        def observe(qbits):\n            # Convert quantum bits to binary and then to real values\n            binary_population = (np.random.rand(*qbits.shape) < np.sin(qbits)**2).astype(int)\n            real_population = self.lb + (self.ub - self.lb) * binary_population\n            return real_population\n\n        num_evaluations = 0\n        while num_evaluations < self.budget:\n            # Observe the quantum states\n            population = observe(self.qbits)\n            fitness = np.array([func(ind) for ind in population])\n            num_evaluations += self.population_size\n\n            # Update the best solution found so far\n            for i in range(self.population_size):\n                if fitness[i] < self.best_fitness:\n                    self.best_solution = population[i]\n                    self.best_fitness = fitness[i]\n\n            # Update quantum bits based on fitness\n            for i in range(self.population_size):\n                if fitness[i] < self.best_fitness:\n                    # Apply rotation gates - use a small angle change\n                    delta_theta = np.pi / 180\n                    self.qbits[i] += np.sign(np.random.rand(self.dim) - 0.5) * delta_theta\n                    self.qbits[i] = np.clip(self.qbits[i], 0, np.pi / 2)\n\n            # Occasionally, re-observe with increased variability\n            if np.random.rand() < self.observation_rate:\n                self.qbits = np.pi / 4 * np.ones((self.population_size, self.dim))\n\n        return self.best_solution, self.best_fitness", "name": "QuantumInspiredEvolutionaryAlgorithm", "description": "Quantum-inspired Evolutionary Algorithm (QEA) using quantum bit representation and rotation gates to achieve enhanced diversity and convergence in black-box optimization.", "configspace": "", "generation": 15, "fitness": 0.06350868759044828, "feedback": "The algorithm QuantumInspiredEvolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.20.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.015302829511479876, 0.015320693573752986, 0.015320983044116998, 0.05940024346639561, 0.059453970360646924, 0.05948221123096609, 0.03163723810603647, 0.03163545413880964, 0.03159865748605384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9956028112039822, 0.9999, 0.99459, 0.9979145159395508, 0.9993183734447786, 0.9993075, 0.9979778344587222, 0.9976051713946948, 0.9992155622407964, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058375341032481765, 0.05837705780066116, 0.05814693445424057, 0.06053068747340873, 0.06056079873233988, 0.06061540391314335, 0.08487488876005722, 0.08475672327302586, 0.08466918465034645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09332986036190849, 0.09328391734400643, 0.09340491151738184, 0.07670741282605864, 0.07669041341735339, 0.07667119876702322, 0.07291855666157376, 0.07292719871725295, 0.07269397141290823, 0.06674103141823284, 0.06681563397922541, 0.0667500550207355, 0.08237118496636375, 0.0824397227954814, 0.08243968087116427, 0.08262951120322681, 0.0825491805373173, 0.08264740968033324, 0.020039090580685648, 0.02008747314069892, 0.020094368968328724, 0.04110812151500809, 0.04111262658202086, 0.04116363509284382, 0.028643405587292503, 0.028673880879046543, 0.028566042748740417, 0.05064898613910118, 0.050629833460496765, 0.050719918317817414, 0.03375343281584886, 0.033781504601750556, 0.03374364700708299, 0.04272868067279356, 0.0427774934107098, 0.04279278834826128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0763448243186855, 0.07637018514564609, 0.07639755027430783, 0.0330858433933936, 0.03302800820022911, 0.03307659201873381, 0.01815420185777894, 0.018155702769364734, 0.0181576623993831, 0.013878848260268195, 0.013881691903802729, 0.013861126448953653, 0.014805556832851785, 0.014804810219214648, 0.014814218436846938, 0.01681305281253187, 0.016816853857905545, 0.01675012193836445, 0.11291987555774285, 0.11287621677357329, 0.11291051726773271, 0.15000709892685915, 0.15011031844720746, 0.14999511609336624, 0.13688995442837726, 0.13690914790760766, 0.13689457198954047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "84b48b3f-656f-4132-8314-718ec9aa8aa8", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "783262df-49d6-43e0-8b25-85cab096e089", "solution": "import numpy as np\n\nclass HybridGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(10, int(budget / (15 * dim)))  # heuristic for population size\n        self.mutation_scale = 0.5  # scale for differential mutation\n        self.crossover_rate = 0.7  # probability of crossover\n        self.adaptive_topology_rate = 0.2  # fraction of population to adaptively change topology\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        while num_evaluations < self.budget:\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Select parents for crossover\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[indices[0]], population[indices[1]], population[indices[2]]\n                \n                # Differential mutation and crossover\n                mutant = a + self.mutation_scale * (b - c)\n                mutant = np.clip(mutant, self.lb, self.ub)\n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                num_evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial\n                    fitness[i] = trial_fitness\n            \n            # Adaptive Topology Change\n            num_topology_change = int(self.adaptive_topology_rate * self.population_size)\n            worst_indices = np.argsort(fitness)[-num_topology_change:]\n            for i in worst_indices:\n                if num_evaluations >= self.budget:\n                    break\n                new_population[i] = np.random.uniform(self.lb, self.ub, self.dim)\n                fitness[i] = func(new_population[i])\n                num_evaluations += 1\n            \n            population = new_population\n        \n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridGeneticAlgorithm", "description": "Hybrid Genetic Algorithm with Dynamic Topology and Differential Mutation to enhance exploration and fine-tuning of solutions in black-box optimization.", "configspace": "", "generation": 17, "fitness": 0.16292575069593915, "feedback": "The algorithm HybridGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.341788129731305, 0.32963837250726225, 0.34078021523338364, 0.32452758856934183, 0.31395152246418734, 0.32517531097667385, 0.3203413592675304, 0.3295190278254083, 0.3197628533095318, 0.05221804934844054, 0.04556258437488303, 0.05389191652047143, 0.06785660589140585, 0.04821153776601439, 0.05743907165004314, 0.05939188987793109, 0.05891165050988734, 0.049052371377453885, 0.0937746205232457, 0.09077014823128304, 0.08098982449741055, 0.08540803953415377, 0.07535749702328853, 0.0871227569809514, 0.09646685685926604, 0.08775297868608578, 0.08327176834976413, 0.072322850367606, 0.07715991108435405, 0.07763360956509857, 0.06801349547489133, 0.07120310806207597, 0.077171086270854, 0.07255314725941808, 0.07056004801281923, 0.07522999715135359, 0.8929347799170173, 0.8835514415521336, 0.838802467325471, 0.898286540432318, 0.849604885379109, 0.8661400395761296, 0.8598945065407384, 0.9083742944824811, 0.8901977577615191, 0.11961191650568148, 0.1437822518752151, 0.11578937115020249, 0.12826390663593046, 0.12074375470610266, 0.1278479656546273, 0.12065165090463326, 0.13567015229179102, 0.1265993167706203, 0.17607657117812192, 0.17570624339257757, 0.18312221299830933, 0.18248457776308857, 0.2027354020713784, 0.17800884472652612, 0.1735973334131119, 0.18634925419746506, 0.1989085475665936, 0.07572505855635425, 0.07943220189263123, 0.0825403854030925, 0.08099682459635948, 0.08192509158386041, 0.06999407084431564, 0.08895845356068244, 0.0908539210907835, 0.1057335346417525, 0.09735371401584503, 0.08719932384229856, 0.07262145844679613, 0.0916525273048131, 0.10704135604268938, 0.10811848816939129, 0.09118531230384963, 0.085378389024102, 0.07478758080626502, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07359999935893324, 0.08386603685808092, 0.08027352658198939, 0.0657764915861675, 0.07388349711708486, 0.07709670932096901, 0.08562957197880383, 0.09345443963757061, 0.09784889573766253, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03249834323101497, 0.03286646348225586, 0.040574181076961424, 0.03511750324237217, 0.0385883598398552, 0.03992710195720939, 0.03316586987871928, 0.03884689007083819, 0.04063116600539629, 0.3000512391534583, 0.30606259953682724, 0.3131168986953137, 0.2830809442561758, 0.3027034619046278, 0.3431788909832858, 0.304999219644712, 0.32278639604311954, 0.2946066069320249, 0.08221782580438508, 0.07348356396849143, 0.07397022107048945, 0.06631000649131258, 0.07152888593786122, 0.06420753987548233, 0.0747154652475518, 0.05843982719825802, 0.1006147354413266, 0.1583264543384617, 0.1344220657235139, 0.14168861037952718, 0.13766266535167793, 0.15566477352520636, 0.14489889911363985, 0.15670474077806573, 0.1477815476601172, 0.1209851102694296, 0.203587118353735, 0.2111473038771774, 0.2121062444451639, 0.20716732504888835, 0.20357277452439626, 0.2168604930095348, 0.2202960880215279, 0.2301910856888706, 0.21079465211456783, 0.1560333783049508, 0.14040706889654953, 0.15175537277280204, 0.14253911707917089, 0.15020023837284902, 0.14163492854903292, 0.16077781632617805, 0.1688652263689957, 0.14571585486961436, 0.1721658690098069, 0.17245668087533672, 0.19760999678082702, 0.16063056763101302, 0.17674767240662637, 0.17961274168079577, 0.17548541389515393, 0.19191858749161372, 0.18710466497724587, 0.1780192795830844, 0.16151543346951036, 0.17025974945952116, 0.16174290266510238, 0.17621413188884927, 0.16363971256540188, 0.1686302935091757, 0.16340291060594758, 0.17743261201304872, 0.2216441546611252, 0.17541019744552577, 0.2116861925608987, 0.19631851206967, 0.19320461029908842, 0.2634970424192902, 0.15893963604200323, 0.15679630795666322, 0.1922629563838364, 0.16598608265063597, 0.16248621979154576, 0.18074157913755295, 0.22330345172486732, 0.18876760698616257, 0.20515182724654546, 0.20116044463959315, 0.21311095808543035, 0.23793355211319434, 0.1812521017767451, 0.20395619394389253, 0.18282856407891146, 0.19658137619084326, 0.18886096462821444, 0.18892787771959252, 0.1989950937146543, 0.17882622987675312, 0.18251273346305608, 0.06843571983175423, 0.06413091910280622, 0.0677182024905203, 0.07159498384758733, 0.0638105275438775, 0.06519398733890336, 0.06813270957101214, 0.061427398545779166, 0.06646420499618888]}, "mutation_prompt": null}
{"id": "f9160c69-b468-4a97-913f-19049a8000bc", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "03a3029f-0619-4a42-8406-b8f607e56ecc", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "20f1fa73-07f9-4cb0-9a75-d75cd5f5ff1f", "solution": "import numpy as np\n\nclass QuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.alpha = 0.5  # attractiveness coefficient base\n        self.beta_min = 0.2  # minimum value of attractiveness\n        self.gamma = 1.0  # absorption coefficient\n        self.population_size = max(10, int(budget / (5 * dim)))  # heuristic for population size\n        self.quantum_prob = 0.1  # probability of quantum-inspired move\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        # Main loop\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:  # Move i towards j if j is brighter\n                        r = np.linalg.norm(population[i] - population[j])\n                        beta = self.beta_min + (1 - self.beta_min) * np.exp(-self.gamma * r**2)\n                        step = beta * (population[j] - population[i]) + self.alpha * (np.random.rand(self.dim) - 0.5)\n                        population[i] += step\n                        population[i] = np.clip(population[i], self.lb, self.ub)\n                        \n                        if np.random.rand() < self.quantum_prob:  # Quantum-inspired move\n                            quantum_step = np.random.uniform(self.lb, self.ub, self.dim)\n                            population[i] = (population[i] + quantum_step) / 2\n                            population[i] = np.clip(population[i], self.lb, self.ub)\n                        \n                        current_fitness = func(population[i])\n                        num_evaluations += 1\n                        if current_fitness < fitness[i]:\n                            fitness[i] = current_fitness\n                        \n                        if num_evaluations >= self.budget:\n                            break\n                if num_evaluations >= self.budget:\n                    break\n            \n        # Return the best solution found\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "QuantumFireflyAlgorithm", "description": "Quantum-Inspired Firefly Algorithm leveraging quantum superposition to enhance movement dynamics and exploration in high-dimensional black-box optimization.", "configspace": "", "generation": 20, "fitness": 0.13791713367973799, "feedback": "The algorithm QuantumFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.10.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.3548094327829431, 0.37712843948278674, 0.37667322644857837, 0.324000121577922, 0.29749610876916166, 0.3094725551768971, 0.33013809638594116, 0.29725503550977794, 0.3322550893595628, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002591541701396305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347369574792052, 0.08293863159998816, 0.07114618592147304, 0.09692520313357711, 0.06893394825916677, 0.0862945383979763, 0.07804715800500417, 0.07665460251979361, 0.08866360108711757, 0.08329602097820099, 0.05974566495614653, 0.05312731708931717, 0.06353741762270115, 0.07278796445576552, 0.05226168876683801, 0.07756466654864291, 0.051383909126728966, 0.05738191559344463, 0.06207258130131943, 0.07112328008887903, 0.06934367037970202, 0.07488940493236673, 0.09592074332951872, 0.06411318409532885, 0.07545327662024426, 0.07145718627394204, 0.09260086497050457, 0.12363766263334364, 0.12477544210308311, 0.21256077940330065, 0.13404718168334617, 0.1616893069082873, 0.11024186727104912, 0.11053512292957657, 0.11032921307015608, 0.17060622272808268, 0.22356359054649277, 0.22573336820568157, 0.17028653215451373, 0.281059254989537, 0.28390146836194097, 0.2723241009816022, 0.14547192327568226, 0.18151062499523773, 0.18708274026746208, 0.08902213205038989, 0.11309080982960784, 0.08207042524709063, 0.12127070698054976, 0.004458445150434254, 0.10929294546547752, 0.14225141353221427, 0.16962106087785545, 0.12107289961225165, 0.14707072667822563, 0.13659273823723128, 0.13012572138714096, 0.14079438721953752, 0.15922750709849043, 0.11696797061646735, 0.15508444864863846, 0.15524704456672567, 0.13073512040543178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08158171809839165, 0.11130735690256222, 0.128552653580556, 0.06752763080329915, 0.06742632701506213, 0.035443013029492376, 0.09602799535119699, 0.11178437194676083, 0.08317799199384313, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055729600882423624, 0.02229566432011143, 0.01456297433527054, 0.05130814526966665, 0.035333649285001933, 0.041092458134884824, 0.0336518280402639, 0.020885167217386535, 0.05048069576135916, 0.3734852020699868, 0.338195556112737, 0.3285391369603615, 0.3491980982295989, 0.3287833906666803, 0.3194241712467508, 0.37736890535433265, 0.34894973730614287, 0.36574730477834927, 0.05714808842078167, 0.06621768573055709, 0.047664792472436046, 0.0646858185576058, 0.06343241102216723, 0.07105420795829054, 0.06927474678852974, 0.07406360175422855, 0.07605037166210404, 0.2318230523848379, 0.17054625785970312, 0.18157834831354158, 0.15503172315452207, 0.13772185185145358, 0.1487429338728452, 0.14963138758589234, 0.13004575802864815, 0.13729377577335267, 0.20385883006430294, 0.18653659221193086, 0.20646692403101452, 0.24758969940891573, 0.20250450476778747, 0.26564294425570734, 0.17777849935615975, 0.18894913774855682, 0.1810595722436127, 0.1744705578400506, 0.16182427377473707, 0.12921286088057604, 0.15683520179074162, 0.1794400967833606, 0.20720030223939934, 0.16319759881876283, 0.1492333241909013, 0.13889595121101284, 0.24639364089106208, 0.2379374512029302, 0.22212047328215057, 0.23875762127308198, 0.23541172926037457, 0.22342010581609972, 0.22649996624458513, 0.2470754464152456, 0.2166326244046003, 0.1653207121600777, 0.1641233453958446, 0.16694940416756232, 0.16499911867345218, 0.17187295774747968, 0.162570961620643, 0.16666575908288128, 0.16189436897019005, 0.17494581768115802, 0.17634536161455794, 0.18314683851659097, 0.18382547901194757, 0.15843274296832988, 0.14209054601648985, 0.1219208289255761, 0.1265511066687166, 0.23425731858315635, 0.15692009224327252, 0.4112184923416454, 0.40726266769551955, 0.41900943094299004, 0.16030221784154852, 0.11018158131797884, 0.16000786878280537, 0.16622724662015465, 0.16839347365794255, 0.28934157372453184, 0.20293925150576775, 0.19154778281055462, 0.17692516724148843, 0.18073260892678356, 0.17612360046147513, 0.19276253633479457, 0.1837974030388213, 0.18087812237345924, 0.1970765215318283, 0.08703114681039859, 0.07065857371472883, 0.0798107063280924, 0.08560916888528824, 0.06875079641869597, 0.08628561335435447, 0.07276102566818177, 0.07449490297426331, 0.08341427007104008]}, "mutation_prompt": null}
{"id": "8f1c0467-8434-44c6-8baa-59d3b733766e", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "1d5c4b29-8290-4282-8ef7-1cfe135de3d4", "solution": "import numpy as np\n\nclass SwarmBasedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(10, int(budget / (5 * dim)))  # heuristic for population size\n        self.mutation_factor = 0.8  # F in DE\n        self.crossover_rate = 0.9  # CR in DE\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n\n        best_solution = population[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while num_evaluations < self.budget:\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                # Select three random distinct indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Mutation and Crossover\n                mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                num_evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            population = new_population\n\n        return best_solution, best_fitness", "name": "SwarmBasedDifferentialEvolution", "description": "A novel Swarm-based Differential Evolution (SDE) algorithm that integrates evolutionary differential mutation strategies with swarm intelligence concepts to enhance diversity and ensure convergence in black-box optimization.", "configspace": "", "generation": 22, "fitness": 0.12782715745196868, "feedback": "The algorithm SwarmBasedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.16.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.2029879648561005, 0.19912330280487311, 0.2270748918298473, 0.21444258176988973, 0.2159316929315348, 0.20309471289652314, 0.20118619337970067, 0.20449686748903984, 0.2076566551096255, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015039745053574416, 9.999999999998899e-05, 0.0007549514175018146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04929596244621426, 0.05082608649755893, 0.06325116084629301, 0.0604129816715997, 0.05783690263142194, 0.05511810974705389, 0.05156684686195567, 0.056616746660464345, 0.05010056889676384, 0.03824349779720437, 0.04809576356438994, 0.03704747613419601, 0.038126624283111976, 0.03993811987534246, 0.031307956279830296, 0.0348487754665906, 0.033553929138016025, 0.043587371633862504, 0.7656162060672413, 0.8675229709347587, 0.8890442442200984, 0.7507204894317951, 0.8603603341298602, 0.7902101306565761, 0.8637079092807205, 0.8349435323536092, 0.714544555273151, 0.10692847606124323, 0.0736271296244968, 0.11307899127594045, 0.08202613558006999, 0.11013078546568977, 0.08950350111892691, 0.10739417793687367, 0.0761700518421774, 0.09746330575501394, 0.14317360059967466, 0.19308637766117165, 0.13785077656922418, 0.1412453048431731, 0.12690377711672207, 0.12587938920521047, 0.14337456840729335, 0.13046600603849035, 0.13066690325626418, 0.01984886630020466, 0.014269550764092864, 0.02314211532936228, 0.06785373158093133, 0.040452800051982374, 0.02032597500266964, 0.01595114846311263, 0.014248165932464918, 0.020669394955790232, 0.027240390289283045, 0.03324780340950162, 0.037606114928279366, 0.036988298759688454, 0.035362057023575866, 0.021808863028060288, 0.02175428418010883, 0.037982482834960085, 0.01422967137275577, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05576279061232092, 0.06788452565002356, 0.08526475863049365, 0.06267045034086693, 0.058555753433897184, 0.102002793147289, 0.06738063868322552, 0.06355852323330091, 0.076395058113915, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030505379305006963, 0.0042248673233652445, 0.00840006957987649, 0.008367790834375222, 0.008904945769162453, 0.004188646167335386, 0.008335195615765012, 0.011398929275391878, 0.03146490401129576, 0.19875068913816996, 0.20700156379522394, 0.20345295620106207, 0.23114934678801635, 0.20790092404975435, 0.22625974401814009, 0.21998139647424786, 0.19607389809339515, 0.2030358665573475, 0.0685715051275867, 0.06853819323290533, 0.05370269021401619, 0.05519662050194363, 0.06156545923776224, 0.04871468198873086, 0.0458651927311956, 0.05141052923826994, 0.05658298616817625, 0.1437703832416628, 0.13662983777497717, 0.13455070328329244, 0.14390419777799157, 0.13522383693596907, 0.136866998708284, 0.16035582685551852, 0.146836689286022, 0.1312125448916931, 0.17159061187808966, 0.17512437360176902, 0.17371123603459204, 0.15592682044522077, 0.17423714058215534, 0.17198843369509176, 0.16485311837233763, 0.19061105981155957, 0.16393362496151653, 0.11527082450931725, 0.10728294013249595, 0.11904266016339804, 0.11935380125878114, 0.13290396708485663, 0.11279704014199377, 0.10994098732367963, 0.12603016216489737, 0.12691691187408904, 0.15792845724694637, 0.18353975676304768, 0.1625802369923658, 0.17804090601920775, 0.15666805170411047, 0.1678228813855731, 0.15660610252445273, 0.15907562409576692, 0.1822711013620637, 0.12040664983189597, 0.15626172431757845, 0.15150643727687907, 0.14618977317726856, 0.14975094042309045, 0.15134217181752052, 0.13389342158442463, 0.1571644739803605, 0.16603586633105372, 0.14902919876653709, 0.15740529385660107, 0.16906094483028378, 0.15541259246070316, 0.1414721237354999, 0.1662007824312477, 0.16103049220410282, 0.1302999463357939, 0.15717179201840004, 0.1403104780807789, 0.13216134393382217, 0.15771834523182549, 0.17641969387462775, 0.1296927031834446, 0.20517106561510967, 0.2110428975270442, 0.19143317174083163, 0.18404769860368764, 0.18219202521669087, 0.1980264378471771, 0.18623312165713402, 0.19770245158243593, 0.17787877088135717, 0.17807405549565725, 0.1781106649794605, 0.17530709385258958, 0.18032492480796825, 0.050671636972286604, 0.05964969271454135, 0.052373656616233166, 0.0552876522499004, 0.06321445467336073, 0.05773246963782808, 0.05634662870649376, 0.055827386874253926, 0.0519655745621711]}, "mutation_prompt": null}
{"id": "ccd90f72-9993-47bd-a31b-d103a25fb6ee", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "8aab3307-bd13-48b0-bde4-f3eae016aa5f", "solution": "import numpy as np\n\nclass HybridDESAAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.initial_temperature = 1000\n        self.cooling_rate = 0.99\n        self.temperature = self.initial_temperature\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n\n        while num_evaluations < self.budget:\n            # Differential Evolution Mutation and Crossover\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n                crossover = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial_vector\n                        global_best_fitness = trial_fitness\n                else:\n                    # Simulated Annealing acceptance\n                    if np.random.rand() < np.exp(-(trial_fitness - fitness[i]) / self.temperature):\n                        new_population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            population = new_population\n            self.temperature *= self.cooling_rate\n\n        return global_best, global_best_fitness", "name": "HybridDESAAlgorithm", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm leveraging population diversity and controlled mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 24, "fitness": 0.11911303715770388, "feedback": "The algorithm HybridDESAAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.16.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.16834045273823017, 0.16875996929289283, 0.1407876793244628, 0.1595845434588895, 0.14948387320588719, 0.19881768817704426, 0.15090155121271365, 0.14976270718334994, 0.1449522368095002, 0.010172905284162148, 0.021480128240519814, 0.008381806291999583, 0.008398750890786899, 0.019121385471471353, 0.005616098141119852, 0.011592020655337154, 0.013098930584183655, 0.015442543316249613, 0.039664998576683486, 0.037074568844640665, 0.030462231293103104, 0.04043654463541935, 0.039223197893568096, 0.038451890437384284, 0.046710342879460964, 0.0567103814803257, 0.035900152886508496, 0.01669296648790064, 0.03398986002531512, 0.01823007443230873, 0.023633842158478524, 0.023351630631005205, 0.032241686003153025, 0.03136148610794931, 0.024710907747365174, 0.019193469912319072, 0.6639733991957264, 0.8108560940829908, 0.8245649330517031, 0.9257689588409413, 0.877945806103849, 0.8145138080550475, 0.869829821190182, 0.8011614789841612, 0.8917841250344386, 0.07206946947437187, 0.0880416222184045, 0.10171882691615464, 0.09031990772340337, 0.09637123521345259, 0.06933851627136012, 0.1402264199336427, 0.0879917368745089, 0.0925723839308501, 0.11547029897669658, 0.09900955332495653, 0.09944560727342489, 0.10644384074503721, 0.1267726239036049, 0.09927587939642413, 0.10368773007299947, 0.13423811674192565, 0.1268498147410666, 0.01699132676091486, 0.045858719535025516, 0.04176233387926298, 0.04706288067484243, 0.042963942958863854, 0.030907095561692022, 0.03924394775432172, 0.0409583354369466, 0.048738629759691676, 0.05448599018723055, 0.04872375176831534, 0.06443524831569414, 0.04873910451574759, 0.037844134515503725, 0.035715716389979724, 0.044545320140040756, 0.03474418138755353, 0.06550642884800562, 0.002874449406847668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05901317388712579, 0.06285522704232116, 0.07042078003742569, 0.05975448781069681, 0.0910477426367885, 0.07909810723686883, 0.08735097029377537, 0.09006422826327998, 0.08809842239521493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004437479525746246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00047166177299662326, 0.00015032803125591965, 0.1522148680463683, 0.18393431555622242, 0.16336461368941146, 0.19909523384317473, 0.1714511066506922, 0.1740703189904863, 0.1882692500325276, 0.1666235199234215, 0.16103803755471435, 0.04567589415097084, 0.03774328378088243, 0.03749033054127826, 0.03266886175302153, 0.04287403515698829, 0.04317198643606257, 0.032258431986453284, 0.03231505936907342, 0.04295279436469701, 0.15410638277830224, 0.13235631354069755, 0.1324713991801142, 0.14681969252916172, 0.14012205196492744, 0.1353830097168015, 0.13670742684183534, 0.12954688145624627, 0.1258320031568474, 0.16807642074099982, 0.1546011849509903, 0.1613932299901244, 0.13962399586678853, 0.13782625178374597, 0.161856142914947, 0.1434652392100454, 0.17377774300845283, 0.1349686398246549, 0.0978552204653399, 0.09665026404135024, 0.11013510831903073, 0.09046465584587515, 0.08985324264847383, 0.09793549997287943, 0.0984740220937419, 0.10926336953788063, 0.09462388704798819, 0.1472532210977886, 0.13817470685684896, 0.14882755295893224, 0.1552849090266638, 0.13379938894546117, 0.14756104887507504, 0.1349818310190407, 0.13249419116800598, 0.17375369392890316, 0.14971864368927068, 0.158317286738344, 0.1443292668117676, 0.14977416278138844, 0.161580985266224, 0.15470573471128535, 0.15064199092151653, 0.15687050951365522, 0.16756701117232675, 0.13103471440608516, 0.14061814831704889, 0.14755464433161614, 0.15592808394015678, 0.13408981829668953, 0.15611287817137331, 0.12722926941000912, 0.1455477965720029, 0.16489309257502394, 0.14134105079860715, 0.1591061010016821, 0.11584312336142955, 0.12687984303051103, 0.10797126909663546, 0.17574315892407344, 0.173198315760016, 0.1326536808538069, 0.13482591836088065, 0.18466972938710136, 0.19148637865899298, 0.17513750638675207, 0.1746571247205626, 0.1994866873040615, 0.19707812767686195, 0.18835784551283752, 0.17904703943384048, 0.2140384606185256, 0.041788645729821106, 0.04688927007153065, 0.03955681837244851, 0.04188744769710151, 0.05875739312325623, 0.04110689072031404, 0.05155163670555829, 0.03867198302192465, 0.040490850837896164]}, "mutation_prompt": null}
{"id": "170de178-d43b-4141-a09b-6e162ffd317e", "solution": "import numpy as np\n\nclass HybridDifferentialEvolutionSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))\n        self.F = 0.8  # differential weight\n        self.CR = 0.9  # crossover probability\n        self.initial_temperature = 1.0\n        self.cooling_rate = 0.99\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n        best_fitness = fitness[best_index]\n\n        temperature = self.initial_temperature\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[indices]\n                mutant = a + self.F * (b - c)\n                mutant = np.clip(mutant, self.lb, self.ub)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Acceptance\n                trial_fitness = func(trial)\n                num_evaluations += 1\n                \n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        return best_solution, best_fitness", "name": "HybridDifferentialEvolutionSimulatedAnnealing", "description": "A Hybrid Differential Evolution with Simulated Annealing (HDE-SA), integrating the robust mutation and crossover strategies of Differential Evolution with a temperature-based acceptance criterion from Simulated Annealing to enhance exploration and balance diversification and intensification.", "configspace": "", "generation": 25, "fitness": 0.14823236303578474, "feedback": "The algorithm HybridDifferentialEvolutionSimulatedAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.23555665180228957, 0.25082774185722234, 0.2637871235704492, 0.2587335957196051, 0.29259551396739825, 0.25823132563001605, 0.26947686975054286, 0.25722332374975, 0.25109875209494015, 0.03527356005288873, 0.02547943177658818, 0.03977847640000631, 0.0336778870139578, 0.022539841054861287, 0.03181243231396824, 0.05205459638916887, 0.03352723111273903, 0.03778378511834357, 0.07504977815061897, 0.06675520676314228, 0.06622451306235777, 0.06931768379428849, 0.06431318558846799, 0.06495830236911293, 0.07272025553582184, 0.07876448219403953, 0.07746786593683597, 0.057409367190753624, 0.05278738280493889, 0.04511630195865268, 0.05542517477209219, 0.06596097604147577, 0.058350679795730276, 0.056153358349578575, 0.05029921972037177, 0.05120621189921026, 0.9171115784223297, 0.8648578350029943, 0.8669814324115647, 0.8878562948506474, 0.8727750048826939, 0.8495860994428664, 0.8891799254788691, 0.9120217218693721, 0.9240160388630908, 0.11045053448826747, 0.11505352705106708, 0.12291842603833902, 0.09648724320185798, 0.11781335324273368, 0.0915273840274482, 0.11472720901920597, 0.12967779185379946, 0.12775132997231975, 0.19194543075809167, 0.1632089880494737, 0.18293748792687892, 0.19268203606477385, 0.18096304899873705, 0.21678212179302236, 0.17722705629621638, 0.19918995443385756, 0.178893819279632, 0.05326229478032585, 0.061290625613572014, 0.04505714666083427, 0.062143320669567736, 0.05376756058265253, 0.046770169546006435, 0.05702102513716112, 0.0674009913452186, 0.06066249449000638, 0.09275510723729419, 0.10637705904825234, 0.06715475362588585, 0.038633439630835875, 0.03934846462114894, 0.06695002004991524, 0.040094731359284874, 0.05004984435122406, 0.04504475227957461, 0.001069550994984847, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028893950740935814, 0.0028436961692061002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09338340844289017, 0.07915484605835521, 0.0867276355747354, 0.10278095974219126, 0.07214977443756798, 0.08842599297581166, 0.09559695902900966, 0.09075090936098473, 0.1145349907868013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03393062123135682, 0.027976372825006757, 0.027407681212403112, 0.029145298830826172, 0.03213009267949296, 0.035500612359991246, 0.04737599880090326, 0.04033281931500465, 0.04510012565985777, 0.23573729655520104, 0.24922508087934436, 0.24755943015532333, 0.2358042900235221, 0.26303840070766404, 0.2399568185642872, 0.24285655766951564, 0.23603346829433602, 0.23213623819398077, 0.07438434335855781, 0.0738035769859775, 0.07716325086041709, 0.06683225244408464, 0.07284329035026726, 0.06390651283216542, 0.06286729291000048, 0.06812196381182167, 0.06723809565493177, 0.1502307246968443, 0.14014700156128368, 0.14461759408909525, 0.13796463461678155, 0.1456667116497945, 0.14764288047196772, 0.1497366037373964, 0.15234669677980694, 0.14971086675612155, 0.18629169163205472, 0.1866242328550638, 0.1844375332361351, 0.18679592093801167, 0.17088226202074697, 0.19957685309256024, 0.18413297783782434, 0.19064547121292796, 0.18701132427733014, 0.12762954103450574, 0.12335249662402492, 0.12298274522037478, 0.1342660789217982, 0.12061837647685258, 0.13611113017835164, 0.1302205318492191, 0.13762199666285868, 0.13195902038000296, 0.17229408887838527, 0.17543233438774097, 0.17626804637799764, 0.15421735066282094, 0.16468963310503892, 0.19791082038750551, 0.18724753859778398, 0.17783540535976916, 0.1720313761509884, 0.15793616705412694, 0.16483883427720902, 0.16668536257572908, 0.15246002326387897, 0.1599627521700473, 0.1645285082082002, 0.16214229861934293, 0.16177046474499823, 0.1665833245705438, 0.20760547780258554, 0.21225135671014062, 0.15491093317867832, 0.15124439355499786, 0.1464000957669659, 0.1659119711974092, 0.15161018086351974, 0.15027227626595485, 0.14957339201999476, 0.16659898738916834, 0.16596151353630118, 0.16515150609578066, 0.12783806383839091, 0.15043352147737443, 0.1429606405967696, 0.19193421808883637, 0.22309684105434957, 0.2606799690662366, 0.19669087047164935, 0.19156263588854838, 0.18200269229060229, 0.17760665014808108, 0.17450209548133422, 0.1783609208948752, 0.17059232583365902, 0.18602097429680342, 0.20237327955128026, 0.0559652184226721, 0.06267221476438134, 0.05847156096928463, 0.05727458171862143, 0.06538746156516484, 0.053681022695246106, 0.08913937693980156, 0.06308444682235859, 0.08794805840583797]}, "mutation_prompt": null}
{"id": "99b67717-47d9-48f6-8fc9-1bf9f5dc45ab", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "00195a29-0bd3-45c3-8efd-ce69cde2c3d4", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "78032ae5-b2ad-4edc-934b-76230700d24c", "solution": "import numpy as np\n\nclass HybridQuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(10, int(budget / (20 * dim)))  # heuristic for population size\n        self.prob_mutation = 0.1  # mutation probability\n        self.alpha = 0.5  # influence of parent solutions in differential crossover\n\n    def __call__(self, func):\n        # Initialize quantum bits as probabilistic positions in search space\n        q_population = np.random.uniform(-np.pi, np.pi, (self.population_size, self.dim))\n        population = self.quantum_to_real(q_population)\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Differential evolution-inspired crossover\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                r1, r2, r3 = q_population[idxs]\n                q_trial = r1 + self.alpha * (r2 - r3)\n                q_trial = np.clip(q_trial, -np.pi, np.pi)\n                \n                # Mutation\n                if np.random.rand() < self.prob_mutation:\n                    q_trial += np.random.normal(0, 0.1, self.dim)\n                \n                # Convert quantum representation to real values\n                trial = self.quantum_to_real(q_trial)\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                num_evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    q_population[i] = q_trial\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return best_solution, best_fitness\n\n    def quantum_to_real(self, q_population):\n        # Map the quantum population to real values in search space\n        return (self.ub - self.lb) * (0.5 * (np.sin(q_population) + 1)) + self.lb", "name": "HybridQuantumInspiredEA", "description": "A Hybrid Quantum-Inspired Evolutionary Algorithm (HQIEA) utilizing quantum bit representation and differential evolution to explore large solution spaces effectively.", "configspace": "", "generation": 28, "fitness": 0.14713569460437098, "feedback": "The algorithm HybridQuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.12.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.26866896801350393, 0.24934312371087997, 0.343970881003145, 0.2769667367905928, 0.26704316987081334, 0.27760796315897995, 0.26944307360120123, 0.29040609463938916, 0.3231704359650329, 0.026237745711729654, 0.029149469392853233, 0.01688739965160746, 0.10355955978121734, 0.04321247161338526, 0.022330892429371696, 0.049018086888749535, 0.05437061675097543, 0.023783870596852275, 0.05265184916603882, 0.05656697093457441, 0.05406478071289278, 0.05815989522076581, 0.05796690504612312, 0.07917213305309667, 0.0625638403041816, 0.06017411711830978, 0.059502061979779475, 0.044536448101972215, 0.038331666328362934, 0.03935674371828535, 0.052776673807733654, 0.057243359139407035, 0.044554982728824744, 0.06501323923454183, 0.05109709898274073, 0.05770765209749551, 0.5459216331129767, 0.55362248032094, 0.5246761841892466, 0.5623053180809419, 0.5052269699600895, 0.5430868726985507, 0.5257026509922733, 0.5305403360051764, 0.5405799649082835, 0.06903804248616618, 0.09432063793536838, 0.1449353246259547, 0.05523596758294935, 0.12062713057279983, 0.15960706532517488, 0.09924236374409579, 0.11491302169039119, 0.10592695921750606, 0.24374803394960076, 0.1998443904530509, 0.23852429073959514, 0.16810944090473934, 0.1828381671373558, 0.14809593867380466, 0.1618086199346257, 0.14715114163559373, 0.18142170063043983, 0.24738857217328858, 0.10602804695095314, 0.10988573307971439, 0.050576746630777825, 0.09417755566549801, 0.07834913275048216, 0.0022370227770401874, 0.03657832487213708, 0.0775922231445535, 0.25922545134047903, 0.25772240272635294, 0.11292049375405788, 0.11030360575390186, 0.22389035541011604, 0.15969571610205568, 0.1761320454245484, 0.2837142246449519, 0.2114647100033521, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07893402651852321, 0.02823970512682339, 0.09036550989379888, 0.06291558326387736, 0.03999568554769484, 0.07237039066906892, 0.05976212496693256, 0.06403385307011356, 0.06638599214445862, 0.07360754628946475, 0.046967817688109426, 0.0392793579228673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007157319075867807, 0.0048546975664433, 9.999999999998899e-05, 0.054650592941434706, 0.03770614105004044, 0.07434877020959141, 0.024979770636394782, 0.038770760637843016, 0.020599577227433108, 0.01913468361540327, 0.023947257396501498, 0.030431310938977774, 0.19482855777389185, 0.24689321336343528, 0.2764441346956451, 0.2582112965493346, 0.2565491905509586, 0.26669893474625184, 0.3341409986462378, 0.35593999498515927, 0.23221839412596124, 0.07321593942506788, 0.06207080034597989, 0.061908399295263594, 0.08012017853787401, 0.0685312391457864, 0.06620239440337428, 0.06338945420421682, 0.06589701279446525, 0.07377266083705669, 0.14518487094098032, 0.14766262659295903, 0.1315195996640317, 0.13368080391396253, 0.13439876143823626, 0.15299665806312746, 0.149150194072593, 0.13850695010782876, 0.23997618375212004, 0.18204641879586736, 0.1802828351321567, 0.1690082147088866, 0.2724218508085595, 0.20130079808007395, 0.21113503125111477, 0.19808503088654983, 0.17756727055353916, 0.1877091637103142, 0.11288549661563829, 0.14329316899217515, 0.12598500662635326, 0.21875016390432345, 0.14496812354443755, 0.19054831945355033, 0.15597494035441994, 0.12678121656172903, 0.1287520397072478, 0.25271132499896864, 0.25449091115115674, 0.2565902756016114, 0.2540599982072578, 0.25239732733468523, 0.253549973559137, 0.25046120732364485, 0.25532194680889064, 0.25535117143138575, 0.1594908350978359, 0.15041776170564625, 0.1461582778273709, 0.16002998395995727, 0.17311612294188106, 0.15962899305386946, 0.15398906036063686, 0.1583479897286133, 0.1385455929470003, 0.15033313205299892, 0.16168827286673526, 0.16504067676497658, 0.16783000387983393, 0.16610376036459507, 0.14265676983545306, 0.19011688981401176, 0.20275233872630793, 0.1922242695200076, 0.17606167519971727, 0.18588905607250605, 0.19345477826463053, 0.24809100153021413, 0.21877412521912265, 0.2219135862832522, 0.15534476804432684, 0.1807902107823569, 0.1725462312791709, 0.18826293399569627, 0.18951677027774838, 0.17756030286802815, 0.1732165453596115, 0.19139207490239507, 0.19097771507060002, 0.2340567479726987, 0.19388464585611664, 0.18370806496891534, 0.05596615440383035, 0.06120354370238168, 0.05891902436849428, 0.05121974390656925, 0.05928375238542305, 0.05231582342686503, 0.05535288974611763, 0.053327011642335, 0.05143058130506051]}, "mutation_prompt": null}
{"id": "2ef4c7d2-3cda-4f1c-9f36-659441331fa8", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "f0f06c25-1b4c-4a59-9168-4ba9763da53e", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (8 * dim)))  # heuristic for population size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.7\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n        best_fitness = fitness[best_index]\n        \n        while num_evaluations < self.budget:\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Select three random individuals for mutation\n                indices = np.random.choice([idx for idx in range(self.population_size) if idx != i], 3, replace=False)\n                a, b, c = population[indices]\n                \n                # Quantum-inspired mutation\n                mutant_vector = a + self.mutation_factor * (b - c)\n                quantum_superposition = np.random.choice([mutant_vector, population[i]], p=[0.5, 0.5])\n                \n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, quantum_superposition, population[i])\n                trial_vector = np.clip(trial_vector, self.lb, self.ub)\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial_vector\n                        best_fitness = trial_fitness\n            \n            population = new_population\n        \n        return best_solution, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "Quantum-inspired Differential Evolution leveraging quantum superposition principles for enhanced diversity and exploration in black-box optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {}, "mutation_prompt": null}
{"id": "318edb03-16a2-4ba5-857a-8265bfbb91e1", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "dafdb55c-87c6-4205-a6e8-ad97c26256bc", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "23d1c84b-5606-4b97-ac8e-678944b6f78f", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n        self.temperature = 1.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n        best_fitness = fitness[best_index]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Differential Evolution step\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = a + self.f * (b - c)\n                mutant = np.clip(mutant, self.lb, self.ub)\n                \n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    \n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n                else:\n                    # Simulated Annealing acceptance criterion\n                    acceptance_probability = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                    if np.random.rand() < acceptance_probability:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n                        \n                # Cooling schedule\n                self.temperature *= 0.99\n\n        return best_solution, best_fitness", "name": "HybridDESA", "description": "Hybrid Differential Evolution and Simulated Annealing combining global exploration with adaptive local refinement for efficient black-box optimization.", "configspace": "", "generation": 33, "fitness": 0.15076754775068954, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.25656231954318165, 0.2664178960907021, 0.25593237710684547, 0.2904520874915488, 0.31861031535506423, 0.30017684560834135, 0.28467635370272326, 0.2871854234612893, 0.3059762469098758, 0.035558208071332253, 0.029412066298613038, 0.03909401189148343, 0.031921663530768085, 0.027708970587893456, 0.0323659064287809, 0.05157286282291773, 0.030881990957189576, 0.0372650231847691, 0.06454480610924163, 0.06759737475340499, 0.06821813794284426, 0.06947340334615526, 0.07516159321924876, 0.06826373404297881, 0.07999596221671657, 0.07544990501206117, 0.07047429196517385, 0.05408563564492219, 0.04814549978506277, 0.05143642153145689, 0.058112735839834895, 0.056843131367280364, 0.052037170739168914, 0.05686793204438312, 0.052706458119287314, 0.05922808517478639, 0.9171115784223297, 0.861451777667645, 0.8393676724835599, 0.881256837337934, 0.8870735591610492, 0.8588065831191091, 0.8856574410429894, 0.9120217218693721, 0.9240160388630908, 0.11946233947335783, 0.10283141987796951, 0.12717542372073365, 0.11753188235155998, 0.11184236538499259, 0.10205332101614661, 0.10760370265400232, 0.13367994287460938, 0.13065554061519835, 0.18504456499188326, 0.18689179261678202, 0.1795771314406276, 0.18392222748306764, 0.18515012528803387, 0.18119755399217408, 0.17375639395614506, 0.2113735631664192, 0.18363675814324465, 0.05326229478032585, 0.061290625613572014, 0.04364257516070813, 0.07210772385009856, 0.04531946483652316, 0.047897887500189196, 0.05484353597468894, 0.05359649332172489, 0.06101228298939765, 0.12773773544124956, 0.10768295656074245, 0.07519827664262879, 0.0372541507374865, 0.03934846462114894, 0.06095792568248326, 0.036443794218802616, 0.05004984435122406, 0.04397304623336917, 0.001069550994984847, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028893950740935814, 0.0028436961692061002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09338340844289017, 0.07915484605835521, 0.0867276355747354, 0.10278095974219126, 0.0730761451411891, 0.08391684353600737, 0.0953426396033783, 0.09075090936098473, 0.1145349907868013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03629481144635249, 0.03309743123505415, 0.02468148716916907, 0.02873147839677026, 0.032605975659508846, 0.03448363245397412, 0.039684497112970396, 0.048540214206514776, 0.0419550888712934, 0.2477192730330967, 0.24920614620123538, 0.26081394168329064, 0.2556194743176099, 0.26978166671892745, 0.262385002461586, 0.2558083297080317, 0.2549199986997369, 0.24501811080303582, 0.06890273558411741, 0.06576485717125446, 0.07814435106596973, 0.05981230700461948, 0.06362638411266763, 0.06771740426366923, 0.06849379001401523, 0.05609942563148851, 0.06327807920911888, 0.1470384171272312, 0.16851967921057986, 0.14565452000341317, 0.14381786062956636, 0.1420324378964799, 0.1553315870110944, 0.1589124933799776, 0.13789721764437946, 0.1383705770910234, 0.19027721397646957, 0.195264792934719, 0.19504061581102627, 0.1769998501337252, 0.1868007116118341, 0.18892138736461095, 0.19917783283344448, 0.20976431215825153, 0.18738164198538787, 0.1246855265400465, 0.12078607040789024, 0.12178070150746256, 0.12620342480210134, 0.127021267708602, 0.1450952887585759, 0.12469209761016986, 0.14066065613658374, 0.12885686649350903, 0.17424627201517506, 0.1895064120331187, 0.18008692867400367, 0.19501827056979015, 0.16030855109424103, 0.17936619709008994, 0.17195467256421948, 0.17236588007510512, 0.17293468459151606, 0.15388553824476436, 0.16399226326985994, 0.15810884408647685, 0.15075746545114, 0.16610802613227238, 0.16672915335398064, 0.16965665686172438, 0.160245552410894, 0.16904605332969203, 0.2152388280619829, 0.14119326438120916, 0.14210941422131596, 0.16512601937525828, 0.15404595511358743, 0.16099064131467689, 0.15506338635718186, 0.18064330696426278, 0.16377082580990976, 0.15793886726925543, 0.19062270868535303, 0.1721542869865873, 0.1697608480817806, 0.13366694401574586, 0.1867022229896207, 0.26474478781453126, 0.22552204502277806, 0.27364882727626727, 0.18649152024152804, 0.19259998166386882, 0.17871170400727876, 0.1796924146913621, 0.18047725850998064, 0.19414408649505321, 0.2034145068979505, 0.17658056810801703, 0.18220056116018624, 0.05642647309637794, 0.0710547455467011, 0.058584445974456556, 0.058127850766534706, 0.06335494427255439, 0.059426678885862394, 0.06369400425917626, 0.05346082118191264, 0.059763997885006415]}, "mutation_prompt": null}
{"id": "20c8b74d-af19-4cb5-8f84-e129bd522c94", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "a6f8f545-d95e-404d-8711-8a47ca109bcf", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "d769c063-6956-4638-98b5-ac6ec1b6293e", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "33c181b2-a614-4d7c-91a6-b2f6d1e5e192", "solution": "import numpy as np\n\nclass QuantumDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (15 * dim)))  # heuristic for population size\n        self.f = 0.5  # scaling factor\n        self.cr = 0.9  # crossover rate\n        self.qr = 0.1  # quantum rotation rate\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_index = np.argmin(fitness)\n        best = population[best_index]\n        best_fitness = fitness[best_index]\n        \n        while num_evaluations < self.budget:\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                \n                # Differential mutation\n                mutant = x0 + self.f * (x1 - x2)\n                mutant = np.clip(mutant, self.lb, self.ub)\n                \n                # Quantum-inspired crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Quantum rotation\n                if np.random.rand() < self.qr:\n                    rotation = np.random.uniform(-np.pi, np.pi, self.dim)\n                    trial += np.sin(rotation) * (best - trial)\n                    trial = np.clip(trial, self.lb, self.ub)\n                \n                # Selection\n                trial_fitness = func(trial)\n                num_evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            population = new_population\n        \n        return best, best_fitness", "name": "QuantumDifferentialEvolution", "description": "Quantum-inspired Differential Evolution algorithm combining quantum superposition principles with differential evolution to enhance diversity and convergence speed.", "configspace": "", "generation": 37, "fitness": 0.21683773650670599, "feedback": "The algorithm QuantumDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.18.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.4700601024129737, 0.46031343563088944, 0.5070130447720648, 0.5073101932277193, 0.47653912573612933, 0.48343380180863926, 0.49928107618005946, 0.49332499984426337, 0.46704276795646416, 0.22294918089288163, 0.22174740696615713, 0.20301125438980272, 0.22775892771403927, 0.1973536394636366, 0.20558359493214895, 0.2236826268046761, 0.18875825037193428, 0.22195733300399412, 0.11225456154059699, 0.1036820501320177, 0.09792398168366767, 0.1025205036974447, 0.10553375033911738, 0.09417616253598249, 0.10489138960738364, 0.09750478310981958, 0.10036572296344459, 0.08628973731857137, 0.08503894235884213, 0.087549136961377, 0.09281076002628286, 0.08603561606989862, 0.08409581864512006, 0.08705221396240725, 0.0784066191215479, 0.08317409898585215, 0.8929093209317417, 0.8786055245165247, 0.8390283743551326, 0.8408462408000548, 0.7799716022784385, 0.9210135190677347, 0.7873918933705594, 0.8130077340082498, 0.9134868783695451, 0.21364310070980275, 0.2038680273430391, 0.23860034333644353, 0.20842010376101594, 0.20102318573098032, 0.2085783034199601, 0.23668807104421075, 0.20319585867180978, 0.24127683630138452, 0.3478846717317562, 0.3676149829394538, 0.3234201546040262, 0.3920894805563713, 0.4967264107962369, 0.3519518769875628, 0.4531795402292581, 0.31659000022894235, 0.40014256942284476, 0.13872674821633924, 0.14756961840077543, 0.13089322070632203, 0.13926755136389735, 0.1520063919767608, 0.14183377980759782, 0.15635897565488377, 0.13783389328802353, 0.12743630088753655, 0.10456156657902116, 0.13960485779960874, 0.14379113626129125, 0.128454844508735, 0.12122356037466397, 0.14890160683485865, 0.12207572933580013, 0.14488599094382282, 0.1153189582574018, 0.04439200748169769, 0.04541888677872408, 0.054392631472512276, 0.05088700896773679, 0.046069250848236876, 0.04389532449321287, 0.043890560350109964, 0.05539558759216945, 0.0485017319334613, 0.16361563447132543, 0.18597474035901462, 0.16556400713108, 0.1571565418990265, 0.15936668341739446, 0.15423627239489013, 0.18509492948546558, 0.17782160125354762, 0.17713960318978283, 0.009232620359359123, 0.00304762160661598, 9.999999999998899e-05, 0.008336651826007402, 0.011950486943496208, 0.00587372258672203, 0.006164402528066049, 0.02045137204446179, 0.005034018986703859, 0.10176962290671598, 0.09955405359885461, 0.09327496604463814, 0.10129776888742492, 0.09494125071030635, 0.10276380060769008, 0.09452733815122505, 0.09452527650394149, 0.09642358052427313, 0.4088295556103211, 0.38692271245908305, 0.41237495744790187, 0.3899991857139449, 0.41184979752102957, 0.4309777620168298, 0.39443752219124595, 0.402210491742266, 0.41815166641358437, 0.09321204487632928, 0.08503782563862183, 0.07829387074125438, 0.08569580546987654, 0.08731933182063967, 0.09040137166186979, 0.08343399456161604, 0.08216868991032444, 0.09585471475315899, 0.1431710399992735, 0.1254207151571245, 0.14971152547610567, 0.14730955406434165, 0.14814901996687369, 0.16380074975685677, 0.12430258460007848, 0.14909693583261174, 0.1956606996257052, 0.25797205295362724, 0.2585486155815101, 0.2710186036244958, 0.24461477542360965, 0.24369571290249115, 0.26275377072268624, 0.25958078062027323, 0.28731051800870744, 0.2796264680706425, 0.1994225978471592, 0.1863231813902323, 0.19105762464017462, 0.19288552340245224, 0.19488058101578143, 0.18177412342163657, 0.21015754538339726, 0.20509176251490968, 0.1924529110011396, 0.17695810566738912, 0.1798259337466641, 0.19212542654477804, 0.17846277577421765, 0.20346699307199934, 0.18985100556924017, 0.20497173833751425, 0.20664056399935316, 0.19333528391858945, 0.18026583230984894, 0.1674999281247852, 0.17921292903042263, 0.17536474475177144, 0.1784063006910228, 0.1763298058981354, 0.17580881581268204, 0.17565843509517565, 0.1904381676996182, 0.27917393335696306, 0.22097192005975064, 0.3034187523101034, 0.3583437591976585, 0.31200378460118694, 0.30633848417943466, 0.267556491304764, 0.22523026058901008, 0.2240398859338647, 0.376912110979434, 0.26158820495585755, 0.1900025911745361, 0.18234224183570857, 0.2586281964291197, 0.23626342825957125, 0.19558808132598815, 0.34258829499303134, 0.3391356437433485, 0.1849648171379742, 0.1840951386782479, 0.18630487904216386, 0.19100904513815953, 0.17882646606855035, 0.19796482820883698, 0.17557431326305994, 0.18843451660674437, 0.16874430729188294, 0.07169182567018983, 0.06860161311033897, 0.08316600431923704, 0.0870998072846223, 0.07188747311239552, 0.07663609921511183, 0.06740832594926816, 0.08822388065190334, 0.0722001136593119]}, "mutation_prompt": null}
{"id": "7f3a9160-7005-405e-bc99-a47d8d356422", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.local_search_rate = 0.1  # fraction of best particles undergoing local search\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        \n        global_best_index = np.argmin(fitness)\n        global_best = population[global_best_index]\n        global_best_fitness = fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best - population) +\n                          self.social_coefficient * r2 * (global_best - population))\n            population = population + velocities\n            population = np.clip(population, self.lb, self.ub)\n            \n            # Evaluate new solutions\n            for i in range(self.population_size):\n                current_fitness = func(population[i])\n                num_evaluations += 1\n                \n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n            \n            # Local Search on top-performing particles\n            num_local_search = int(self.local_search_rate * self.population_size)\n            top_indices = np.argsort(personal_best_fitness)[:num_local_search]\n            for i in top_indices:\n                if num_evaluations >= self.budget:\n                    break\n                candidate = personal_best[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best[i] = candidate\n                    personal_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = candidate\n                        global_best_fitness = candidate_fitness\n        \n        return global_best, global_best_fitness", "name": "AdaptiveMemeticAlgorithm", "description": "A novel Adaptive Memetic Algorithm integrating Particle Swarm Optimization and Local Search to dynamically balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.5060411933717524, 0.45490314288922573, 0.4373945337548545, 0.48734585110917206, 0.4784471551077314, 0.46572040911086376, 0.4543076642114193, 0.43253887121992185, 0.48603221421774345, 0.09981270571245715, 0.0699887315266835, 0.08108596923524969, 0.04614456933710609, 0.062432736393927324, 0.07424159992008261, 0.049431803769764526, 0.0448879017685222, 0.07327599817612696, 0.11357783599467908, 0.14671706429700604, 0.09674517914439207, 0.11715322211656842, 0.11303178016783988, 0.1295736893388686, 0.12938609852296434, 0.13918550846086641, 0.1555125215143991, 0.1058629448505497, 0.08813408990949445, 0.12757571910859422, 0.11050968494092939, 0.09303863068078355, 0.11010040880530558, 0.09789761136320008, 0.1128435632768322, 0.09859302171100426, 0.950143608902246, 0.9609895185952861, 0.9377949129596824, 0.9547547224222652, 0.9610856368707552, 0.9474451322635181, 0.9560892198571582, 0.9431378821737227, 0.9512995655572367, 0.2615133725345973, 0.25282859745588326, 0.2995469618982727, 0.30552789430946137, 0.27620743912206125, 0.27139450000399834, 0.2431609436737644, 0.22895651669423767, 0.28971722657095333, 0.31383510155296046, 0.5404572400080734, 0.23891491449760294, 0.30864610670704495, 0.3101789008403617, 0.20290894411160731, 0.2891463989993507, 0.2296441503055291, 0.3656076483465669, 0.15050257971598202, 0.16673010497241814, 0.12954285880869898, 0.13991525343209865, 0.14020102668766576, 0.15600616392080957, 0.141926254009474, 0.12549042256459286, 0.20495006177644315, 0.13682917178423792, 0.21098563439587603, 0.1436844693980891, 0.14727441858328782, 0.13609985885239007, 0.15848274666372542, 0.1182224054088874, 0.16420330215999368, 0.13331088918744682, 0.020426305023866775, 9.999999999998899e-05, 0.002437179617036933, 0.010630087456196868, 0.004504074228239396, 0.021893979168085442, 9.999999999998899e-05, 9.999999999998899e-05, 0.05605363716487355, 0.136767569894248, 0.09258021090881174, 0.11105751381412865, 0.0766265695812901, 0.10763017489140658, 0.07791374223551917, 0.10144762043964073, 0.08416840102084955, 0.08715018736920643, 0.0002894333247530634, 0.01122814298831687, 0.007212915021844624, 0.005220947169740975, 0.017219147599937035, 0.029576073387125534, 0.019181665815041216, 0.04134811264270388, 0.0061144805931336865, 0.07028324734813796, 0.09633091462856502, 0.09814376503872158, 0.07720512479197839, 0.11761225427515443, 0.08231573894166866, 0.04508127497516268, 0.08140288238718607, 0.1154404941669045, 0.3864193915021519, 0.38308564545273216, 0.4046555289601411, 0.40082064425028496, 0.3940739944079279, 0.4167615388724253, 0.42550311240824634, 0.40471998432562495, 0.4379762087237463, 0.1306203648249269, 0.1452262210869194, 0.1104261271705429, 0.09723785789667472, 0.13418972178604838, 0.11064568527155572, 0.12489682979711592, 0.10390126227095697, 0.10867915759556457, 0.2534983742427317, 0.20297031308225522, 0.19753475220278882, 0.23570167839251266, 0.2680884629382664, 0.22663721051780183, 0.27434815877939234, 0.22870024265244893, 0.15862892077441215, 0.2936845930247345, 0.2769368516147451, 0.29241344263601377, 0.2905129409332994, 0.2950298267018343, 0.2923051445737036, 0.3067744561150416, 0.2756270950113794, 0.28630800737853146, 0.235016877732938, 0.2194316711037314, 0.21267633293796406, 0.21103415511442158, 0.22442860606287762, 0.21299587076141746, 0.1899534690543353, 0.226060973933779, 0.168470873303051, 0.22176591419876746, 0.2065524718937518, 0.190915780906169, 0.20507013856336076, 0.22218891963555243, 0.19099877816168587, 0.18749067604058023, 0.20266936617176556, 0.26256880093408164, 0.25243998064379736, 0.21534700010693442, 0.219215216400797, 0.21978648166032022, 0.22931134268368836, 0.2134729115769617, 0.20680903651526583, 0.22364575875674675, 0.19368737127344693, 0.1815647370137139, 0.19810136760879338, 0.6667793245788357, 0.15848553685888622, 0.6249063815214049, 0.1624934899052045, 0.43414996947073026, 0.6678767261950909, 0.16428191589587182, 0.5283313104814444, 0.16622786204063467, 0.6003828131577627, 0.48269186498929817, 0.39101946988830627, 0.37568659520120506, 0.16846447341709425, 0.1516806233017285, 0.47759446549939444, 0.183104635165531, 0.1851372219733909, 0.19189946928573431, 0.17352086057220073, 0.19010246335160885, 0.18668007948618892, 0.18845142899148037, 0.16892800012874154, 0.18088336533692917, 0.0965014222924212, 0.08359615678654087, 0.0896221988801491, 0.07318361232231052, 0.09592250641667566, 0.07755270024553307, 0.09079142772741311, 0.08068081985591669, 0.08969910840492501]}, "mutation_prompt": null}
{"id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 39, "fitness": 0.3160024640563795, "feedback": "The algorithm QuantumInspiredDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "3b69b1a3-8596-4fbb-a705-f3560193c401", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "df86c0a5-4647-467f-8091-9520e174b189", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "9f3040ad-1ada-43f9-b3c3-eb57a63e0574", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.hms = max(5, int(budget / (10 * dim)))  # Harmony memory size\n        self.hmcr = 0.9  # Harmony memory considering rate\n        self.par = 0.3  # Pitch adjusting rate\n        self.dynamic_par = 0.01  # Dynamic component for PAR\n        self.randomness_factor = 0.1  # Factor for randomness in adaptation\n\n    def __call__(self, func):\n        # Initialize harmony memory\n        harmony_memory = np.random.uniform(self.lb, self.ub, (self.hms, self.dim))\n        fitness = np.array([func(harmony) for harmony in harmony_memory])\n        num_evaluations = self.hms\n        \n        best_idx = np.argmin(fitness)\n        best_harmony = harmony_memory[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            if num_evaluations >= self.budget:\n                break\n            \n            # Create new harmony\n            new_harmony = np.empty(self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_harmony[j] = harmony_memory[np.random.randint(0, self.hms), j]\n                    if np.random.rand() < self.par + self.dynamic_par * np.random.rand():\n                        new_harmony[j] += self.randomness_factor * (2 * np.random.rand() - 1)\n                else:\n                    new_harmony[j] = np.random.uniform(self.lb, self.ub)\n\n            new_harmony = np.clip(new_harmony, self.lb, self.ub)\n            new_fitness = func(new_harmony)\n            num_evaluations += 1\n            \n            # Update harmony memory\n            if new_fitness < best_fitness:\n                best_harmony = new_harmony\n                best_fitness = new_fitness\n                \n            if new_fitness < np.max(fitness):\n                worst_idx = np.argmax(fitness)\n                harmony_memory[worst_idx] = new_harmony\n                fitness[worst_idx] = new_fitness\n        \n        return best_harmony, best_fitness", "name": "AdaptiveHarmonySearch", "description": "Adaptive Harmony Search with Dynamic Pitch Adjustment and Randomness for Enhanced Exploration and Convergence in Black-Box Optimization.", "configspace": "", "generation": 41, "fitness": 0.19601565297584692, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.14.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.4552092559243952, 0.4753552244091187, 0.4528682619387716, 0.4676520216747665, 0.44654270756021475, 0.4450661462634603, 0.4634975251410226, 0.468561521930527, 0.4665482251928956, 0.11937075181997714, 0.12707431954815418, 0.1434841602664887, 0.13977373043337515, 0.12117363052186991, 0.14006526972788413, 0.13624038442250253, 0.12675954464179284, 0.15236280155843485, 0.22358316334680328, 0.14516698939186212, 0.17411592379252594, 0.23552661550572818, 0.25234802872335116, 0.23036202308512266, 0.20407503369989977, 0.18801905659094698, 0.20621750839226405, 0.17394837253676343, 0.20749412747224494, 0.1380919835312916, 0.18213192438163073, 0.19453307441188317, 0.18782680061584545, 0.22208916526480893, 0.15415751674083822, 0.152533522885811, 0.6435371888027215, 0.6787302246193956, 0.6260357854427596, 0.6208283133532733, 0.7128043512151824, 0.6666054969552959, 0.648140043879766, 0.6663560949801755, 0.6153346188600461, 0.1308655910040919, 0.12027211109517488, 0.13211133595666524, 0.14277495238810844, 0.14286911447874695, 0.1775784531939747, 0.12766118454680053, 0.13553049166065978, 0.13809220339153017, 0.198850142872245, 0.2021045247869807, 0.1907061130695501, 0.27821335365790945, 0.24557815317958887, 0.2859379698551179, 0.21290164012714918, 0.21452060283245244, 0.20298734176708566, 0.1474193732283816, 0.12276230727087512, 0.13695087413454599, 0.11941902650634661, 0.0764039610602576, 0.132942081616237, 0.1421778697459225, 0.14120895099043007, 0.1260352090116308, 0.12912666510946968, 0.12592758159280182, 0.12223355371961298, 0.12831210791759617, 0.129679998307357, 0.11740592507818293, 0.11594270722121669, 0.12534632860348005, 0.12185444847516425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08179954972974979, 0.07291597301057351, 0.07834817506845759, 0.06942207585131477, 0.05108518378183635, 0.08322453288138154, 0.1220569079189121, 0.0833624395744379, 0.08695211254533697, 0.010123757254297372, 0.02975335557348191, 0.010482462316541596, 0.006139656818627159, 0.011464800874453784, 0.010478870464795231, 0.009343751338160344, 0.02030928844696467, 0.014605866117805233, 0.10743725995017228, 0.08585773088679727, 0.09219356619985686, 0.10131645975695214, 0.11316583970380523, 0.10618490340155218, 0.11354783545304459, 0.08301457400728363, 0.09505522448260928, 0.3935502172044304, 0.3712857912230668, 0.36800821057040844, 0.396444989812743, 0.39504067261385745, 0.39852084645955244, 0.41366731430954506, 0.38139910850039893, 0.39324875961977146, 0.0948271079083326, 0.10160548807680458, 0.08856516804162051, 0.09070915101193477, 0.09621553268468652, 0.09689464035271922, 0.0979584279621708, 0.0974674891772136, 0.10856491500365861, 0.14206171861652006, 0.12153589429884992, 0.13046838033690433, 0.1392308278258937, 0.13933960091918618, 0.16220604358482338, 0.12439360320211945, 0.13981625815025878, 0.12439433521468979, 0.28407493563526864, 0.2564811298879065, 0.27014687019174144, 0.2812820147408229, 0.2788564461781504, 0.28819472398995716, 0.2837424860030754, 0.3039067821823278, 0.2860731151487865, 0.20189402393553324, 0.20199252400363177, 0.1708381836692493, 0.1939888430047214, 0.2023418174587316, 0.20591268984426903, 0.20102216621563695, 0.22738227344461315, 0.1758256223291471, 0.20016175555833082, 0.21127151629693108, 0.1903117418857988, 0.20815901489621957, 0.19680306144705217, 0.21474331922274004, 0.20913726146446276, 0.18697367579838142, 0.19095191867617, 0.2546637272829331, 0.2800135292595063, 0.19279929214111935, 0.1927165894270555, 0.19891708624956494, 0.321539286608734, 0.20228962239138015, 0.25645036195951854, 0.22819919209268913, 0.17381600918617768, 0.22091769025185937, 0.1789739143194089, 0.37030740697593567, 0.38526655250236364, 0.3412983486964989, 0.2351488384218987, 0.26119050949335454, 0.16345250587485516, 0.22615906751577186, 0.18910678193502173, 0.16602501903467437, 0.193467185586788, 0.1529475978630247, 0.1887481418328123, 0.22640340354232713, 0.18828774747732702, 0.21182513107252232, 0.19542952670839753, 0.1967011299267356, 0.19166310302134593, 0.192472123819747, 0.18172200023696428, 0.18657253028547816, 0.1802337112520076, 0.1793401931742834, 0.18642708916928286, 0.0812756501417018, 0.08174193031277333, 0.07521079491135862, 0.0806484469632498, 0.08210588194701651, 0.08602587227584557, 0.0910541458341444, 0.07940297052709888, 0.07108816317212496]}, "mutation_prompt": null}
{"id": "c769aa25-531b-4162-a353-04f43baa00a9", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "d0d8e1ec-9c83-4c61-893e-69216604e6e6", "solution": "import numpy as np\n\nclass AdaptiveParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(10, int(budget / (20 * dim)))  # heuristic for population size\n        self.w = 0.9  # inertia weight\n        self.c1 = 2.0  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.velocity_clamp = (-(self.ub - self.lb), self.ub - self.lb)\n        \n    def opposition_based_learning(self, position):\n        return self.lb + self.ub - position\n    \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(*self.velocity_clamp, (self.population_size, self.dim))\n        personal_best_position = np.copy(population)\n        personal_best_fitness = np.array([func(ind) for ind in personal_best_position])\n        num_evaluations = self.population_size\n        \n        global_best_index = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_position[global_best_index]\n        global_best_fitness = personal_best_fitness[global_best_index]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocities\n                inertia = self.w * velocities[i]\n                cognitive = self.c1 * np.random.rand(self.dim) * (personal_best_position[i] - population[i])\n                social = self.c2 * np.random.rand(self.dim) * (global_best_position - population[i])\n                velocities[i] = inertia + cognitive + social\n                velocities[i] = np.clip(velocities[i], *self.velocity_clamp)\n                \n                # Update positions\n                population[i] += velocities[i]\n                population[i] = np.clip(population[i], self.lb, self.ub)\n                \n                # Opposition-Based Learning\n                opposite_position = self.opposition_based_learning(population[i])\n                opposite_position = np.clip(opposite_position, self.lb, self.ub)\n                \n                # Evaluate both current and opposite positions\n                current_fitness = func(population[i])\n                opposite_fitness = func(opposite_position)\n                num_evaluations += 2\n                \n                # Select the better position\n                if opposite_fitness < current_fitness:\n                    population[i] = opposite_position\n                    current_fitness = opposite_fitness\n                \n                # Update personal best\n                if current_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                \n                # Update global best\n                if current_fitness < global_best_fitness:\n                    global_best_position = population[i]\n                    global_best_fitness = current_fitness\n        \n        return global_best_position, global_best_fitness", "name": "AdaptiveParticleSwarmOptimization", "description": "Adaptive Particle Swarm Optimization with Opposition-Based Learning, where particles dynamically adjust their parameters and explore the search space oppositely to enhance exploration and convergence.", "configspace": "", "generation": 43, "fitness": 0.11360729033073619, "feedback": "The algorithm AdaptiveParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.16538895052817548, 0.15981973195036803, 0.13748264188800408, 0.15964161369785346, 0.15077323976016854, 0.16796258268519282, 0.1523899075662597, 0.17354382114662714, 0.1551957387093611, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02550962738080431, 0.02572994390610983, 0.03544894276247268, 0.0329417827830204, 0.023585759573835463, 0.029601118702955453, 0.04080428239267364, 0.03931117639205439, 0.04521398470823279, 9.999999999998899e-05, 0.0007058959925146935, 0.01140668175185855, 0.01959972157639278, 0.0018242854079683068, 0.017169589006786334, 0.03352514712968169, 0.0008172781821876862, 0.00267317655660515, 0.968913334094693, 0.9842149581681839, 0.9808544650559144, 0.9732874980160405, 0.9817890113892677, 0.9824352857610646, 0.9801376915283522, 0.9811711444790405, 0.9765551745647775, 0.06303527499090655, 0.050417246348750666, 0.05201114731431078, 0.055298083603586234, 0.11418591682626333, 0.054447972099485153, 0.07102129317961103, 0.06050459756225324, 0.07465687773108098, 0.10027683525177622, 0.10916253391384201, 0.1178725876084813, 0.0936944515954985, 0.1259206557072663, 0.11242185916255842, 0.09186116861071236, 0.12478301510642265, 0.11661559572559943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06442457651409006, 0.019636905841417862, 0.006877816953341442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026858136102950958, 0.05243453690563815, 0.030596258435097612, 0.013778476910525028, 9.999999999998899e-05, 0.006582997926055545, 0.04133402261885788, 0.027157180695406513, 0.011678695995712252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003379831273586653, 9.999999999998899e-05, 0.000511726998350448, 9.999999999998899e-05, 9.999999999998899e-05, 0.15838221433879118, 0.16578791212224764, 0.1893517284743842, 0.195610410944294, 0.16318823449036013, 0.16277370642486944, 0.1815614481763832, 0.1384662788766322, 0.17982398753773254, 0.0421798006897014, 0.04340025212220866, 0.043596932017086365, 0.03338476760394116, 0.06781174571493886, 0.03290468780518929, 0.020078994414338358, 0.03429315266673982, 0.04106860347875485, 0.19766010085498564, 0.12751111902767642, 0.1240949980143119, 0.13766266535167793, 0.15527848248243425, 0.13444237411532978, 0.12114762475320784, 0.13141090690084345, 0.13940542835256908, 0.15952161480883809, 0.14763673421265344, 0.17277872450694154, 0.13800672315110074, 0.15424178728814586, 0.16965293345524135, 0.15500048735041094, 0.19209267609277725, 0.1582654294119339, 0.09679311795738266, 0.07879790570383649, 0.0930548521310437, 0.10030268141194154, 0.09603329300475738, 0.1354150254808978, 0.08826802204842277, 0.12375203845175531, 0.10249262931161263, 0.17706170938434662, 0.11320473690589206, 0.13504179763931812, 0.12133016760244786, 0.1251328522795997, 0.12983628245844048, 0.12245976138762271, 0.1215293944097251, 0.13176299871489938, 0.12281129251960843, 0.12878484326808703, 0.11127214339690494, 0.12347155919849395, 0.13293371626822248, 0.09378740589264667, 9.999999999998899e-05, 0.06140842124431434, 0.16618417504650684, 0.15126987183977947, 0.12710282287301655, 0.13048100384436567, 0.14624494683719458, 0.1207914665021157, 0.11361423147764094, 0.10797215696955154, 0.12077566622923319, 0.13255046459718411, 0.13110496201017197, 0.12935649461428544, 0.10229230478944296, 0.1303525160167679, 0.09757115869080701, 0.1300326883049192, 0.10265200269108299, 0.18003966287826711, 0.17383256059005525, 0.19469874790669606, 0.18370272696776857, 0.1885952196641978, 0.1764559306510004, 0.1809655535707101, 0.18466418407267415, 0.1703457715529414, 0.17352319293263996, 0.21040284088762085, 0.04037802748035191, 0.034459790373682186, 0.046251722095959846, 0.030240292883286335, 0.04965934530772376, 0.06830002118711631, 0.035638408520828335, 0.051605365031174744, 0.03583048488965701]}, "mutation_prompt": null}
{"id": "f3c9a727-fb46-4295-adc2-4389d5efd853", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "ba353bbf-27d9-415b-9c31-2559d77f2e99", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "188de4b0-cf62-4059-8381-812d100db733", "solution": "import numpy as np\n\nclass EcoInspiredCoevolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.alpha = 0.5  # degree of competition influence\n        self.beta = 0.5  # degree of cooperation influence\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Find two species for interaction\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                j, k = np.random.choice(indices, 2, replace=False)\n                \n                # Competition and cooperation dynamics\n                if fitness[j] < fitness[k]:\n                    interaction_partner = population[j]\n                else:\n                    interaction_partner = population[k]\n                \n                # Mutation and crossover inspired by eco-dynamics\n                mutated_vector = population[i] + self.alpha * (interaction_partner - population[i])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Cooperation for exploration\n                cooperative_vector = population[i] + self.beta * (best_individual - population[i])\n                cooperative_vector = np.clip(cooperative_vector, self.lb, self.ub)\n                \n                # Randomly choose between competition and cooperation\n                if np.random.rand() < 0.5:\n                    offspring = mutated_vector\n                else:\n                    offspring = cooperative_vector\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    new_population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n            population = new_population\n        \n        return best_individual, best_fitness", "name": "EcoInspiredCoevolution", "description": "An Eco-inspired Competitive Coevolutionary Algorithm that mimics species interactions and adaptive evolution strategies for enhanced exploration and exploitation in black-box optimization.", "configspace": "", "generation": 46, "fitness": 0.13980772990088047, "feedback": "The algorithm EcoInspiredCoevolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.32534104807179864, 0.45570278661966246, 0.3708430456152382, 0.17187340776345428, 0.16884539375610275, 0.14571357223906312, 0.16233741064810636, 0.20708771474271614, 0.1609646655061131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08511439169733714, 0.09993466258047157, 0.10487357791450436, 0.07500277874585137, 0.07150964080165234, 0.09584177355131196, 0.0874874504905534, 0.0684888153653006, 0.09758162711335971, 0.06583689651453639, 0.07440752565939113, 0.07982805661938652, 0.09259991798015454, 0.050133896503167685, 0.05687090547209539, 0.0718595063822457, 0.10212848863876411, 0.05086194639473396, 0.0476912193943454, 0.06741228089297824, 0.05823541065093363, 0.055911649949515585, 0.08032688292695478, 0.06267837117732344, 0.0639706079335367, 0.05954657206328462, 0.053494718807759134, 0.10962242716210424, 0.11309043049556056, 0.13453844253067504, 0.1278260082916508, 0.12224565256984365, 0.06758810467009901, 0.03490986068632007, 0.041319733021976335, 0.13348711001267854, 0.22690701032429306, 0.38461775487656935, 0.20670757938185857, 0.20797604598147867, 0.17639017754538744, 0.16982670472717076, 0.15235434088447986, 0.20764673370034803, 0.2118861138165199, 0.06188685643557479, 0.09442404896855827, 0.03710386576002289, 9.999999999998899e-05, 0.09211860856566112, 0.06571807880415892, 0.19778589978614702, 0.16653236665643212, 0.03062999757518592, 0.12428325893544101, 0.1960605679487305, 0.1294862202715008, 0.21037288878247795, 0.14453896415429013, 0.14576695320090816, 0.12704520020662236, 0.1716440651261486, 0.1357300240744138, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07021638284853182, 0.08887233798746186, 0.08970363400686443, 0.08905310381191689, 0.06865069925654699, 0.03567460533640665, 0.10519246123118797, 0.06462590965849302, 0.06981681938953221, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008061993620235963, 0.01219721202555557, 0.007320976964431569, 9.999999999998899e-05, 9.999999999998899e-05, 0.008258499561553223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29187222790681766, 0.26680606464405443, 0.2722378935851103, 0.18269195846992692, 0.2817055143919288, 0.1886130525375881, 0.30365483797330883, 0.372642060209028, 0.3100969532573502, 0.06591081094071838, 0.04815237333593869, 0.061248077153779, 0.10028876811009813, 0.0874403854455762, 0.08641559786758257, 0.12180569670869557, 0.09556347864399906, 0.07438240743731417, 0.2042494452214958, 0.20200454134114254, 0.19135706861154267, 0.22010371790171124, 0.19658332439614923, 0.17667179696590662, 0.2649580308076285, 0.2858702763856208, 0.2390625059609559, 0.2125784583157595, 0.17535970485528707, 0.20418766128515808, 0.2707189373580522, 0.2562259431101368, 0.36121291990659354, 0.17153056709064562, 0.26049595242277634, 0.1671764011903042, 0.14838371741441492, 0.10779062751402257, 0.16786942028669127, 0.1973046780414649, 0.2865127777479747, 0.2458877227910069, 0.17075234375647486, 0.14559362825207844, 0.14905433615417896, 0.24183872955199626, 0.23376999096488815, 0.2345801836640835, 0.25505512041332834, 0.2269145703670149, 0.2357599269571944, 0.21552343168716204, 0.22128268225392067, 0.21262948116080638, 0.17186997640239565, 0.17813696385057864, 0.17473003500951545, 0.17828566437337723, 0.17820740580122296, 0.16320441409321107, 0.16988218159142032, 0.17343660293042906, 0.17932055183874962, 0.182946292426449, 0.18244067938234299, 0.186138152451381, 0.16529728267681754, 0.16563533318489754, 0.38232067697985883, 0.2574624737230059, 0.16465292946024623, 0.16527337958884036, 0.3118914112963922, 0.45787771490119045, 0.5341798258041772, 0.48483346311494646, 0.20273678032455678, 0.5103693585835518, 0.16755304415561145, 0.30637262801413634, 0.19388711451310858, 0.21262241103875834, 0.21430984051370783, 0.20704269525891827, 0.2030199123328712, 0.19875846276671016, 0.21635928588062958, 0.2132622618816472, 0.2055122596848924, 0.20641869750964736, 0.09696903438732718, 0.12499294805774064, 0.11867583496265688, 0.09478568410283983, 0.14320818480961717, 0.08496498934394459, 0.08978426689239238, 0.08672978765272599, 0.09438063550264941]}, "mutation_prompt": null}
{"id": "28693691-c808-46e0-9776-b6bc312221b2", "solution": "import numpy as np\n\nclass SelfAdaptiveParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.w_max = 0.9  # initial inertia weight\n        self.w_min = 0.4  # final inertia weight\n        self.c1 = 2.0  # personal learning factor\n        self.c2 = 2.0  # global learning factor\n        self.chaos_factor = 0.7  # factor for chaotic sequence influence\n\n    def chaotic_sequence(self, size):\n        x = np.random.rand()\n        sequence = []\n        for _ in range(size):\n            x = 4 * x * (1 - x)\n            sequence.append(x)\n        return np.array(sequence)\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_fitness = np.array([func(ind) for ind in positions])\n        num_evaluations = self.population_size\n\n        # Determine global best\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n\n        chaotic_seq = self.chaotic_sequence(self.budget)\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n\n                # Update inertia weight dynamically\n                w = self.w_max - ((self.w_max - self.w_min) * (num_evaluations / self.budget))\n\n                # Update velocities\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n\n                # Chaotic perturbation\n                chaotic_term = self.chaos_factor * chaotic_seq[num_evaluations % len(chaotic_seq)]\n                velocities[i] += chaotic_term * (np.random.rand(self.dim) - 0.5)\n\n                # Update positions\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lb, self.ub)\n\n                # Evaluate new fitness\n                current_fitness = func(positions[i])\n                num_evaluations += 1\n\n                # Update personal best\n                if current_fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_fitness[i] = current_fitness\n\n                    # Update global best\n                    if current_fitness < global_best_fitness:\n                        global_best_position = positions[i]\n                        global_best_fitness = current_fitness\n\n        return global_best_position, global_best_fitness", "name": "SelfAdaptiveParticleSwarmOptimization", "description": "A Self-Adaptive Particle Swarm Optimization with Chaotic Learning (SAPSO-CL) that adapts inertia and learning factors to leverage chaotic sequences for enhanced exploration and exploitation in black-box optimization.", "configspace": "", "generation": 47, "fitness": 0.15020822224446911, "feedback": "The algorithm SelfAdaptiveParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.24521527863599724, 0.2651081815573121, 0.23251777105893479, 0.2486690710487265, 0.27661523778654096, 0.25622765396023994, 0.2613616207089029, 0.2702840300523609, 0.25179713583455976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07998639662636309, 0.055078590960474294, 0.07365904458006267, 0.07261492861770147, 0.04760179067171344, 0.06621776930946599, 0.07691643830086847, 0.07370232344914673, 0.05635338682955682, 0.05641276958578634, 0.056253599744024, 0.04778186954797525, 0.103547642426434, 0.04486059232012918, 0.05302473144172093, 0.057263428277524286, 0.052476623185592874, 0.05073833059037658, 0.9772984575111041, 0.9793994671347345, 0.969638946889822, 0.9781417416169292, 0.975051986174459, 0.9791428092635739, 0.963813212515636, 0.9751410600108483, 0.9763082648661119, 0.13479766442838992, 0.1226477344042245, 0.15102677677865872, 0.125504522685558, 0.11943017455235982, 0.12725736866240678, 0.10906235170728118, 0.15911308201014218, 0.14099588892902082, 0.17031582104159793, 0.20136633016443561, 0.16237294160400506, 0.1905526098489616, 0.15154449581598362, 0.1721938741105743, 0.15599902170877233, 0.1908348998986248, 0.16666722287093994, 0.05943111766985698, 0.06623175315789431, 0.0280836680070482, 0.03665320136953465, 0.059032561851487086, 0.09221578676358277, 0.02899533919565378, 0.04620152744699502, 0.06665436500886057, 0.03941469338167458, 0.08628477408437485, 0.04757606306460804, 0.04708244848636589, 0.04067864792985909, 0.026181800912990494, 0.11154357360446898, 0.07134174867746457, 0.023000534948711016, 9.999999999998899e-05, 9.999999999998899e-05, 0.00027774648742484587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02180798584156618, 0.04184082866164229, 0.04670486203583446, 0.08023438927514781, 0.06229640787841362, 0.04988940015862786, 0.06486288927856931, 0.02448331813546012, 0.018003718618108233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01915900629370282, 0.0034577526673545966, 0.0028926012903879306, 0.023966188030826507, 0.023532821704495444, 0.015062253244424229, 0.024707717497735593, 0.02413504793420196, 0.03740733909037586, 0.26184462130274555, 0.2623547949898668, 0.2826472548311152, 0.25665845981835256, 0.272708863513936, 0.2465114016272585, 0.23525225855929865, 0.2606713088547885, 0.2250856630857263, 0.0730900390730973, 0.06679557539318703, 0.05428376525207079, 0.06060604513622403, 0.0604052435844562, 0.0740335925835145, 0.0637880924691262, 0.06447293029707979, 0.055411626586744034, 0.15154780778528387, 0.16089564429614134, 0.14765863450177785, 0.14029776731758725, 0.1452547927672877, 0.13497366325830717, 0.14677731149113482, 0.14437344997282286, 0.18020102813312078, 0.19640266367297354, 0.18204228923543786, 0.2144267276554116, 0.18649127091008544, 0.18282444262931008, 0.20109617619229425, 0.20652662459469528, 0.2133062763225454, 0.19370793486687454, 0.14103118279012672, 0.14991292266895706, 0.14370968730249445, 0.13282090033850913, 0.13636023158798238, 0.13529675000653985, 0.1541787168318126, 0.14840661158504687, 0.13370480963736353, 0.1778818378816106, 0.17581069692984697, 0.17486449245450508, 0.17550002528888986, 0.17075787251830787, 0.1648507235749065, 0.1834405587806317, 0.15541447059778823, 0.182844582983559, 0.16292541628806267, 0.17502893833723943, 0.161505413229453, 0.17593207934914734, 0.17386453567649418, 0.16095280172010173, 0.17434355740700647, 0.16397329383767278, 0.1686968546128732, 0.1194057741913801, 0.17282096540291825, 0.16830623025875735, 0.17748093540655796, 0.15335224528694413, 0.23817223871898208, 0.15824186209917457, 0.29861370570102785, 0.15323107089259702, 0.17986805717027365, 0.16438447954785096, 0.2644543301258232, 0.25302396027104224, 0.16364134864610347, 0.18030559281397895, 0.16587197560559597, 0.13480896788798813, 0.18592026356988012, 0.18185093456139434, 0.1884597497396917, 0.17418931988678554, 0.21094687376180477, 0.1781156870313766, 0.18886644504616756, 0.1976742850725447, 0.17663543756239652, 0.1887172538020936, 0.05878969894251351, 0.0647755261005255, 0.06284986173274809, 0.06424607487060385, 0.06199555852401806, 0.05298957860363951, 0.06516128019285738, 0.059241879557097143, 0.056299705442209635]}, "mutation_prompt": null}
{"id": "97a61f22-6088-425f-adca-e2c2b07b32fe", "solution": "import numpy as np\n\nclass AdaptiveMemeticSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.local_search_ratio = 0.2\n        self.learning_rate = 0.5\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            # Global exploration using differential mutation\n            new_population = []\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[indices]\n                mutant = a + self.learning_rate * (b - c)\n                mutant = np.clip(mutant, self.lb, self.ub)\n                \n                # Local search with a probability\n                if np.random.rand() < self.local_search_ratio:\n                    local_search_step = np.random.randn(self.dim) * 0.1\n                    mutant = np.clip(mutant + local_search_step, self.lb, self.ub)\n                \n                offspring_fitness = func(mutant)\n                num_evaluations += 1\n                \n                if offspring_fitness < fitness[i]:\n                    new_population.append(mutant)\n                    fitness[i] = offspring_fitness\n                    if offspring_fitness < best_fitness:\n                        best_individual = mutant\n                        best_fitness = offspring_fitness\n                else:\n                    new_population.append(population[i])\n            \n            population = np.array(new_population)\n        \n        return best_individual, best_fitness", "name": "AdaptiveMemeticSearch", "description": "Adaptive Memetic Search with Dynamic Learning - An optimization algorithm combining adaptive local search with a dynamic learning strategy to enhance global exploration and local exploitation balance in black-box optimization.", "configspace": "", "generation": 48, "fitness": 0.15867667023133428, "feedback": "The algorithm AdaptiveMemeticSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.11.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.32813612771430045, 0.32218507212960434, 0.3292520550571195, 0.3239492784507132, 0.330918290544835, 0.3267614413678973, 0.3418897195000915, 0.33373434042038963, 0.3396200675377916, 0.05501018106896516, 0.07139384441355434, 0.0669418576457137, 0.05208243388204448, 0.07343797974229216, 0.0611472483544927, 0.0507271934942255, 0.057840671615717265, 0.049776940002491776, 0.08664541094568157, 0.0861054618851187, 0.08229522947647272, 0.0801538640504732, 0.08366095641218707, 0.08941681781290067, 0.08367931594588152, 0.08652270403445617, 0.08173298779407978, 0.06746635255402345, 0.07002245366324045, 0.06897233832577154, 0.07141587623682388, 0.07190392323487871, 0.06876654565977247, 0.08703694544121521, 0.06792910001123798, 0.06717414152049972, 0.14877918167154636, 0.8862917888508491, 0.4833129784893555, 0.12510309299224753, 0.48548972346703867, 0.38586327749863936, 0.17022674161334217, 0.23551105674294393, 0.24069370523581524, 0.15732482423750738, 0.15247239172386995, 0.1418791046408473, 0.14605115458308415, 0.16822757514940112, 0.14852990506320385, 0.1607812518176681, 0.1579033379792807, 0.159219521245468, 0.28753547054280515, 0.2690343745154702, 0.26530115902855356, 0.26365114869815764, 0.26883290471628185, 0.2759663301420856, 0.24437891728335093, 0.26617823631396054, 0.2555347106620669, 0.0878187548503101, 0.09104896807239327, 0.08984926944970861, 0.09927641510002616, 0.10097633791204119, 0.10267754201413626, 0.0994422595562231, 0.09512952426569676, 0.10158909281333794, 0.10126259148026273, 0.07794919490641727, 0.08342905052083438, 0.10780329455678161, 0.09716225738556661, 0.10842162499508945, 0.10458327268480971, 0.09760736831797034, 0.10855191174121681, 0.06157734247139468, 0.03368382580009477, 0.03444401565486277, 0.0470249177680242, 0.040781701445768315, 0.0431288939902057, 0.04742155598622122, 0.05574128238673115, 0.04055054920212531, 0.14632979707668803, 0.1643651326017811, 0.16934594014461823, 0.16637296452988226, 0.16424766135306834, 0.13500363417692385, 0.16051652405711447, 0.18982601147706468, 0.1691684426436032, 0.0021069025668548624, 0.0007865363776400347, 0.0009515701024683798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037385773972913316, 0.0009019641503537068, 0.06811644173815146, 0.06677911275910231, 0.07474133370382186, 0.06716297754218381, 0.0765028797460694, 0.07330708792599794, 0.07404823382032188, 0.07509132237216143, 0.07612692516443476, 0.33512161892712844, 0.32995662338684106, 0.31344963327054465, 0.3146843682070668, 0.3365437579832111, 0.30612465332690286, 0.323362217783305, 0.30978931767848783, 0.3318954375610278, 0.07549234395340687, 0.08081983876766774, 0.0802455124561986, 0.08908960147075906, 0.08168459933546679, 0.0724189723995935, 0.07996887752462334, 0.07675865066529952, 0.08978960453923479, 0.1444417665951554, 0.1413601031657663, 0.16929501808120984, 0.170618486504017, 0.13896547708229534, 0.15211417336076416, 0.15773365342046075, 0.13780371886266074, 0.19122269290914684, 0.23298749293319387, 0.2238373075433242, 0.21746393779399964, 0.22025552804627768, 0.21918925635614284, 0.21946925133403272, 0.22408266654066722, 0.23666644711323537, 0.22730320362680145, 0.16724246773435147, 0.16325687950266932, 0.16730170403092326, 0.17279849096468547, 0.17575980353657705, 0.16871616381574672, 0.17232794739596613, 0.17954906547273564, 0.16927304332389392, 0.17434141614326926, 0.1777058997317008, 0.17645267178338342, 0.18266143594643347, 0.16712090375324118, 0.18137999734415122, 0.18158827718720327, 0.1809710169386446, 0.18682963635844663, 0.16375973621054163, 0.17134474201440986, 0.1709876505760527, 0.1691508592762695, 0.1715231871288979, 0.17054766330722337, 0.1645416582431819, 0.16843081784336678, 0.17490413774456082, 0.26416917507452453, 0.23489113306286147, 0.27901851890046514, 0.17011537620991546, 0.17067570622562744, 0.21392531478785992, 0.2557596851521027, 0.1753058633241118, 0.24262565210025033, 0.19899060665147328, 0.3021664799496011, 0.23682660931214572, 0.2060620941823117, 0.1823591365828604, 0.24603369474028192, 0.19741121123687733, 0.25525716310571267, 0.18474985436072333, 0.20927447727826232, 0.20046437400526607, 0.18920737288408995, 0.1885160309702133, 0.17687251887422517, 0.2038934064303466, 0.19051215410373823, 0.20085662258675918, 0.18072501425158227, 0.06993249329288409, 0.08101990551346894, 0.07480929281240112, 0.07824497032712718, 0.07139154053100116, 0.06305823482350692, 0.06395726228841414, 0.07474815032287918, 0.06721076829024619]}, "mutation_prompt": null}
{"id": "f08d66a0-d5d7-45e7-8979-702e79405b05", "solution": "import numpy as np\n\nclass AdaptiveSwarmQuantumEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (8 * dim)))  # adjusted heuristic for population size\n        self.F_min, self.F_max = 0.4, 0.9  # range for adaptive scaling factor\n        self.CR_min, self.CR_max = 0.6, 1.0  # range for adaptive crossover probability\n        self.alpha = 0.1  # learning factor for dynamic adjustments\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Adaptive parameter adjustment\n                F = np.random.uniform(self.F_min, self.F_max)\n                CR = np.random.uniform(self.CR_min, self.CR_max)\n                \n                # Mutation using Swarm-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement with swarm influence\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                swarm_influence = np.random.uniform(self.lb, self.ub, self.dim)\n                offspring = np.where(quantum_selection, offspring, 0.5 * (best_individual + swarm_influence))\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection and dynamic adjustment\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n                        # Adaptive adjustments based on success\n                        self.F_max = min(1.0, self.F_max + self.alpha * (self.F_max - self.F_min))\n                        self.CR_min = max(0.0, self.CR_min - self.alpha * (self.CR_max - self.CR_min))\n        \n        return best_individual, best_fitness", "name": "AdaptiveSwarmQuantumEvolutionaryAlgorithm", "description": "Adaptive Swarm Quantum Evolutionary Algorithm (ASQEA) combines adaptive parameter control with swarm intelligence and quantum-inspired operations to efficiently explore and exploit complex search spaces.", "configspace": "", "generation": 49, "fitness": 0.1256226478653646, "feedback": "The algorithm AdaptiveSwarmQuantumEvolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.08.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.2860038853715028, 0.23819731033691993, 0.24775978827607414, 0.26554743572773987, 0.24914148393547364, 0.24692370137908104, 0.242272047459704, 0.24516484633879476, 0.26015865009562034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006939043846879711, 9.999999999998899e-05, 0.06616091899234267, 0.0749166602453073, 0.0798935024789067, 0.08282758443654825, 0.0751625976329462, 0.07790943213713308, 0.07549765310288348, 0.09311415545418622, 0.07092593483382714, 0.07724964682382451, 0.060825679273613376, 0.06432294190327448, 0.05677524127597022, 0.06220966932944916, 0.06779359823858999, 0.07751606439846759, 0.059472842687547045, 0.06839351900139157, 0.12877288243570506, 0.15779461958816465, 0.15443419275242287, 0.13291911673469237, 0.16768171588238479, 0.14413050942359096, 0.15748192616312684, 0.1480052552079193, 0.16947016339450804, 0.10709181550259561, 0.1634447355480484, 0.12094375002621705, 0.1578228290450452, 0.11696332792072639, 0.1082948885509657, 0.11184141688415805, 0.11818832147985792, 0.17354810223909467, 0.18620503253959253, 0.1893812220092942, 0.1944123404950906, 0.17703057702005787, 0.16450992537404252, 0.2080256024386372, 0.18221062232651541, 0.17489963268485875, 0.16920455288873493, 0.10497442071726859, 0.06528310783524482, 0.054562552492123384, 0.0477857479688939, 0.05556417923452206, 0.06157050037924405, 0.0721423795673134, 0.08354813952980222, 0.06901256933575006, 0.08047698790640478, 0.07961843250099443, 0.07000551294922863, 0.08617215996453575, 0.05966500122814744, 0.06638185708766975, 0.08103392117533736, 0.08745855060632735, 0.06963278401011663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07838911993776165, 0.08070667590072722, 0.07025252396650172, 0.09580932901669004, 0.06147605757044183, 0.08029746881954014, 0.0941473417350902, 0.06525230274406313, 0.07884276579327976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024128898435562096, 0.012777727065211963, 0.008878790942382642, 0.007126024133215836, 0.021724747137749856, 0.02430617199647145, 0.008440994198244733, 0.006576164207641844, 0.021377238195540493, 0.25654313204634716, 0.2699869355118515, 0.2687652894421524, 0.28480750029953583, 0.2503858787702513, 0.2719430403489197, 0.2585068478221907, 0.27815779519753436, 0.2713006300041969, 0.06810102540877139, 0.07040170318535088, 0.07508649802262202, 0.06358808033694663, 0.07718271937885524, 0.07584630362982059, 0.07240563071966322, 0.06820672282441187, 0.06437908815014126, 0.1483756894942717, 0.14552002813755205, 0.1417321109128198, 0.13766266535167793, 0.13983450119125296, 0.12736220785754937, 0.13066852809090068, 0.14282404826257988, 0.13723054565076476, 0.20498862570799536, 0.2025107002229395, 0.19462360327442685, 0.1911403731002339, 0.2046219797329638, 0.19650407551611104, 0.18833344604565383, 0.19343037180844513, 0.19413805622063351, 0.14694401480461416, 0.15543567450357332, 0.13852817520201866, 0.13613026114369386, 0.1488269439257116, 0.15577378885881066, 0.13513351557548758, 0.15620493896005117, 0.14258670959476627, 0.1875635193236217, 0.1829231076709088, 0.20619440660900623, 0.18606058268606662, 0.1825668494514473, 0.1924512118195293, 0.20318351181164807, 0.18925806589390537, 0.18729095629208903, 0.16342866497333164, 0.17483844504525747, 0.16454255059479184, 0.1641444071185757, 0.1786421084222316, 0.17667730711466012, 0.16707332971061783, 0.16939873616215884, 0.17316619563754498, 0.145868207544403, 0.19093212961617267, 0.19783426032071016, 0.2557897594469094, 0.2290847703719452, 0.22653817235196583, 0.2434486181315647, 0.26287844553527406, 0.23621740828157745, 0.27305187422265065, 0.1960585995008598, 0.3436402660449812, 0.31678279062300896, 0.21940746502985142, 0.33517761103436894, 0.20278971603579599, 0.16370209626508037, 0.19129725071002945, 0.20472511905301694, 0.20515162013365829, 0.18740295452153766, 0.19554634978111574, 0.18259063569193046, 0.1773237222289079, 0.17746673097244325, 0.21435401622682493, 0.18418949950539265, 0.07990157453961855, 0.07565025304292483, 0.07639322397612447, 0.06774807686224027, 0.07338939312219994, 0.06562767422888427, 0.059550452987682134, 0.07831033607719418, 0.07106758992254958]}, "mutation_prompt": null}
{"id": "aeb9de34-79f5-4302-a491-1fc70368da14", "solution": "import numpy as np\n\nclass LevyFlightParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(10, int(budget / (5 * dim)))  # heuristic for population size\n        self.w = 0.7  # inertia weight\n        self.c1 = 1.5 # cognitive (particle) constant\n        self.c2 = 1.5 # social (swarm) constant\n        \n    def levy_flight(self, size, beta=1.5):\n        # Lévy flight step-size generation using Mantegna's algorithm\n        sigma_u = (np.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma_u, size)\n        v = np.random.normal(0, 1, size)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n    \n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = particles.copy()\n        personal_best_fitness = np.array([func(ind) for ind in particles])\n        num_evaluations = self.population_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity using inertia, personal and global best\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] + \n                                 self.c1 * r1 * (personal_best_positions[i] - particles[i]) + \n                                 self.c2 * r2 * (global_best_position - particles[i]))\n                \n                # Levy flight exploration\n                levy_step = self.levy_flight(self.dim)\n                velocities[i] += levy_step\n                \n                # Update particle position\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lb, self.ub)\n                \n                # Evaluate fitness\n                fitness = func(particles[i])\n                num_evaluations += 1\n                \n                # Update personal and global bests\n                if fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = particles[i]\n                    personal_best_fitness[i] = fitness\n                    if fitness < global_best_fitness:\n                        global_best_position = particles[i]\n                        global_best_fitness = fitness\n        \n        return global_best_position, global_best_fitness", "name": "LevyFlightParticleSwarmOptimization", "description": "Adaptive Lévy Flight-Based Particle Swarm Optimization leveraging adaptive flight patterns and dynamic exploration-exploitation balance to efficiently navigate complex search landscapes.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"module 'numpy' has no attribute 'gamma'\").", "error": "AttributeError(\"module 'numpy' has no attribute 'gamma'\")", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {}, "mutation_prompt": null}
{"id": "a9665f1b-0686-401c-aa9d-b71f5a342892", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "d4e28c8f-bb97-4166-99c9-74df1668a36f", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "1c3498e2-c5d5-4229-89fb-23b50736ae32", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.harmony_memory_size = max(5, int(budget / (15 * dim)))  # heuristic for harmony memory size\n        self.hmcr = 0.9  # Harmony Memory Considering Rate\n        self.par_min = 0.1  # Minimum Pitch Adjustment Rate\n        self.par_max = 0.99  # Maximum Pitch Adjustment Rate\n        self.bw = 0.02 * (self.ub - self.lb)  # Bandwidth for pitch adjustment\n\n    def __call__(self, func):\n        # Initialize harmony memory\n        harmony_memory = np.random.uniform(self.lb, self.ub, (self.harmony_memory_size, self.dim))\n        fitness = np.array([func(harmony) for harmony in harmony_memory])\n        num_evaluations = self.harmony_memory_size\n\n        best_idx = np.argmin(fitness)\n        best_harmony = harmony_memory[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while num_evaluations < self.budget:\n            for _ in range(self.harmony_memory_size):\n                if num_evaluations >= self.budget:\n                    break\n\n                # Generate new harmony\n                new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n                for j in range(self.dim):\n                    if np.random.rand() < self.hmcr:\n                        # Consider harmony memory\n                        new_harmony[j] = harmony_memory[np.random.randint(self.harmony_memory_size), j]\n                        if np.random.rand() < self.current_par(num_evaluations):\n                            # Pitch adjustment\n                            new_harmony[j] += self.bw * (2 * np.random.rand() - 1)\n                            new_harmony[j] = np.clip(new_harmony[j], self.lb, self.ub)\n                    else:\n                        # Random selection\n                        new_harmony[j] = np.random.uniform(self.lb, self.ub)\n\n                # Evaluate new harmony\n                new_fitness = func(new_harmony)\n                num_evaluations += 1\n\n                # Update harmony memory\n                if new_fitness < max(fitness):\n                    worst_idx = np.argmax(fitness)\n                    harmony_memory[worst_idx] = new_harmony\n                    fitness[worst_idx] = new_fitness\n\n                    if new_fitness < best_fitness:\n                        best_harmony = new_harmony\n                        best_fitness = new_fitness\n\n        return best_harmony, best_fitness\n\n    def current_par(self, num_evaluations):\n        # Adaptive Pitch Adjustment Rate\n        return self.par_min + (self.par_max - self.par_min) * (num_evaluations / self.budget)", "name": "AdaptiveHarmonySearch", "description": "Adaptive Harmony Search with Dynamic Pitch Adjustment, leveraging harmony memory and adaptive parameters for efficient global optimization across varying landscapes.", "configspace": "", "generation": 53, "fitness": 0.1985343731041991, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.42871001924457186, 0.43507111139256827, 0.47832272684375055, 0.4269909257300344, 0.4026908413060609, 0.44275350496685106, 0.4443886416222692, 0.4619930920797848, 0.46867343844090326, 0.1316128787280879, 0.1091952132484747, 0.1084200433825736, 0.11900991104211822, 0.10687262224995375, 0.11176129728998951, 0.1212719788932507, 0.1428684089161506, 0.1147702949963959, 0.1479802767465842, 0.14678776594937482, 0.15315261420829918, 0.16610995866335398, 0.13374614921325756, 0.16005810862476433, 0.1664193922626711, 0.16433223201265645, 0.128659229290787, 0.13922286825075347, 0.1530932785260538, 0.1343260383747824, 0.1505900619077678, 0.15505710290605368, 0.13119434425191412, 0.132199350605695, 0.13946229053799175, 0.12348128473603759, 0.8194545081646964, 0.7519879648395333, 0.7816245160331154, 0.7958341496308357, 0.8000602264832565, 0.7388195403151979, 0.7559560998994865, 0.7979229615270031, 0.827356653552601, 0.16528705972004865, 0.174385833477402, 0.15890667107433343, 0.1947166715572094, 0.23731601834391536, 0.20167473019976623, 0.14392851502771753, 0.15066692013184346, 0.18554553914138805, 0.16454187089691075, 0.1602175740498778, 0.15795714610681533, 0.33832386135623516, 0.3373716312733266, 0.24403374572533854, 0.20258057202827984, 0.33140535580527364, 0.25734391348109176, 0.16474256249401276, 0.10861776403015277, 0.17776426561120573, 0.13877245794653503, 0.14833401235050514, 0.19007053507389482, 0.15030818192264217, 0.16195409022793938, 0.1503666021674802, 0.1279177432796179, 0.123883756465347, 0.12855830214258168, 0.12939491356893917, 0.13971146295979853, 0.1316863774401983, 0.12342284141757975, 0.13860500273641996, 0.13335651904894208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0098962811861798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014701350018069714, 0.07571408509624111, 0.08080556588862686, 0.09605894597357312, 0.03348678339640898, 0.05572801953595152, 0.07345366597065717, 0.11307699573191343, 0.05389476861575826, 0.09590880400249102, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09607128187780367, 0.08610229736421238, 0.0632095074225486, 0.12573125888348435, 0.08382382935190691, 0.09998656315034982, 0.10744525547603101, 0.10900883479880574, 0.08944158864938923, 0.38556467977267295, 0.39370136722212323, 0.4032151573533094, 0.4328622008238471, 0.384569063509129, 0.3885790075118706, 0.38217346868128976, 0.4124180841756331, 0.3883568625433297, 0.10863860435968531, 0.11088249874542, 0.09487972030646252, 0.09830577328829881, 0.10021669405630385, 0.0957755185614787, 0.09413691934566326, 0.09142430818720171, 0.10163461363467252, 0.1323166793042987, 0.14786647505599448, 0.12819086532793533, 0.16831888332253242, 0.14290329284859948, 0.14947925460788392, 0.14539329123149058, 0.14542047870559693, 0.13800648347846856, 0.2838127791611842, 0.27841426504003386, 0.2867304468690802, 0.27591896216483114, 0.2826922673222855, 0.29319631226871257, 0.29391550661927524, 0.2853689938003974, 0.28297012694235424, 0.2032223559192904, 0.2059200678473233, 0.18600871714735645, 0.17374847095810386, 0.2365760460439672, 0.20602580025359252, 0.22496769958089669, 0.22466175879949546, 0.19300893408856135, 0.2103117533056541, 0.19474369700718297, 0.2194699575468353, 0.21576975254648467, 0.20908882825648312, 0.19416789728521677, 0.23303459491382772, 0.19598983159930017, 0.1953659838760088, 0.23706352916744622, 0.2082410475611518, 0.20947822218366297, 0.21279280978058124, 0.20238643039985948, 0.20534546219840322, 0.2874455280084083, 0.2342697938968421, 0.2488492655109663, 0.17732208667560956, 0.17679090270137876, 0.2482323233811593, 0.1597978314940428, 0.3368387833785914, 0.18500427350615212, 0.16267947650813386, 0.16283347481186883, 0.15005605444164416, 0.18976921275106418, 0.1673173102044151, 0.19444931066392523, 0.197281450368342, 0.18548315274384042, 0.1994245527988351, 0.18433521417784782, 0.33759835685888295, 0.22404676646402766, 0.18275988733979165, 0.19341600776324253, 0.18695219469889213, 0.1833194990248851, 0.202145741791385, 0.1969728747827756, 0.18479062173557093, 0.17983667380679436, 0.16645214709362877, 0.0857821279780202, 0.08105427520291109, 0.07769439176422943, 0.08826975756379818, 0.08323941554407155, 0.09506245117164103, 0.09886048647744206, 0.08884482543633587, 0.08342391501029267]}, "mutation_prompt": null}
{"id": "83cf602c-252b-4089-9931-d7ae212b43ba", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "c6f3a4f9-30ad-4f59-9c70-cc0bc85fc8b2", "solution": "import numpy as np\n\nclass HybridGeneticAlgorithmAdaptiveNiching:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (8 * dim)))\n        self.crossover_rate = 0.7\n        self.mutation_rate = 0.1\n        self.niche_radius = 0.1\n\n    def __call__(self, func):\n        def mutate(individual):\n            mutation_vector = np.random.uniform(self.lb, self.ub, self.dim)\n            mutated = np.where(np.random.rand(self.dim) < self.mutation_rate, mutation_vector, individual)\n            return np.clip(mutated, self.lb, self.ub)\n\n        def crossover(parent1, parent2):\n            mask = np.random.rand(self.dim) < self.crossover_rate\n            offspring = np.where(mask, parent1, parent2)\n            return offspring\n        \n        def niching_selection(pop, fit):\n            selected = []\n            fit_sorted_indices = np.argsort(fit)\n            for idx in fit_sorted_indices:\n                if all(np.linalg.norm(pop[idx] - pop[s]) > self.niche_radius for s in selected):\n                    selected.append(idx)\n                    if len(selected) > self.population_size / 2:\n                        break\n            return selected\n        \n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            selected_indices = niching_selection(population, fitness)\n            next_generation = []\n            for idx in selected_indices:\n                if num_evaluations >= self.budget:\n                    break\n                partner_idx = np.random.choice(selected_indices)\n                offspring = crossover(population[idx], population[partner_idx])\n                offspring = mutate(offspring)\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                next_generation.append((offspring, offspring_fitness))\n            \n            next_generation.sort(key=lambda x: x[1])\n            for i, (offspring, offspring_fitness) in enumerate(next_generation):\n                if i < len(selected_indices):\n                    population[selected_indices[i]] = offspring\n                    fitness[selected_indices[i]] = offspring_fitness\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "HybridGeneticAlgorithmAdaptiveNiching", "description": "A Hybrid Genetic Algorithm with Adaptive Niching that dynamically balances exploration and exploitation by using niching techniques to maintain diversity and adaptively adjusting crossover and mutation rates.", "configspace": "", "generation": 55, "fitness": 0.09129306959558438, "feedback": "The algorithm HybridGeneticAlgorithmAdaptiveNiching got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.1773984073194198, 0.19113385887819245, 0.17686357008147102, 0.1784025042124946, 0.1757057396577134, 0.182179271069005, 0.15994437477156642, 0.1972282903276451, 0.16168879394759839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04893749577990525, 0.05321313431348296, 0.040313791038314006, 0.04522984485676951, 0.04714212623392866, 0.08680692695245029, 0.04436977952319954, 0.04319104814642338, 0.07691865118194596, 0.021618106622441124, 0.028168367118588833, 0.03512985939638802, 0.030550142267880442, 0.04010891209863565, 0.03211588548420663, 0.02891656210525939, 0.027898994399457533, 0.04749368631302553, 0.08116701440415874, 0.0838848451298363, 0.09380977998803086, 0.06902809673803711, 0.0856251293528143, 0.08766012396216738, 0.0799309983904366, 0.09475318272953304, 0.10193594909389536, 0.06537508445705731, 0.14025787556613212, 0.10573754486508768, 0.06253529168960326, 0.07378120904469432, 0.06963831377696428, 0.10943219369632118, 0.07600004238394376, 0.10475932570199198, 0.13018440654516816, 0.12793140804872327, 0.10774751724188991, 0.12277124574531795, 0.15574804405509135, 0.13595426119553233, 0.11461069312148686, 0.12478517315923199, 0.12090285778020948, 0.0021254339975799175, 0.003860336493925365, 0.020432756731772694, 0.00992968383232895, 9.999999999998899e-05, 0.0005193739345304982, 9.999999999998899e-05, 0.030898489698466425, 0.016461116478912463, 9.999999999998899e-05, 9.999999999998899e-05, 0.002079024911644023, 0.010060472517669172, 9.999999999998899e-05, 0.007252476859723744, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04556180854028058, 0.10987462865729636, 0.051294589218054853, 0.044669195072529644, 0.03871663962915539, 0.02715224358099444, 0.07924141058723799, 0.06674524681025018, 0.03790630284338492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006140545950072518, 9.999999999998899e-05, 0.0027170214277102422, 0.00023025568600620883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2037336593929574, 0.21404738494495446, 0.21937805198220017, 0.18046444832764086, 0.19868935917926311, 0.1917174333735685, 0.17987288986248218, 0.21099343810050564, 0.20509629924329176, 0.03530596807246933, 0.050761128145592194, 0.039784877980852285, 0.05446268004974464, 0.039321375604417286, 0.03619887098172403, 0.05048878416869551, 0.042499170156642174, 0.0343614497061715, 0.13744646289859375, 0.141143350765922, 0.14179635724320983, 0.1666983761017976, 0.13518532728981048, 0.13304409839218256, 0.12344816186217811, 0.1288147884625992, 0.1541958343254044, 0.18712589301578686, 0.16220589043061284, 0.1613932299901244, 0.15990803595994185, 0.18120849987201204, 0.1667735491688711, 0.15175443359215202, 0.17435955120164637, 0.1628442500854409, 0.10603969690705783, 0.10026128775163257, 0.10654858594428929, 0.11468699877353516, 0.10536649893340999, 0.10058785573611517, 0.11346533781188084, 0.1237427242099084, 0.11985584544380412, 0.15112659858128263, 0.15865681042171398, 0.15517163283393343, 0.15840813210376148, 0.15442718959061352, 0.17131393113522264, 0.14728867591124073, 0.15996259718804773, 0.16298010224279913, 0.14188629433981859, 0.14696462158571666, 0.1454560363615266, 0.133716912709817, 0.14598421315339605, 0.15902622971768576, 0.15159570019541047, 0.1288869785573894, 0.16207881422481074, 0.16210533766334378, 0.22981955821785727, 0.1593083731255257, 0.14504974339836285, 0.27184388803939863, 0.25445102112408136, 0.2288890623395501, 0.1523679335782826, 0.1643148050995451, 0.1539146826217227, 0.15686680572406608, 0.19069279369248515, 0.12551494486893267, 0.14106803613537722, 0.15069755880170743, 0.16392573353349094, 0.1545551665120254, 0.14053834067289295, 0.1824247628312301, 0.20089064998795425, 0.1884558625246393, 0.19187205153592923, 0.1886992766646719, 0.18211505115256366, 0.1728772653381142, 0.19508822201654175, 0.17927067897533977, 0.05698359665801178, 0.04996070934215968, 0.05718234971874403, 0.05904295803679849, 0.05875739312325623, 0.046857738077931366, 0.046642251231849174, 0.04671579437542828, 0.04705490741264162]}, "mutation_prompt": null}
{"id": "0f089992-dda4-425f-ad5b-e27022aec3fa", "solution": "import numpy as np\n\nclass SwarmGuidedStochasticSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # Heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        \n    def __call__(self, func):\n        # Initialize swarm\n        swarm_positions = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        swarm_velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(swarm_positions)\n        personal_best_fitness = np.array([func(ind) for ind in swarm_positions])\n        num_evaluations = self.swarm_size\n\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm_velocities[i] = (self.inertia_weight * swarm_velocities[i] +\n                                       self.cognitive_weight * r1 * (personal_best_positions[i] - swarm_positions[i]) +\n                                       self.social_weight * r2 * (global_best_position - swarm_positions[i]))\n                \n                # Update position\n                swarm_positions[i] += swarm_velocities[i]\n                swarm_positions[i] = np.clip(swarm_positions[i], self.lb, self.ub)\n                \n                # Stochastic perturbation\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate_position = np.clip(swarm_positions[i] + perturbation, self.lb, self.ub)\n                \n                # Evaluate candidate position\n                candidate_fitness = func(candidate_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if candidate_fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = candidate_position\n                    personal_best_fitness[i] = candidate_fitness\n                    \n                    # Update global best\n                    if candidate_fitness < global_best_fitness:\n                        global_best_position = candidate_position\n                        global_best_fitness = candidate_fitness\n        \n        return global_best_position, global_best_fitness", "name": "SwarmGuidedStochasticSearch", "description": "A Swarm-Guided Stochastic Search (SGSS) algorithm that combines swarm intelligence with stochastic processes to balance exploration and exploitation in high-dimensional black-box optimization.", "configspace": "", "generation": 56, "fitness": 0.20158137663419698, "feedback": "The algorithm SwarmGuidedStochasticSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.39668663520996017, 0.38259682224934566, 0.3713663269519899, 0.3943095257548841, 0.3825247848908798, 0.3992323478899842, 0.38439630250630397, 0.4001832870951114, 0.40008641559665425, 0.02822800495079769, 0.030722483842127835, 0.022566123176530395, 0.010676349670060703, 0.03983581859757146, 0.019882069928962687, 0.03820462822037529, 0.021135433713078022, 0.019266872193131945, 0.10334553842833161, 0.0866812322961259, 0.11710311041353816, 0.09336576780422312, 0.11896504418368892, 0.10559952466421396, 0.09917154194789402, 0.12929944421275685, 0.11342172170750542, 0.08365889114071656, 0.09450966759570167, 0.11037214244042937, 0.10434793899450356, 0.08238677437158826, 0.0879482274704948, 0.08315676676627914, 0.0835789157465946, 0.09274541885627985, 0.9518569998054911, 0.9523160230606703, 0.9483141430204579, 0.9556324739602177, 0.948993019925535, 0.9549746149102457, 0.9413083269842455, 0.9485847896721988, 0.9497921082593472, 0.227568514109743, 0.24056174986843903, 0.23545168467132083, 0.2352642720485688, 0.2417030031646039, 0.23776980006250747, 0.22988482128927012, 0.229663589821824, 0.2612646510568263, 0.2653425496903402, 0.3130185192290845, 0.2232936162225445, 0.23408635474778183, 0.26500504561443927, 0.20491353231975962, 0.29819097593974353, 0.2319661929099901, 0.2757004130512909, 0.1318686015318975, 0.13634300213230277, 0.13590629276930066, 0.11597006921046249, 0.1078823117881691, 0.11429806173498602, 0.12409194938264267, 0.08500270902223106, 0.1427617138839976, 0.11036553375550684, 0.13400193284295725, 0.11788307454443459, 0.1494917837632782, 0.14350360484627944, 0.11723815159257778, 0.1276818849819028, 0.13529341818167517, 0.11685177962988602, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023243718340625885, 9.999999999998899e-05, 0.0008232266208353378, 9.999999999998899e-05, 9.999999999998899e-05, 0.05153916428064076, 0.11427731895637028, 0.08135935343703571, 0.06959328449800628, 0.1859426519733296, 0.012101891983593682, 0.07004881331779089, 0.11894780385266235, 0.15299865444908878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07648346410573736, 0.08294716380305978, 0.048913571404339384, 0.09347745904098959, 0.06590288639413444, 0.09901059834283499, 0.062499758794023585, 0.06154094462255055, 0.052241007569634124, 0.3789895339031484, 0.36482660957018875, 0.36283791012897815, 0.356351019648807, 0.3741370393881429, 0.35849249998658494, 0.37786150532291574, 0.3640105838814982, 0.3944600633054446, 0.07534030805013447, 0.08810017386991897, 0.07658677643015233, 0.11051377422055153, 0.09131666706724717, 0.09723904398786798, 0.10060730277136898, 0.11707536367307403, 0.09799642547628884, 0.2073502305641296, 0.21435165368249387, 0.15990837453819462, 0.1817853608617218, 0.22134394607683638, 0.1738269952355691, 0.18272726198966405, 0.18783336179082333, 0.20473903833428708, 0.2545708688430651, 0.2732141201930707, 0.2700132984787965, 0.26757424602830804, 0.2609334321000115, 0.2251230222663143, 0.269259003432731, 0.262969933077721, 0.27176775447586654, 0.21368682445359277, 0.19168258413630979, 0.2010940593362669, 0.21296474187797831, 0.1946615422819472, 0.2083444051858303, 0.2015687637466652, 0.19820994369681122, 0.16768625573964924, 0.2114004635054394, 0.20627672690428467, 0.19805887745058637, 0.20230065722914337, 0.17871666414839715, 0.19603081540887635, 0.19147973995770418, 0.22135207738254004, 0.20212869634884745, 0.18870362362432247, 0.18716089764660215, 0.1787087867440419, 0.18543876712098883, 0.21044293513779588, 0.19640013520948307, 0.19932515449647425, 0.18547708983673905, 0.18108326162931054, 0.15096167999026533, 0.18561708052727477, 0.1832211982098737, 0.16095987586061988, 0.19536216511365412, 0.1649346292755729, 0.37243562066276603, 0.5515036773989883, 0.16443653799823876, 0.46112698690980247, 0.16837235014566054, 0.39859403827720996, 0.43247117521361, 0.44241731119217986, 0.16721717765743072, 0.16803558038009192, 0.39087429785721584, 0.45216639001363157, 0.17741625252145654, 0.20768854653117352, 0.19713659786305504, 0.1851002497233516, 0.18075938100479394, 0.17490168144735851, 0.17556945551397762, 0.17691154311736046, 0.1922552682839156, 0.08458667819570687, 0.08738358549533765, 0.10063491684731984, 0.08149468724714948, 0.10699519963641013, 0.07761386166505924, 0.07221990178340387, 0.08490684761353529, 0.07496763464667833]}, "mutation_prompt": null}
{"id": "344ee4d3-5d8d-4797-a47f-48ac5d317976", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "8fda3a02-c618-4877-8626-4f715e943094", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "8bfd2a7f-9cc7-4f3b-b60d-247fc20614dc", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "13228c2d-9e96-4762-90f7-786bf168663e", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "848e06cf-bc3e-4438-8782-fd14061def02", "solution": "import numpy as np\n\nclass AdaptiveSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))\n        self.c1_initial = 2.0  # Cognitive coefficient\n        self.c2_initial = 2.0  # Social coefficient\n        self.c1_final = 0.5    # Final cognitive coefficient\n        self.c2_final = 0.5    # Final social coefficient\n        self.inertia_weight_initial = 0.9\n        self.inertia_weight_final = 0.4\n\n    def __call__(self, func):\n        # Initialize swarm\n        positions = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_fitness = np.array([func(p) for p in positions])\n        num_evaluations = self.swarm_size\n\n        # Find initial global best\n        best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_positions[best_idx]\n        global_best_fitness = personal_best_fitness[best_idx]\n\n        while num_evaluations < self.budget:\n            # Dynamic inertia weight and coefficients\n            inertia_weight = self.inertia_weight_initial - (self.inertia_weight_initial - self.inertia_weight_final) * (num_evaluations / self.budget)\n            c1 = self.c1_initial - (self.c1_initial - self.c1_final) * (num_evaluations / self.budget)\n            c2 = self.c2_initial - (self.c2_initial - self.c2_final) * (num_evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = c1 * r1 * (personal_best_positions[i] - positions[i])\n                social_velocity = c2 * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_velocity + social_velocity\n\n                # Update position\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lb, self.ub)\n\n                # Evaluate new fitness\n                fitness = func(positions[i])\n                num_evaluations += 1\n\n                # Update personal best\n                if fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_fitness[i] = fitness\n\n                # Update global best\n                if fitness < global_best_fitness:\n                    global_best_position = positions[i]\n                    global_best_fitness = fitness\n\n        return global_best_position, global_best_fitness", "name": "AdaptiveSwarmIntelligence", "description": "Adaptive Swarm Intelligence Optimization Algorithm that dynamically adjusts particle velocities and personal bests to balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 61, "fitness": 0.18093946236248207, "feedback": "The algorithm AdaptiveSwarmIntelligence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.3877848496235151, 0.31368258076765754, 0.29347221912760446, 0.41727424452569095, 0.4040320281134421, 0.35090505500459745, 0.35805997514923726, 0.3409890229162996, 0.35137887058216477, 0.010249022919476602, 0.0318817885289302, 0.0067281506041965145, 9.999999999998899e-05, 9.999999999998899e-05, 0.034846856191640074, 0.019666102310611833, 0.018115640945334577, 0.01111168918466432, 0.09151323709229742, 0.08213190649097746, 0.10002955022685767, 0.07206174015212496, 0.062266850797497164, 0.08216408308246281, 0.10139814137830305, 0.07690084654257512, 0.08216258692782252, 0.07707967755585321, 0.06217414994663395, 0.06453311275165852, 0.09174180190911341, 0.058937313645633704, 0.07377582403639094, 0.07043155031183401, 0.06927741087055694, 0.06462083530171114, 0.9624908239661402, 0.9643799129198241, 0.9661432546383794, 0.962770689282037, 0.9782831458978913, 0.9618516342744418, 0.9758455400232086, 0.9648759500879442, 0.9763842564198849, 0.232796884391119, 0.2190303273172881, 0.21828467660205775, 0.2098773337839439, 0.14499404554185802, 0.21650728502814354, 0.1695502378014131, 0.1701750900001684, 0.21488235407993805, 0.18302037875134458, 0.2047995088452803, 0.17406881771730842, 0.3644946188294823, 0.18078938220683427, 0.18226668690912495, 0.14245482743209936, 0.3268139375214886, 0.35358203419674383, 0.09514688448093278, 0.09558152290879895, 0.05528315236164072, 0.08556388358915357, 0.06433547603895895, 0.06934852441868045, 0.08682345236519795, 0.11463624899972624, 0.08583804968643238, 0.06321016898060916, 0.10131390752177072, 0.08559744844617145, 0.08960774644760783, 0.09845477771695899, 0.06380494421451954, 0.0764686160015452, 0.09297924319862794, 0.11772975649699458, 0.005138934913471949, 0.0010980912811060506, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001253028396779321, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015188953715169151, 0.07611237534314697, 0.10876134673814808, 0.07460358261763744, 0.09998218194498043, 0.04683488366755262, 0.021406528816077852, 0.042824571457367844, 0.058583154632290246, 0.07564146080545475, 9.999999999998899e-05, 0.0030712273681614555, 0.004171119705581594, 0.008976901004100535, 0.011910372588248896, 0.01603709696736133, 0.0040547154539515295, 0.02321342103397306, 0.0071472777301405666, 0.03926135715511536, 0.006336661318745773, 0.014182050947038283, 0.04814264065403662, 0.03466636677896384, 0.042953170030696985, 0.03352134056483225, 0.04717586243868077, 0.039351852429985956, 0.29985500678107124, 0.3061065976723195, 0.34247129636331086, 0.3668344958461175, 0.34600883916612224, 0.32790436076284235, 0.3145874179173568, 0.3105692707554051, 0.3102022961110731, 0.0717406737513091, 0.08778885472371989, 0.0884146733844936, 0.07616338436769166, 0.07287811204330752, 0.09959826173837405, 0.06646314848536716, 0.07972586683264926, 0.07586328147205745, 0.18381523151884183, 0.15402743443556466, 0.2456682313584665, 0.16259975061487475, 0.2169398761087601, 0.1601293086431269, 0.1672995168383804, 0.16549051608909937, 0.18325069532352456, 0.21899024745022655, 0.22329313437418452, 0.2358133715570423, 0.21939336108890717, 0.2444677084494815, 0.24089936691205072, 0.23609383040351006, 0.23224296221000984, 0.2709758623916788, 0.16083604416059916, 0.1569026182728257, 0.1598404899893089, 0.17288404481806297, 0.19112075416368257, 0.1970186029417781, 0.15541217671023766, 0.18866592825000605, 0.16163926891125646, 0.1847504152757663, 0.18809057570145205, 0.19537982355977768, 0.17759841999769066, 0.18040026531030995, 0.1930901346105316, 0.1861758052275614, 0.18150571692166273, 0.1756368634232951, 0.16336607368472122, 0.1687324321799708, 0.17502743109146834, 0.1840066241281657, 0.1758361314223199, 0.1738181516420626, 0.1628319884991295, 0.1846536816181752, 0.17784218625167125, 0.4477766138297328, 0.18722250032442622, 0.5076590199864022, 0.12555008442224247, 0.1856976608997265, 0.15418513481284368, 0.3901466800288551, 0.17494103322695131, 0.152215152030601, 0.3257436360453495, 0.1641378469790865, 0.2758859351330972, 0.22531122392489533, 0.3254282238616195, 0.3668245510091913, 0.1669093785600826, 0.14968331014027247, 0.3092068720958795, 0.1861505992738507, 0.19942946218194357, 0.19662796563236873, 0.1996982713721258, 0.19334062162288446, 0.18994647030948797, 0.17727673949276868, 0.17983613074595362, 0.20910117007167606, 0.07266286266398148, 0.06565839814467378, 0.07311784217762218, 0.06617684847170402, 0.08451710499850429, 0.06965264281333094, 0.064621055934875, 0.06397373054321365, 0.07119124703132185]}, "mutation_prompt": null}
{"id": "472008cc-b9f6-4913-9d22-757111ba3aff", "solution": "import numpy as np\n\nclass HybridSwarmAdaptiveOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n        gbest_idx = np.argmin(fitness)\n        gbest = population[gbest_idx]\n        gbest_fitness = fitness[gbest_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocities and positions using PSO dynamics\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.w * velocities[i] + \n                                 self.c1 * r1 * (pbest[i] - population[i]) + \n                                 self.c2 * r2 * (gbest - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.lb, self.ub)\n                \n                # Evaluate new candidate\n                candidate_fitness = func(population[i])\n                num_evaluations += 1\n                \n                # Update personal best\n                if candidate_fitness < pbest_fitness[i]:\n                    pbest[i] = population[i]\n                    pbest_fitness[i] = candidate_fitness\n                    \n                    # Update global best\n                    if candidate_fitness < gbest_fitness:\n                        gbest = population[i]\n                        gbest_fitness = candidate_fitness\n\n                # Adaptive Differential Evolution Mutation and Crossover\n                a, b, c = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutated_vector = pbest[a] + self.F * (pbest[b] - pbest[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n\n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    if offspring_fitness < gbest_fitness:\n                        gbest = offspring\n                        gbest_fitness = offspring_fitness\n\n        return gbest, gbest_fitness", "name": "HybridSwarmAdaptiveOptimization", "description": "Hybrid Swarm Adaptive Optimization combines Particle Swarm Optimization and Adaptive Differential Evolution to dynamically adjust strategies and enhance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 62, "fitness": 0.18167624365957075, "feedback": "The algorithm HybridSwarmAdaptiveOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.3050902516134334, 0.28584337214146205, 0.3027535777619277, 0.36224123350124104, 0.31067991560444586, 0.28411821282295124, 0.32755346231251625, 0.2768208700016357, 0.3298365701571818, 0.01961346773056538, 0.05837296362644662, 0.03228322888338675, 0.013414821148635792, 0.018272186322310646, 0.025135682043487928, 0.011478354930212653, 0.013743270778287298, 0.015159441175540578, 0.07036837177914057, 0.08305733945978011, 0.09928015371536625, 0.0851917822619418, 0.10576638450329556, 0.0938737005627116, 0.0761750690438785, 0.08009280339279412, 0.09548094374367333, 0.0767763527199431, 0.06801306570898635, 0.07209934250236782, 0.07439224001065559, 0.053627184776938286, 0.06499438069197272, 0.0815976851284631, 0.06603620747600503, 0.06904444542624699, 0.9416288031608084, 0.9805380810822514, 0.9372733362566413, 0.9067028509699178, 0.8865749221082881, 0.8553992480763942, 0.9476649736812384, 0.8568365243710845, 0.867143597363752, 0.17805585648225986, 0.13870046032967098, 0.15035900626439147, 0.18956551700460078, 0.15569711635740258, 0.1461823916901318, 0.1493002518915022, 0.1578989173482056, 0.18710766159838432, 0.26235685958232147, 0.2757745261318444, 0.2794293991948499, 0.2633044283218511, 0.24343440586756437, 0.20080091804874223, 0.2460593053790242, 0.27053783709045964, 0.3054956168604912, 0.090271530533934, 0.13606118219834262, 0.06388499228080013, 0.10444994627718474, 0.10468349095006901, 0.0912101673635971, 0.10369989950179237, 0.13716005009862187, 0.11793067324974948, 0.09968490165177812, 0.09549569239290956, 0.10138123962370282, 0.10412557827303137, 0.1062487940887068, 0.1267369435832979, 0.1297973162557331, 0.10680041604413071, 0.07527978725136564, 0.021449255323867877, 0.008933716101506062, 0.023513384884582544, 0.01110591808346817, 0.00018587471458009208, 0.00782977949959096, 0.03733783115465028, 0.009683069274600165, 0.013059005138997937, 0.15834363465871848, 0.09045449858691357, 0.11891605618213108, 0.10275516918394445, 0.13269980013465776, 0.09587531683610218, 0.17786058250315162, 0.16057654635062701, 0.11318680424384597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114327954794285, 0.039797999851424515, 0.04472672854161719, 0.0400589190001952, 0.04902570853020627, 0.0551140490873111, 0.04178414834384914, 0.03162824101321127, 0.03704159024916731, 0.33719625676951404, 0.2871281420059826, 0.2934869495358441, 0.2849229140982854, 0.3004109829152771, 0.25283592648858155, 0.3278381108284901, 0.2920250422982502, 0.3142086932202306, 0.07711725848269457, 0.08348753174683499, 0.081325003621454, 0.11154059604400335, 0.08646867676044168, 0.07852822129409975, 0.08733383555916485, 0.0930430296631597, 0.07367151748759715, 0.1951953364476966, 0.15649777928089592, 0.17633858733662655, 0.1732133167682165, 0.17562694719103167, 0.18417758571921694, 0.21802009029298142, 0.15099527566931048, 0.14568475269525627, 0.2357274503527217, 0.2243946827939055, 0.24071842515853614, 0.23927672654737464, 0.24800147702924757, 0.20129466134384122, 0.2167022411730689, 0.22418692695406528, 0.23026703647214164, 0.18340856832514374, 0.1667614130042071, 0.15860265013005315, 0.16826736917838736, 0.18721636675495912, 0.16604434547825653, 0.1526465431304861, 0.1433169524475696, 0.156214638368242, 0.2034680512828908, 0.1791356320042813, 0.18943324052915478, 0.1961162221337749, 0.19368942063500905, 0.18973636845829434, 0.19921970456592175, 0.19085048450123332, 0.20085937939089848, 0.1880523843271642, 0.17624162284678457, 0.1785595889719609, 0.1650888171595969, 0.17286553245872405, 0.1750340295588716, 0.17426430841345153, 0.17618148157369073, 0.18988664372370756, 0.26980891059342715, 0.16462661548978053, 0.33939390193039354, 0.16238006116937775, 0.29313200370805814, 0.1755529029295858, 0.35653395604937255, 0.32094856280331807, 0.48470200277644127, 0.3153783906127732, 0.18941554284024875, 0.34315991910936805, 0.3554825723104288, 0.34491461390511335, 0.1829913303143661, 0.3372175315098179, 0.14684608454036896, 0.14699225426765228, 0.2124071282690092, 0.18813801851758483, 0.1782397061796417, 0.17863114606576325, 0.191256481775668, 0.2007905315548586, 0.17549835786363854, 0.19511292180097117, 0.18262978546219444, 0.07173628607450322, 0.0834076192874883, 0.08856467841423987, 0.06921068601517599, 0.08507725025968627, 0.07078572889000334, 0.09696546446699594, 0.07866593278133283, 0.0774333459163612]}, "mutation_prompt": null}
{"id": "b4e42d03-b08a-4886-9bb2-24fc59cc2b24", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "4004c00f-5cef-4b85-9d82-b248205b3646", "solution": "import numpy as np\n\nclass AdaptiveMultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_swarms = max(3, int(dim / 5))  # number of sub-swarms\n        self.swarm_size = max(5, int(budget / (20 * dim)))  # population size per swarm\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        swarms = [self.initialize_swarm() for _ in range(self.num_swarms)]\n        fitnesses = [np.array([func(p) for p in swarm['positions']]) for swarm in swarms]\n        num_evaluations = self.num_swarms * self.swarm_size\n        \n        self.update_global_best(swarms, fitnesses)\n        \n        while num_evaluations < self.budget:\n            for swarm_idx, swarm in enumerate(swarms):\n                if num_evaluations >= self.budget:\n                    break\n                \n                r1 = np.random.rand(self.swarm_size, self.dim)\n                r2 = np.random.rand(self.swarm_size, self.dim)\n                \n                swarm['velocities'] = self.w * swarm['velocities'] + \\\n                    self.c1 * r1 * (swarm['best_positions'] - swarm['positions']) + \\\n                    self.c2 * r2 * (self.global_best - swarm['positions'])\n                \n                swarm['positions'] += swarm['velocities']\n                swarm['positions'] = np.clip(swarm['positions'], self.lb, self.ub)\n                \n                new_fitnesses = np.array([func(p) for p in swarm['positions']])\n                num_evaluations += self.swarm_size\n                \n                improved = new_fitnesses < fitnesses[swarm_idx]\n                swarm['best_positions'][improved] = swarm['positions'][improved]\n                fitnesses[swarm_idx][improved] = new_fitnesses[improved]\n                \n                self.update_swarm_best(swarm, fitnesses[swarm_idx])\n                self.update_global_best(swarms, fitnesses)\n\n            self.adapt_parameters()  # Adapt parameters dynamically based on progress\n        \n        return self.global_best, self.global_best_fitness\n    \n    def initialize_swarm(self):\n        positions = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        best_positions = positions.copy()\n        return {'positions': positions, 'velocities': velocities, 'best_positions': best_positions}\n    \n    def update_swarm_best(self, swarm, fitness):\n        best_idx = np.argmin(fitness)\n        swarm['local_best'] = swarm['best_positions'][best_idx]\n        swarm['local_best_fitness'] = fitness[best_idx]\n        \n    def update_global_best(self, swarms, fitnesses):\n        for swarm, fitness in zip(swarms, fitnesses):\n            if swarm['local_best_fitness'] < self.global_best_fitness:\n                self.global_best = swarm['local_best']\n                self.global_best_fitness = swarm['local_best_fitness']\n    \n    def adapt_parameters(self):\n        # Simple adaptive strategy, can be enhanced further\n        self.w = 0.4 + 0.5 * np.random.rand()  # Inertia weight adaptation\n        self.c1 = 1.5 + np.random.rand()  # Cognitive coefficient adaptation\n        self.c2 = 1.5 + np.random.rand()  # Social coefficient adaptation", "name": "AdaptiveMultiSwarmPSO", "description": "A novel Adaptive Multi-Swarm Particle Swarm Optimization (AM-SPSO) algorithm that dynamically adjusts parameters and employs multiple sub-swarms to enhance exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "An exception occurred: KeyError('local_best_fitness').", "error": "KeyError('local_best_fitness')", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {}, "mutation_prompt": null}
{"id": "03db8ff0-a57c-45ed-913d-c15fc20a56c4", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.harmony_memory_size = max(5, int(budget / (10 * dim)))  # Memory size heuristic\n        self.hmcr = 0.9  # Harmony Memory Consideration Rate\n        self.par_min = 0.2  # Minimum Pitch Adjustment Rate\n        self.par_max = 0.9  # Maximum Pitch Adjustment Rate\n        self.bw = 0.02  # Bandwidth for pitch adjustment\n\n    def __call__(self, func):\n        # Initialize harmony memory\n        harmony_memory = np.random.uniform(self.lb, self.ub, (self.harmony_memory_size, self.dim))\n        fitness = np.array([func(ind) for ind in harmony_memory])\n        num_evaluations = self.harmony_memory_size\n\n        best_idx = np.argmin(fitness)\n        best_fitness = fitness[best_idx]\n\n        while num_evaluations < self.budget:\n            for _ in range(self.harmony_memory_size):\n                if num_evaluations >= self.budget:\n                    break\n\n                # Generate new harmony\n                new_harmony = np.zeros(self.dim)\n                for d in range(self.dim):\n                    if np.random.rand() < self.hmcr:\n                        # Memory consideration\n                        idx = np.random.randint(self.harmony_memory_size)\n                        new_harmony[d] = harmony_memory[idx, d]\n                        if np.random.rand() < self._adaptive_par(fitness, best_fitness):\n                            # Pitch adjustment\n                            new_harmony[d] += self.bw * (np.random.rand() - 0.5)\n                    else:\n                        # Random selection\n                        new_harmony[d] = np.random.uniform(self.lb, self.ub)\n\n                # Clipping\n                new_harmony = np.clip(new_harmony, self.lb, self.ub)\n\n                # Evaluate new harmony\n                new_fitness = func(new_harmony)\n                num_evaluations += 1\n\n                # Update harmony memory if new harmony is better\n                if new_fitness < np.max(fitness):\n                    worst_idx = np.argmax(fitness)\n                    harmony_memory[worst_idx] = new_harmony\n                    fitness[worst_idx] = new_fitness\n                    if new_fitness < best_fitness:\n                        best_fitness = new_fitness\n\n        return harmony_memory[np.argmin(fitness)], best_fitness\n\n    def _adaptive_par(self, fitness, best_fitness):\n        # Adaptive pitch adjustment rate based on memory diversity\n        diversity = np.std(fitness)\n        norm_diversity = (diversity - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)\n        return self.par_min + (self.par_max - self.par_min) * norm_diversity", "name": "AdaptiveHarmonySearch", "description": "Harmony Search with Adaptive Pitch Adjustment enhances exploration and exploitation by dynamically adjusting pitch adjustment rates based on harmony memory diversity.", "configspace": "", "generation": 65, "fitness": 0.17086618293637576, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.10.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.3723756677931167, 0.395203494995204, 0.44328610950375547, 0.3736581218174141, 0.42429311648458623, 0.3988974788784957, 0.47664281450968204, 0.5040084428275302, 0.5061607471961165, 0.10453216661264264, 0.10699317389785845, 0.05622585953050585, 0.11745966876065483, 0.13103439159197405, 0.09015702827251704, 0.12557482303210277, 0.131306901796159, 0.12068921307715608, 0.25570567502650154, 0.26491306851345275, 0.22409560778631432, 0.1671718868349904, 0.17668010969714398, 0.1702655178611201, 0.1768301859052288, 0.19008911998363742, 0.1629197265546931, 0.147331452416399, 0.15990972008161441, 0.22720535403351083, 0.13205354152682225, 0.13892720151997162, 0.14982744092413303, 0.14688726213234315, 0.18822047594419977, 0.13755494340367536, 0.2536487919864765, 0.24805853675469247, 0.3986311327031308, 0.18708140637726767, 0.19482928127083476, 0.18750916874980705, 0.19203563147325153, 0.19166447471890946, 0.18445540015864603, 0.10957549550190238, 0.14036612046647057, 0.14962758788102748, 0.16293390932533058, 0.16208239260917034, 0.16005238919534004, 0.15426935249249507, 0.14025405314417005, 0.15472484130387898, 0.1729283880754634, 0.1854350426398914, 0.16708599158940474, 0.2586208335856496, 0.27425136513074644, 0.26401601556961696, 0.21308659705863897, 0.2397631142324782, 0.20945736672032322, 0.1464766900872606, 0.12882923174336525, 0.08857746635369845, 0.10797172676353894, 0.09634285363448658, 0.16624859571794837, 0.1317100418006958, 0.12017350279991001, 0.15347523530951335, 0.12579698847941967, 0.11903383593879202, 0.11282510343024665, 0.1175847656896607, 0.15608516148807905, 0.12252539293400644, 0.10631412292804143, 0.11360375454979643, 0.11342419573951246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06497782196252977, 0.07425429750356849, 0.07196554111601439, 0.05206073643142628, 0.06619182529423562, 0.06782426099564909, 0.10145289129765134, 0.08518446835633697, 0.08935555380466809, 0.030251906682330132, 0.02508850698510945, 0.04149107925198536, 0.048487247611975315, 0.019255575675672265, 0.03074034332966713, 0.03690518999946313, 0.03936612439660114, 0.018424273313909945, 0.07771558565524395, 0.0637774955194218, 0.057213679842896825, 0.09400006885224754, 0.12293419778660608, 0.09956120738640406, 0.09244563594112243, 0.1002655953908792, 0.10697455621252416, 0.3856995025640636, 0.42092888709041587, 0.3856585293627346, 0.36839576390572126, 0.34837568271882735, 0.36297903217840777, 0.3720347129712953, 0.32659058616691883, 0.34917211457797215, 0.09145054858407764, 0.10263017547261877, 0.10159467838874281, 0.09591653526569732, 0.08312766251763948, 0.09177460188353614, 0.09186935218428538, 0.09431272807775715, 0.09403759542951429, 0.16012383956869558, 0.13949981496507158, 0.15283921190200966, 0.1398006143949495, 0.14670736638458803, 0.14504975414967192, 0.1405632357031389, 0.158170075736919, 0.1447085847553592, 0.2609609543306477, 0.2733602760948788, 0.27516686985741456, 0.2415150234363772, 0.24926363001937513, 0.28589567689248563, 0.26477285817407825, 0.27411384474684086, 0.2837068822251574, 0.18096523717493884, 0.21945526940470372, 0.22259037964887562, 0.1684731468209718, 0.20406853998733565, 0.18956577405899966, 0.19596026050016735, 0.20354302320356255, 0.22088701792599386, 0.19935157684394567, 0.20074006632734742, 0.20412207072420152, 0.19666935281273557, 0.19283556583678862, 0.22220278045596153, 0.20325484061080556, 0.20795612956525034, 0.21282347083533237, 0.23505719725740226, 0.26874496326624076, 0.20947525964116953, 0.2662373570372307, 0.19520673695105906, 0.22705289016419306, 0.18312383061450155, 0.28193135401542035, 0.20048877684941513, 0.17187969059539132, 0.1773725014023324, 0.17667193453036, 0.25119690585333243, 0.16870593031102765, 0.25252647157985697, 0.19060820061364347, 0.18835703072419208, 0.1856809118073759, 0.1646214434728689, 0.16057851658028177, 0.20649470363804223, 0.19412326184065376, 0.1835135675428876, 0.1831804609426797, 0.18876424325093322, 0.2699383056750375, 0.11592413835747262, 0.18015905869956672, 0.19964804704323558, 0.19218525094032846, 0.1869351134202295, 0.19312118764656117, 0.17519041289374304, 0.17646837275490146, 0.1818699230581089, 0.18850583141405153, 0.08994721348319634, 0.0759045092334436, 0.07698517391114934, 0.08000439766560197, 0.07921310268788873, 0.08488717587390093, 0.08537118704432212, 0.08494649969656543, 0.07246824343721914]}, "mutation_prompt": null}
{"id": "6dcf092b-7daf-44d9-b892-97f34f0ccef4", "solution": "import numpy as np\n\nclass AdaptiveMemeticPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))\n        self.omega = 0.5  # inertia weight\n        self.phi_p = 1.5  # cognitive parameter\n        self.phi_g = 1.5  # social parameter\n        self.local_search_prob = 0.1  # probability of applying local search\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_fitness = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        num_evaluations = self.population_size\n\n        def local_search(individual):\n            \"\"\"A simple local search strategy: perturb and evaluate.\"\"\"\n            candidate = individual + np.random.uniform(-0.1, 0.1, self.dim)\n            candidate = np.clip(candidate, self.lb, self.ub)\n            candidate_fitness = func(candidate)\n            return candidate, candidate_fitness\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n\n                # Update velocities and positions\n                r_p, r_g = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.omega * velocities[i] +\n                                 self.phi_p * r_p * (personal_best_positions[i] - population[i]) +\n                                 self.phi_g * r_g * (global_best_position - population[i]))\n                population[i] += velocities[i]\n                population[i] = np.clip(population[i], self.lb, self.ub)\n\n                # Evaluate new position\n                fitness = func(population[i])\n                num_evaluations += 1\n\n                # Update personal best\n                if fitness < personal_best_fitness[i]:\n                    personal_best_fitness[i] = fitness\n                    personal_best_positions[i] = population[i]\n\n                # Update global best\n                if fitness < global_best_fitness:\n                    global_best_fitness = fitness\n                    global_best_position = population[i]\n\n                # Perform local search with a certain probability\n                if np.random.rand() < self.local_search_prob:\n                    candidate, candidate_fitness = local_search(population[i])\n                    num_evaluations += 1\n                    if candidate_fitness < personal_best_fitness[i]:\n                        personal_best_fitness[i] = candidate_fitness\n                        personal_best_positions[i] = candidate\n                        if candidate_fitness < global_best_fitness:\n                            global_best_fitness = candidate_fitness\n                            global_best_position = candidate\n\n        return global_best_position, global_best_fitness", "name": "AdaptiveMemeticPSO", "description": "An Adaptive Memetic Search Algorithm combining Particle Swarm Optimization with Local Search to dynamically balance exploration and exploitation for diverse black-box optimization tasks.", "configspace": "", "generation": 66, "fitness": 0.24068199320950295, "feedback": "The algorithm AdaptiveMemeticPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.5535887999180686, 0.5128457926943356, 0.5546187776444881, 0.54328511811135, 0.5834988310613491, 0.523050344013587, 0.5392451356966779, 0.5703798162168819, 0.5690276421452776, 0.19252873895292366, 0.20497176966033948, 0.19054235644710915, 0.18972758203422113, 0.13541350263895024, 0.10713096154423551, 0.15367082409427824, 0.16582683718723945, 0.1898564516405532, 0.14208868056125779, 0.11763845804194317, 0.10697455184453653, 0.10171720473975931, 0.09525461149408221, 0.10564163876960064, 0.13038761188718895, 0.14222079811196253, 0.21553861865283186, 0.11125033883275304, 0.11691123142191484, 0.13622044320937943, 0.13736713381501542, 0.08652932666894597, 0.13269980582026641, 0.10863070859863166, 0.11268374858348906, 0.11617197622908737, 0.958840009953977, 0.9589460770970925, 0.9598935905750892, 0.9533370569907463, 0.960528519338277, 0.9619788449875232, 0.9626988222397003, 0.9590608648180841, 0.9616622278855832, 0.3247740043997135, 0.3311857391762688, 0.2998633320026134, 0.24273559251915644, 0.33572782805306667, 0.3024929097237907, 0.3214746691255429, 0.3505420750670388, 0.27605563402447786, 0.5396210587925161, 0.6013916128994929, 0.22061613483908127, 0.30967172153345524, 0.6369879478986558, 0.20772420965938365, 0.5140264012835636, 0.47120590865744305, 0.23122136159626705, 0.16584720694878108, 0.15712169271023124, 0.09751900830882765, 0.17422947675395262, 0.12016686517650466, 0.288216098953896, 0.20733737755639026, 0.173018111753099, 0.18634276656764026, 0.15446825921242802, 0.1416539460736962, 0.15813192196088277, 0.1746498360037655, 0.11303459991723941, 0.19764594280156478, 0.17524121611172905, 0.18223186940930203, 0.10053669680886812, 0.0029422887908796547, 0.001326427303757205, 0.008309040289899206, 0.008670341586554109, 9.999999999998899e-05, 9.999999999998899e-05, 0.030007656945496453, 9.999999999998899e-05, 0.0193131819986474, 0.07592025561079041, 0.08549075402659034, 0.07702004327272438, 0.07014521948126529, 0.08289210150686432, 0.045007850171718045, 0.052612250699872076, 0.17940146034086502, 0.03662807905589904, 0.010565530590270655, 0.016338506337396752, 0.023211503198345085, 0.03550962002526781, 0.02857884517161835, 0.019758142413389357, 0.05422509749709936, 0.032267935337166764, 0.04579068302280653, 0.07619594715515154, 0.08447874912431652, 0.07040307369230137, 0.12102448033537716, 0.1329195650921542, 0.08327180053517946, 0.09148417417248167, 0.050534364848837, 0.05062061934093365, 0.39842182439221574, 0.4296109098592449, 0.41458451123809814, 0.4425766509133957, 0.4268685143094937, 0.44468015289371254, 0.45950856359185754, 0.4285525934555773, 0.4716905373744007, 0.07070764977778632, 0.08612721207190477, 0.09203551195049364, 0.09082238582278479, 0.08129947368335255, 0.10163303103561905, 0.0944802080424717, 0.0975881448006074, 0.12198833897247696, 0.26120609517766125, 0.15780989300103232, 0.19819479948418528, 0.3202991526489748, 0.21287650876103614, 0.2843876205035646, 0.20492640520535121, 0.19959699267737108, 0.27566324329817693, 0.30012579856922483, 0.29613663836059057, 0.3309992123881421, 0.2983284179539252, 0.2662917683491741, 0.313149117990714, 0.318565245921992, 0.31179940722875354, 0.30825647578879034, 0.2664936695180644, 0.21013678622787113, 0.2516616490496155, 0.21336919508972152, 0.23488140587966078, 0.22462223949148674, 0.1972585600293737, 0.22718826834497652, 0.1561094321023746, 0.19379547441393763, 0.20762408186040782, 0.19375583855729228, 0.22203915555534393, 0.21065179607418116, 0.19339604698954926, 0.24238561418415216, 0.208714883972425, 0.2145962106780136, 0.21161867168746062, 0.19284039238628103, 0.3664663548961725, 0.2125726018609433, 0.1877534659146447, 0.20052319644904837, 0.19178171833176139, 0.22762443886993367, 0.22343640814211563, 0.17752111129380987, 0.18494509046351038, 0.1653367624232096, 0.1629579759841988, 0.19695072173264494, 0.16599383014809888, 0.1795067575232071, 0.7049788295545971, 0.16488668075842738, 0.6144754025350931, 0.16795828803153257, 0.5254158737176107, 0.5111830644719305, 0.5281332785796105, 0.16779611763283087, 0.1688240493542904, 0.15172600778887768, 0.467363129532953, 0.18534405522802921, 0.19084275163283104, 0.1927753148073309, 0.18492911028288717, 0.18245310128545578, 0.18199370796919379, 0.18221162984586903, 0.19807338970073274, 0.19031004592981027, 0.08544379340351993, 0.0777472864623433, 0.09361217321886561, 0.07373259653728981, 0.11502971317007327, 0.08396520044286604, 0.08602145295231733, 0.07472407480048349, 0.08710279388251396]}, "mutation_prompt": null}
{"id": "d3f89579-1e02-49f4-9997-08166133ff01", "solution": "import numpy as np\n\nclass HybridPSOwithAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # differential weight\n        self.CR = 0.9  # crossover probability\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        personal_best = population.copy()\n        personal_best_fitness = fitness.copy()\n        \n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        global_best_fitness = fitness[best_idx]\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n\n                # Particle Swarm Optimization update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - population[i]) +\n                                 self.c2 * r2 * (global_best - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.lb, self.ub)\n\n                # Evaluate new position\n                fitness[i] = func(population[i])\n                num_evaluations += 1\n\n                # Update personal best\n                if fitness[i] < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness[i]\n\n                # Update global best\n                if fitness[i] < global_best_fitness:\n                    global_best = population[i]\n                    global_best_fitness = fitness[i]\n\n                # Adaptive Differential Evolution\n                if num_evaluations < self.budget:\n                    indices = list(range(self.population_size))\n                    indices.remove(i)\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    mutant_vector = personal_best[a] + self.F * (personal_best[b] - personal_best[c])\n                    mutant_vector = np.clip(mutant_vector, self.lb, self.ub)\n\n                    crossover_mask = np.random.rand(self.dim) < self.CR\n                    trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    num_evaluations += 1\n\n                    if trial_fitness < fitness[i]:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                        if trial_fitness < personal_best_fitness[i]:\n                            personal_best[i] = trial_vector\n                            personal_best_fitness[i] = trial_fitness\n                        if trial_fitness < global_best_fitness:\n                            global_best = trial_vector\n                            global_best_fitness = trial_fitness\n\n        return global_best, global_best_fitness", "name": "HybridPSOwithAdaptiveDE", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Evolution enhancing exploration and exploitation using adaptive parameters for diverse optimization landscapes.", "configspace": "", "generation": 67, "fitness": 0.16692190923609682, "feedback": "The algorithm HybridPSOwithAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.2819655824804941, 0.3054467078350551, 0.3004366670590324, 0.3217309620047136, 0.3221740938117117, 0.2975752420520078, 0.32439234879366685, 0.31738073555741253, 0.31483083271992673, 0.02438086714228882, 0.02351370900207317, 0.02362672471072602, 0.006793635005919563, 0.023125635666850775, 0.013696388139233018, 0.027896316031520985, 0.02429814997705293, 0.02200677570488785, 0.07443691613137438, 0.07170332182381023, 0.08031994035890933, 0.0728197294338635, 0.08529755713403375, 0.06573833724911349, 0.08029763854426841, 0.08323589588936264, 0.07198036298006993, 0.05781396769440639, 0.07542592332526965, 0.0709950491536172, 0.06406967361159821, 0.05615135764689372, 0.06518685665124557, 0.06392889519789002, 0.050160533213378544, 0.07325465823612454, 0.9509394760727452, 0.9732651235129499, 0.9498283514807753, 0.9693701456490434, 0.966520776652288, 0.962800712453757, 0.9698226675690053, 0.978290562971092, 0.964765351362532, 0.14133719351767138, 0.11307525665264007, 0.14857729457269486, 0.12617836724791998, 0.1392595895019746, 0.12440246672611643, 0.14352564826822434, 0.1236635223850524, 0.1597406601125484, 0.20724104103348506, 0.20398944647436124, 0.20501785414629004, 0.23218462650782057, 0.2124963607474516, 0.20175934151535835, 0.19669798768177094, 0.22510003919042243, 0.19803068478848607, 0.1295495991172666, 0.09170896691679264, 0.08351389360936334, 0.07754651211672559, 0.08754652129148965, 0.08489306277572772, 0.08731345455328188, 0.09284656812288028, 0.09163152859239221, 0.07776213772305507, 0.09234046058685508, 0.0805146872635163, 0.07342482213608403, 0.05855240411129492, 0.0792631805513121, 0.066170147079335, 0.08233301830788109, 0.08461286700162984, 0.005263885171393867, 9.999999999998899e-05, 9.999999999998899e-05, 0.01461938856711209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01133382540554051, 0.07780171848947337, 0.08648459454475943, 0.08359075109408165, 0.10488749053509183, 0.08966254313897393, 0.08237858165952772, 0.11003161116293014, 0.09662385393936934, 0.09326329796549016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0372960921700316, 0.03222337208272952, 0.04574556019857612, 0.04105137522002644, 0.05883983063962428, 0.04304159084333836, 0.05241726508284805, 0.05673274962295449, 0.05377242369970481, 0.2670181542301784, 0.2806473102491487, 0.2823939472979651, 0.29468134504254817, 0.30813657540074224, 0.29997254995323996, 0.3078998514893496, 0.29512583837376805, 0.32511388433532085, 0.08346665380173002, 0.07935368491287031, 0.07153496974885676, 0.0737956972359669, 0.08808595946285946, 0.07799740052801829, 0.08913325307884623, 0.07718362757655017, 0.07826625354501848, 0.1665488636864202, 0.14806777169092145, 0.14495964879015333, 0.17109630644190243, 0.14931104925638716, 0.1292163584840328, 0.1637944617715602, 0.14299472901137233, 0.13303498677176628, 0.21585697787290314, 0.20649232592968458, 0.2190837793811533, 0.21452071931428518, 0.2356002332322611, 0.20868756907917363, 0.20591186222667623, 0.23055935909054248, 0.21084900762961134, 0.1537417901186232, 0.1448714521574317, 0.15536347331584766, 0.15906973139693115, 0.16245764380968342, 0.16324389858453747, 0.18492841163412432, 0.16927735705465274, 0.157684637639121, 0.16959317882373248, 0.17035151441194107, 0.16763731923752023, 0.18407188724919332, 0.17007840794237838, 0.171226572698432, 0.19464141437966032, 0.17468642644127685, 0.18211521227080762, 0.1704923067617592, 0.16336296029923136, 0.16321416762317154, 0.1661168673753678, 0.1830961832617446, 0.16251440985494736, 0.16766571694741073, 0.17097892020949634, 0.16957214534128529, 0.3266131101678944, 0.17238839671679929, 0.28332356793830527, 0.13939706029868282, 0.1909542432814031, 0.22075498837976182, 0.2427198200260826, 0.16313140913733037, 0.1991130205817534, 0.17403374895961765, 0.17716800733921734, 0.2774778965860417, 0.20530585992869965, 0.18555647032984235, 0.1877767966215046, 0.1730903199980217, 0.20514410478133382, 0.27559300977865797, 0.19066272757573477, 0.18582970371277396, 0.1875642661382495, 0.19242726574531155, 0.1717093453683588, 0.17699485138444382, 0.1757163580493456, 0.18189615762213907, 0.17455938645667557, 0.06349063331581906, 0.06250167165187792, 0.06161108425366968, 0.06040270871894515, 0.062373403116631976, 0.05970391527102292, 0.06663519513718585, 0.05808403478411017, 0.06892671322482724]}, "mutation_prompt": null}
{"id": "e3f60027-b304-438a-9f07-82648d4b6bfa", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "a86ae2e2-9408-42d6-86c1-2723118a37e5", "solution": "import numpy as np\n\nclass HybridPSOWithAdaptiveMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.F_base = 0.5  # base scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize swarm\n        positions = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = positions.copy()\n        personal_best_fitness = np.array([func(ind) for ind in positions])\n        num_evaluations = self.population_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = personal_best[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocities\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best - positions[i]))\n                \n                # Update positions\n                positions[i] = np.clip(positions[i] + velocities[i], self.lb, self.ub)\n                \n                # Evaluate current position\n                fitness = func(positions[i])\n                num_evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = positions[i]\n                    personal_best_fitness[i] = fitness\n                \n                # Update global best\n                if fitness < global_best_fitness:\n                    global_best = positions[i]\n                    global_best_fitness = fitness\n            \n            # Adaptive mutation phase\n            if num_evaluations < self.budget:\n                for i in range(self.population_size):\n                    indices = list(range(self.population_size))\n                    indices.remove(i)\n                    a, b = np.random.choice(indices, 2, replace=False)\n                    F = self.F_base + np.random.rand() * (1.0 - self.F_base)\n                    mutated_vector = personal_best[a] + F * (personal_best[b] - personal_best[i])\n                    mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                    \n                    # Crossover\n                    crossover_mask = np.random.rand(self.dim) < self.CR\n                    trial_vector = np.where(crossover_mask, mutated_vector, positions[i])\n                    \n                    # Evaluate trial vector\n                    trial_fitness = func(trial_vector)\n                    num_evaluations += 1\n                    \n                    # Replace if better\n                    if trial_fitness < personal_best_fitness[i]:\n                        personal_best[i] = trial_vector\n                        personal_best_fitness[i] = trial_fitness\n                        if trial_fitness < global_best_fitness:\n                            global_best = trial_vector\n                            global_best_fitness = trial_fitness\n        \n        return global_best, global_best_fitness", "name": "HybridPSOWithAdaptiveMutation", "description": "A Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation in multi-dimensional black-box optimization.", "configspace": "", "generation": 69, "fitness": 0.19765749181171785, "feedback": "The algorithm HybridPSOWithAdaptiveMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.4248630573357737, 0.3866808574052659, 0.34464352803786014, 0.4118810113507688, 0.37534148019233315, 0.39039884885417686, 0.3859446436342965, 0.36713241486661596, 0.37401780982080957, 0.02426236301370499, 0.03371527161124088, 0.025224438477609468, 0.027054384041926616, 0.023976449431642344, 0.031141813348640413, 0.035050557887674416, 0.04169500430374373, 0.047491600359390373, 0.09024488433491473, 0.09937853165941946, 0.10005256968240916, 0.08905268022517665, 0.09926392253394567, 0.09386114704822435, 0.09352090372507538, 0.09813041642986386, 0.0999732323049477, 0.07310694262385076, 0.076869664630835, 0.08113025767953874, 0.08091073206126997, 0.09023675992653846, 0.0921356164077588, 0.09689160189275758, 0.1085397361043492, 0.08708863104476439, 0.944255179015513, 0.9598818912895193, 0.943719447476191, 0.9427873709123104, 0.9458093334335488, 0.9430939836956734, 0.9464309773363683, 0.9419059049469284, 0.9571363317860362, 0.22745855366955825, 0.18712315262884627, 0.2129709750068881, 0.21171934467614495, 0.2389261615668895, 0.23598047443283554, 0.18629644372544196, 0.21435784096035682, 0.2254677943118819, 0.272041481280608, 0.24233576159912817, 0.2962152163696077, 0.28912767948514984, 0.2607548873895573, 0.23914413025389514, 0.2531374942696506, 0.25732132207414515, 0.22580944106173184, 0.12968019331220948, 0.10161317021088268, 0.09989165457390248, 0.12154851736625949, 0.1044170577125344, 0.11133330925822826, 0.14419833869665477, 0.1228376305115425, 0.12661048929541652, 0.10740453532757399, 0.13535702214514278, 0.15640202291749938, 0.12643598021525626, 0.11467691353059872, 0.09932086201064871, 0.10513094815355561, 0.11654117266859487, 0.10657318188865372, 0.014868753171087157, 0.0013110004049540214, 9.999999999998899e-05, 0.0007792349567263823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006127186701226917, 0.10177281192952592, 0.08347927888887585, 0.13335903019678386, 0.10005400432514688, 0.056290635535084066, 0.0829567633506667, 0.08941410052357623, 0.09390123150224483, 0.08900289805716943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002173392159530163, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037968400569335925, 0.06670640020432328, 0.05902171092761088, 0.06243018034147263, 0.06901389197190932, 0.07250291321324787, 0.06505458752598281, 0.08433289763745455, 0.06465842865860472, 0.07713330604424518, 0.36293087540787616, 0.3677400532184143, 0.366986190014151, 0.3676627829472271, 0.34109680283011534, 0.39431005839027444, 0.393265176825485, 0.3278019263170622, 0.3421267253017989, 0.09589678865104412, 0.09093330841805913, 0.08938564673626659, 0.08687080305897743, 0.08190840589060189, 0.09770074049818811, 0.08535761854164903, 0.09635817574722716, 0.0868128950854985, 0.18162155344233055, 0.1713109312236466, 0.1329087512516156, 0.22216409129018344, 0.21881843789916755, 0.16861352923871598, 0.15847179483103357, 0.14745471869271276, 0.13831519834564476, 0.2665257634051952, 0.2232107069299658, 0.2831813597426852, 0.25450321480712224, 0.26351272844267537, 0.2512449461499118, 0.24404275401610698, 0.2386887143220554, 0.2558559591008803, 0.1873185279437639, 0.18000938731725769, 0.19620880308076605, 0.18872254419387702, 0.1880675225246593, 0.17869290141958405, 0.19237990820819728, 0.20317949657431678, 0.18622581714448883, 0.195001369261818, 0.18775981489903582, 0.1868780587535923, 0.21721017463837178, 0.19202594477583934, 0.21907488513372442, 0.19159943911173205, 0.2129214841303224, 0.21548672833873628, 0.17936739843215876, 0.17555700582074674, 0.17624712404388698, 0.19182286555008143, 0.2035908773927767, 0.18539600153756963, 0.20139046689876217, 0.17553744433913854, 0.18956024073032351, 0.15311552379989912, 0.18445928495261565, 0.46852570032738305, 0.3478597755708148, 0.18040059973171285, 0.2921428740296841, 0.35810780335122905, 0.29697548722366696, 0.3981874155000986, 0.4118501480370331, 0.19760182454422037, 0.4017601953403215, 0.35890107679517647, 0.3462596500913243, 0.28377651871203924, 0.23941892785172914, 0.18417798332093793, 0.27810757999498215, 0.18441417067485577, 0.18458964849772674, 0.1925429149036626, 0.1792514109060378, 0.1823622046929655, 0.18143249209271473, 0.18481537997295594, 0.20353309797066255, 0.1904666395718777, 0.07790782111397165, 0.08749618925941327, 0.07863764734179113, 0.07365305694508839, 0.09493391588625855, 0.07936207760286484, 0.09009452466852841, 0.0737108668198353, 0.07440714797951109]}, "mutation_prompt": null}
{"id": "ba771e9c-0e86-4dd5-84a0-214b89895ea9", "solution": "import numpy as np\n\nclass HybridGeneticDifferentialAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F_base = 0.5  # base scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n\n                # Adaptive Differential Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                F = self.F_base + np.random.rand() * 0.5  # Adaptive scaling factor\n                mutated_vector = population[a] + F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n\n                # Genetic Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n\n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n\n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n\n        return best_individual, best_fitness", "name": "HybridGeneticDifferentialAlgorithm", "description": "A Hybrid Genetic Algorithm with Adaptive Differential Mutation that integrates adaptive mutation strategies with genetic crossover to dynamically balance exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 70, "fitness": 0.1566161505983818, "feedback": "The algorithm HybridGeneticDifferentialAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.2729297630386178, 0.2708831968720635, 0.29000937448967845, 0.3026713678049082, 0.3154134818398715, 0.3078156519435602, 0.29564459719811753, 0.2987873774517573, 0.30910958933499455, 0.04576197258855841, 0.058995834745418474, 0.04728704339295875, 0.05631629430651719, 0.05380762504801728, 0.05175240797523217, 0.0516318625611597, 0.055491766487159144, 0.042875481776470714, 0.08439163481082346, 0.07180461192067455, 0.07129243830671117, 0.08019845024764838, 0.07157658804017841, 0.07943524099459687, 0.07419286273496473, 0.07961408744120857, 0.0834927620317103, 0.05896260571855039, 0.06356917405925488, 0.05819173627862495, 0.060421717083250615, 0.05676031532380965, 0.05860715000051875, 0.06561547915267851, 0.05913031686159176, 0.06736169123567326, 0.8685932784374837, 0.8050306652505805, 0.9003463019414214, 0.916608612438974, 0.7942759849050233, 0.9523212565099525, 0.88363758502088, 0.8455633467788309, 0.9018760341254531, 0.12420454770740086, 0.12016921641863865, 0.13504846908345558, 0.125424696628458, 0.13366482108076438, 0.11417952052195146, 0.13020041089045575, 0.11903878879511376, 0.15294463524682322, 0.19978010722041117, 0.19280654972999123, 0.19836184021588188, 0.20296654430140593, 0.19497630794619814, 0.20193906386730132, 0.18613444886609332, 0.19432037315735418, 0.18871756739059675, 0.0790412400654753, 0.059568982293247585, 0.07102456201591267, 0.06632621688196727, 0.09311705395982206, 0.06212682398552383, 0.07911551215375334, 0.05361886876846944, 0.059518402308345486, 0.06190236946259009, 0.09919231783639315, 0.0744652793194378, 0.04746052127961542, 0.06432486645144286, 0.07010669428841942, 0.060495791147920475, 0.06745424856790105, 0.0613955770331861, 9.999999999998899e-05, 9.999999999998899e-05, 0.009584507050800162, 0.001426464624661672, 0.005422961751369804, 0.008949822424504927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09426072735812119, 0.07963770809547588, 0.07968010185711083, 0.08360180898710823, 0.06874607346233297, 0.0826778135249222, 0.11538577904953962, 0.09074887804769971, 0.08992933545453274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05325825533912176, 0.04582476986174211, 0.04141310635211903, 0.040258486504914814, 0.039855060693912536, 0.03990855393943893, 0.037716827723914714, 0.04698521138575673, 0.05484036432325179, 0.2903500892152151, 0.28372373260779415, 0.2884190821826833, 0.2837470118718186, 0.3020829008367293, 0.27978297615962555, 0.2879028371303539, 0.2762663916346728, 0.2775026680454221, 0.08446094430453754, 0.0681655216986139, 0.06577966219143361, 0.05913959808740876, 0.0779557409029179, 0.06758387944372457, 0.06979133333551035, 0.06408124328977427, 0.08079406232797248, 0.14910540501271807, 0.14479233060083063, 0.1385062997008032, 0.1379195544612195, 0.13986520847966732, 0.1332404161505074, 0.13848704560018543, 0.14033802615301194, 0.13522372143908457, 0.18571975247938122, 0.20473713594217047, 0.19907507510398037, 0.20281259254395945, 0.18971089842809585, 0.1944170791967994, 0.21636785704281336, 0.2078108149084512, 0.19849018495552617, 0.13396922994272153, 0.1319520886171085, 0.13770601013321904, 0.13229275270636787, 0.13886702998733913, 0.13790240596859038, 0.13639230844640915, 0.1607158307212856, 0.13903246026932525, 0.19650438457992792, 0.1642822971604282, 0.18818563090630647, 0.17241686365468945, 0.17355545433628283, 0.18104584891150288, 0.18714063407144754, 0.16328370949956184, 0.159145720979321, 0.15727841342984916, 0.17059208325441233, 0.17018079242812179, 0.16745430164669883, 0.16991095332304051, 0.16489394924910994, 0.1583536947961831, 0.1665601871584611, 0.17778838438550937, 0.262124049510975, 0.19963479987032973, 0.13813418558406465, 0.15241609192748817, 0.13697672897594693, 0.17417956395853795, 0.17180475675404283, 0.14831290586903945, 0.1712477145175617, 0.1883148047141513, 0.18615645043732088, 0.19163741895174613, 0.18228581077916184, 0.13936306757115946, 0.1442045340656083, 0.201212451065086, 0.2508434032857736, 0.35255116066772063, 0.1978954516068928, 0.18441231842273753, 0.18486224832440912, 0.17928108039736157, 0.1893105761706595, 0.19259501448513927, 0.18104407207345885, 0.18121091019062718, 0.18093256234885724, 0.0581543253707687, 0.06554522517585482, 0.061003271636585255, 0.05719772491777042, 0.07345821395303942, 0.05900900503057782, 0.06334583232610236, 0.06004191599596431, 0.07013391708311845]}, "mutation_prompt": null}
{"id": "2b73a53b-a781-4f96-bd48-d2bcf11ee449", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(20, int(budget / (5 * dim)))  # heuristic for population size\n        self.inertia_weight = 0.7  # initial inertia weight\n        self.inertia_damp = 0.99  # inertia weight damping factor\n        self.cognitive_coeff = 1.5  # personal attraction factor\n        self.social_coeff = 1.5  # global attraction factor\n    \n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_fitness = np.array([func(ind) for ind in positions])\n        num_evaluations = self.population_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n\n                # Update velocities\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                social_velocity = self.social_coeff * r2 * (global_best_position - positions[i])\n                velocities[i] = (self.inertia_weight * velocities[i] + cognitive_velocity + social_velocity)\n                velocities[i] = np.clip(velocities[i], self.lb - positions[i], self.ub - positions[i])\n                \n                # Update positions\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lb, self.ub)\n                \n                # Evaluate new position\n                current_fitness = func(positions[i])\n                num_evaluations += 1\n                \n                # Update personal best\n                if current_fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_fitness[i] = current_fitness\n                    \n                    # Update global best\n                    if current_fitness < global_best_fitness:\n                        global_best_position = positions[i]\n                        global_best_fitness = current_fitness\n            \n            # Dampen inertia weight\n            self.inertia_weight *= self.inertia_damp\n\n        return global_best_position, global_best_fitness", "name": "AdaptiveSwarmOptimizer", "description": "Adaptive Swarm-Inspired Optimization Algorithm that dynamically tunes particle interactions and inertia to efficiently explore and exploit the search space in multi-dimensional black-box optimization.", "configspace": "", "generation": 71, "fitness": 0.1750986763126848, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.307142967483812, 0.2991043396148866, 0.2998980808969477, 0.3288872962961835, 0.3443922620580149, 0.3310884644428005, 0.35277471642463565, 0.31337819308162296, 0.3303921831467592, 0.022868668636344403, 0.020708282546564094, 0.011357722623786093, 0.006148435692030718, 9.999999999998899e-05, 0.011367408644713084, 0.00016947871478911747, 0.005458387182113222, 0.0036151088820801647, 0.08414009166306513, 0.07632643164119768, 0.086604304742678, 0.08533598206497395, 0.08509599644238008, 0.0922808857243188, 0.07591453208523513, 0.08868765938446, 0.07825898841149592, 0.08724709406958464, 0.06567337155517383, 0.07119635966583515, 0.07069341335723656, 0.08619421695738061, 0.08735723311696109, 0.07136835904640515, 0.06127837343765519, 0.06634719506895836, 0.9332598102997071, 0.9428856885533801, 0.9401930096942015, 0.9344291403412734, 0.9282759086237145, 0.9246227337553272, 0.9353505422697382, 0.9269829286540486, 0.9410128779201488, 0.1793313047963938, 0.14436456280727472, 0.16399827717604398, 0.18865470951959318, 0.14671428131576214, 0.18950220672861262, 0.2033127621344024, 0.17276721578381715, 0.19914941995208624, 0.17557529099922198, 0.2159706325492382, 0.2012644972603671, 0.19085358723443446, 0.2087957777348144, 0.2280630645517604, 0.25070884217381695, 0.2514932073348316, 0.193259190903609, 0.11295480497565136, 0.10678149964470507, 0.06804104546429812, 0.07950817894983797, 0.029102885105845466, 0.13316721788437202, 0.08949926966246635, 0.09749290172868863, 0.10939934769524862, 0.11206108460506203, 0.07988343609404036, 0.09580119940566545, 0.11018559776321857, 0.10703127847585014, 0.11403965288890827, 0.08140383364058712, 0.10365414764186043, 0.08885558520334802, 0.0011469197795901387, 0.0017040011979774228, 9.999999999998899e-05, 0.0027558204192337232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00737710526835067, 0.051885395766315345, 0.09305013261470463, 0.08931329639990271, 0.06325280842570191, 0.11748818436950459, 0.04021491664215282, 0.10393281801652088, 0.054306620109613846, 0.08765600302659837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06224828878709754, 0.042018079988129786, 0.03390018389359306, 0.05471166792679927, 0.06839797018579463, 0.04852649930639763, 0.030191945191578418, 0.05422223526922132, 0.04758444671937301, 0.30990715777260847, 0.29535835952571887, 0.32388911521287256, 0.3304837717245356, 0.3151822147153647, 0.3179485808709639, 0.3328008261838943, 0.28008495422683644, 0.32246980232368616, 0.06720355517130283, 0.09755926943303495, 0.06809163408140517, 0.08828077741273788, 0.09346587825704844, 0.07365775678321007, 0.06424948309749179, 0.08033723749479849, 0.08046473297057433, 0.20530078208952762, 0.16130907028688712, 0.14832813360782948, 0.16117529089671712, 0.15779950692204003, 0.19564794174728173, 0.16795820897045655, 0.18525992535493518, 0.13094332327254, 0.2308556696640247, 0.1953646848569096, 0.22044258182850918, 0.2031398529640024, 0.1916544407391092, 0.242835170147362, 0.24911941181207464, 0.25884685674960695, 0.22565482480425814, 0.18616247193520097, 0.15280781668938836, 0.17569229634428962, 0.1784674289944731, 0.15815039948729082, 0.1579683587109164, 0.16210884827995264, 0.14896655608008025, 0.15344215279571394, 0.18476747975785135, 0.19963380573286826, 0.21181493577115817, 0.1829594016337408, 0.1881946188933299, 0.19398998859073346, 0.18295421812580226, 0.17342165288507172, 0.1966900674995392, 0.1692656448561496, 0.17615508667706703, 0.17023513585450423, 0.17152658642702223, 0.1827673801769495, 0.1724166051720344, 0.16579805267609826, 0.1729633837190977, 0.167283051728361, 0.1263175853765348, 0.18322131348687798, 0.16495772919482243, 0.18170848617122481, 0.18583663963935193, 0.1623502103464607, 0.35401695126942656, 0.4300484353203584, 0.19115682669504908, 0.3276540147629201, 0.3159576039739147, 0.33048008048763766, 0.31914775863341827, 0.16320493818202375, 0.30451690426554123, 0.16777557689419975, 0.38111571927040644, 0.203049211295934, 0.18385853317090994, 0.18605810698419867, 0.1805678227014852, 0.1800208731236791, 0.17273269073374253, 0.1873884390819177, 0.18005489687827836, 0.1932129504427107, 0.19546405513898124, 0.07003491246803117, 0.07595383181328252, 0.08285917569616719, 0.08012739073203434, 0.07151126995302748, 0.07223658714871894, 0.07350403403471406, 0.06420091009987028, 0.07354514660072187]}, "mutation_prompt": null}
{"id": "939c5319-e933-45e3-abe0-d074feff0523", "solution": "import numpy as np\n\nclass AdaptiveBiogeographyWithLevyFlights:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.mutation_probability = 0.1\n        self.elite_ratio = 0.2\n        \n    def levy_flight(self, L):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=L)\n        v = np.random.normal(0, 1, size=L)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            # Sort population by fitness\n            sorted_indices = np.argsort(fitness)\n            elite_size = int(self.elite_ratio * self.population_size)\n            elite_indices = sorted_indices[:elite_size]\n            \n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                if i in elite_indices:\n                    # Perform Lévy flights on elite individuals\n                    levy_step = self.levy_flight(self.dim)\n                    mutated_individual = population[i] + levy_step\n                    mutated_individual = np.clip(mutated_individual, self.lb, self.ub)\n                else:\n                    # Perform migration for non-elite individuals\n                    random_idx = np.random.choice(elite_indices)\n                    mutated_individual = population[i] + self.mutation_probability * (population[random_idx] - population[i])\n                    mutated_individual = np.clip(mutated_individual, self.lb, self.ub)\n\n                # Evaluate the mutated individual\n                mutated_fitness = func(mutated_individual)\n                num_evaluations += 1\n                \n                # Selection\n                if mutated_fitness < fitness[i]:\n                    population[i] = mutated_individual\n                    fitness[i] = mutated_fitness\n                    if mutated_fitness < best_fitness:\n                        best_individual = mutated_individual\n                        best_fitness = mutated_fitness\n\n        return best_individual, best_fitness", "name": "AdaptiveBiogeographyWithLevyFlights", "description": "Adaptive Biogeography-Based Optimization with Lévy Flights for enhanced exploration and exploitation in black-box optimization.", "configspace": "", "generation": 72, "fitness": 0.13014343477726897, "feedback": "The algorithm AdaptiveBiogeographyWithLevyFlights got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.24106236759349398, 0.23207334944826075, 0.2267663466924923, 0.20711707068440133, 0.2503209034574554, 0.22236461114522377, 0.22714208166274397, 0.23295370902395507, 0.20556788362627898, 9.999999999998899e-05, 9.999999999998899e-05, 0.03777833626150151, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056335339111419636, 0.05386314565458328, 0.06181166528076687, 0.0536408558282605, 0.07756826842958198, 0.061270989937874054, 0.05457730632550484, 0.0658526323492763, 0.0786797521293573, 0.04714929628295228, 0.05633037835748489, 0.053641112919583844, 0.04913037524752817, 0.049824083040231004, 0.04919702785832325, 0.0453091054314968, 0.05351841068381091, 0.04400819139621304, 0.6560772155654078, 0.6391070825651874, 0.6072259870569443, 0.38506553260110365, 0.7710616721410114, 0.5453167217953643, 0.539400143666849, 0.4707284311175213, 0.7700683389409722, 0.09858908006339229, 0.0967708063060807, 0.10528758774789115, 0.11090418745731945, 0.10255967658630893, 0.09822149961398974, 0.0813867862485631, 0.15383002389786338, 0.11658880083906331, 0.15837667357436913, 0.1487289789161076, 0.1490603285512676, 0.16317730737542346, 0.1484666081604853, 0.15436746387255185, 0.15087148109804094, 0.1455939378597232, 0.13834047411460293, 0.02084527858217644, 0.0759314101043379, 0.044214329319373746, 0.05591627610405758, 0.01593014847854335, 0.03623671818905527, 0.04744107728848668, 0.034630961664903426, 0.05624705196119317, 0.0715582680928164, 0.07191130994554407, 0.07987335850058752, 0.06873168453996992, 0.07645177110766088, 0.06200703199240365, 0.07008428564859492, 0.05234325838398768, 0.06145278823133227, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04540933460738528, 0.05423455364843699, 0.0651369991381534, 0.044669195072529644, 0.03520126316334704, 0.011548899212713293, 0.018301826988008307, 0.018229273094704124, 0.08905803308032023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0048728175436988375, 0.03684785528533052, 0.005489516780153636, 0.016273230704138997, 0.006099822173740943, 0.006933922255555114, 0.011092066998649175, 0.012045828236388334, 0.007547575671049689, 0.25010439746194835, 0.22969151917472097, 0.24190334547001457, 0.2368897013272433, 0.22299082699552164, 0.2350572919677011, 0.23947915241738282, 0.23812399692639075, 0.22807723664081203, 0.06388465469201365, 0.04861615301056077, 0.054040611835722285, 0.07958710611709596, 0.053500834077003456, 0.0541827067411883, 0.05193343964746877, 0.05017089826666621, 0.0647713037982186, 0.13794391076785928, 0.16783937530998227, 0.14510602067275735, 0.14617788124822328, 0.14051776500276714, 0.18371429588108945, 0.1343670017678381, 0.13210077678274412, 0.13276116991719333, 0.1647351077402225, 0.1831418346390884, 0.18962885210831892, 0.18817442256959116, 0.1830742548799622, 0.2033081857382505, 0.1830193775962935, 0.18951802329777223, 0.1712538736095215, 0.12537108389673302, 0.11700752659925007, 0.1328530644334951, 0.14274544495842822, 0.1490531132795313, 0.11367299556257471, 0.1087542678337512, 0.13935848240334303, 0.12722068079660043, 0.18272862918551036, 0.18654700979563898, 0.19823607703558377, 0.17289649258679352, 0.18133946332911277, 0.1814677554913352, 0.19537249422683267, 0.2169568685843185, 0.19009283103231933, 0.15439191974498045, 0.15592336304489218, 0.1610827462542802, 0.15763096056106984, 0.16962321407842007, 0.17130400899186737, 0.1647598743080978, 0.15595421823675149, 0.17850353658096896, 0.1601870544786651, 0.15580013299703255, 0.15350099890133295, 0.24618628231507034, 0.16449237364536207, 0.2916511469441959, 0.21214660003481733, 0.1742113246026189, 0.19396762635215736, 0.20508714673883865, 0.19395917979434762, 0.2663238190278878, 0.1953165729162648, 0.165278855147325, 0.24547113868103, 0.20884733434268088, 0.19368195783593545, 0.2360021057660393, 0.1797746799254215, 0.19472717535344086, 0.18352716457207818, 0.17968999515512218, 0.17758694726844404, 0.1769569901790473, 0.17386589345588, 0.18096286395990868, 0.20017097316125676, 0.054398802732367635, 0.0563741520450205, 0.06198845589202007, 0.0836061812972051, 0.05981019802464138, 0.06209867644190348, 0.05337741897783177, 0.06899059041678468, 0.057301228197703113]}, "mutation_prompt": null}
{"id": "e41eb909-c36b-4e2b-809a-c1660e4538b3", "solution": "import numpy as np\n\nclass MultiSwarmCooperativePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))\n        self.num_swarms = max(2, dim // 5)  # Adapt number of swarms based on dimensionality\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.w = 0.7   # inertia weight\n        \n    def __call__(self, func):\n        # Initialize swarms\n        swarms = [np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.random.uniform(-1, 1, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        fitness = [np.array([func(ind) for ind in swarm]) for swarm in swarms]\n        num_evaluations = self.swarm_size * self.num_swarms\n        \n        personal_best_pos = [swarm.copy() for swarm in swarms]\n        personal_best_fitness = [fit.copy() for fit in fitness]\n        \n        global_best_pos = np.array([swarm[np.argmin(fit)] for swarm, fit in zip(swarms, fitness)])\n        global_best_fitness = np.array([np.min(fit) for fit in fitness])\n        overall_best_idx = np.argmin(global_best_fitness)\n        overall_best_pos = global_best_pos[overall_best_idx]\n        overall_best_fitness = global_best_fitness[overall_best_idx]\n        \n        while num_evaluations < self.budget:\n            for s_idx in range(self.num_swarms):\n                for i in range(self.swarm_size):\n                    if num_evaluations >= self.budget:\n                        break\n                    \n                    # Update velocity\n                    r1 = np.random.rand(self.dim)\n                    r2 = np.random.rand(self.dim)\n                    velocities[s_idx][i] = (\n                        self.w * velocities[s_idx][i] +\n                        self.c1 * r1 * (personal_best_pos[s_idx][i] - swarms[s_idx][i]) +\n                        self.c2 * r2 * (global_best_pos[s_idx] - swarms[s_idx][i])\n                    )\n                    \n                    # Update position\n                    swarms[s_idx][i] += velocities[s_idx][i]\n                    swarms[s_idx][i] = np.clip(swarms[s_idx][i], self.lb, self.ub)\n\n                    # Evaluate fitness\n                    current_fitness = func(swarms[s_idx][i])\n                    num_evaluations += 1\n                    \n                    # Update personal and global bests\n                    if current_fitness < personal_best_fitness[s_idx][i]:\n                        personal_best_pos[s_idx][i] = swarms[s_idx][i]\n                        personal_best_fitness[s_idx][i] = current_fitness\n                    \n                    if current_fitness < global_best_fitness[s_idx]:\n                        global_best_pos[s_idx] = swarms[s_idx][i]\n                        global_best_fitness[s_idx] = current_fitness\n                        \n                        if current_fitness < overall_best_fitness:\n                            overall_best_pos = swarms[s_idx][i]\n                            overall_best_fitness = current_fitness\n        \n        return overall_best_pos, overall_best_fitness", "name": "MultiSwarmCooperativePSO", "description": "Multi-Swarm Cooperative Particle Swarm Optimization that dynamically adapts swarm sizes and velocities to enhance exploration and exploitation in varying dimensionality spaces.", "configspace": "", "generation": 73, "fitness": 0.17189006263708378, "feedback": "The algorithm MultiSwarmCooperativePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.3195317440644124, 0.33195376068275817, 0.30007389097064496, 0.3147146799082987, 0.3198502792799106, 0.3644928574217321, 0.314771944358893, 0.30636545747127353, 0.31335229715559987, 9.999999999998899e-05, 0.0008052804995364315, 0.013151664942767427, 9.999999999998899e-05, 0.0015842211193585198, 0.004454567946989063, 0.006591582958098141, 0.0006219352473484374, 0.012929519294137548, 0.0821955554705126, 0.08461411728608836, 0.09494224650286742, 0.07824936752835965, 0.06640254996121653, 0.078263041687338, 0.07110221900927649, 0.08402064742816251, 0.10827363819732494, 0.0688471303093704, 0.08335574498806764, 0.06514282312122632, 0.07042588427882168, 0.08999577408309523, 0.06949698160813678, 0.06865822255472998, 0.06856205331759724, 0.07247511238737969, 0.9545591785787362, 0.9612380013299849, 0.9586533842119267, 0.9544729333236933, 0.9545995277045868, 0.9486694712454983, 0.953213914520883, 0.9608658432172813, 0.9490446361829208, 0.16391256464749315, 0.16462711721847212, 0.18660885054171727, 0.1816706613414243, 0.1865536310991871, 0.13530770653047564, 0.16653763778944064, 0.1518003196193184, 0.1728956922331294, 0.2012502412730992, 0.281496503396952, 0.1747723781151339, 0.20668920076020503, 0.21742788049480932, 0.18970089711518756, 0.20937196563817118, 0.20676188913901883, 0.22317444091941463, 0.08880521395607088, 0.08803467580316227, 0.05391378410091108, 0.06418676108557797, 0.07249752975049939, 0.07399756084051967, 0.1128560254262937, 0.09055808972229895, 0.09959247046245878, 0.11903271114995473, 0.09226780578670568, 0.089134533144279, 0.10461608156207691, 0.10514805770466773, 0.08918695181038838, 0.1021916283692228, 0.10026134711964974, 0.08308957992269883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011090716666148914, 0.00498972613783677, 9.999999999998899e-05, 0.0009009841709718414, 0.08255013295851821, 0.07310350306417401, 0.05820444677071768, 0.0691046250123627, 0.08627426141441374, 0.0053987882763963935, 0.021697267014320842, 0.06243192904403949, 0.05563274427140208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04871532410892798, 0.03328217259980315, 0.018128111945872494, 0.05496849324864228, 0.023094365603429257, 0.05036419544450854, 0.032561291551403304, 0.039627459447893476, 0.036262276366865076, 0.30302173749317096, 0.3293413649531367, 0.3132181565236597, 0.32015635568611034, 0.3292365826136343, 0.3140138788372383, 0.3246856319117134, 0.33467510567603453, 0.29663910949251526, 0.07834227788355652, 0.08534863682125493, 0.057538100646106205, 0.08276377759009124, 0.07405710995690751, 0.0789310407279441, 0.07411577343281894, 0.09326378969619531, 0.07921158336738221, 0.2099673917344026, 0.1416230516326581, 0.15967059059490663, 0.16682215890881147, 0.18587002167759326, 0.1653807275147694, 0.19914994527137975, 0.19357462483271615, 0.16994986409907265, 0.23799309342862673, 0.2223801899732677, 0.23842097140276097, 0.2388460657867506, 0.23509256762400077, 0.24405644520307912, 0.21227571763713105, 0.24799972149836524, 0.2356114201369286, 0.14737705893200037, 0.15249844724260642, 0.16958353347276867, 0.14537807412742443, 0.16949136820332955, 0.18199035146097098, 0.15965928277710895, 0.18325204310999843, 0.17586210407612612, 0.18271754981130184, 0.18646573146246626, 0.17641676656898875, 0.18531155702028113, 0.18208878516489668, 0.18370260933541183, 0.1959444813958513, 0.22252286202218807, 0.17336494383688117, 0.166020345696537, 0.1714174659559048, 0.17651854653558008, 0.16532127531875107, 0.17652462462555685, 0.17047182028005614, 0.17062109821537852, 0.18020348114299867, 0.1830620595673712, 0.16346841064592577, 0.18707467528706312, 0.17296008234925053, 0.17945767359247333, 0.18284555345389997, 0.1603945604885435, 0.3316037223656031, 0.3573453279141159, 0.18749481995072925, 0.2721960291762163, 0.1632185761591496, 0.2833974551212518, 0.3485350180000182, 0.19416870702042877, 0.19893039494784426, 0.16778757105083308, 0.14697725828462394, 0.2897308938734614, 0.16981514049955382, 0.18499406214446834, 0.1873442711691038, 0.1833261693237297, 0.18385528709313526, 0.17878736413652807, 0.2096712982601565, 0.1879894037646539, 0.1850014712364043, 0.06688287470254128, 0.07822980589347839, 0.08360042872765094, 0.06582785334484975, 0.06612178042085304, 0.06418091153278105, 0.0754473034023635, 0.06388698671196125, 0.06305429887298852]}, "mutation_prompt": null}
{"id": "bc3332f6-1e27-4318-bf95-8c6aca885b1b", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "b0e75bdc-2620-41da-9aa8-e44cab5b1209", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "b7c9b952-3761-4bef-a194-80c0d394c100", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "bb5e98cc-ee42-4768-b7b8-636267e6b9e3", "solution": "import numpy as np\n\nclass HybridSwarmGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.c1 = 1.5  # personal learning coefficient\n        self.c2 = 1.5  # global learning coefficient\n        self.w = 0.7  # inertia weight\n        self.mutation_rate = 0.1  # mutation probability\n        self.crossover_rate = 0.8  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        pbest = np.copy(population)\n        pbest_fitness = np.copy(fitness)\n        \n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Particle Swarm update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] + \n                                 self.c1 * r1 * (pbest[i] - population[i]) + \n                                 self.c2 * r2 * (gbest - population[i]))\n                candidate = population[i] + velocities[i]\n                candidate = np.clip(candidate, self.lb, self.ub)\n                \n                # Evaluate candidate\n                candidate_fitness = func(candidate)\n                num_evaluations += 1\n                \n                # Personal best update\n                if candidate_fitness < pbest_fitness[i]:\n                    pbest[i] = candidate\n                    pbest_fitness[i] = candidate_fitness\n                    \n                    # Global best update\n                    if candidate_fitness < pbest_fitness[gbest_idx]:\n                        gbest = candidate\n                        gbest_idx = i\n                \n                # Apply Genetic Crossover\n                if np.random.rand() < self.crossover_rate:\n                    mate_idx = np.random.randint(self.population_size)\n                    crossover_mask = np.random.rand(self.dim) < 0.5\n                    candidate = np.where(crossover_mask, candidate, population[mate_idx])\n                    \n                # Apply Mutation\n                if np.random.rand() < self.mutation_rate:\n                    mutation_idx = np.random.randint(self.dim)\n                    candidate[mutation_idx] = np.random.uniform(self.lb, self.ub)\n                \n                # Selection\n                if candidate_fitness < fitness[i]:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n        \n        return gbest, pbest_fitness[gbest_idx]", "name": "HybridSwarmGeneticAlgorithm", "description": "Hybrid Swarm-Guided Genetic Algorithm combining particle swarm intelligence with genetic operations to enhance exploration and exploitation in diverse optimization landscapes.", "configspace": "", "generation": 77, "fitness": 0.14133160048622923, "feedback": "The algorithm HybridSwarmGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.27418144417771506, 0.2371583541015404, 0.2582105190829904, 0.21212392834516436, 0.22662398288251662, 0.20522577185202107, 0.24033267501265798, 0.20358452585780829, 0.23561576651776694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04889103933503336, 0.04802884975352284, 0.05788277384405449, 0.07300954500945134, 0.06382477849524015, 0.05609729327043356, 0.061901777362028065, 0.05080259869286641, 0.06113510040113235, 0.03780866204099276, 0.04697070825985161, 0.04802911754350547, 0.04431487434047576, 0.02630261534020173, 0.04481076844151044, 0.05537200487293581, 0.06870156158783702, 0.04708185424830258, 0.9612032373842524, 0.9634688375282799, 0.9629324163208984, 0.9619362613388385, 0.9631275666041365, 0.9626050835810319, 0.962059863473329, 0.9574490920909353, 0.9598288991457713, 0.13903069876646024, 0.1030326157827538, 0.14039490116912878, 0.1163693345071235, 0.12773466815589996, 0.0982817425853233, 0.11333308710062684, 0.11847924547559885, 0.13093825485034882, 0.19643841181734523, 0.16878764328727014, 0.16180406492385102, 0.17063340735553723, 0.14578787120258407, 0.17185872072604091, 0.14355761214960927, 0.20216230332625817, 0.14895271704427637, 0.058382134095841365, 0.021251529375993616, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860014157622882, 0.043022358267899796, 0.050784480930571196, 0.014094834506800713, 0.03868774338895531, 0.007630084430731543, 9.999999999998899e-05, 0.0983960114738055, 0.09485432601492716, 0.00790361329370659, 0.023765494246050234, 0.051879003006069624, 0.03493064848082994, 0.001184449639831886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012949913296563698, 0.03353253197436712, 0.04797211233781273, 0.0603088735131494, 0.05467415899211192, 0.0011724703550737292, 0.03189942565945547, 0.02010820098664501, 0.07248983652343832, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020994117637895604, 0.020231399879524714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027835162776705724, 0.021692517499397268, 0.01784987485434142, 0.020059163057408513, 0.2493149977487641, 0.2346156418439106, 0.2403345709457052, 0.28230608743746066, 0.21313329732885755, 0.2134504156503655, 0.21943256533221467, 0.26557558851965424, 0.23234768821078955, 0.06111366835106269, 0.06649880094502592, 0.044164458791699834, 0.05343811711813162, 0.056665614307851664, 0.059248764292338274, 0.07182988636315146, 0.06991773515834299, 0.07253219662532573, 0.1731221747740398, 0.1418690902399662, 0.12925358146602162, 0.13767318217287194, 0.1517843349737943, 0.14031951749636995, 0.12712037390513908, 0.14101015548910434, 0.13266067695140316, 0.17813475607947316, 0.18868871424065015, 0.17686802630267406, 0.16729073486889012, 0.2018416131859928, 0.18210317094801387, 0.17355063635382217, 0.20126117893304507, 0.17840254465059402, 0.12012681173451223, 0.13818361201919815, 0.11053225873647476, 0.1215039340843812, 0.12939831567282745, 0.13287189514492692, 0.12028344903312282, 0.17114119930086458, 0.11719404985187121, 0.17663283695281062, 0.1852660507729189, 0.1538847716752738, 0.17058907448977245, 0.15579837021378118, 0.15600867058884194, 0.20725955531708684, 0.16200262622950634, 0.1482578184019845, 0.1680885820891721, 0.15828444996575286, 0.1584421614183017, 0.15139879308993565, 0.15556169421970067, 0.15382046366821067, 0.1571776674715708, 0.16390905858575244, 0.1703472230756472, 0.1200260228788731, 0.19278850003873016, 0.22786033415987728, 0.11717600468944567, 0.16584673927799887, 0.14234689278351564, 0.16267500553802816, 0.1506927456593785, 0.1629322968713275, 0.17452633975438037, 0.15329541423072957, 0.2568982049145143, 0.2666691523989789, 0.12252250888760496, 0.12742169852229346, 0.16718060888340192, 0.24038091031685827, 0.2505069158448604, 0.1839781128030571, 0.19975119156302246, 0.18160624774996326, 0.19812111757053197, 0.188414781187917, 0.19850767963492522, 0.16985117870875033, 0.22086222033759628, 0.18460305784058373, 0.048400896462194254, 0.055648590927676045, 0.06252486013968028, 0.05376665232187838, 0.05934794589201553, 0.06773917743880398, 0.058633632530098345, 0.06342472384065423, 0.04920933018345264]}, "mutation_prompt": null}
{"id": "892e08e2-cc3f-4a04-933b-94859000b96d", "solution": "import numpy as np\n\nclass AdaptiveParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))\n        self.w = 0.9  # inertia weight\n        self.w_min = 0.4\n        self.c1 = 2.0  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.v_max = (self.ub - self.lb) * 0.2  # max velocity\n        self.v_min = -self.v_max\n        \n    def __call__(self, func):\n        # Initialize swarm\n        positions = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.random.uniform(self.v_min, self.v_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_fitness = np.array([func(pos) for pos in positions])\n        num_evaluations = self.population_size\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] + \n                                self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                self.c2 * r2 * (global_best_position - positions[i]))\n                velocities[i] = np.clip(velocities[i], self.v_min, self.v_max)\n                \n                # Update position\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lb, self.ub)\n                \n                # Evaluate fitness\n                fitness = func(positions[i])\n                num_evaluations += 1\n                \n                # Update personal and global best\n                if fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_fitness[i] = fitness\n                    if fitness < global_best_fitness:\n                        global_best_position = positions[i]\n                        global_best_fitness = fitness\n            \n            # Dynamic inertia weight adjustment\n            self.w = self.w_min + (0.5 * (self.budget - num_evaluations) / self.budget)\n        \n        return global_best_position, global_best_fitness", "name": "AdaptiveParticleSwarmOptimization", "description": "Adaptive Particle Swarm Optimization with Dynamic Inertia and Compound Learning for enhanced exploration and exploitation in black-box optimization.", "configspace": "", "generation": 78, "fitness": 0.18277424859105984, "feedback": "The algorithm AdaptiveParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.3152515454131163, 0.3446676690831578, 0.3074428050906337, 0.33744486769438686, 0.33713160061010117, 0.2991572306424385, 0.31505096396017107, 0.33389237761823276, 0.31905684945651214, 0.0021463571148835348, 0.007926894299693177, 0.004758654653214789, 0.00828183376909164, 0.044666619233036164, 0.002901501988259003, 0.03425955226179156, 0.0027654098570532026, 0.0024782172630448684, 0.08962632644110669, 0.09440627520314537, 0.09382327455003159, 0.081175017266231, 0.09060104506434075, 0.08609126390661948, 0.08003631935165922, 0.08773993649256973, 0.0845783098403694, 0.07491852123750975, 0.07927692992807, 0.06679136344664582, 0.08282609520838158, 0.09360319758121916, 0.0733693664332391, 0.0849671602338512, 0.079491417030218, 0.08952191532572396, 0.9089048125914317, 0.9394042035278293, 0.9180277156188149, 0.9276536866526668, 0.93501712255665, 0.9321626555844859, 0.9306399646495678, 0.9184995435285953, 0.9276983676850582, 0.18425976575041558, 0.2024569236316185, 0.16657347236351638, 0.16963560667491495, 0.2063313267819572, 0.1888057063608357, 0.18711644450837384, 0.17336058334443716, 0.19507387923401565, 0.22788646128922296, 0.22521862438861173, 0.23002537808557433, 0.2277763240063282, 0.22268429860268646, 0.2179964228407384, 0.21328381099826832, 0.2195637272210743, 0.2571334266432669, 0.10509026243677122, 0.11379109183270719, 0.12216184355500814, 0.10132196126312942, 0.10384659560947807, 0.09944741881831287, 0.09089032426530064, 0.0936386969795665, 0.11036633206008173, 0.11144367190666382, 0.08872959564401206, 0.11244127443229734, 0.14480105774129692, 0.09555570316731377, 0.1267768110184765, 0.10541102451753925, 0.09264840160434162, 0.08917926319941616, 0.0023098824953611263, 9.999999999998899e-05, 9.999999999998899e-05, 0.002664022364543994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031188111039542887, 0.0019865014306463813, 0.07507143973265595, 0.0991036502225141, 0.06989641241821842, 0.08721595545692817, 0.07445162239644343, 0.025235393202920786, 0.08323208648530012, 0.059711447805552376, 0.07760943556576949, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011355151446479361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041716187361448664, 0.06625137569451944, 0.04362492523359984, 0.059622125720933394, 0.03393997507375568, 0.05083491392584838, 0.03629454624861428, 0.05992924391176424, 0.04617103242955822, 0.33372658334769345, 0.34233493893350686, 0.32956735327250253, 0.3184589522775848, 0.3226930464974931, 0.3054778247436378, 0.299293998738393, 0.3217029536103754, 0.3145888517465367, 0.08261986693914258, 0.09255989480214266, 0.09342976560586502, 0.10556682444851828, 0.09578441691941075, 0.07610395017454286, 0.08744193435520242, 0.09663969204463141, 0.07177582667001225, 0.1672150089305514, 0.15835058597340634, 0.1469684656496444, 0.15673314667681693, 0.17195816453443236, 0.1771481656244378, 0.16979030193110978, 0.1577738176393093, 0.1467551709843814, 0.25342692996755856, 0.21771261582721935, 0.22911242568876833, 0.25188684323424104, 0.2409595129130786, 0.2352242008722677, 0.2361417470784941, 0.21846708624347377, 0.24099340716693152, 0.16293453041047978, 0.16778851897677283, 0.17160448879343693, 0.1781883345891523, 0.1626563753403799, 0.17687625760567682, 0.17204688350733155, 0.18537785191219125, 0.1662226072390477, 0.1872850616397541, 0.20008483663788224, 0.20802810098877533, 0.20995581608919156, 0.19602919442148203, 0.18670906994907088, 0.17954871070927458, 0.20113830614888106, 0.22636803034108255, 0.17167173673254787, 0.18420916264354603, 0.16932991247840268, 0.17842435307875315, 0.1765741011216816, 0.17855207410105978, 0.17314676709105903, 0.17856192840982965, 0.1912915250442233, 0.17719501319882602, 0.2976726040926774, 0.40829915421675855, 0.15454900873617994, 0.18220203152655745, 0.1401708677724559, 0.42183806742642127, 0.43301781613073564, 0.1625547699683788, 0.36622391430805235, 0.19626638144221753, 0.35771176688624096, 0.3389818767587962, 0.35604187955368183, 0.4065373364937015, 0.1669825448155996, 0.4423028724033904, 0.2539851844573572, 0.17659879017815105, 0.18827002011067984, 0.190397419506263, 0.1853755976726802, 0.17771198826222268, 0.21257845467087622, 0.19079641021168203, 0.18242437282007384, 0.18791514800413722, 0.0718863563839024, 0.08218826320138994, 0.07526186533341839, 0.08806719667873875, 0.07780589884060352, 0.08231528539712507, 0.07771454796559885, 0.08537307643675252, 0.08277429822458815]}, "mutation_prompt": null}
{"id": "746fdc4a-ba41-4830-a5a4-b0d8be31de0f", "solution": "import numpy as np\n\nclass AdaptiveMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))\n        self.F = 0.5\n        self.CR = 0.9\n        self.local_search_prob = 0.1  # Probability of applying local search\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n                \n                # Local optimization with dynamic probability\n                if np.random.rand() < self.local_search_prob:\n                    local_best, local_fitness = self.local_search(offspring, func)\n                    num_evaluations += 1  # Local search uses one function evaluation\n                    if local_fitness < fitness[i]:\n                        population[i] = local_best\n                        fitness[i] = local_fitness\n                        if local_fitness < best_fitness:\n                            best_individual = local_best\n                            best_fitness = local_fitness\n        \n        return best_individual, best_fitness\n\n    def local_search(self, individual, func):\n        # Simple random search in neighborhood\n        perturbation = np.random.uniform(-0.1, 0.1, size=self.dim)\n        candidate = np.clip(individual + perturbation, self.lb, self.ub)\n        candidate_fitness = func(candidate)\n        if candidate_fitness < func(individual):\n            return candidate, candidate_fitness\n        return individual, func(individual)", "name": "AdaptiveMemeticAlgorithm", "description": "Adaptive Memetic Algorithm with Dynamic Local Search that combines global exploration with local optimization to efficiently navigate complex search spaces.", "configspace": "", "generation": 79, "fitness": 0.16292444036297463, "feedback": "The algorithm AdaptiveMemeticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.14.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.3553931931665604, 0.3302236568079635, 0.3310473951524333, 0.3501004217146465, 0.3446656136783256, 0.35077038717410036, 0.3597374090351946, 0.3405228130186221, 0.32595811909243866, 0.06728155207356357, 0.0874387625753339, 0.07312410827714211, 0.06567294930770717, 0.06815899404206505, 0.08324381120097446, 0.06543687579524615, 0.07099890912060058, 0.06729776605264526, 0.08054827493539829, 0.08394160839838116, 0.08227541264689442, 0.09509020234804244, 0.08464292337347434, 0.08438199341690544, 0.08839344507789315, 0.07978661244143914, 0.08092291023146403, 0.0649963762797715, 0.0631525553522877, 0.08134705718375934, 0.07273407038564006, 0.06381812351490423, 0.06790963260203875, 0.08162958160446365, 0.08087390181654597, 0.08067409890190325, 0.6098165545273538, 0.7183051595729015, 0.776524435868322, 0.7589184700998535, 0.8737031807458489, 0.761762251527677, 0.7979093212846693, 0.6280803457387094, 0.5088364114224713, 0.12071544488644981, 0.15302404123627034, 0.15294611424470173, 0.14811108735374945, 0.12926216290864978, 0.12653137087080102, 0.16271579541551418, 0.12768065804662343, 0.1387291601871562, 0.22365060123683878, 0.2106114965338829, 0.20558585270980256, 0.23016655603976865, 0.24614326228874928, 0.21782544152958494, 0.20931057508093764, 0.2274864401255916, 0.22088104214125015, 0.10410151424571945, 0.08139703484915994, 0.09056657170305149, 0.08614845210976274, 0.08248565324693624, 0.09879777445121274, 0.09136925938008955, 0.08719404432172939, 0.10610468411072393, 0.07312246816375678, 0.10012837552418419, 0.07957328638728145, 0.09613375139142843, 0.10118890002190839, 0.10345480487225245, 0.09794684832891976, 0.09244075474662461, 0.0847565816002338, 0.010919533010368299, 0.02119324823733082, 0.00877685102466863, 0.005977844751204775, 0.01768632695472916, 0.015180536806402078, 0.015218554211223867, 0.009865571763265524, 0.011667427483753046, 0.10096302942460711, 0.12835164412716327, 0.1288832644495942, 0.12729347944835967, 0.11401616215894139, 0.10957974749146993, 0.10065114126227781, 0.13030237233056485, 0.11958855513788513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04730907522771155, 0.05608967645761642, 0.05349069616972679, 0.06807449499744112, 0.05560851948941714, 0.054223332688390524, 0.05276447728110745, 0.051225807335642304, 0.07378806715584574, 0.31897124460062753, 0.3138946694609611, 0.3183974949519782, 0.33458076818792704, 0.3345842814194564, 0.31199666336130594, 0.30987487071856723, 0.3251715320793652, 0.3106889905310566, 0.08199792811602635, 0.07461757678559311, 0.08152324010235046, 0.07844294463280876, 0.06998061928759158, 0.08565904259107282, 0.07450297811412132, 0.0785077190863227, 0.07575814878602616, 0.13948978124590572, 0.13066409311382543, 0.15016309882411605, 0.14768109344285207, 0.14061624247853488, 0.12777067041175882, 0.13266216345888693, 0.13462319323998895, 0.1353466343010945, 0.21393214936813232, 0.21208102569053522, 0.210111497040659, 0.21555121034183378, 0.21865232833295611, 0.2112944510179543, 0.23381435735811162, 0.23116639165053277, 0.2167131111381262, 0.15666833405164327, 0.14173014992841693, 0.1533718809243102, 0.16400836732110913, 0.15383384653990329, 0.1623527105641277, 0.1641065581971709, 0.1659501757804157, 0.17550363438695626, 0.17492297320567396, 0.186088529613067, 0.1821000923374816, 0.18449724698999903, 0.1800468738473684, 0.1751268916227362, 0.19575322760410252, 0.21021336857541706, 0.1947614353595789, 0.16023570215566574, 0.17442088925309795, 0.16710916601807402, 0.16146460103697557, 0.18084068383728413, 0.167760664566305, 0.1645925375740177, 0.1724698022418596, 0.17380394304426716, 0.1926353913823785, 0.15447780814349465, 0.21322585382774806, 0.1759251531913344, 0.20875607184646006, 0.15079180021986793, 0.2336842614775575, 0.15917222517774354, 0.17673574175734397, 0.15822821907709372, 0.1727201830453141, 0.22834599853722448, 0.1693452207683278, 0.1592912602017701, 0.162222173123587, 0.18115634740163733, 0.2205497863304814, 0.1888311630068258, 0.17823712544734116, 0.1845048602803847, 0.1846252550815981, 0.18090010894210795, 0.18486639729304966, 0.20095204564385727, 0.19905753830274764, 0.170991237262774, 0.17889597028513748, 0.07246864473708647, 0.06487757779943037, 0.06252779788421958, 0.07213139312058625, 0.06364695452557956, 0.06881491740776458, 0.06924018858943748, 0.0670128521282235, 0.07069015555643277]}, "mutation_prompt": null}
{"id": "ab720b18-7674-48e4-9c73-118a1685b24e", "solution": "import numpy as np\n\nclass QuantumInspiredDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_population = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation using Quantum-inspired differential\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutated_vector = population[a] + self.F * (population[b] - population[c])\n                mutated_vector = np.clip(mutated_vector, self.lb, self.ub)\n                \n                # Quantum crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                offspring = np.where(crossover_mask, mutated_vector, population[i])\n                \n                # Superposition-based enhancement\n                quantum_selection = np.random.rand(self.dim) < quantum_population[i]\n                offspring = np.where(quantum_selection, offspring, best_individual)\n                \n                # Evaluate offspring\n                offspring_fitness = func(offspring)\n                num_evaluations += 1\n                \n                # Selection\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                    quantum_population[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n                    if offspring_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = offspring_fitness\n        \n        return best_individual, best_fitness", "name": "QuantumInspiredDifferentialEvolution", "description": "A novel Quantum-Inspired Differential Evolution Algorithm that leverages quantum superposition principles to enhance diversity and convergence in multi-dimensional black-box optimization.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8849765902233518, 0.8948627244443313, 0.8738256915349999, 0.8740481318669114, 0.8729858938364783, 0.8833276818515282, 0.8705417909736619, 0.8727356768892008, 0.8857236795374973, 0.7800890213432256, 0.7934126922377512, 0.7953536514972999, 0.7907284721246406, 0.776143556016667, 0.5893285021487493, 0.7848412986135075, 0.8006224978968294, 0.7931095881846753, 0.18735257490124002, 0.16769521802295695, 0.7576829836919867, 0.18395818900191163, 0.731733338756037, 0.3349074517748428, 0.7637171566764708, 0.18702421126029156, 0.7716823516099308, 0.1810886829237306, 0.1407164396636872, 0.15811244987668638, 0.14013575616871143, 0.17106898263119896, 0.18261562366770723, 0.15812073556581185, 0.18336056671741097, 0.7272588651606746, 0.969696968788369, 0.9710618775742235, 0.9670605326985156, 0.9659959872181698, 0.9702429219498099, 0.9559651908730156, 0.9697809948144639, 0.971701592890637, 0.9686065999771669, 0.5711294277602099, 0.5241486958664224, 0.5114188246601903, 0.5449547092872644, 0.4223940288364091, 0.57124316649898, 0.4252264111874856, 0.31955183028698697, 0.47337033916570803, 0.22388545855340491, 0.21981646433145374, 0.19278255580354764, 0.2765879103234221, 0.2784689947482131, 0.1438827140180179, 0.1594186242421285, 0.2438204831488583, 0.14202836152618148, 0.26640784424137565, 0.18270476770631894, 0.1890486917528349, 0.13130655922062284, 0.1965881743492398, 0.3307235341757693, 0.1900327639536915, 0.27986679520672053, 0.19033766331289514, 0.12242927123187941, 0.1907773146792906, 0.16153258294895656, 0.19564966809684192, 0.23398391188475187, 0.1978194220398698, 0.13484140539565592, 0.19583056407862132, 0.22188050941762305, 0.029954479195212658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030562340968361412, 0.006899335308960697, 0.0004568272378950855, 9.999999999998899e-05, 0.044781457256317436, 0.07608721776873406, 0.10102230786240629, 0.08931821404598539, 0.06313708015517328, 0.03209903967204153, 0.032345394119143944, 0.05220872123335962, 0.07300350393662736, 0.04858297205049966, 0.02340151171818239, 0.12825065028568805, 0.15740943436366217, 0.11067736791792793, 0.18256789600731804, 0.09340731990039308, 0.1468854569495528, 0.2263460290073458, 0.1340528869312826, 0.11286189587446571, 0.06346736949853016, 0.03834939177783858, 0.038376365386743605, 0.25150422346871815, 0.10183522242896192, 0.08077004077994665, 0.1658218201896099, 0.12121277998735513, 0.5290025154285896, 0.5226088749057056, 0.5110735938728431, 0.5008743400665501, 0.6020437683597007, 0.49793343220574293, 0.5264808839567168, 0.49347666417049485, 0.536727631717246, 0.14227882994064744, 0.09110671214373689, 0.07338357954523578, 0.06636603935230856, 0.11414001146463704, 0.12175502123969906, 0.11049703315876014, 0.0945323862994022, 0.08315893054953594, 0.21274170053775376, 0.21146299632200927, 0.16701821557612762, 0.1767140894002539, 0.2482430209416624, 0.21330165985376814, 0.17052781129184935, 0.1528189866484927, 0.16472352108216604, 0.2648781500825881, 0.1425357117105448, 0.3449594617075271, 0.20551516210872622, 0.33901955679708795, 0.2272448630124423, 0.2505449575717559, 0.3503585897566227, 0.42355644867448883, 0.20863198934730176, 0.08474947579637426, 0.1691970056564014, 0.150147477541133, 0.1904895733347235, 0.2197413925045404, 0.22848944717262443, 0.17040811281689972, 0.15531671878513664, 0.22620703330467185, 0.19121554145754593, 0.17432288680799157, 0.21390465836504013, 0.21360511998999887, 0.20156312023309497, 0.19555358537703404, 0.15713292466076145, 0.2350354979204029, 0.17293114270682397, 0.20691638776244758, 0.21283332487771534, 0.8042348135894553, 0.22550484966138395, 0.19704245414180066, 0.24450835142558858, 0.249075996088583, 0.2504798205956674, 0.13046323203249977, 0.19992057404929442, 0.8682341679551638, 0.20095440450225965, 0.19994168857811567, 0.16755678741541213, 0.8202677056320056, 0.8548857436003974, 0.16562093847551873, 0.6921218516780729, 0.16880800597234935, 0.7464542155992349, 0.6048242257376956, 0.6291416513111113, 0.16784431735530436, 0.1687329302328926, 0.15510205639508945, 0.5215021261056603, 0.188466534322958, 0.18889438025440108, 0.1860813566736147, 0.2246709033415546, 0.1849740190810789, 0.1758206270225059, 0.22152799727693762, 0.21496061800660393, 0.22037104587036982, 0.08527722416329686, 0.10585290170430706, 0.04555883815914019, 0.09940700001858183, 0.07329006134361338, 0.07773086841123966, 0.0905139535931625, 0.09690730163359607, 0.11205774599933516]}, "mutation_prompt": null}
{"id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 81, "fitness": 0.31952827774151593, "feedback": "The algorithm SwarmBasedQuantumParticleOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "a67e14a3-902f-43a9-a4ae-20ad81696559", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "01e561b9-2b16-488f-ae21-71c5fceeefab", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "7e99d7db-0924-422b-acba-5eab60ec647c", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "21897658-88ed-4707-af72-bbb7bdaafcb8", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "f75f4d7b-7320-4410-9660-27f88193317e", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "4ddcb9da-9478-49b0-a3cb-b87c014d8281", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "1b1377ce-5297-4ee0-938c-3e99fa5b9658", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "9c6605be-2af5-4632-ac93-e7ffdb68539c", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "dbc8bd1e-9556-4fa1-a5ba-59161ba538d0", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "f8422af1-edb6-464b-ab9f-0b1b96bf0d13", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "6117798d-0e63-4da3-9ba2-3f178bd48570", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "c6692435-868e-493e-8f4d-9f4a45663034", "solution": "import numpy as np\n\nclass AdaptiveWaterfallOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.drops_count = max(5, int(budget / (10 * dim)))  # heuristic for number of drops\n        self.initial_velocity = 0.5\n        self.evaporate_factor = 0.95\n        self.adapt_rate = 0.1\n        \n    def __call__(self, func):\n        np.random.seed(42)  # Ensure reproducibility\n        # Initialize water drops\n        position = np.random.uniform(self.lb, self.ub, (self.drops_count, self.dim))\n        velocity = np.random.uniform(-self.initial_velocity, self.initial_velocity, (self.drops_count, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.drops_count\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.drops_count):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity with adaptive adaptation\n                velocity[i] *= self.evaporate_factor\n                adapt = self.adapt_rate * np.random.rand(self.dim) * (global_best_position - position[i])\n                velocity[i] += adapt\n                \n                # Move the drop\n                new_position = position[i] + velocity[i]\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Evaluate the new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update position\n                position[i] = new_position\n        \n        return global_best_position, global_best_fitness", "name": "AdaptiveWaterfallOptimization", "description": "Adaptive Waterfall Optimization combines water flow dynamics with an adaptive parameter tuning mechanism for enhanced convergence in diverse optimization landscapes.", "configspace": "", "generation": 92, "fitness": 0.1494437632840123, "feedback": "The algorithm AdaptiveWaterfallOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.23182125644565532, 0.23182125644565532, 0.23182125644565532, 0.22513909508450647, 0.22513909508450647, 0.22513909508450647, 0.26166680118496, 0.26166680118496, 0.26166680118496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07102502177631287, 0.07102502177631287, 0.07102502177631287, 0.0757792977835372, 0.0757792977835372, 0.0757792977835372, 0.06837911448162126, 0.06837911448162126, 0.06837911448162126, 0.06268214725974608, 0.06268214725974608, 0.06268214725974608, 0.04668058337478065, 0.04668058337478065, 0.04668058337478065, 0.06864854501686368, 0.06864854501686368, 0.06864854501686368, 0.7760390316341332, 0.7760390316341332, 0.7760390316341332, 0.8346101864729536, 0.8346101864729536, 0.8346101864729536, 0.8408288675614912, 0.8408288675614912, 0.8408288675614912, 0.1519202171819234, 0.1519202171819234, 0.1519202171819234, 0.12207716792325318, 0.12207716792325318, 0.12207716792325318, 0.0833572460216565, 0.0833572460216565, 0.0833572460216565, 0.20287660250143158, 0.20287660250143158, 0.20287660250143158, 0.1739987050690781, 0.1739987050690781, 0.1739987050690781, 0.16141971353181161, 0.16141971353181161, 0.16141971353181161, 0.04807110788038771, 0.04807110788038771, 0.04807110788038771, 0.05092194058042154, 0.05092194058042154, 0.05092194058042154, 0.06591312360725277, 0.06591312360725277, 0.06591312360725277, 0.052390829058909905, 0.052390829058909905, 0.052390829058909905, 0.06915136468202199, 0.06915136468202199, 0.06915136468202199, 0.05543499878137048, 0.05543499878137048, 0.05543499878137048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055627287148501625, 0.055627287148501625, 0.055627287148501625, 0.017673005148693632, 0.017673005148693632, 0.017673005148693632, 0.05846728868053375, 0.05846728868053375, 0.05846728868053375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022357415013329218, 0.022357415013329218, 0.022357415013329218, 0.020984865437246314, 0.020984865437246314, 0.020984865437246314, 0.027852407699711534, 0.027852407699711534, 0.027852407699711534, 0.2748656733786299, 0.2748656733786299, 0.2748656733786299, 0.24949868774375827, 0.24949868774375827, 0.24949868774375827, 0.2453861076932956, 0.2453861076932956, 0.2453861076932956, 0.07405702024135241, 0.07405702024135241, 0.07405702024135241, 0.066031303921532, 0.066031303921532, 0.066031303921532, 0.062176851432318436, 0.062176851432318436, 0.062176851432318436, 0.17588703436611608, 0.17588703436611608, 0.17588703436611608, 0.12033652008613771, 0.12033652008613771, 0.12033652008613771, 0.1398283945600901, 0.1398283945600901, 0.1398283945600901, 0.20759222458855586, 0.20759222458855586, 0.20759222458855586, 0.1928559594634236, 0.1928559594634236, 0.1928559594634236, 0.20147198458888227, 0.20147198458888227, 0.20147198458888227, 0.1505616322528497, 0.1505616322528497, 0.1505616322528497, 0.14535349010071763, 0.14535349010071763, 0.14535349010071763, 0.13294878722387238, 0.13294878722387238, 0.13294878722387238, 0.20188428160552796, 0.20188428160552796, 0.20188428160552796, 0.1841630324955541, 0.1841630324955541, 0.1841630324955541, 0.17333575893092001, 0.17333575893092001, 0.17333575893092001, 0.15654879501940544, 0.15654879501940544, 0.15654879501940544, 0.1753410257253608, 0.1753410257253608, 0.1753410257253608, 0.16377384108615933, 0.16377384108615933, 0.16377384108615933, 0.37514444739840824, 0.37514444739840824, 0.37514444739840824, 0.22922047383681188, 0.22922047383681188, 0.22922047383681188, 0.28311569683233095, 0.28311569683233095, 0.28311569683233095, 0.2243929861118249, 0.2243929861118249, 0.2243929861118249, 0.26232360537558386, 0.26232360537558386, 0.26232360537558386, 0.12010272948836953, 0.12010272948836953, 0.12010272948836953, 0.20386497305298967, 0.20386497305298967, 0.20386497305298967, 0.18345193961464246, 0.18345193961464246, 0.18345193961464246, 0.1729083408844142, 0.1729083408844142, 0.1729083408844142, 0.05970832633526446, 0.05970832633526446, 0.05970832633526446, 0.06927916839962633, 0.06927916839962633, 0.06927916839962633, 0.07784462859006214, 0.07784462859006214, 0.07784462859006214]}, "mutation_prompt": null}
{"id": "94a74975-e577-473b-9674-e9cda9a4ee5e", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "2b2fd07c-af40-46b5-97ec-95f842de219b", "solution": "import numpy as np\n\nclass HybridGeneticQuantumOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.7\n        self.quantum_probability = 0.5\n        \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        quantum_state = np.random.uniform(0, 1, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        global_best_idx = np.argmin(fitness)\n        global_best_position = population[global_best_idx]\n        global_best_fitness = fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            new_population = []\n            \n            for _ in range(self.population_size // 2):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Select parents\n                parents = np.random.choice(self.population_size, 2, replace=False)\n                parent1, parent2 = population[parents]\n                \n                # Crossover\n                if np.random.rand() < self.crossover_rate:\n                    crossover_point = np.random.randint(1, self.dim-1)\n                    child1 = np.concatenate((parent1[:crossover_point], parent2[crossover_point:]))\n                    child2 = np.concatenate((parent2[:crossover_point], parent1[crossover_point:]))\n                else:\n                    child1, child2 = parent1, parent2\n                \n                # Mutation\n                for child in [child1, child2]:\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_vector = np.random.normal(0, 1, self.dim)\n                        child += mutation_vector\n                        child = np.clip(child, self.lb, self.ub)\n                    \n                    # Quantum effect\n                    quantum_effect = np.random.rand(self.dim) < quantum_state[parents[0]]\n                    child = np.where(quantum_effect, child, global_best_position)\n                    \n                    # Evaluate child\n                    child_fitness = func(child)\n                    num_evaluations += 1\n                    \n                    # Update global best\n                    if child_fitness < global_best_fitness:\n                        global_best_position = child\n                        global_best_fitness = child_fitness\n                    \n                    new_population.append(child)\n                    if num_evaluations >= self.budget:\n                        break\n            \n            if num_evaluations >= self.budget:\n                break\n            \n            # Select next generation\n            population = np.array(new_population)\n            fitness = np.array([func(ind) for ind in population])\n            num_evaluations += len(population)\n            \n            # Update quantum states\n            quantum_state = np.random.uniform(0, 1, (self.population_size, self.dim))\n        \n        return global_best_position, global_best_fitness", "name": "HybridGeneticQuantumOptimizer", "description": "A Hybrid Genetic-Quantum Optimizer combining evolutionary crossover and mutation with quantum-inspired superposition to balance exploration and exploitation.", "configspace": "", "generation": 94, "fitness": 0.17408447985608924, "feedback": "The algorithm HybridGeneticQuantumOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.3680571065310092, 0.33175045980109075, 0.35653870119620956, 0.38135187409584126, 0.33519544783981703, 0.37505368920474735, 0.3615937268550786, 0.3796176723284247, 0.34800154350974866, 9.999999999998899e-05, 0.06279676061633366, 0.0040458906812685935, 0.017583245309867546, 0.0002911442885219495, 0.049337125511646596, 0.031396041395759355, 0.00936693396230881, 9.999999999998899e-05, 0.1553839765368803, 0.13604637246119178, 0.11492952347588048, 0.14362038862614246, 0.1347054690837982, 0.13946865130182085, 0.13868632867249397, 0.13696249549367223, 0.13815495621669782, 0.10214335028950916, 0.10310283846312573, 0.14200572071213502, 0.12146997617002364, 0.10913442684145358, 0.14609849916683382, 0.17844907274889188, 0.12023619218018033, 0.11271216460376454, 0.911485997388882, 0.8698441438812397, 0.8446350613911037, 0.8663896083342036, 0.8359464605945741, 0.8479366597269162, 0.8998638511860336, 0.8670966645041456, 0.8017592633330204, 0.1568991067768577, 0.12301357200676488, 0.18901050179396872, 0.1630726659237911, 0.2250677349902741, 0.19789378042994032, 0.1671682694770097, 0.1414875855525568, 0.16956520415573728, 0.2030934618391429, 0.2029926170138514, 0.19564194627923648, 0.18264535447608077, 0.18387499301844312, 0.1712592585605891, 0.16653148135120122, 0.24033569803270993, 0.1562570077485772, 0.1312443167011308, 0.053868401514806874, 0.12794321099070294, 0.12850150912572877, 0.0030842107018215215, 0.12399593747384574, 0.13727330362051127, 0.04409156101104561, 0.0948746683327647, 0.1059650162303245, 0.08345178165153067, 0.12905516031459718, 0.11445241379008297, 0.11458164399241544, 0.12233397122323475, 0.11651757393274043, 0.11323402434392416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04365951091177156, 0.050755912132443126, 0.037060380566076634, 0.04847434112597715, 0.05207575630129668, 0.0006290943272427851, 0.09782516944191288, 0.04027906997906616, 0.0803586565793567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08329688537440594, 0.05382305133050591, 0.07585304644576896, 0.0186714487077021, 0.04398857739561768, 0.042202845430774905, 0.04379911323819563, 0.04755522695810832, 0.08587471369332611, 0.3300590046263846, 0.3226796834331803, 0.3013822641325089, 0.3305943719316804, 0.30435764640729623, 0.3497076484969629, 0.3582440012109376, 0.2954415185264079, 0.3151305505745219, 0.07238099119152053, 0.06422575728649504, 0.08529534848553799, 0.08921768072909764, 0.06021457439355671, 0.07375493753539886, 0.0830924098866841, 0.07633192151046408, 0.09688672932985432, 0.1821421804205885, 0.12386277738962181, 0.1420244113936615, 0.15994957249304498, 0.1974129574286113, 0.13565763194379055, 0.13469619439391678, 0.12390326772354843, 0.13001263596665336, 0.22417854506225754, 0.21238682109577867, 0.22205127062548125, 0.17519453082509184, 0.2475928969804697, 0.23351796148335668, 0.21200059543542416, 0.2102793392527097, 0.18392092612272126, 0.12679391223488856, 0.11574272682316078, 0.13553537307322472, 0.16689742501363203, 0.12067060822130371, 0.17951326315464722, 0.20437505016301927, 0.16348174734190857, 0.1718890470038359, 0.18327752278056708, 0.20720053194974242, 0.17582124612414884, 0.17009403499505693, 0.15267445542152236, 0.17291880471712773, 0.14127681169058215, 0.17865951155609294, 0.1738243062224787, 0.18510652914864256, 0.1776625985102519, 0.18919787431114277, 0.21886466699832519, 0.18724728466009377, 0.19376079358981024, 0.21638990499082722, 0.18930633135974317, 0.19649790554938817, 0.12341928010239411, 0.1923752608918562, 0.4727758275433507, 0.1515226081719837, 0.4171637408118489, 0.17912382781438774, 0.17336992379664495, 0.16803392965692487, 0.16539012934432618, 0.4341619546411767, 0.1687480371547998, 0.31138740265858134, 0.34343339174769827, 0.17857540352945123, 0.16690743273722541, 0.1673092321790044, 0.15131530499606383, 0.43595662867385243, 0.15435675855453213, 0.22013832409231915, 0.1703992418777721, 0.1763975962351766, 0.15452811884639417, 0.1878459842170751, 0.17981665371987166, 0.17393372382874184, 0.16870283843065403, 0.06440778215709675, 0.04727207628269603, 0.07183846983878062, 0.06311278293614941, 0.05875739312325623, 0.06982771577677627, 0.08448674380413612, 0.0700502965136186, 0.0721367880684951]}, "mutation_prompt": null}
{"id": "81b97eb5-22a7-45f1-b620-baf0852d1925", "solution": "import numpy as np\n\nclass DynamicAdaptiveDifferentialEvolutionWithNeighborhoodLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5, int(budget / (10 * dim)))\n        self.f_scale = 0.5  # initial scaling factor for differential evolution\n        self.cr_rate = 0.9  # crossover rate\n        self.neighborhood_size = max(2, self.pop_size // 5)  # for neighborhood learning\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.pop_size\n\n        best_idx = np.argmin(fitness)\n        global_best_position = population[best_idx]\n        global_best_fitness = fitness[best_idx]\n\n        while num_evaluations < self.budget:\n            for i in range(self.pop_size):\n                if num_evaluations >= self.budget:\n                    break\n\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n\n                # Mutation\n                mutant_vector = population[a] + self.f_scale * (population[b] - population[c])\n                mutant_vector = np.clip(mutant_vector, self.lb, self.ub)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Evaluation\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                # Selection and neighborhood learning\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < global_best_fitness:\n                        global_best_position = trial_vector\n                        global_best_fitness = trial_fitness\n\n                # Neighborhood learning\n                neighborhood_indices = np.random.choice(self.pop_size, self.neighborhood_size, replace=False)\n                for n_idx in neighborhood_indices:\n                    if fitness[n_idx] > fitness[i]:\n                        population[n_idx] = population[i]\n                        fitness[n_idx] = fitness[i]\n\n        return global_best_position, global_best_fitness", "name": "DynamicAdaptiveDifferentialEvolutionWithNeighborhoodLearning", "description": "Dynamic Adaptive Differential Evolution with Neighborhood Learning (DADENL) combines adaptive differential evolution strategies and neighborhood-based learning to optimize diverse search landscapes efficiently.", "configspace": "", "generation": 95, "fitness": 0.0750364819295658, "feedback": "The algorithm DynamicAdaptiveDifferentialEvolutionWithNeighborhoodLearning got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.18868149842976978, 0.17261692395747863, 0.1499906128989713, 0.14384628680365164, 0.12613525772234457, 0.17863609440413752, 0.15087810328270046, 0.11034445048817165, 0.12743629840580595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0326145016603705, 0.02873944259247241, 0.034683207202948485, 0.027324745280263185, 0.01726112096692145, 0.059190969951532724, 0.046706843311652535, 0.02574403999548236, 0.04447243483744101, 0.006354732432855448, 0.03130190634524466, 0.0486798595685759, 0.04506399802231209, 0.01938189222608888, 0.042824080576694734, 0.030104233514412826, 0.03014116860105842, 0.0011589695579680148, 0.11329642585470157, 0.08352399057890503, 0.09304982886285984, 0.15193455525261546, 0.13221221462010835, 0.06447015309746074, 0.09909154975242962, 0.08440553352489388, 0.07294829054021279, 0.07066178422440828, 0.06012766521064039, 0.10171882691615464, 0.0413359366555367, 0.06384867894263191, 0.009341072218519875, 9.999999999998899e-05, 0.022975565716642055, 0.10791482497284755, 0.14686262712677634, 0.13760907658862087, 0.1057305860633202, 0.11026514694227296, 0.09030637956461618, 0.08440160960412091, 0.08978287775133487, 0.11574939201475831, 0.10017772473897679, 9.999999999998899e-05, 0.0005573207333485763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06907415066278977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06374083564309185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04147442859940442, 0.05975344662498561, 0.004514399195837737, 0.044669195072529644, 0.018858140951558355, 9.999999999998899e-05, 0.0076604928351802215, 0.10847838056441594, 0.06701011377179633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17450140998111796, 0.18814122829192237, 0.1783698298954639, 0.14243029177985367, 0.24992920142416475, 0.16688034957133002, 0.17544064339385446, 0.13026673378324627, 0.13478430931498608, 0.021295093365980233, 0.024040681525855923, 0.02936859430566674, 0.03266886175302153, 0.04003665927042743, 0.052806770359178135, 0.033666640234027545, 0.029309956764558054, 0.028110859891268825, 0.13709410100555053, 0.10793656632893289, 0.11842175776965747, 0.13766266535167793, 0.13511880823300437, 0.10798713552628325, 0.08913611812908184, 0.10415340588880795, 0.08223993190341006, 0.17588155829585017, 0.12244191735429832, 0.1613932299901244, 0.15841263531383432, 0.1549758766153687, 0.16658355015337656, 0.12962442880408087, 0.17377774300845283, 0.14587548489446578, 0.08614718322825576, 0.08460880721874908, 0.11530588030203126, 0.09355436316945975, 0.08893469351471173, 0.11114629559519396, 0.1278651896449936, 0.14549243068241413, 0.11186619546108123, 0.1225820240089901, 0.1332351951554296, 0.13345086981233123, 0.14993068049456126, 0.12637829793519706, 0.12744774174756235, 0.13652677261268742, 0.12665552546654069, 0.12939079709482249, 9.999999999998899e-05, 0.146046253167597, 0.15128825140683544, 0.0023123033003774607, 0.14182594192863052, 0.13097773973260918, 0.04664053172742755, 0.12424007915494528, 0.16207881422481074, 0.10630450851969886, 0.1059222941599508, 0.11593629774897507, 0.09366726184673313, 0.1207914665021157, 0.09014257985362206, 0.1070176662487543, 0.11951125298686238, 0.15611462748714766, 0.11384454501443775, 0.10838827416952768, 0.4352760606141578, 0.2078752261231066, 0.07927752135993216, 0.0794872468536234, 0.1609143438768892, 0.07520606089923898, 0.08868038707152082, 0.14143445770341945, 0.1840951386782479, 0.148124017676316, 0.1519716086823879, 0.15445783709913652, 0.13994288924415266, 0.14969714796693134, 0.15308535452138583, 0.1658675393257607, 0.05000954652547718, 0.03933791670076048, 0.034414088341324534, 0.054338757541566474, 0.05875739312325623, 0.0388165651178235, 0.04713133003286407, 0.03803354422653826, 0.03206656065350966]}, "mutation_prompt": null}
{"id": "64a00ccf-0656-4944-be5c-0f1d47f2cb9c", "solution": "import numpy as np\n\nclass DifferentialEvolutionWithAdaptiveMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (10 * dim)))  # heuristic for population size\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.7\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_position = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n\n                # Perform mutation and crossover\n                mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n\n                # Evaluate the trial vector\n                trial_fitness = func(trial)\n                num_evaluations += 1\n\n                # Adapt mutation strategy based on performance\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_position = trial\n                        best_fitness = trial_fitness\n                else:\n                    self.mutation_factor = np.random.uniform(0.5, 1.0)  # adaptively modify mutation factor\n\n        return best_position, best_fitness", "name": "DifferentialEvolutionWithAdaptiveMutation", "description": "Differential Evolution with Adaptive Mutation utilizes self-adaptive mutation strategies to balance exploration and exploitation dynamically across diverse optimization landscapes.", "configspace": "", "generation": 96, "fitness": 0.1538601493040268, "feedback": "The algorithm DifferentialEvolutionWithAdaptiveMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.3207430605082934, 0.30618192538851263, 0.30140066682705624, 0.32804846837176593, 0.3111931782338818, 0.3087744255567554, 0.3248289736759663, 0.30011443037593744, 0.31340984422612383, 0.03604741493309083, 0.052779306982245866, 0.031051947823526493, 0.04299866574109601, 0.05432167347392425, 0.04957468418728039, 0.040493875930349366, 0.05550985117513041, 0.06314197569818847, 0.07595447725519422, 0.08824413825171307, 0.07831122402308988, 0.07349724263551105, 0.07451009499301886, 0.07894513721798668, 0.0809141649731071, 0.08298962006581334, 0.08478919570073229, 0.058905506219132486, 0.06835996640602571, 0.06788262959372282, 0.06545456599752086, 0.06740358301879101, 0.0844944012794493, 0.07191070734493676, 0.06465391061430525, 0.06352822688425408, 0.8681107589485839, 0.8789533463139362, 0.9346513566696045, 0.8800868388894623, 0.866005821519001, 0.9378765681349357, 0.8820965302080473, 0.8803206014684805, 0.8712355889680997, 0.10747617830260936, 0.10117011220061234, 0.12506068035838858, 0.11526405007658835, 0.11992870079282547, 0.1018950847584672, 0.10931304154506871, 0.129911702897762, 0.12813005415284184, 0.16077534484521072, 0.167355331275012, 0.16330392293006657, 0.1670384764999342, 0.16803790433769172, 0.18033134653039362, 0.16544708513947226, 0.19772132180683255, 0.18947430051111247, 0.0636874945021969, 0.05906144635736832, 0.05786825603060841, 0.08138878531751392, 0.050847524576917436, 0.07057268383531479, 0.10850179032828366, 0.05638060322404437, 0.0698491365360776, 0.043128266875749444, 0.034102737182637455, 0.04904971073478914, 0.06487571681700244, 0.07426017572358445, 0.06467294519921196, 0.0482297430073213, 0.05190936305707872, 0.04551450698856585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029342655485503633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08039500919353648, 0.06622216668850323, 0.06538570584492864, 0.04899233968360128, 0.04994875756061423, 0.08682862676773662, 0.07167621989007111, 0.051467156010442494, 0.08073248261942867, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0254260231200516, 0.030373165701608973, 0.02287685340625778, 0.03057622258454029, 0.03139967443186742, 0.0285152895678904, 0.02527617161795337, 0.04384032323487008, 0.03578054393491226, 0.26192427593918777, 0.2775512782922074, 0.2894610058797973, 0.29111527316331587, 0.2757481306011885, 0.28189247600352774, 0.27805111785045655, 0.26573037516675513, 0.2926083535267583, 0.08517572952926056, 0.09223491912260962, 0.07205975783737772, 0.06850683419478298, 0.0709149377451066, 0.06959417040612648, 0.06692703945213307, 0.06755746995930334, 0.06626091643145249, 0.16873651777838383, 0.15513468671001718, 0.15376636147794576, 0.14204938827398506, 0.15779330919932777, 0.2305267849767263, 0.12678458120665603, 0.12539181650926168, 0.1486656257746507, 0.18740690038957009, 0.19148217712972404, 0.19169649388717913, 0.18474622866183743, 0.18225104354732025, 0.19159254068807507, 0.1978919642382394, 0.20346044564293797, 0.1888197275108504, 0.12614386119666343, 0.12218579828455589, 0.12450063767527031, 0.13140010097878418, 0.138318697933432, 0.1341195468650631, 0.14232673650756456, 0.14200532549225175, 0.13358318897386035, 0.18455204631714495, 0.19105908468714883, 0.17321585172690446, 0.17442264636484162, 0.16590056926986618, 0.19296237928883953, 0.19129090706045682, 0.18380487224817932, 0.18066867521726448, 0.16842928972734805, 0.17804106948040932, 0.16224352499156336, 0.1631016219792154, 0.16974345881748465, 0.16647207739414338, 0.16166298944387236, 0.16464124567723226, 0.17399077789299355, 0.1723151351303801, 0.16692122111158036, 0.1623101928736027, 0.1962892528925535, 0.2025231615682963, 0.23757501741544185, 0.16636673347982045, 0.14583395051974346, 0.16734509867815073, 0.15623755502271908, 0.1598385892483013, 0.16307593424188582, 0.12550463412523927, 0.2278236758273775, 0.12130650758902761, 0.21852785040942535, 0.17767879002284348, 0.2080586413404335, 0.17224455512439285, 0.19905819171575667, 0.1995739530543722, 0.1892866543014632, 0.18490134053634877, 0.17266993742654047, 0.19348548096379903, 0.1843256156359534, 0.18292018693261536, 0.0659905493214723, 0.06607472014922422, 0.06468587009029048, 0.06704852953823515, 0.07738602204315559, 0.06832119089710831, 0.06213854202594449, 0.061258063307698785, 0.06201017354611216]}, "mutation_prompt": null}
{"id": "679159c2-9d51-4d08-bdd0-153cbfcb237c", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "b768f93a-6d3c-4dec-8bdb-fd8cc9031878", "solution": "import numpy as np\n\nclass SwarmBasedQuantumParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = max(5, int(budget / (10 * dim)))  # heuristic for swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        \n    def __call__(self, func):\n        # Initialize particles\n        position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        quantum_position = np.random.uniform(0, 1, (self.swarm_size, self.dim))\n        \n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.array([func(ind) for ind in position])\n        num_evaluations = self.swarm_size\n        \n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n        \n        while num_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Update velocity\n                inertia = self.inertia_weight * velocity[i]\n                cognitive = self.cognitive_constant * np.random.rand(self.dim) * (personal_best_position[i] - position[i])\n                social = self.social_constant * np.random.rand(self.dim) * (global_best_position - position[i])\n                \n                new_velocity = inertia + cognitive + social\n                new_position = position[i] + new_velocity\n                new_position = np.clip(new_position, self.lb, self.ub)\n                \n                # Quantum effect\n                quantum_effect = np.random.rand(self.dim) < quantum_position[i]\n                new_position = np.where(quantum_effect, new_position, global_best_position)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                num_evaluations += 1\n                \n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    \n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n                \n                # Update particle position and velocity\n                position[i] = new_position\n                velocity[i] = new_velocity\n                quantum_position[i] = np.random.uniform(0, 1, self.dim)  # Update quantum state\n        \n        return global_best_position, global_best_fitness", "name": "SwarmBasedQuantumParticleOptimization", "description": "A Swarm-Based Quantum Particle Optimization algorithm that integrates quantum superposition and swarm intelligence to enhance exploration and exploitation capabilities in high-dimensional search spaces.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.8062029169644178, 0.8126178469561351, 0.8195812699254545, 0.8098993040410032, 0.8233069576625055, 0.8254860546082837, 0.7931290310915562, 0.8092544156071853, 0.7904477732418405, 0.56182283065212, 0.5547229347894089, 0.5613401885342827, 0.547855605146107, 0.5933728317705402, 0.6056124889490493, 0.537780741920793, 0.5713651109337489, 0.6032476775758405, 0.5915707573226097, 0.17219838050820357, 0.502720210039878, 0.18858796214504592, 0.6069825695015041, 0.6057585944733088, 0.6340774920037822, 0.5336442320967758, 0.5963973568032825, 0.550256608238272, 0.4691596735917518, 0.5785310931834936, 0.17929525539124802, 0.13290635472823253, 0.5274834942364416, 0.5692448539283224, 0.1845909603663871, 0.5196904202512516, 0.9678971348774152, 0.972847184178984, 0.9657486143636981, 0.9686122070667589, 0.9784057759630438, 0.9682279935631288, 0.9734335130446723, 0.9644146477194424, 0.9667313850673243, 0.5049646531009709, 0.5270341729978651, 0.5263139147849725, 0.41849686206464487, 0.504621873991877, 0.45435144007054706, 0.4674425029939592, 0.5177283260401251, 0.4443871390059245, 0.22590406430561827, 0.17013648460622066, 0.21587860538416248, 0.27662619508232833, 0.3469956548585488, 0.19387307361138972, 0.1466698093894211, 0.2457074408995189, 0.2057605905908212, 0.3841217905276204, 0.18835485566690346, 0.282661689014423, 0.19050805051767694, 0.09817689984280309, 0.33423090494224994, 0.18298460572671116, 0.22850168022930561, 0.2926670200863323, 0.1285086688535927, 0.1050741459521145, 0.19180492604601762, 0.19875470220538294, 0.17594094205281907, 0.2080693093400403, 0.12922725114969813, 0.22979238660612955, 0.17083705420830542, 0.04735728440771558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008527106132284468, 0.05637727344107335, 0.01689826323207233, 9.999999999998899e-05, 0.08489664430340749, 0.02394282850715812, 0.05823720008848543, 0.05584105651194804, 0.052659063370673165, 0.06374970774091959, 0.029841690854815917, 0.055943189168933705, 0.07176145873911033, 0.06733343399069158, 0.053332040940526015, 0.13892269811388103, 0.12862218199920028, 0.11001302435854032, 0.24153915182097874, 0.12975772380445383, 0.13896175766520502, 0.17842173297068353, 0.08032611269705936, 0.1331857457958997, 0.042785109222155504, 0.04570589845560047, 0.04778925825786007, 0.23185114454254796, 0.08995585079312063, 0.2675487596586338, 0.13972509068939853, 0.2692022563325529, 0.46584678628027887, 0.47459212634240644, 0.500521150859274, 0.5538805398173352, 0.5576434213434354, 0.4797310602515533, 0.48141143303107237, 0.5209399220085228, 0.5083930775299471, 0.14078425192422583, 0.08442704614636454, 0.07409355887570424, 0.12349624125690406, 0.07948124498884646, 0.15841149155162093, 0.12176623007059495, 0.08699529337827294, 0.06867815044620351, 0.26506138061293083, 0.2820398940920885, 0.17326067552119762, 0.25529369216607145, 0.3011896771594358, 0.3467618554733669, 0.18088887515780938, 0.16066798403243387, 0.170311426515536, 0.24823434651606469, 0.22260364092950535, 0.24106414890932815, 0.25317308079696865, 0.30647134093674244, 0.3103025595261294, 0.3539577937057107, 0.303761230506311, 0.3262020473508097, 0.26244338603291895, 0.08520916208797913, 0.20508765474218082, 0.14653997387582185, 0.22945455521184732, 0.21976433719549227, 0.22047006033916483, 0.19961741281736045, 0.16017237428048725, 0.2138212797682827, 0.17484136370310266, 0.17665100907321152, 0.24225556981091545, 0.20500198760134214, 0.21554917980145782, 0.2666166172242197, 0.1913200029912152, 0.22602150796417864, 0.219907777462645, 0.24801518510866283, 0.2545768232318867, 0.6885138990295441, 0.22978792670052905, 0.19286716896258926, 0.6863555040112819, 0.22870452327525026, 0.2531479513824868, 0.13135171163488957, 0.2002709909477367, 0.8512905208634487, 0.1333781530920909, 0.20085042737773695, 0.16750199149696, 0.14235487157253324, 0.8802161559828476, 0.16700659014968222, 0.6362302220251737, 0.16933680185054467, 0.7025960457486218, 0.8375535282735835, 0.20856160848817085, 0.55175674794635, 0.16892329338527956, 0.15537006341302007, 0.6943814090239118, 0.19503961282427873, 0.1942285574466136, 0.18562589642485094, 0.17569690815439332, 0.23094779761549866, 0.20509517115809872, 0.2289410058773551, 0.22507895460759264, 0.20221816384214464, 0.09218859836156357, 0.06847569821978561, 0.0960260551369464, 0.07623209200304559, 0.10155267719147909, 0.09372446920779753, 0.0795532303537344, 0.08181831281007568, 0.09069865758338913]}, "mutation_prompt": null}
{"id": "e92e68af-21c0-4bd4-9bbf-fa67b85c157a", "solution": "import numpy as np\n\nclass HybridDifferentialEvolutionSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = max(5, int(budget / (5 * dim)))\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.initial_temperature = 100\n        self.cooling_rate = 0.99\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_position = np.copy(population[best_idx])\n        best_fitness = fitness[best_idx]\n        \n        temperature = self.initial_temperature\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[indices]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.crossover_probability\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Simulated Annealing Acceptance\n                trial_fitness = func(trial)\n                num_evaluations += 1\n                \n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    \n                    if trial_fitness < best_fitness:\n                        best_position = np.copy(trial)\n                        best_fitness = trial_fitness\n            \n            # Update temperature with cooling\n            temperature *= self.cooling_rate\n        \n        return best_position, best_fitness", "name": "HybridDifferentialEvolutionSimulatedAnnealing", "description": "A Hybrid Differential Evolution and Simulated Annealing algorithm that balances exploration and exploitation by dynamically adjusting mutation and crossover probabilities based on fitness landscape feedback.", "configspace": "", "generation": 99, "fitness": 0.12253433640784461, "feedback": "The algorithm HybridDifferentialEvolutionSimulatedAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.16.", "error": "", "parent_id": "6d4b9c99-af2b-4823-afdd-f6ff97737f00", "metadata": {"aucs": [0.17799755828080688, 0.18297054522994072, 0.1427018301184596, 0.17531641161634104, 0.1537667801300071, 0.1670615975599229, 0.15896851985513472, 0.1776055494145823, 0.17075278795392768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011832726866350063, 9.999999999998899e-05, 0.0006672449949168824, 0.0009548272559213311, 9.999999999998899e-05, 0.045566298637472746, 0.03980516957355995, 0.045796643943517124, 0.04860002901135341, 0.046212475527172336, 0.04807610333861867, 0.05395381612936767, 0.05207743869682968, 0.05364629055561876, 0.048889053678061956, 0.039273604784344385, 0.030024964725883674, 0.03972986756495811, 0.0366084271285968, 0.031040529989319166, 0.0429317758107054, 0.03382689655148574, 0.02884769481455407, 0.8693122981986436, 0.7814169726898292, 0.7538217401948171, 0.8689462413662223, 0.8248938263915536, 0.8546412538117597, 0.8298764310896324, 0.8671866578843399, 0.8537972835983128, 0.08628912348290652, 0.07703272334922362, 0.10171882691615464, 0.06524844825558229, 0.0644861774458374, 0.07474264667547736, 0.09396616734201813, 0.09003689030809492, 0.0975659719212576, 0.1168898143426026, 0.19308637766117165, 0.14567452967460326, 0.12765135111263737, 0.13367455682675922, 0.1438166324002912, 0.12119081444753443, 0.14696428515024595, 0.12097383267225081, 0.03865189181588191, 0.013028651380494916, 0.006173505959369163, 0.017825690715155718, 0.0436509650587279, 0.02616505676819103, 0.0233097723167055, 0.024722510468667913, 0.026031737672296718, 0.030095992697782403, 0.04238335801827775, 0.04083954306202353, 0.06081726942146837, 0.08725923479727704, 0.01293008021983788, 0.02018696577962542, 0.013348752886062853, 0.01327860082878396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07547043060880676, 0.07997994233689043, 0.07005129356219963, 0.0908207839358236, 0.06672874398838902, 0.05266885561420531, 0.05721852213331313, 0.06286452886282368, 0.04244936345548811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007818095511504586, 0.008528236889346785, 0.003911594753730263, 0.011209456994461298, 0.007366761954830547, 0.015455248617020856, 0.008813163596498863, 0.024271733408107843, 0.007881495523087145, 0.18458336943354592, 0.19606484579450456, 0.1838796037537751, 0.20682043216036805, 0.18639688422894163, 0.19226744717352073, 0.20322326946296154, 0.20209764102645122, 0.1695012721997433, 0.07184889294615826, 0.051840204226080266, 0.04592181490359104, 0.04370655195842699, 0.04598992579972416, 0.04691503426678478, 0.04684251025290287, 0.043878809705254374, 0.056751098282067924, 0.13709410100555053, 0.1402359508082247, 0.14839034276153362, 0.14907781622721272, 0.14053952306225015, 0.17831305333550085, 0.15104439401094916, 0.13661357456495338, 0.15047599690810298, 0.16371505127174257, 0.15117396021773033, 0.1613932299901244, 0.1539270570411303, 0.13782518277387013, 0.161856142914947, 0.14024205506871745, 0.17377774300845283, 0.15241817910686728, 0.09554329060588429, 0.10577254738942543, 0.08867187221452955, 0.09911656921994394, 0.09574600069712036, 0.11218742848475927, 0.09230071452811628, 0.1237427242099084, 0.10796328629905805, 0.14239454591233514, 0.18990703586186508, 0.17535595965216977, 0.1418542289559096, 0.1344205751968517, 0.15194636421800256, 0.1349818310190407, 0.17069338071668005, 0.1503075653417596, 0.14757853616748418, 0.1521682388436777, 0.16567039233839986, 0.1496242141309615, 0.15592545390896684, 0.15369942823677152, 0.14666322477769622, 0.15213519078777116, 0.16717480840144494, 0.16444981536176895, 0.13314227220573793, 0.16628284474711763, 0.1552864674002742, 0.13628109504975872, 0.15839821030598067, 0.14010420958545855, 0.1373453710592517, 0.15692009224327252, 0.16983590352078515, 0.1612093715957823, 0.15756945637132325, 0.12112704579963596, 0.13465261599857548, 0.11806430503579557, 0.1624964767996515, 0.1445647007844898, 0.2141516662649956, 0.1784151826860918, 0.20586034487388227, 0.1805819557478071, 0.1771527471798885, 0.18239434928586773, 0.18377164794139567, 0.18835063998059165, 0.19513201309803108, 0.18802634911881577, 0.04374291072000103, 0.048178914047809496, 0.03672282933568172, 0.0496458412526628, 0.058815507864153016, 0.045711654020326065, 0.04721411889758653, 0.04747265889138019, 0.04114354269296694]}, "mutation_prompt": null}
